[
    {
        "id": 934739086,
        "name": "network_manager_ui",
        "description": null,
        "url": "https://github.com/Blazzzeee/network_manager_ui",
        "language": "Python",
        "stars": 77,
        "forks": 1,
        "created_at": "2025-02-18T10:25:43Z",
        "updated_at": "2025-02-25T00:04:29Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T04:20:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/65259303529b487db8d3b2fc2c07aefb9d787900b800c50b30b8607ad723f8b0/Blazzzeee/network_manager_ui"
        ],
        "homepage": null,
        "readme_summary": "This project offers a network manager with a rofi-based UI, supporting multiple themes and various Linux distributions.  It avoids system tray implementations and provides a search function for efficient network management.  The Python backend interacts with NetworkManager to handle network connections.",
        "key_features": [
            "Uses rofi for UI",
            "Python backend for network management",
            "Multiple themes (Catppuccin Mocha, Nord, Rospine, Monochrome)",
            "Supports various Linux distributions (Arch, Ubuntu/Debian, Fedora)",
            "No system tray required",
            "Search functionality"
        ],
        "primary_use_case": "Provides a simple and user-friendly way to manage Wi-Fi and Ethernet connections on Linux systems, especially for users new to Linux distributions.",
        "open_issues": 0
    },
    {
        "id": 931884122,
        "name": "Youtube-playlist-to-formatted-text",
        "description": "A desktop application that extracts YouTube playlist transcripts and enhances them using Google's Gemini AI models., the output is a book in any language you want.",
        "url": "https://github.com/Ebrizzzz/Youtube-playlist-to-formatted-text",
        "language": "Python",
        "stars": 259,
        "forks": 16,
        "created_at": "2025-02-13T02:28:13Z",
        "updated_at": "2025-02-24T23:17:20Z",
        "topics": [
            "datahoarder",
            "deep-learning",
            "gemini",
            "gemini-api",
            "gemini-flash",
            "llm",
            "productivity",
            "pyqt5",
            "python",
            "useful-scripts",
            "useful-utilities",
            "youtube"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-02-19T22:20:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cbc014b988e82dfc62b4da1166c6a2e4531015f94c5be278ba461cf5b035b4f6/Ebrizzzz/Youtube-playlist-to-formatted-text"
        ],
        "homepage": "",
        "readme_summary": "This Python application extracts transcripts from YouTube playlists or single videos.  It then uses the Google Gemini API to refine these transcripts into various formats (e.g., summaries, educational texts, narratives) based on user-selected styles and a configurable chunk size. The refined transcript is saved as a text file.",
        "key_features": [
            "YouTube playlist transcript extraction",
            "Gemini API integration for transcript refinement",
            "Multiple refinement styles (Balanced and Detailed, Summary, Educational, Narrative Rewriting, Q&A Generation)",
            "Language support for output",
            "Single video URL support",
            "Configurable chunk size for API calls"
        ],
        "primary_use_case": "Generating a formatted text file from YouTube playlist transcripts using the Google Gemini API for enhanced readability.",
        "open_issues": 1
    },
    {
        "id": 193305104,
        "name": "QtScrcpy",
        "description": "Android real-time display control software",
        "url": "https://github.com/barry-ran/QtScrcpy",
        "language": "C++",
        "stars": 22748,
        "forks": 2894,
        "created_at": "2019-06-23T04:12:17Z",
        "updated_at": "2025-02-25T00:31:09Z",
        "topics": [
            "android",
            "qt"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-21T14:25:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e3df72af3bde22c8039dd1c984baf39ff735b2cc6bbe010cde46d2b2bbd38ea6/barry-ran/QtScrcpy"
        ],
        "homepage": "https://blog.csdn.net/rankun1/article/details/87970523",
        "readme_summary": "QtScrcpy allows users to mirror and control their Android devices on a computer without needing root access.  It supports multiple platforms and offers features like custom key mappings and group control for enhanced usability.  The software prioritizes speed, performance, and image quality.",
        "key_features": [
            "Display and control Android devices via USB or network",
            "Supports GNU/Linux, Windows, and macOS",
            "Lightweight, high-performance (30-60fps), high-quality (1920x1080 or above), low-latency (35-70ms), and fast startup (around 1 second)",
            "No root privileges required",
            "Customizable keyboard and mouse mappings for touch and click actions",
            "Group control for managing multiple devices simultaneously"
        ],
        "primary_use_case": "Screen mirroring and control of Android devices from a computer",
        "open_issues": 541
    },
    {
        "id": 924592126,
        "name": "ai-file-sorter",
        "description": "Powerful cross-platform desktop application that automates file organization with AI",
        "url": "https://github.com/hyperfield/ai-file-sorter",
        "language": "C",
        "stars": 39,
        "forks": 4,
        "created_at": "2025-01-30T09:52:51Z",
        "updated_at": "2025-02-24T22:05:38Z",
        "topics": [
            "ai",
            "file-management",
            "file-manager",
            "llm",
            "organizer"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-02-06T21:21:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ad57b11771519ce3ef01e6c724a004e0e51cd5e6a40493602e3b347d9701c44e/hyperfield/ai-file-sorter"
        ],
        "homepage": "https://filesorter.app",
        "readme_summary": "This repository contains a cross-platform desktop application that uses AI to intelligently categorize and sort files.  It features a user-friendly interface, customizable sorting rules, and secure API key encryption. The application supports Windows, macOS, and Linux.",
        "key_features": [
            "AI-Powered Categorization",
            "Customizable Sorting Rules",
            "Intuitive Interface",
            "Cross-Platform Compatibility",
            "Local Database Caching",
            "Sorting Preview",
            "Secure API Key Encryption",
            "Update Notifications"
        ],
        "primary_use_case": "Automates file organization by categorizing and sorting files and folders based on their names and extensions using AI.",
        "open_issues": 2
    },
    {
        "id": 521655652,
        "name": "infisical",
        "description": "â™¾ Infisical is the open-source secret management platform: Sync secrets across your team/infrastructure, prevent secret leaks, and manage internal PKI",
        "url": "https://github.com/Infisical/infisical",
        "language": "TypeScript",
        "stars": 16884,
        "forks": 1110,
        "created_at": "2022-08-05T13:50:00Z",
        "updated_at": "2025-02-25T00:16:36Z",
        "topics": [
            "certificate-management",
            "cli",
            "end-to-end-encryption",
            "environment-variables",
            "go",
            "golang",
            "nextjs",
            "nodejs",
            "open-source",
            "pki",
            "postgres",
            "private-ca",
            "react",
            "secret-management",
            "secret-manager",
            "secret-scanning",
            "secrets",
            "security",
            "security-tools",
            "typescript"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T06:14:36Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/521655652/7d1fa6af-1799-411b-a127-ae342e934685"
        ],
        "homepage": "https://infisical.com",
        "readme_summary": "Infisical is an open-source secret management platform that helps teams centralize and manage application secrets and configurations.  It offers features like secret versioning, rotation, and dynamic secret generation, along with integrations with various platforms and tools.  This allows for secure and efficient management of sensitive information across different environments.",
        "key_features": [
            "Secrets Management",
            "Dashboard for managing secrets across projects and environments",
            "Native Integrations with GitHub, Vercel, AWS, Terraform, and Ansible",
            "Secret versioning and Point-in-Time Recovery",
            "Secret Rotation for services like PostgreSQL, MySQL, and AWS IAM",
            "Dynamic Secrets generation for services like PostgreSQL and MySQL"
        ],
        "primary_use_case": "Centralized management of application configuration and secrets, preventing secret leaks",
        "open_issues": 271
    },
    {
        "id": 222316111,
        "name": "rusty-hog",
        "description": "A suite of secret scanners built in Rust for performance. Based on TruffleHog (https://github.com/dxa4481/truffleHog) which is written in Python.",
        "url": "https://github.com/newrelic/rusty-hog",
        "language": "Rust",
        "stars": 493,
        "forks": 64,
        "created_at": "2019-11-17T21:42:48Z",
        "updated_at": "2025-02-24T22:36:18Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-01-08T15:20:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4dce83eb1cb246e18beb720f3a394b700c5e5b958b1d4d973cdef67d3a0d744f/newrelic/rusty-hog"
        ],
        "homepage": "",
        "readme_summary": "Rusty Hog is a secret scanner built in Rust.  It offers multiple binaries to scan various locations (e.g., Google Docs, S3, Git) for secrets using regular expressions, including custom ones.  It supports building from source and provides pre-built binaries and Docker images for ease of use.",
        "key_features": [
            "Scans for secrets in various locations (Google Docs, S3 buckets, Git repositories, files, directories, archives, Confluence wikis, Jira issues, Slack channels)",
            "Uses regular expressions to detect sensitive information (API keys, passwords, personal information)",
            "Provides custom regular expression support via JSON object",
            "Offers binaries for different operating systems and Docker images",
            "Supports building from source using Rust and Cargo",
            "Includes cross-compilation for AWS Lambda"
        ],
        "primary_use_case": "Detecting secrets and sensitive information in various systems and data sources",
        "open_issues": 13
    },
    {
        "id": 825470378,
        "name": "beszel",
        "description": "Lightweight server monitoring hub with historical data, docker stats, and alerts.",
        "url": "https://github.com/henrygd/beszel",
        "language": "Go",
        "stars": 9306,
        "forks": 267,
        "created_at": "2024-07-07T21:36:28Z",
        "updated_at": "2025-02-25T01:01:12Z",
        "topics": [
            "homelab",
            "monitoring",
            "self-hosted"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-24T02:07:25Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/825470378/2710c6db-f934-4a8b-a2c4-7a0abbcd2ad6"
        ],
        "homepage": "https://beszel.dev",
        "readme_summary": "Beszel is a lightweight server monitoring platform providing a web interface to track Docker container and host system metrics, including historical data and configurable alerts.  It supports multi-user management, OAuth authentication, and automated backups, with a REST API for integration with other systems.",
        "key_features": [
            "Lightweight server monitoring platform",
            "Docker statistics tracking (CPU, memory, network)",
            "Historical data",
            "Alert functions (CPU, memory, disk, bandwidth, temperature, status)",
            "Multi-user support with admin controls",
            "OAuth/OIDC authentication",
            "Automatic backups (disk or S3-compatible storage)",
            "REST API access"
        ],
        "primary_use_case": "Server monitoring and system resource management",
        "open_issues": 142
    },
    {
        "id": 928529246,
        "name": "ScrumAgent",
        "description": "The Discord Scrum Master is an open-source AI-powered supervisor agent designed to facilitate agile project management within Discord communities. Acting as a virtual Scrum Master, this agent integrates multiple tools to streamline sprint planning, issue tracking, research, and collaboration.",
        "url": "https://github.com/Shikenso-Analytics/ScrumAgent",
        "language": "Python",
        "stars": 25,
        "forks": 8,
        "created_at": "2025-02-06T19:24:27Z",
        "updated_at": "2025-02-24T22:02:41Z",
        "topics": [],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-02-20T15:35:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ea26ca76ac1b15bd5d39c4b05c13aa8f4c5eb9b7a40f8df265a5d26fc086147b/Shikenso-Analytics/ScrumAgent"
        ],
        "homepage": null,
        "readme_summary": "Scrum Agent is an open-source tool that integrates Discord and Taiga to streamline agile workflows.  It automates task tracking, facilitates efficient communication, and provides tools for managing user stories and issues.  The bot aims to improve project oversight and team collaboration for small to large development teams.",
        "key_features": [
            "Discord Integration",
            "Taiga Integration",
            "Automated Task Tracking",
            "Efficient Search & Retrieval",
            "Issue Management",
            "User Story Management",
            "Web Search (DuckDuckGo), ArXiv access"
        ],
        "primary_use_case": "AI-powered agile project management within Discord communities, acting as a virtual Scrum Master",
        "open_issues": 0
    },
    {
        "id": 273906263,
        "name": "httpdbg",
        "description": "A tool for Python developers to easily debug the HTTP(S) client requests in a Python program.",
        "url": "https://github.com/cle-b/httpdbg",
        "language": "Python",
        "stars": 782,
        "forks": 18,
        "created_at": "2020-06-21T13:08:02Z",
        "updated_at": "2025-02-25T00:45:06Z",
        "topics": [
            "aiohttp",
            "debug",
            "http",
            "httpdbg",
            "httpx",
            "pyhttpdbg",
            "pytest",
            "python",
            "python-requests",
            "requests",
            "rest",
            "rest-api",
            "tools",
            "unittest",
            "urllib3"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-02-11T18:43:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f8d8301dbd78766aae1ddb4da92b1a1ca7b7d2534031f306fe8f55fc8dbfefd6/cle-b/httpdbg"
        ],
        "homepage": "https://httpdbg.readthedocs.io/",
        "readme_summary": "httpdbg is a Python tool that simplifies debugging HTTP(S) client requests.  It provides an interactive console and a web interface to visualize requests, supports various libraries and testing frameworks, and allows customization for specific use cases.  This enables developers to easily monitor and analyze network traffic within their Python applications.",
        "key_features": [
            "Debugging HTTP(S) client requests in Python programs",
            "Interactive console for real-time request inspection",
            "Command-line interface for tracing requests in scripts and modules",
            "Support for popular Python HTTP libraries (requests, urllib3, httpx, aiohttp)",
            "Integration with test frameworks (pytest, unittest)",
            "Customizable initiators for identifying request origins",
            "Web interface for visualizing HTTP requests"
        ],
        "primary_use_case": "Debugging and inspecting HTTP(S) requests made by Python applications",
        "open_issues": 1
    }
]