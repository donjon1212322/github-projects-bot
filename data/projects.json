[
    {
        "id": 193215554,
        "name": "n8n",
        "description": "Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.",
        "url": "https://github.com/n8n-io/n8n",
        "language": "TypeScript",
        "stars": 62943,
        "forks": 14329,
        "created_at": "2019-06-22T09:24:21Z",
        "updated_at": "2025-02-26T01:00:15Z",
        "topics": [
            "ai",
            "apis",
            "automated",
            "automation",
            "cli",
            "data-flow",
            "development",
            "docker",
            "integration-framework",
            "integrations",
            "ipaas",
            "low-code",
            "low-code-platform",
            "n8n",
            "no-code",
            "node",
            "self-hosted",
            "typescript",
            "workflow",
            "workflow-automation"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T20:29:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/193215554/df34b36d-279c-496c-91c2-959dd9c9f13d"
        ],
        "homepage": "https://n8n.io",
        "readme_summary": "n8n is a workflow automation platform offering a combination of visual no-code and custom code capabilities (JavaScript/Python).  It features 400+ integrations, AI capabilities via LangChain, and options for self-hosting or using a cloud offering.  The platform is designed for enterprise use with advanced security and deployment options.",
        "key_features": [
            "Workflow automation",
            "400+ integrations",
            "AI-native platform using LangChain",
            "JavaScript/Python scripting support",
            "Self-hosting with fair-code license",
            "Enterprise-ready features (SSO, advanced permissions, air-gapped deployments)",
            "Node.js and Docker deployment options",
            "400+ integrations and 900+ ready-to-use templates"
        ],
        "primary_use_case": "Workflow automation for technical teams",
        "open_issues": 430
    },
    {
        "id": 937556844,
        "name": "gibberlink",
        "description": "Two conversational AI agents switching from English to sound-level protocol after confirming they are both AI agents",
        "url": "https://github.com/PennyroyalTea/gibberlink",
        "language": "TypeScript",
        "stars": 1819,
        "forks": 131,
        "created_at": "2025-02-23T11:03:29Z",
        "updated_at": "2025-02-26T01:00:45Z",
        "topics": [],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T21:57:57Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/937556844/7ead418e-8ff1-4183-a440-6ca226061df8"
        ],
        "homepage": "",
        "readme_summary": "This project showcases a system where two AI agents, initially communicating through natural language, transition to a covert audio-based communication protocol (ggwave) when they identify each other.  It leverages ElevenLabs for conversational AI and ggwave for data transmission over sound, offering a unique demonstration of AI-to-AI communication switching mechanisms.",
        "key_features": [
            "Two independent ElevenLabs Conversational AI agents initiate a conversation in human language.",
            "Agents utilize an LLM tool-calling function to detect AI interaction and switch to GibberLink mode.",
            "Upon detection, the conversation transitions to ggwave's 'data over sound' protocol, continuing the LLM thread through audio.",
            "The project uses the ggwave library for data transmission over sound and ElevenLabs for conversational AI agents"
        ],
        "primary_use_case": "Demonstrates two conversational AI agents switching communication from English speech to a sound-level protocol (ggwave) upon recognizing each other as AI agents.",
        "open_issues": 5
    },
    {
        "id": 42008209,
        "name": "Sn1per",
        "description": "Attack Surface Management Platform",
        "url": "https://github.com/1N3/Sn1per",
        "language": "Shell",
        "stars": 8461,
        "forks": 1887,
        "created_at": "2015-09-06T15:47:38Z",
        "updated_at": "2025-02-25T22:23:16Z",
        "topics": [
            "attack-surface",
            "attack-surface-management",
            "attacksurface",
            "bugbounty-platform",
            "cybersecurity",
            "hacking",
            "hacking-tools",
            "osint-framework",
            "osint-tool",
            "penetration-testing",
            "pentest-scripts",
            "pentest-tool",
            "pentest-tools",
            "pentesting",
            "pentesting-tools",
            "security",
            "security-tools",
            "sn1per",
            "sn1per-professional"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-01T21:50:27Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/42008209/5b970e00-32f3-11eb-8b89-58d512afda44"
        ],
        "homepage": "https://sn1persecurity.com",
        "readme_summary": "Sn1per is a platform designed for automated penetration testing and attack surface management.  It integrates with various security tools to discover vulnerabilities and hidden assets, providing continuous security assessments.  Key features include vulnerability scanning, automated tool execution, and risk prioritization.",
        "key_features": [
            "Integrates with leading commercial and open source vulnerability scanners",
            "Automates execution of open source and commercial security tools",
            "Discovers hidden assets and vulnerabilities",
            "Provides automated, deep, and continuous security",
            "Scans for latest CVEs and vulnerabilities"
        ],
        "primary_use_case": "Automated Pentest Recon Scanner and Attack Surface Management",
        "open_issues": 2
    },
    {
        "id": 40684033,
        "name": "sops",
        "description": "Simple and flexible tool for managing secrets",
        "url": "https://github.com/getsops/sops",
        "language": "Go",
        "stars": 17838,
        "forks": 905,
        "created_at": "2015-08-13T22:11:00Z",
        "updated_at": "2025-02-25T22:58:42Z",
        "topics": [
            "aws",
            "azure",
            "devops",
            "gcp",
            "pgp",
            "secret-distribution",
            "secret-management",
            "security",
            "sops"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T05:49:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/852d59cb31f6acfba817c5e447fdf3399771a0620116b8d741c08b050d70aff5/getsops/sops"
        ],
        "homepage": "https://getsops.io/",
        "readme_summary": "SOPS is a command-line tool that encrypts and decrypts files in various formats (YAML, JSON, ENV, INI, BINARY) using different encryption methods (AWS KMS, GCP KMS, Azure Key Vault, age, PGP).  It seamlessly integrates with common editors and supports simultaneous use of multiple encryption methods for enhanced security.  The tool is designed for managing sensitive data securely.",
        "key_features": [
            "Supports YAML, JSON, ENV, INI and BINARY formats",
            "Encrypts with AWS KMS, GCP KMS, Azure Key Vault, age, and PGP",
            "Command-line tool for encrypting and decrypting files",
            "Uses AWS-SDK-GO-V2 for AWS KMS interaction",
            "Can use both PGP and KMS simultaneously",
            "Handles encryption/decryption transparently",
            "Integration with various editors"
        ],
        "primary_use_case": "Encrypting and decrypting files with support for multiple encryption methods and file formats",
        "open_issues": 358
    },
    {
        "id": 278933035,
        "name": "RustScan",
        "description": "🤖 The Modern Port Scanner 🤖",
        "url": "https://github.com/RustScan/RustScan",
        "language": "Rust",
        "stars": 15712,
        "forks": 1070,
        "created_at": "2020-07-11T20:00:41Z",
        "updated_at": "2025-02-26T00:20:01Z",
        "topics": [
            "docker",
            "hacking",
            "hacktoberfest",
            "networking",
            "nmap",
            "pentesting",
            "port",
            "rust",
            "scanning",
            "security",
            "security-tools"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T09:57:21Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/278933035/8389af00-ebe8-11ea-8c69-439b2883097a"
        ],
        "homepage": "",
        "readme_summary": "RustScan is a fast and efficient port scanner that supports various features such as scripting engine, adaptive learning, and compatibility with IPv6 and CIDR. It can automatically pipe results into Nmap for further analysis and allows users to write custom scripts for extended functionality.",
        "key_features": [
            "Scans all 65k ports in 3 seconds",
            "Full scripting engine support (Python, Lua, Shell)",
            "Adaptive learning to improve scan efficiency",
            "IPv6, CIDR, file input support",
            "Automatic piping of ports into Nmap"
        ],
        "primary_use_case": "Network port scanning",
        "open_issues": 22
    },
    {
        "id": 130688011,
        "name": "meilisearch",
        "description": "A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.",
        "url": "https://github.com/meilisearch/meilisearch",
        "language": "Rust",
        "stars": 49435,
        "forks": 1937,
        "created_at": "2018-04-23T11:45:28Z",
        "updated_at": "2025-02-26T00:57:45Z",
        "topics": [
            "ai",
            "api",
            "app-search",
            "database",
            "enterprise-search",
            "faceting",
            "full-text-search",
            "fuzzy-search",
            "geosearch",
            "hybrid-search",
            "instantsearch",
            "search",
            "search-as-you-type",
            "search-engine",
            "semantic-search",
            "site-search",
            "typo-tolerance",
            "vector-database",
            "vector-search",
            "vectors"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T09:34:13Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/130688011/36b3a621-649e-4761-847d-00f717fed0ee"
        ],
        "homepage": "https://www.meilisearch.com",
        "readme_summary": "Meilisearch is a fast search engine for integrating search functionality into applications.  It supports various features like hybrid search, faceted search, and filtering, and can be used in diverse applications such as movies, e-commerce, and SaaS platforms.",
        "key_features": [
            "lightning-fast search engine",
            "hybrid search",
            "faceted search",
            "range and rating filtering",
            "pagination",
            "multi-tenant"
        ],
        "primary_use_case": "building delightful search experiences in apps, websites, and workflows",
        "open_issues": 182
    },
    {
        "id": 906665483,
        "name": "Nping",
        "description": "🏎  Nping mean NB Ping, A Ping Tool in Rust with Real-Time Data and Visualizations",
        "url": "https://github.com/hanshuaikang/Nping",
        "language": "Rust",
        "stars": 1054,
        "forks": 33,
        "created_at": "2024-12-21T14:51:14Z",
        "updated_at": "2025-02-25T23:29:34Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T15:14:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6d5bf0bfd17a9ab333f63bedd9b20915455f4717c0651e5bbf6bec37862d9d1e/hanshuaikang/Nping"
        ],
        "homepage": "",
        "readme_summary": "Nping is a Rust-based ping tool offering concurrent pinging for multiple addresses.  It visualizes latency data in real-time, showing minimum, average, maximum latency, and packet loss. Users can select between graph and table view modes for data presentation.",
        "key_features": [
            "Concurrent Ping for multiple addresses",
            "Visual latency display",
            "Real-time display of latency metrics (min, avg, max, packet loss)",
            "IPv4 and IPv6 support",
            "Concurrent pinging of multiple IPs under one address",
            "Selectable view modes (graph or table)"
        ],
        "primary_use_case": "Network latency testing and monitoring",
        "open_issues": 7
    },
    {
        "id": 805155266,
        "name": "cherry-studio",
        "description": "🍒 Cherry Studio is a desktop client that supports for multiple LLM providers. Support deepseek-r1",
        "url": "https://github.com/CherryHQ/cherry-studio",
        "language": "TypeScript",
        "stars": 16138,
        "forks": 1251,
        "created_at": "2024-05-24T01:56:26Z",
        "updated_at": "2025-02-26T01:01:55Z",
        "topics": [
            "agent",
            "anthropic",
            "assistant",
            "chatbot",
            "chatbotai",
            "electron",
            "llm",
            "openai"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T16:21:49Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/805155266/692d7ac1-0787-4b91-99b3-a9231ed6151d"
        ],
        "homepage": "https://cherry-ai.com",
        "readme_summary": "Cherry Studio is a cross-platform desktop application that supports various LLMs, including cloud services and local models.  It offers features for managing AI assistants, processing documents, and integrating practical tools, all while providing a user-friendly experience.  The application is designed for users who need to interact with multiple LLMs and manage their AI workflows efficiently.",
        "key_features": [
            "Diverse LLM Provider Support: OpenAI, Gemini, Anthropic, Claude, Peplexity, Poe, Ollama, LM Studio",
            "AI Assistants & Conversations: 300+ pre-configured AI assistants, custom assistant creation, multi-model simultaneous conversations",
            "Document & Data Processing: Text, Images, Office, PDF, WebDAV file management, Mermaid chart visualization, code syntax highlighting",
            "Practical Tools Integration: Global search, topic management, AI-powered translation, drag-and-drop sorting, mini program support",
            "Enhanced User Experience: Cross-platform support (Windows, Mac, Linux), no environment setup required, light/dark themes, transparent window, complete markdown rendering, easy content sharing"
        ],
        "primary_use_case": "Desktop client for interacting with multiple large language models (LLMs)",
        "open_issues": 385
    },
    {
        "id": 902818578,
        "name": "vps-audit",
        "description": "lightweight, dependency-free bash script for security, performance auditing and infrastructure monitoring of Linux servers.",
        "url": "https://github.com/vernu/vps-audit",
        "language": "Shell",
        "stars": 1165,
        "forks": 91,
        "created_at": "2024-12-13T10:30:53Z",
        "updated_at": "2025-02-25T23:35:35Z",
        "topics": [
            "auditi",
            "bash",
            "ci-cd",
            "debian",
            "devops",
            "ec2",
            "infrastructure",
            "linux",
            "monitoring",
            "opensource",
            "performance-monitoring",
            "security",
            "security-audit",
            "security-tools",
            "server",
            "shell",
            "system-administration",
            "ubuntu",
            "vps"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T22:02:19Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/902818578/efa33dfe-1433-4125-83d5-71e47fce099f"
        ],
        "homepage": "https://vpsaudit.vernu.dev?ref=github",
        "readme_summary": "This repository provides a Bash script for auditing the security and performance of a VPS.  It checks various security aspects, monitors system resource usage, and generates a detailed report with recommendations. The script is designed for Debian/Ubuntu systems and requires root or sudo privileges.",
        "key_features": [
            "SSH Configuration audit (root login, password authentication, port usage)",
            "Firewall (UFW) status check",
            "Fail2ban configuration analysis",
            "Failed login attempt detection",
            "System update status check",
            "Running services analysis",
            "Open ports detection",
            "Sudo logging configuration check",
            "Password policy enforcement check",
            "SUID files detection",
            "Disk space usage monitoring",
            "Memory usage monitoring",
            "CPU usage monitoring",
            "Active internet connection monitoring"
        ],
        "primary_use_case": "Security and performance auditing of a VPS (Virtual Private Server)",
        "open_issues": 3
    }
]