[
    {
        "id": 679066208,
        "name": "systemctl-tui",
        "description": "A fast, simple TUI for interacting with systemd services and their logs",
        "url": "https://github.com/rgwood/systemctl-tui",
        "language": "Rust",
        "stars": 1234,
        "forks": 30,
        "created_at": "2023-08-16T03:02:09Z",
        "updated_at": "2025-10-10T09:45:38Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-05T16:31:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6b52d41429b59c22f9035044921168d7872809fb2208e18efe92c7542746facf/rgwood/systemctl-tui"
        ],
        "homepage": "",
        "readme_summary": "systemctl-tui is a terminal user interface (TUI) tool written in Rust for interacting with systemd services and their logs on Linux systems. It provides a fast and simple way to browse service status and logs, start/stop/restart/reload services, and view/edit unit files.",
        "key_features": [
            "Browse service status and logs",
            "Start, stop, restart, and reload services",
            "View and edit unit files",
            "Installation via binary release, Rust (cargo), and distro packages (Arch Linux, Nix)"
        ],
        "primary_use_case": "Managing and monitoring systemd services in a Linux environment through a terminal user interface.",
        "open_issues": 19,
        "cover_image_prompt": "Imagine a control panel inside a futuristic spaceship, where each button controls a different city on Earth. A technician is monitoring the panel, quickly starting and stopping cities with a few taps. The panel displays the status of each city with clear icons and logs. Small screens show snippets of code and systemd unit files. The spaceship is bathed in cool blue light, with glowing digital particles flowing around the control panel. The repository name, 'systemctl-tui,' is subtly displayed on the panel. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 828545665,
        "name": "ai-captcha-bypass",
        "description": "AI Captcha Bypass",
        "url": "https://github.com/aydinnyunus/ai-captcha-bypass",
        "language": "Python",
        "stars": 858,
        "forks": 72,
        "created_at": "2024-07-14T13:27:26Z",
        "updated_at": "2025-10-10T07:23:22Z",
        "topics": [
            "ai",
            "ai-security",
            "captcha",
            "python",
            "security"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-10-02T19:40:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5acd16155a8cad63954b19b7be84db36499f829a26ca2a73dc24c5eb53952239/aydinnyunus/ai-captcha-bypass"
        ],
        "homepage": "",
        "readme_summary": "The AI Captcha Bypass repository provides a Python-based command-line tool that leverages large multimodal models (LMMs) like OpenAI's GPT-4o and Google's Gemini to automatically solve various types of CAPTCHAs. It uses Selenium for web browser automation to interact with web pages and solve CAPTCHAs in real-time, supporting multiple AI providers and CAPTCHA types.",
        "key_features": [
            "Multiple AI Providers (OpenAI, Google Gemini)",
            "Multiple CAPTCHA Types (text, complicated text, reCAPTCHA v2, puzzle, audio)",
            "Browser Automation (Selenium)",
            "Extensible design",
            "Benchmarking script"
        ],
        "primary_use_case": "Automated CAPTCHA solving for bypassing security measures.",
        "open_issues": 5,
        "cover_image_prompt": "A skilled locksmith, representing the AI, effortlessly picks a complex lock (the CAPTCHA) on a futuristic vault door. The vault door has UI elements subtly embedded within its design. The locksmith holds a glowing tool that analyzes the lock's mechanism, displaying code snippets and AI model names on a small screen attached to their wrist. Digital particles flow from the tool to the lock, representing the AI's analysis. The scene is set in a high-tech, minimalist environment with cool blue lighting. The image should be in a 3D isometric illustration style with sharp details and a clean, modern aesthetic."
    },
    {
        "id": 682827276,
        "name": "seedit",
        "description": " A GUI for plebbit similar to old.reddit ",
        "url": "https://github.com/plebbit/seedit",
        "language": "TypeScript",
        "stars": 327,
        "forks": 21,
        "created_at": "2023-08-25T01:19:26Z",
        "updated_at": "2025-10-10T03:30:29Z",
        "topics": [
            "decentralized",
            "decentralized-social",
            "ipfs",
            "p2p",
            "plebbit",
            "plebbit-client",
            "reddit",
            "reddit-alternative",
            "seedit",
            "social-media"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-08T17:23:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a1e14d07fab1c6df76b05b460a49aa2814e404eab9185e67194f5c8a7dd114f0/plebbit/seedit"
        ],
        "homepage": "https://seedit.app",
        "readme_summary": "Seedit is a decentralized Reddit alternative client (interface) for the Plebbit protocol, enabling users to create and own unstoppable communities. It offers both web and desktop versions, with the desktop version functioning as a full P2P Plebbit node, and allows users to create and manage communities (subplebbits) either through a GUI or a command-line interface.",
        "key_features": [
            "Decentralized social network client",
            "Serverless and adminless operation",
            "GUI and CLI options for community management",
            "Desktop, web, and mobile versions available",
            "P2P communication using the Plebbit protocol",
            "Integration with IPFS for content storage"
        ],
        "primary_use_case": "Creating and participating in decentralized, censorship-resistant online communities.",
        "open_issues": 86,
        "cover_image_prompt": "Imagine a bustling, open-air marketplace where vendors (representing community creators) are setting up their stalls (subplebbits). A diverse crowd of people (users) are browsing the stalls, connecting directly with the vendors. Each stall has a unique banner and offerings, and small screens display snippets of community discussions. Subtle tech elements like glowing data streams connecting the stalls and the repository's logo subtly embedded in the marketplace's architecture. The scene is set during a sunny day with a vibrant and welcoming atmosphere. The image should be in a 3D isometric illustration style with bright colors and clear details."
    },
    {
        "id": 838212912,
        "name": "chartdb",
        "description": "Database diagrams editor that allows you to visualize and design your DB with a single query.",
        "url": "https://github.com/chartdb/chartdb",
        "language": "TypeScript",
        "stars": 19258,
        "forks": 1070,
        "created_at": "2024-08-05T07:19:19Z",
        "updated_at": "2025-10-10T09:54:58Z",
        "topics": [
            "database",
            "db",
            "db-migration",
            "editor",
            "erd",
            "mariadb",
            "mssql",
            "mysql",
            "postgresql",
            "react",
            "react-flow",
            "schema-migrations",
            "sql",
            "sqlite",
            "typescript",
            "visualization",
            "xyflow"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-09T12:43:41Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/838212912/3063460a-4c7c-4b4d-aea5-1e9760aa7a37"
        ],
        "homepage": "https://chartdb.io",
        "readme_summary": "ChartDB is an open-source, web-based database diagram editor that allows users to visualize and design their database schema using a single query. It supports multiple database systems and offers features like instant schema import, AI-powered export for schema migration, and interactive editing capabilities, all without requiring an account.",
        "key_features": [
            "Instant Schema Import",
            "AI-Powered Export for Easy Migration",
            "Interactive Editing",
            "Support for multiple database systems (PostgreSQL, MySQL, SQL Server, MariaDB, SQLite, CockroachDB, ClickHouse)"
        ],
        "primary_use_case": "Database schema visualization and design, including schema migration between different database systems.",
        "open_issues": 91,
        "cover_image_prompt": "A skilled architect standing before a large blueprint, effortlessly transforming complex SQL queries into a clear, interactive database diagram. The blueprint displays tables and relationships, glowing with digital connections. The architect uses a stylus to adjust the diagram, which instantly generates corresponding SQL scripts on a nearby screen. Small UI elements show database types like PostgreSQL and MySQL. The scene is set in a bright, modern design studio with a focus on clarity and efficiency. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 914964527,
        "name": "solace-agent-mesh",
        "description": "An event-driven framework designed to build and orchestrate multi-agent AI systems. It enables seamless integration of AI agents with real-world data sources and systems, facilitating complex, multi-step workflows.",
        "url": "https://github.com/SolaceLabs/solace-agent-mesh",
        "language": "Python",
        "stars": 596,
        "forks": 42,
        "created_at": "2025-01-10T17:11:47Z",
        "updated_at": "2025-10-10T10:12:54Z",
        "topics": [
            "agentframework",
            "agents",
            "ai",
            "ai-agents",
            "event-driven-architecture",
            "llm"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-10-09T21:34:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dd400859bf8e4826d5508f89a22acf8da699647707847bd829a8e25b1e88c2fb/SolaceLabs/solace-agent-mesh"
        ],
        "homepage": "https://solacelabs.github.io/solace-agent-mesh/docs/documentation/getting-started/introduction",
        "readme_summary": "Solace Agent Mesh is a framework for building event-driven multi-agent AI systems. It enables the creation of AI agent teams that can delegate tasks, share data, and connect with external systems through a standardized communication layer built on Solace Platform's event messaging.",
        "key_features": [
            "Multi-Agent Event-Driven Architecture",
            "Agent Orchestration",
            "Flexible Interfaces",
            "Extensible",
            "Agent-to-Agent Communication",
            "Dynamic Embeds"
        ],
        "primary_use_case": "Building and orchestrating multi-agent AI systems for solving complex problems.",
        "open_issues": 10,
        "cover_image_prompt": "A team of architects collaborating on a complex blueprint, each architect representing an AI agent with specialized skills. The blueprint is a dynamic, interconnected network of nodes and pathways, glowing with digital energy. One architect is sketching database queries, another is generating multimodal content, and a central orchestrator is directing the workflow. Small screens display agent communication logs and task delegations. The scene is set in a bright, modern design studio with a large holographic display showing the Solace Agent Mesh logo subtly integrated into the network. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1037244554,
        "name": "dnSurfer",
        "description": "A DNS-only web browser — browse even when HTTP(S) is blocked.",
        "url": "https://github.com/nadchif/dnSurfer",
        "language": "JavaScript",
        "stars": 33,
        "forks": 3,
        "created_at": "2025-08-13T09:28:59Z",
        "updated_at": "2025-10-10T10:11:39Z",
        "topics": [
            "dns",
            "electron",
            "javascript",
            "linux",
            "network-security"
        ],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-08-25T09:30:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f369544ac367ffb85d5dd616b4cb8d5ac8a47760f33b739f757daa871ce05136/nadchif/dnSurfer"
        ],
        "homepage": "https://dev.to/dchif/making-a-browser-that-slips-past-wi-fi-captive-portals-and-why-this-loophole-isnt-worth-it-13o",
        "readme_summary": "dnSurfer is a proof-of-concept web browser that operates entirely over the DNS protocol. It includes a desktop client built with Electron and a custom DNS server implemented in Node.js, allowing users to browse text-only web content even when HTTP/HTTPS is blocked.",
        "key_features": [
            "DNS-only web browsing",
            "Text-only content retrieval",
            "Electron-based desktop client",
            "Custom DNS server (Node.js)",
            "Circumvents HTTP/HTTPS blocking"
        ],
        "primary_use_case": "Browsing text-based web content in environments where HTTP/HTTPS is blocked, such as captive portals.",
        "open_issues": 0,
        "cover_image_prompt": "A lone surfer riding a wave of DNS packets, bypassing a towering wall representing internet censorship. The surfer, holding a simplified browser interface, navigates towards a distant island displaying text-based content. The DNS packets glow with a subtle digital light, contrasting with the dark, imposing wall. Small UI elements are visible on the surfboard. The scene is set in a vibrant, stylized ocean with a clear sky. The composition is focused and dynamic, emphasizing the surfer's journey. The image should be in a flat design style with clear iconography and a bright, optimistic color scheme."
    }
]