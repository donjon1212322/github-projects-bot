[
    {
        "id": 964314175,
        "name": "terminator",
        "description": "Computer use SDK for building agents that learn from human screen recordings. Cross-platform (Windows/macOS/Linux), deterministic, and ready for L5 desktop automation.",
        "url": "https://github.com/mediar-ai/terminator",
        "language": "Rust",
        "stars": 642,
        "forks": 79,
        "created_at": "2025-04-11T02:48:04Z",
        "updated_at": "2025-06-20T10:05:09Z",
        "topics": [
            "agent",
            "agents",
            "ai",
            "llm",
            "ml",
            "native",
            "py",
            "rust",
            "ts",
            "vercel",
            "vercel-ai-sdk"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-06-20T01:39:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d62d763757562a2e71281097b2061287e5792882dc3d3dd3e96ab945591fd5be/mediar-ai/terminator"
        ],
        "homepage": "https://docs.screenpi.pe/terminator/introduction",
        "readme_summary": "Terminator is a computer use SDK designed for building AI agents that learn from human screen recordings to automate desktop applications. It offers cross-platform support (Windows, macOS, Linux), deterministic behavior, and leverages OS-level accessibility for efficient UI interaction. The SDK supports TypeScript, Python, and Rust, making it suitable for various development environments.",
        "key_features": [
            "Cross-platform desktop automation (Windows/macOS/Linux)",
            "Deterministic behavior",
            "Designed for AI agents",
            "Uses OS-level accessibility",
            "RLHF'd human screen recording as context",
            "Supports TypeScript, Python, and Rust"
        ],
        "primary_use_case": "Building agents that learn from human screen recordings for desktop automation.",
        "open_issues": 22,
        "cover_image_prompt": "A skilled puppeteer controlling miniature desktop applications with glowing threads connected to their interfaces. The puppeteer sits at a workbench surrounded by screens displaying code and data visualizations related to UI automation. The applications, including a calculator and notepad, mimic the puppeteer's movements with precision. The scene is set in a brightly lit workshop filled with tools and gadgets. Small digital elements like floating code snippets and UI elements subtly connect the metaphor to software. The composition is focused and clean with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 998990487,
        "name": "enchat",
        "description": "End-to-end encrypted, ephemeral, self-hosted terminal chat â€” no accounts, no history, no cloud.",
        "url": "https://github.com/sudodevdante/enchat",
        "language": "Python",
        "stars": 54,
        "forks": 3,
        "created_at": "2025-06-09T15:10:56Z",
        "updated_at": "2025-06-20T09:08:59Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-19T17:30:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/db5aa0ba79e75d0bacc9434f171766b4adc495ec9f3b155c95a1efa780831ab4/sudodevdante/enchat"
        ],
        "homepage": null,
        "readme_summary": "Enchat is a terminal-based chat application that provides end-to-end encrypted communication with a focus on privacy and security. It offers features like secure room creation, file sharing, perfect forward secrecy, Tor support, and a zero-knowledge architecture, ensuring that messages are cryptographically protected and invisible to servers and eavesdroppers.",
        "key_features": [
            "End-to-end encrypted chat",
            "Secure room and file sharing",
            "Perfect Forward Secrecy (PFS)",
            "Tor support",
            "Zero-knowledge architecture",
            "Cross-platform support"
        ],
        "primary_use_case": "End-to-end encrypted, ephemeral terminal chat for private conversations without corporate surveillance or data harvesting.",
        "open_issues": 2,
        "cover_image_prompt": "A group of people sitting around a digital campfire, whispering secrets into the flames, which transform into encrypted messages that float away unseen. Each person is represented by a stylized terminal window, and the campfire glows with digital particles. Subtle UI elements on the terminal windows show encrypted chat interfaces. The scene is set in a dark, cozy forest clearing with soft, ambient lighting. The image should be in a 3D isometric illustration style with rich details and a warm color scheme."
    },
    {
        "id": 904467755,
        "name": "purrcrypt",
        "description": "A fur-ociously secure encryption tool that encodes your secrets as adorable cat and dog sounds, using real elliptic curve cryptography with a playful disguise.",
        "url": "https://github.com/vxfemboy/purrcrypt",
        "language": "Rust",
        "stars": 500,
        "forks": 15,
        "created_at": "2024-12-17T00:22:51Z",
        "updated_at": "2025-06-20T10:09:44Z",
        "topics": [
            "cats",
            "command-line-tool",
            "cryptography",
            "dogs",
            "elliptic-curves",
            "encryption",
            "fun",
            "pets",
            "privacy",
            "secuirty",
            "steganography",
            "terminal-app"
        ],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T19:08:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f68e4d6c71558b62038bb47bab3ac25ba82fb1ca99a36ffe0b7daed2dad6fc74/vxfemboy/purrcrypt"
        ],
        "homepage": "",
        "readme_summary": "PurrCrypt is a command-line tool that encrypts data using elliptic curve cryptography and encodes the encrypted data as adorable cat and dog sounds. It provides a fun and unique way to protect sensitive information, offering key generation, management, and the option to choose between 'cat' or 'dog' dialects for the encoded output. The tool aims to make cryptography more approachable and entertaining while maintaining a high level of security.",
        "key_features": [
            "Encrypts data using elliptic curve cryptography",
            "Encodes encrypted data as cat and dog sounds",
            "Command-line tool interface",
            "Key generation and management",
            "Supports different 'pet personalities' (cat or dog dialect)"
        ],
        "primary_use_case": "Encrypting files and messages with a playful disguise using real cryptography.",
        "open_issues": 2,
        "cover_image_prompt": "A friendly cryptographer, dressed in a lab coat adorned with cat and dog paw prints, is surrounded by adorable kittens and puppies. The cryptographer is whispering secrets into a microphone that transforms the audio into a stream of meows and woofs, which then encrypts a glowing data packet. The encrypted packet is delivered by a carrier pigeon wearing a tiny top hat. UI elements showing elliptic curve cryptography calculations are subtly displayed on nearby screens. The scene is set in a whimsical laboratory filled with yarn balls and chew toys, bathed in soft, playful lighting. The image should be in a 3D isometric illustration style with vibrant colors and a focus on clear, intuitive visual elements."
    },
    {
        "id": 409737972,
        "name": "Gitnuro",
        "description": "A FOSS Git multiplatform client for newbies and pros",
        "url": "https://github.com/JetpackDuba/Gitnuro",
        "language": "Kotlin",
        "stars": 1186,
        "forks": 67,
        "created_at": "2021-09-23T20:41:02Z",
        "updated_at": "2025-06-20T08:37:01Z",
        "topics": [
            "compose-multiplatform",
            "git",
            "jetbrains-compose",
            "jgit",
            "kotlin",
            "multiplatform",
            "rust"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-17T08:23:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/67707c5d361cd6e8bcd50fbbaae0bc407115a3ffd036c87b3edeb52ac252048b/JetpackDuba/Gitnuro"
        ],
        "homepage": "https://gitnuro.com/",
        "readme_summary": "Gitnuro is a free and open-source multiplatform Git client built with Jetbrains Compose and JGit. It provides a comprehensive set of Git features, including staging, committing, branching, merging, and history viewing, accessible through a user-friendly interface. The client aims to offer a constraint-free Git experience without relying on web technologies.",
        "key_features": [
            "View diffs for text based files",
            "View history log and all its branches",
            "Add (stage) & reset (unstage) files",
            "Clone, Commit, Push, Pull",
            "Branch and Tag management",
            "Stash and pop",
            "Rebase and Merge",
            "Submodules support",
            "Theming",
            "Blame file",
            "View file history"
        ],
        "primary_use_case": "A multiplatform Git client for managing Git repositories, aimed at both beginners and experienced users.",
        "open_issues": 81,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a complex clockwork mechanism, each gear representing a Git operation. The artisan carefully adjusts and polishes the gears, ensuring they interlock perfectly to manage the flow of code. A blueprint subtly displaying a branch graph lies on the workbench, and a digital screen embedded in the bench shows real-time commit history. The scene is set in a brightly lit workshop with a clean, organized aesthetic. The illustration should be in a detailed 3D isometric style with a focus on clarity and precision."
    },
    {
        "id": 442716595,
        "name": "clickvisual",
        "description": "A lightweight log analytic and data visualize platform  built on clickhouse.",
        "url": "https://github.com/clickvisual/clickvisual",
        "language": "Go",
        "stars": 1594,
        "forks": 229,
        "created_at": "2021-12-29T09:00:39Z",
        "updated_at": "2025-06-20T03:13:27Z",
        "topics": [
            "admin",
            "analytics",
            "clickhouse",
            "clickhouse-database",
            "elk",
            "go",
            "golang",
            "kibana",
            "kubernetes",
            "log",
            "search",
            "ui"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T03:52:41Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0245f4b38cdae0738c54bd1d45289a9286e28bd46cad5ace0b74d2005d62335d/clickvisual/clickvisual"
        ],
        "homepage": "https://clickvisual.net",
        "readme_summary": "ClickVisual is a lightweight, browser-based platform designed for log analytics and visualization on ClickHouse. It offers features such as visual query dashboards, support for raw logs, percentage display for specified fields, and a VS Code style configuration board for Fluent-bit. It also supports easy deployment with Kubernetes and authentication via GitHub and GitLab.",
        "key_features": [
            "Visual query dashboard for SQL",
            "Query histogram and raw logs support",
            "Percentage display for specified fields",
            "VS Code style configuration board for Fluent-bit",
            "Kubernetes deployment support",
            "GitHub and GitLab Authentication"
        ],
        "primary_use_case": "Log analytics and data visualization for ClickHouse.",
        "open_issues": 62,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, swirling ocean of log data, transforming it into a clear, navigable map. The cartographer uses specialized tools to analyze the data streams, highlighting key trends and potential hazards. Small screens display real-time log entries and query results, subtly connecting the map to the underlying software. The scene is set in a bright, airy observatory overlooking the data ocean. The composition is clean and focused, emphasizing the clarity and accessibility of the visualized data. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    }
]