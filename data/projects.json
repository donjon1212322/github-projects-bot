[
    {
        "id": 161323362,
        "name": "retrogram-plutosdr",
        "description": "Wideband Spectrum analyzer on your terminal/ssh console with ASCII art.",
        "url": "https://github.com/r4d10n/retrogram-plutosdr",
        "language": "C++",
        "stars": 84,
        "forks": 15,
        "created_at": "2018-12-11T11:23:55Z",
        "updated_at": "2025-03-08T07:26:46Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2021-09-14T22:05:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ca339be26db1d19e68cb8dcd2b247f0f1160988ccf7cf2d0d8a9fcaa0de696c7/r4d10n/retrogram-plutosdr"
        ],
        "homepage": null,
        "readme_summary": "The retrogram-plutosdr repository provides a wideband spectrum analyzer that runs directly in a terminal or SSH console. It uses ASCII art to visualize the spectrum, allowing users to monitor radio frequencies without a graphical interface. The application supports keyboard controls for adjusting parameters like frequency, bandwidth, and gain, making it suitable for remote or resource-constrained environments.",
        "key_features": [
            "Wideband spectrum analysis",
            "Terminal/SSH console display",
            "ASCII art visualization",
            "Keyboard controls for pan, zoom, and parameter adjustment",
            "Adjustable center frequency, sampling rate, bandwidth, gain, and dynamic range"
        ],
        "primary_use_case": "Real-time spectrum analysis and visualization on a terminal or SSH console using ASCII art, primarily intended for use with the ADALM PLUTO SDR.",
        "open_issues": 5,
        "cover_image_prompt": "An artist sitting at a digital easel, transforming radio waves visualized as colorful, swirling energy patterns into a clear, structured ASCII art landscape displayed on a vintage terminal screen. The artist uses a palette of frequency ranges and signal strengths to paint the landscape. Subtle UI elements on the easel show spectrum analysis parameters. The scene is set in a cozy, modern studio with soft, diffused lighting. The image should be in a digital painting style with clean lines and a vibrant color scheme, reminiscent of early computer graphics."
    },
    {
        "id": 904467755,
        "name": "purrcrypt",
        "description": "A fur-ociously secure encryption tool that encodes your secrets as adorable cat and dog sounds, using real elliptic curve cryptography with a playful disguise.",
        "url": "https://github.com/vxfemboy/purrcrypt",
        "language": "Rust",
        "stars": 123,
        "forks": 5,
        "created_at": "2024-12-17T00:22:51Z",
        "updated_at": "2025-03-08T09:46:32Z",
        "topics": [
            "cats",
            "command-line-tool",
            "cryptography",
            "dogs",
            "elliptic-curves",
            "encryption",
            "fun",
            "pets",
            "privacy",
            "secuirty",
            "steganography",
            "terminal-app"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T20:38:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c87defce872f2f1d49f2e4091b03bae7ccb44058f8ee40ae6c05ff3ba4280c4e/vxfemboy/purrcrypt"
        ],
        "homepage": "",
        "readme_summary": "PurrCrypt is an encryption tool that uses elliptic curve cryptography to secure data. It uniquely encodes the encrypted data as cat and dog sounds, providing a playful and less conspicuous way to transmit sensitive information. The tool offers a command-line interface for key management, encryption, and decryption, making cryptography more approachable and fun.",
        "key_features": [
            "Encrypts data using elliptic curve cryptography",
            "Encodes encrypted data as cat and dog sounds",
            "Provides a command-line interface for key generation, encryption, and decryption",
            "Supports setting a cat or dog 'dialect' for the output",
            "Offers a playful and fun approach to cryptography"
        ],
        "primary_use_case": "Encrypting files and messages with a layer of security and a playful disguise.",
        "open_issues": 2,
        "cover_image_prompt": "A friendly cryptographer, dressed in a lab coat adorned with cat and dog paw prints, stands in a whimsical workshop filled with bubbling beakers labeled 'Encryption' and 'Decryption'. The cryptographer is feeding a complex mathematical formula (written on a scroll) into a machine that transforms it into adorable cat and dog sounds, represented by floating speech bubbles with 'Meow' and 'Woof'. A small screen on the machine displays elliptic curve cryptography equations. The workshop is brightly lit with a playful atmosphere. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 314995099,
        "name": "jira-cli",
        "description": "🔥 Feature-rich interactive Jira command line.",
        "url": "https://github.com/ankitpokhrel/jira-cli",
        "language": "Go",
        "stars": 4207,
        "forks": 222,
        "created_at": "2020-11-22T08:48:39Z",
        "updated_at": "2025-03-08T10:02:49Z",
        "topics": [
            "atlassian",
            "cli",
            "cli-app",
            "command-line",
            "command-line-tool",
            "console",
            "go",
            "golang",
            "golang-cli",
            "jira",
            "jira-cli",
            "made-in-nepal",
            "productivity",
            "productivity-tools",
            "terminal",
            "terminal-app",
            "tui"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-16T17:43:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/544499ee533cddd62c4493c86f70733550d4e529af0c26329af5957e86ff0b63/ankitpokhrel/jira-cli"
        ],
        "homepage": "",
        "readme_summary": "JiraCLI is a command-line tool for interacting with Atlassian Jira. It provides features such as issue searching, creation, cloning, linking, and ticket transitioning, all accessible through an interactive terminal interface. The tool aims to improve developer workflow by offering a faster alternative to the Jira UI for common tasks.",
        "key_features": [
            "Interactive command-line interface",
            "Issue search and navigation",
            "Issue creation",
            "Issue cloning",
            "Issue linking",
            "Ticket transition"
        ],
        "primary_use_case": "To provide a feature-rich command-line interface for interacting with Atlassian Jira, improving day-to-day workflow by avoiding the Jira UI for common tasks.",
        "open_issues": 80,
        "cover_image_prompt": "Imagine a skilled air traffic controller in a bustling airport tower, expertly managing incoming and outgoing flights. Each flight represents a Jira issue, and the controller uses a sophisticated console with glowing screens to track, prioritize, and direct them efficiently. The console displays Jira issue details and allows for quick actions like creating, linking, and transitioning tickets. Digital particles flow around the tower, visualizing the data being processed. The scene is set at dusk with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and a clean, modern aesthetic."
    },
    {
        "id": 99253773,
        "name": "ots",
        "description": "One-Time-Secret sharing platform with a symmetric 256bit AES encryption in the browser",
        "url": "https://github.com/Luzifer/ots",
        "language": "Go",
        "stars": 519,
        "forks": 72,
        "created_at": "2017-08-03T16:32:59Z",
        "updated_at": "2025-03-08T08:55:24Z",
        "topics": [
            "aes256",
            "encryption",
            "golang",
            "one-time-secret"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-12T19:27:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6cff249eacc62cba1649641d4b2c74e2f29d539f240882c2dfe0e179aa40b537/Luzifer/ots"
        ],
        "homepage": "https://ots.fyi",
        "readme_summary": "OTS is a one-time-secret sharing platform that uses AES 256-bit encryption in the browser to protect secrets. The server never receives the password, and the secret is deleted after the first read, ensuring maximum security for sensitive information.",
        "key_features": [
            "AES 256bit encryption",
            "Server never gets the password",
            "Secret is deleted on first read"
        ],
        "primary_use_case": "Securely sharing sensitive information one time only.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a secure vault, its heavy door slightly ajar, revealing a single, glowing message inside. A beam of light emanates from the message, reaching out to a person standing outside the vault, who is reading the message on a tablet. Once the message is read, the light fades, and the vault door closes completely, signifying the message's self-destruction. The vault is set in a minimalist, futuristic landscape with subtle digital particles floating around, representing encryption. Small UI elements on the tablet show a one-time-secret interface. The image should be in a 3D isometric illustration style with clean lines and a cool color palette."
    },
    {
        "id": 804241290,
        "name": "pyper",
        "description": "Concurrent Python made simple",
        "url": "https://github.com/pyper-dev/pyper",
        "language": "Python",
        "stars": 1165,
        "forks": 23,
        "created_at": "2024-05-22T08:14:04Z",
        "updated_at": "2025-03-08T08:48:10Z",
        "topics": [
            "asyncio",
            "concurrency",
            "data",
            "data-collection",
            "data-engineering",
            "data-pipelines",
            "data-processing",
            "multiprocessing",
            "parallel-computing",
            "python",
            "threading"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-02-04T12:20:06Z",
        "media_urls": [
            "https://opengraph.githubassets.com/de4e2d512be6b3d60059dfa6583adbb84a09bab09102669334551ca4eea713ce/pyper-dev/pyper"
        ],
        "homepage": "",
        "readme_summary": "Pyper is a Python framework designed to simplify concurrent and parallel data processing using functional programming patterns. It provides an intuitive API for building data pipelines, abstracting away the complexities of threading, multiprocessing, and asynchronous execution. Pyper is suitable for ETL systems, data microservices, and data collection applications.",
        "key_features": [
            "Intuitive API for concurrent and parallel data-processing",
            "Functional programming paradigm",
            "Safety: Hides task execution and resource clean-up complexities",
            "Efficiency: Lazy execution using queues, workers, and generators",
            "Pure Python: Lightweight with zero sub-dependencies"
        ],
        "primary_use_case": "ETL Systems, Data Microservices, and Data Collection",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a skilled chef orchestrating a complex kitchen, representing concurrent data processing. The chef expertly juggles multiple ingredients (data) flowing through various stations (functions): chopping (threading), baking (multiprocessing), and flash-freezing (asyncio). Each station has a clear input and output, with data seamlessly moving between them. Subtle UI elements display data flow and processing metrics. The repository name, 'Pyper,' is subtly etched on the chef's apron. The scene is brightly lit, showcasing the kitchen's efficiency and organization. The illustration should be in a 3D isometric style with vibrant colors and sharp details."
    },
    {
        "id": 63892846,
        "name": "arq",
        "description": "Fast job queuing and RPC in python with asyncio and redis.",
        "url": "https://github.com/python-arq/arq",
        "language": "Python",
        "stars": 2365,
        "forks": 178,
        "created_at": "2016-07-21T18:24:42Z",
        "updated_at": "2025-03-07T21:47:30Z",
        "topics": [
            "async",
            "asyncio",
            "concurrency",
            "concurrent",
            "distributed",
            "msgpack",
            "queue",
            "redis",
            "tasks",
            "worker"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-01-06T17:54:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/140a7d06aeaf01e18bafa62d6ffb3798fc63bd7cb66c24451b79303f51c01e40/python-arq/arq"
        ],
        "homepage": "https://arq-docs.helpmanual.io/",
        "readme_summary": "Arq is a Python library for fast job queuing and RPC using asyncio and Redis. It enables developers to offload tasks to background workers for asynchronous processing, improving application responsiveness and scalability. Arq leverages Redis for message brokering and asyncio for concurrent execution.",
        "key_features": [
            "Job queuing",
            "RPC (Remote Procedure Call)",
            "Asynchronous task processing",
            "Redis integration"
        ],
        "primary_use_case": "Asynchronous task processing and job queuing using Redis as a message broker.",
        "open_issues": 82,
        "cover_image_prompt": "A diligent postal worker sorting packages in a futuristic, automated post office. Packages representing tasks arrive on conveyor belts and are routed to different queues, visualized as distinct delivery routes. Some packages are expedited (RPC), while others follow standard processing. The post office is filled with glowing digital displays showing queue status and task progress. The repository name, 'arq,' is subtly displayed on the main sorting console. The scene is brightly lit with a clean, efficient aesthetic. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 646480766,
        "name": "roop",
        "description": "one-click face swap",
        "url": "https://github.com/s0md3v/roop",
        "language": "Python",
        "stars": 29411,
        "forks": 6650,
        "created_at": "2023-05-28T14:37:54Z",
        "updated_at": "2025-03-08T08:12:07Z",
        "topics": [
            "ai",
            "face-swap"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-03-25T04:01:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/024a9254a1bee893b0fc0cf768b5177138d208ea5668a4d2f86593b9dd84aca9/s0md3v/roop"
        ],
        "homepage": "",
        "readme_summary": "Roop is a one-click face-swapping tool that allows users to replace faces in videos with a desired face using only a single image. It offers various customization options, including frame processors, video encoding settings, and memory management. The tool supports headless mode and provides options for processing multiple faces and fine-tuning the face-swapping process.",
        "key_features": [
            "One-click face swap",
            "Requires only one image of the desired face",
            "No dataset or training required",
            "Headless mode support",
            "Various frame processors (face_swapper, face_enhancer, etc.)",
            "Options to keep FPS, frames, skip audio",
            "Multiple face processing",
            "Customizable face distance and frame settings",
            "Configurable video encoder and quality",
            "Memory management",
            "Execution provider selection"
        ],
        "primary_use_case": "Replacing faces in videos with a desired face using a single image, without requiring datasets or training.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled surgeon carefully replacing a blurry, pixelated face on a video screen with a clear, high-definition face using a specialized tool. The original video plays on a larger monitor in the background, while the surgeon works on a smaller screen displaying the face-swapping interface. Digital particles flow from the surgeon's tool onto the new face, enhancing its details. The scene is set in a modern, sterile lab with bright, focused lighting. Small UI elements show the software's controls and progress. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 36692681,
        "name": "BruteX",
        "description": "Automatically brute force all services running on a target.",
        "url": "https://github.com/1N3/BruteX",
        "language": "Shell",
        "stars": 2043,
        "forks": 611,
        "created_at": "2015-06-01T22:28:19Z",
        "updated_at": "2025-03-08T09:58:11Z",
        "topics": [
            "brute",
            "brute-force",
            "bruteforce",
            "bruteforce-attacks",
            "bruteforcing",
            "bugbounty",
            "hacking"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2023-03-21T19:16:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fcc6353d78be051bdc35d86794a07d9a5c5c937ebf62c1ebe3b29cc84680ec2e/1N3/BruteX"
        ],
        "homepage": "https://sn1persecurity.com",
        "readme_summary": "BruteX is a shell script designed to automatically brute-force various services running on a target. It focuses on identifying open ports and then attempting to crack usernames and passwords. The tool can be installed via a shell script or run within a Docker container.",
        "key_features": [
            "Open port discovery",
            "Username brute-forcing",
            "Password brute-forcing",
            "Docker support"
        ],
        "primary_use_case": "Automated brute-forcing of services running on a target system to identify vulnerabilities.",
        "open_issues": 10,
        "cover_image_prompt": "A locksmith, representing BruteX, meticulously trying various keys (passwords) on a series of doors (services) within a futuristic server room. Each door is labeled with a common service port number (e.g., 21, 22, 80). The locksmith holds a tablet displaying a list of usernames. Successful key attempts cause the door to glow green, while failed attempts emit red sparks. Small UI elements on the tablet show brute-forcing progress. The scene is set in a clean, brightly lit server room with a blue and white color scheme. The image should be in a 3D isometric illustration style with sharp details and vibrant colors."
    },
    {
        "id": 705280022,
        "name": "sagemode",
        "description": " 👀Sagemode: Track and Unveil Online identities across social media platforms🕵️‍♂️",
        "url": "https://github.com/senran101604/sagemode",
        "language": "Python",
        "stars": 240,
        "forks": 21,
        "created_at": "2023-10-15T15:19:24Z",
        "updated_at": "2025-03-08T06:21:50Z",
        "topics": [
            "cli",
            "cybersecurity",
            "digital-investigation",
            "fun",
            "information-gathering",
            "investigation",
            "linux",
            "macos",
            "osint",
            "python",
            "reconnaissance",
            "simple",
            "windows"
        ],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2023-12-21T13:56:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a607b28c42512ec88dd5ed1049ea04e30758e75cd9093323814bb20ab6c781a8/senran101604/sagemode"
        ],
        "homepage": "",
        "readme_summary": "Sagemode is an OSINT username search tool designed for simplicity and efficiency. It allows users to search for specific usernames across various online platforms, providing real-time feedback on positive search results. The tool is intended for digital investigations, cybersecurity research, and online reputation management.",
        "key_features": [
            "Easy to Use",
            "Real-time Feedback",
            "Curated List of sites"
        ],
        "primary_use_case": "Digital Investigations",
        "open_issues": 1,
        "cover_image_prompt": "A detective wearing a fedora and trench coat, illuminated by the glow of multiple social media icons projected onto a brick wall. He holds a magnifying glass up to one of the icons, revealing a hidden username within the network. The scene is set in a dimly lit alleyway, with digital particles subtly swirling around the detective. Small UI elements displaying search results are projected onto nearby surfaces. The repository name, 'Sagemode,' is subtly etched into the brick wall. The image should be in a noir-style digital painting with sharp contrasts and a mysterious atmosphere."
    }
]