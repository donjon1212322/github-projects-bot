[
    {
        "id": 40556106,
        "name": "wazuh",
        "description": "Wazuh - The Open Source Security Platform. Unified XDR and SIEM protection for endpoints and cloud workloads.",
        "url": "https://github.com/wazuh/wazuh",
        "language": "C++",
        "stars": 12147,
        "forks": 1804,
        "created_at": "2015-08-11T17:39:03Z",
        "updated_at": "2025-04-11T10:11:02Z",
        "topics": [
            "cloud-security",
            "compliance",
            "configuration-assessement",
            "container-security",
            "cybersecurity",
            "file-integrity-monitoring",
            "incident-response",
            "infosec",
            "log-analysis",
            "malware-detection",
            "pci-dss",
            "security",
            "security-audit",
            "security-automation",
            "security-hardening",
            "security-tools",
            "siem",
            "vulnerability-detection",
            "wazuh",
            "xdr"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-04-11T07:26:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cc7b1f2d51116f02f0c3ee617db9c9c765473fad9f6bd689871e69214a32c023/wazuh/wazuh"
        ],
        "homepage": "https://wazuh.com/",
        "readme_summary": "Wazuh is an open-source security platform that provides XDR and SIEM capabilities. It uses agents deployed on monitored systems to collect and analyze data, integrated with the Elastic Stack for visualization. Key features include intrusion detection, log analysis, file integrity monitoring, vulnerability detection, configuration assessment, and incident response, enabling comprehensive security monitoring and threat management.",
        "key_features": [
            "Intrusion detection",
            "Log data analysis",
            "File integrity monitoring",
            "Vulnerability detection",
            "Configuration assessment",
            "Incident response"
        ],
        "primary_use_case": "Threat prevention, detection, and response across various environments (on-premises, virtualized, containerized, and cloud-based).",
        "open_issues": 2485,
        "cover_image_prompt": "Imagine a fortress under siege, but instead of arrows, it's data packets. A team of vigilant cybersecurity experts, depicted as modern knights, are strategically positioned, using shields emblazoned with the Wazuh logo to deflect malicious attacks. One knight analyzes log data flowing across a digital stream, another monitors file integrity with a magnifying glass over a holographic file system, and a third assesses vulnerability reports projected onto a nearby screen. The fortress glows with a protective aura, symbolizing threat prevention, detection, and response. Small UI elements showing Wazuh dashboards are subtly integrated into the scene. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 962528913,
        "name": "reTermAI",
        "description": null,
        "url": "https://github.com/pie0902/reTermAI",
        "language": "Python",
        "stars": 3,
        "forks": 0,
        "created_at": "2025-04-08T09:39:20Z",
        "updated_at": "2025-04-11T08:14:21Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T08:41:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7ef6f2dde6ffcefb395d2dd7df9eba4612a59ae78b3a85ba9b96d7f78d7a3b6c/pie0902/reTermAI"
        ],
        "homepage": null,
        "readme_summary": "reTermAI is a smart command assistant that recommends relevant terminal commands based on your shell history, leveraging AI models like OpenAI and Gemini. It offers intelligent matching by keyword or partial input and supports both zsh and bash shells. The tool is easily installed via pip and manages API keys through a .env file.",
        "key_features": [
            "Recommends terminal commands based on history using OpenAI or Gemini",
            "Supports intelligent matching by keyword or partial input",
            "Easy installation via pip",
            "Supports zsh and bash shell history",
            "API keys managed via .env"
        ],
        "primary_use_case": "AI-powered terminal command recommendation and intelligent command matching.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled librarian in a futuristic library, using an AI-powered interface to instantly recommend the perfect command from a vast collection of ancient scrolls (representing shell history). The librarian holds a tablet displaying a simplified terminal interface with suggested commands highlighted. Digital particles flow from the scrolls to the tablet, visualizing the AI learning process. The library is filled with glowing data streams and subtle UI elements projected onto the shelves. The scene is set in a softly lit, high-tech library with a clean, focused composition and a calming blue and green color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 802112303,
        "name": "ProcrastiScan",
        "description": null,
        "url": "https://github.com/Marc-Pk/ProcrastiScan",
        "language": "JavaScript",
        "stars": 39,
        "forks": 1,
        "created_at": "2024-05-17T14:49:41Z",
        "updated_at": "2025-04-10T23:55:20Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-28T08:54:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5498a76e74e8acbe132ce1bc5dcc9e09d53e8ad123df815b4439ce1a25c6fd2b/Marc-Pk/ProcrastiScan"
        ],
        "homepage": null,
        "readme_summary": "ProcrastiScan is a productivity tool that analyzes content relevance to help users stay focused. It calculates a relevance score for each tab or application and provides interventions like tab blocking or a chatbot when the user becomes distracted. A dashboard allows users to track their focus levels over time.",
        "key_features": [
            "Smart Distraction Recognition using relevance scoring",
            "Multiple intervention modes (Tab Blocking, Chatbot, Procrastination List, Theme Nudging)",
            "Dashboard for tracking focus and distractions"
        ],
        "primary_use_case": "Helps users stay focused and productive by identifying and mitigating distractions while browsing or using other applications.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a focused student sitting at a desk, surrounded by glowing screens displaying various websites. A vigilant AI assistant, depicted as a friendly robot, gently nudges the student back to their research paper on the central screen. Distracting websites fade into the background, represented by muted colors and blurred details, while the research paper shines brightly. Small UI elements display relevance scores and focus metrics. The scene is set in a cozy, futuristic study with soft, warm lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, subtly incorporating the ProcrastiScan logo."
    },
    {
        "id": 904490600,
        "name": "KrillinAI",
        "description": " A video translation and dubbing tool powered by LLMs, offering professional-grade translations and one-click full-process deployment. It can generate content optimized for platforms like YouTube，TikTok, and Shorts.  基于AI大模型的视频翻译和配音工具，专业级翻译，一键部署全流程，可以生成适配抖音，小红书，哔哩哔哩，视频号，TikTok，Youtube Shorts等形态的内容",
        "url": "https://github.com/krillinai/KrillinAI",
        "language": "Go",
        "stars": 2100,
        "forks": 169,
        "created_at": "2024-12-17T01:59:22Z",
        "updated_at": "2025-04-11T10:10:20Z",
        "topics": [
            "dubbing",
            "localization",
            "tts",
            "video-transcription",
            "video-translation"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T14:21:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ffc89f9112ecf59e1d9a050eeab480cbad97704c31af3271d6938df80b7558e8/krillinai/KrillinAI"
        ],
        "homepage": "",
        "readme_summary": "Krillin AI is an all-in-one video translation and dubbing tool that simplifies the process of localizing video content. It offers features like one-click workflow initiation, precise subtitle generation using Whisper, smart segmentation with LLMs, professional-grade translation, voice cloning, and automatic video formatting for various platforms. The tool aims to transform raw footage into polished, platform-ready content with minimal effort.",
        "key_features": [
            "One-Click Start",
            "Video download (yt-dlp and local file uploading supported)",
            "Precise Subtitles (Whisper-powered high-accuracy recognition)",
            "Smart Segmentation (LLM-based subtitle chunking & alignment)",
            "Professional Translation (Paragraph-level translation for consistency)",
            "Term Replacement (One-click domain-specific vocabulary swap)",
            "Dubbing and Voice Cloning (CosyVoice selected or cloning voices)",
            "Video Composition (Auto-formatting for horizontal/vertical layouts)"
        ],
        "primary_use_case": "Effortless video localization and enhancement for platforms like YouTube, TikTok, and Bilibili.",
        "open_issues": 16,
        "cover_image_prompt": "Imagine a skilled linguist in a high-tech recording studio, effortlessly translating a film reel into multiple languages. The linguist is surrounded by screens displaying various alphabets and waveforms, with a subtle UI overlay showing the KrillinAI logo. The translated audio seamlessly flows from the reel into different language-labeled speakers, each emitting a distinct cultural vibe. Small code snippets related to audio processing and translation algorithms float in the background as digital particles. The scene is bathed in soft, professional lighting, creating a sense of precision and global reach. The illustration should be in a clean, 3D isometric style with vibrant colors and sharp details."
    },
    {
        "id": 871674431,
        "name": "Free_Games_Tracker",
        "description": "Discover limited-time free games across all platforms.",
        "url": "https://github.com/pyoneerC/Free_Games_Tracker",
        "language": "C++",
        "stars": 14,
        "forks": 1,
        "created_at": "2024-10-12T16:12:38Z",
        "updated_at": "2025-04-11T00:40:59Z",
        "topics": [
            "android",
            "api",
            "apk",
            "application",
            "appstore",
            "flutter",
            "free",
            "games",
            "open-source",
            "tracker",
            "utility"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-09T13:35:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a4f1b3075b34ef3a5fa93ca287dc4da809d8b8edf67ee46557e8251849b322ab/pyoneerC/Free_Games_Tracker"
        ],
        "homepage": "https://pyoneerc1.itch.io/free-games-tracker",
        "readme_summary": "The FreeGamesApp is a cross-platform application designed to help users discover time-limited free game offers and DLC. It provides instant access to promotions from various platforms through a custom API, offering a clean and minimal interface focused solely on free games and DLC. The application is available for Windows and Android and is an open-source project.",
        "key_features": [
            "Instant access to active free game offers and promotions in one place.",
            "Automatic updates via a custom API built on top of GamerPower.",
            "Clean and minimal interface focused solely on time-limited free games and DLC.",
            "Available for both Windows and Android platforms.",
            "Open source project with a Flutter-based frontend and Python backend."
        ],
        "primary_use_case": "Discovering time-limited free game offers and exclusive downloadable content (DLC) across multiple platforms (Windows and Android).",
        "open_issues": 1,
        "cover_image_prompt": "A treasure hunter with a high-tech metal detector exploring a vast digital landscape filled with hidden game icons. The detector emits a beam of light, revealing time-limited free game offers and DLC as glowing gems buried beneath the surface. A small screen attached to the detector displays a list of platforms (Windows, Android). The scene is set in a vibrant, stylized world with floating UI elements and subtle code snippets. The composition is clean and focused with a playful color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 223953992,
        "name": "zphisher",
        "description": "An automated phishing tool with 30+ templates. This Tool is made for educational purpose only ! Author will not be responsible for any misuse of this toolkit !",
        "url": "https://github.com/htr-tech/zphisher",
        "language": "HTML",
        "stars": 12352,
        "forks": 4502,
        "created_at": "2019-11-25T13:22:20Z",
        "updated_at": "2025-04-11T10:07:50Z",
        "topics": [
            "htr-tech",
            "phisher",
            "phishing",
            "phishing-attacks",
            "phishing-pages",
            "zphisher"
        ],
        "quality_score": 0.7000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2024-08-18T16:39:44Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/223953992/47b43680-8ee1-11ea-8711-7da89b585673"
        ],
        "homepage": "",
        "readme_summary": "Zphisher is an automated phishing tool designed for educational purposes, offering a beginner-friendly interface with over 30 templates. It supports multiple tunneling options, URL masking, and Docker deployment, enabling users to simulate phishing attacks and understand their mechanics.",
        "key_features": [
            "Latest and updated login pages",
            "Beginner-friendly interface",
            "Multiple tunneling options (Localhost, Cloudflared, LocalXpose)",
            "Mask URL support",
            "Docker support"
        ],
        "primary_use_case": "Automated phishing tool for educational purposes.",
        "open_issues": 218,
        "cover_image_prompt": "A skilled illusionist standing on a stage, expertly manipulating digital masks to create convincing but fake online personas. The stage is bathed in the glow of various device screens displaying social media login pages. The audience, represented by faceless silhouettes, is captivated by the performance. Subtle code snippets and network diagrams are projected onto the backdrop, hinting at the underlying technology. The illusionist wears a mischievous grin, emphasizing the tool's potential for both education and misuse. The scene is rendered in a vibrant, slightly surreal digital painting style with sharp details and dramatic lighting, conveying the deceptive nature of phishing."
    },
    {
        "id": 945177403,
        "name": "nutshell",
        "description": "Nutshell is an enhanced Unix shell that provides a simplified command language, package management, and AI-powered assistance.",
        "url": "https://github.com/chandralegend/nutshell",
        "language": "C",
        "stars": 20,
        "forks": 2,
        "created_at": "2025-03-08T20:45:32Z",
        "updated_at": "2025-04-11T02:04:21Z",
        "topics": [],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-03-20T14:14:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0a768ab2dbd560ec9413ad4919a32695046b1aa145c16dc64cd0c0ccdce0b771/chandralegend/nutshell"
        ],
        "homepage": "",
        "readme_summary": "Nutshell is an enhanced Unix shell designed to simplify command-line interactions. It offers features like friendly command aliases, a built-in package management system for extending functionality, and AI-powered assistance for command discovery and troubleshooting. Nutshell aims to provide a more user-friendly and efficient shell experience.",
        "key_features": [
            "Friendly command aliases",
            "Built-in package management system",
            "Dynamic package installation",
            "Interactive Git commit helper",
            "AI-powered command assistance",
            "Customizable themes"
        ],
        "primary_use_case": "Enhanced Unix shell environment with simplified commands, package management, and AI assistance.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled artisan in a workshop, meticulously crafting a miniature, ornate seashell. The artisan uses various tools – a tiny hammer representing command aliases, a miniature crane symbolizing package management, and a glowing orb embodying AI assistance. The seashell rests on a workbench cluttered with open books (documentation) and spools of colorful thread (themes). A small screen displays a command line interface with the Nutshell prompt. The scene is bathed in warm, inviting light, creating a sense of craftsmanship and user-friendliness. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 850267588,
        "name": "xiaozhi-esp32",
        "description": "Build your own AI friend",
        "url": "https://github.com/78/xiaozhi-esp32",
        "language": "C++",
        "stars": 11164,
        "forks": 2113,
        "created_at": "2024-08-31T10:08:16Z",
        "updated_at": "2025-04-11T10:05:00Z",
        "topics": [
            "chatbot",
            "esp32",
            "llm"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T19:11:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c78873e45eea1fe72221e5e125bf29124fadfcb6eb7614fc44195db3b2c4dd71/78/xiaozhi-esp32"
        ],
        "homepage": "https://xiaozhi.me",
        "readme_summary": "The XiaoZhi AI Chatbot project enables users to create their own AI companion using ESP32 microcontrollers. It supports features like voice interaction, multi-language processing, voiceprint recognition, and integration with large language models. The project aims to make AI hardware development accessible and allows for customization of the chatbot's personality and functionality.",
        "key_features": [
            "Wi-Fi / ML307 Cat.1 4G connectivity",
            "BOOT key wake-up and interrupt",
            "Offline voice wake-up (ESP-SR)",
            "Streaming voice conversation (WebSocket or UDP)",
            "Multi-language support (Chinese, Cantonese, English, Japanese, Korean) via SenseVoice",
            "Voiceprint recognition (3D Speaker)",
            "Large model TTS (Volcano Engine or CosyVoice)",
            "Large model LLM (Qwen, DeepSeek, Doubao)",
            "Configurable prompts and voices",
            "Short-term memory with self-summarization",
            "OLED / LCD display for signal strength and dialogue",
            "LCD image expression support",
            "Multilingual support (Chinese, English)"
        ],
        "primary_use_case": "Building a customizable AI chatbot companion using ESP32 hardware.",
        "open_issues": 103,
        "cover_image_prompt": "Imagine a friendly robot companion, resembling a small, expressive robot with a screen for a face, sitting on a desk beside a person. The person is speaking into a microphone, and the robot is responding with text displayed on its screen. Behind them, a swirling cloud of language symbols (Chinese, English, etc.) represents the multilingual capabilities. Subtle UI elements on the robot's screen show configuration options for voice and language. The scene is set in a cozy, modern workshop with soft, warm lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, conveying approachability and technological sophistication."
    },
    {
        "id": 640317662,
        "name": "vanna",
        "description": "🤖 Chat with your SQL database 📊. Accurate Text-to-SQL Generation via LLMs using RAG 🔄.",
        "url": "https://github.com/vanna-ai/vanna",
        "language": "Python",
        "stars": 14827,
        "forks": 1328,
        "created_at": "2023-05-13T17:26:28Z",
        "updated_at": "2025-04-11T09:40:10Z",
        "topics": [
            "agent",
            "ai",
            "data-visualization",
            "database",
            "llm",
            "rag",
            "sql",
            "text-to-sql"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T03:17:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9f1888f94283ac33db9469520bc84ac85ae64c710fc934e32951a40cc51bcaac/vanna-ai/vanna"
        ],
        "homepage": "https://vanna.ai/docs/",
        "readme_summary": "Vanna is an open-source Python RAG framework that enables users to generate SQL queries from natural language questions. It trains a RAG model on your data and then allows you to ask questions, returning SQL queries that can be automatically run on your database. Vanna supports various LLMs, vector stores, and databases, offering flexibility in implementation.",
        "key_features": [
            "Text-to-SQL generation",
            "RAG (Retrieval-Augmented Generation) framework",
            "Support for multiple LLMs (OpenAI, Anthropic, Gemini, HuggingFace, AWS Bedrock, Ollama, Qianwen, Qianfan, Zhipu)",
            "Support for multiple VectorStores (AzureSearch, Opensearch, PgVector, PineCone, ChromaDB, FAISS, Marqo, Milvus, Qdrant, Weaviate, Oracle)",
            "Support for multiple Databases (PostgreSQL, MySQL, PrestoDB, Apache Hive, ClickHouse, Snowflake, Oracle, Microsoft SQL)",
            "User Interfaces (Jupyter Notebook, Streamlit, Flask, Slack)"
        ],
        "primary_use_case": "Chatting with SQL databases using natural language to generate SQL queries.",
        "open_issues": 150,
        "cover_image_prompt": "A skilled cartographer meticulously charting a vast, intricate SQL database as if it were an unexplored continent. The cartographer uses a magical quill that transforms spoken questions into precise map annotations, revealing hidden insights and optimal routes to data treasures. Small UI elements float around the map, displaying code snippets and query results. The scene is set in a sunlit library filled with ancient scrolls and modern tech. The image should be in a detailed digital painting style with warm colors and a sense of discovery."
    },
    {
        "id": 171987885,
        "name": "pysimdjson",
        "description": "Python bindings for the simdjson project.",
        "url": "https://github.com/TkTech/pysimdjson",
        "language": "Python",
        "stars": 671,
        "forks": 57,
        "created_at": "2019-02-22T03:26:04Z",
        "updated_at": "2025-04-11T05:31:41Z",
        "topics": [
            "json",
            "pysimdjson",
            "python",
            "python-bindings",
            "simd",
            "simdjson"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-02-05T18:11:24Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/171987885/fcb68b00-907f-11eb-8e29-824971097e67"
        ],
        "homepage": "https://pysimdjson.tkte.ch",
        "readme_summary": "pysimdjson provides Python bindings for the simdjson library, enabling SIMD-accelerated JSON parsing for improved performance. It includes a fallback parser for systems without SIMD support, ensuring compatibility across different platforms. The library is tested on multiple operating systems and Python versions, making it a reliable solution for fast JSON processing.",
        "key_features": [
            "SIMD-accelerated JSON parsing",
            "Fallback parser for systems without SIMD instructions",
            "Python bindings for simdjson",
            "Tested on OS X, Linux, and Windows for Python 3.9 to 3.12"
        ],
        "primary_use_case": "Fast and efficient JSON parsing in Python applications.",
        "open_issues": 10,
        "cover_image_prompt": "A skilled chef meticulously slicing a mountain of raw JSON data with a gleaming, futuristic knife, transforming it into perfectly organized and easily digestible data cubes. The chef wears a high-tech apron displaying the 'pysimdjson' logo. Digital particles representing processing power swirl around the knife, enhancing its speed and precision. Small UI elements on nearby screens show real-time parsing metrics and code snippets. The scene is set in a clean, modern kitchen with bright, focused lighting. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 825470378,
        "name": "beszel",
        "description": "Lightweight server monitoring hub with historical data, docker stats, and alerts.",
        "url": "https://github.com/henrygd/beszel",
        "language": "Go",
        "stars": 10644,
        "forks": 320,
        "created_at": "2024-07-07T21:36:28Z",
        "updated_at": "2025-04-11T09:59:12Z",
        "topics": [
            "homelab",
            "monitoring",
            "self-hosted"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-09T23:58:46Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/825470378/2710c6db-f934-4a8b-a2c4-7a0abbcd2ad6"
        ],
        "homepage": "https://beszel.dev",
        "readme_summary": "Beszel is a lightweight server monitoring platform designed for homelabs and self-hosted environments. It provides Docker statistics, historical data, and configurable alerts through a user-friendly web interface. Key features include multi-user support, OAuth authentication, automatic backups, and a REST API for custom integrations.",
        "key_features": [
            "Lightweight server monitoring",
            "Docker statistics tracking",
            "Historical data analysis",
            "Configurable alerts",
            "Multi-user support",
            "OAuth/OIDC authentication",
            "Automatic backups",
            "REST API access"
        ],
        "primary_use_case": "Lightweight server monitoring with Docker stats, historical data, and alerts for homelabs and self-hosted environments.",
        "open_issues": 175,
        "cover_image_prompt": "A diligent server administrator tending to a vibrant, interconnected garden representing a network of servers. Each plant in the garden corresponds to a server, displaying real-time health data as glowing leaves and blossoming flowers. The administrator uses a tablet displaying the Beszel dashboard to monitor the garden's overall health, adjusting settings and responding to alerts. A gentle, futuristic glow emanates from the tablet, subtly connecting the scene to software. The composition is clean and focused, with a pastel color scheme and soft lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]