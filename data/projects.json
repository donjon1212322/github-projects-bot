[
    {
        "id": 284358500,
        "name": "mpvpaper",
        "description": "A video wallpaper program for wlroots based wayland compositors.",
        "url": "https://github.com/GhostNaN/mpvpaper",
        "language": "C",
        "stars": 1114,
        "forks": 37,
        "created_at": "2020-08-01T23:53:44Z",
        "updated_at": "2025-08-28T09:44:21Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-05-10T02:25:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/721293dbcc7ff61a2147363504841751b30474d2002ee2110262fdbf682fa86b/GhostNaN/mpvpaper"
        ],
        "homepage": "",
        "readme_summary": "mpvpaper is a wallpaper program designed for wlroots-based Wayland compositors, enabling users to play videos as their desktop background. It leverages mpv for video playback and offers functionalities such as forwarding mpv options and control through keyboard bindings or an mpv input-ipc-server, providing a dynamic and customizable wallpaper experience.",
        "key_features": [
            "Plays videos as wallpaper on wlroots-based Wayland compositors",
            "Supports mpv options forwarding",
            "Allows control via keyboard bindings or mpv input-ipc-server"
        ],
        "primary_use_case": "Setting videos as wallpaper on Wayland compositors.",
        "open_issues": 16,
        "cover_image_prompt": "A skilled artisan meticulously crafting a vibrant video tapestry onto a grand, ornate wall using a digital loom. The loom weaves together strands of video footage, sourced from various online streams and local files, seamlessly integrating them into the wall's surface. The wall glows with the dynamic display, transforming the room into a mesmerizing cinematic experience. Subtle UI elements float around the loom, showcasing playback controls and video settings. The scene is set in a modern, minimalist studio with soft, ambient lighting. The image should be in a digital painting style with clean lines and a vibrant color scheme."
    },
    {
        "id": 221912385,
        "name": "nemu",
        "description": "Ncurses UI for QEMU",
        "url": "https://github.com/nemuTUI/nemu",
        "language": "C",
        "stars": 442,
        "forks": 27,
        "created_at": "2019-11-15T11:40:27Z",
        "updated_at": "2025-08-28T09:52:16Z",
        "topics": [
            "ncurses-ui",
            "qemu",
            "tui"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-07T17:31:55Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/221912385/fa1f0280-07b6-11ea-895d-178b16c42c41"
        ],
        "homepage": "",
        "readme_summary": "nEMU is a terminal-based user interface for managing QEMU virtual machines. It provides a curses-based interface to perform common VM operations such as installing, deleting, starting, stopping, and configuring VMs. It supports features like snapshots, USB, networking, VirtFS, OVA import, and remote control via D-Bus.",
        "key_features": [
            "Install/delete/clone/rename VM",
            "Show VM status, CPU usage",
            "Start/stop/shutdown/reset VM",
            "Connect to VM via VNC or SPICE protocol",
            "Full VM snapshots",
            "Show/Edit VM settings",
            "USB support",
            "Network via tap/macvtap interfaces",
            "VirtFS support",
            "Import OVA",
            "D-Bus support",
            "Remote control API"
        ],
        "primary_use_case": "Ncurses-based terminal UI management of QEMU virtual machines.",
        "open_issues": 20,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra of virtual machines. The conductor, representing nEMU, stands before a large screen displaying various VM settings and statuses, using a baton to control the start, stop, and configuration of each VM. Behind the conductor, the orchestra members (VMs) play in harmony, each representing a different operating system or application. Subtle UI elements float around the conductor, showing ncurses-style controls and QEMU commands. The scene is bathed in soft, focused lighting, creating a sense of control and orchestration. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 820087727,
        "name": "onlook",
        "description": "The Cursor for Designers • An Open-Source AI-First Design tool • Visually build, style, and edit your React App with AI",
        "url": "https://github.com/onlook-dev/onlook",
        "language": "TypeScript",
        "stars": 21951,
        "forks": 1518,
        "created_at": "2024-06-25T19:16:02Z",
        "updated_at": "2025-08-28T09:49:13Z",
        "topics": [
            "ai",
            "cursor",
            "cursor-ai",
            "design",
            "design-to-code",
            "drizzle",
            "editor",
            "figma",
            "frontend",
            "ide",
            "low-code",
            "nextjs",
            "react",
            "supabase",
            "tailwindcss",
            "typescript",
            "ui",
            "vibe-coding",
            "vibecoding"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-08-27T17:58:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/37da6e3c4eac2e31f5299075d6b2ffc553676e390ae1099b08d184c92b426559/onlook-dev/onlook"
        ],
        "homepage": "https://onlook.com",
        "readme_summary": "Onlook is an open-source, visual-first code editor designed for building websites, prototypes, and designs with AI in Next.js and Tailwind CSS. It allows users to make edits directly in the browser DOM with a visual editor, offering a design-in-realtime experience with code and serving as an open-source alternative to tools like Bolt.new and Webflow.",
        "key_features": [
            "Visual editing of React apps",
            "AI-powered design suggestions",
            "Real-time code editor",
            "Next.js and Tailwind CSS support",
            "Rapid prototyping and deployment"
        ],
        "primary_use_case": "Visually building, styling, and editing React applications with AI assistance.",
        "open_issues": 274,
        "cover_image_prompt": "An architect using an AI-powered design tool to visually construct a modern building from React components. The architect stands before a large screen displaying a browser DOM, dragging and dropping UI elements onto the building's structure. The AI tool suggests code snippets and styling options in real-time, displayed as glowing particles around the screen. The building seamlessly integrates with a Next.js backend, visualized as a network of interconnected servers. The scene is set in a bright, airy design studio with a clean, minimalist aesthetic. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1012154922,
        "name": "openrouter-bot",
        "description": "This project allows to launch your Telegram bot in a few minutes to communicate with free or paid AI models via OpenRouter.",
        "url": "https://github.com/Lifailon/openrouter-bot",
        "language": "Go",
        "stars": 29,
        "forks": 6,
        "created_at": "2025-07-01T22:49:32Z",
        "updated_at": "2025-08-28T09:20:55Z",
        "topics": [
            "ai",
            "ai-integration",
            "chat-bot",
            "go",
            "gpt",
            "llm",
            "llm-inference",
            "openrouter",
            "telegrambot"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-08-21T08:04:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fe99c0abc99e2192056bd64fd939c8c549cc05e35a232cf9d5b2d0bc78a07154/Lifailon/openrouter-bot"
        ],
        "homepage": "https://hub.docker.com/r/lifailon/openrouter-bot",
        "readme_summary": "The openrouter-bot repository provides a way to quickly deploy a Telegram bot that can communicate with various AI models via the OpenRouter API or local setups like LM Studio. It supports features like model switching and Markdown formatting, offering a streamlined experience for interacting with AI models through Telegram. The project also optimizes the container startup process for faster deployment.",
        "key_features": [
            "Telegram bot integration",
            "Communication with free and paid AI models via OpenRouter",
            "Support for local LLMs (e.g., via LM Studio)",
            "Model switching",
            "Markdown formatting in bot responses",
            "Optimized container startup process"
        ],
        "primary_use_case": "Launching a Telegram bot to interact with AI models through OpenRouter or local LLMs.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a diligent messenger bird, representing the Telegram bot, perched atop a digital switchboard, expertly routing messages between various AI brains depicted as glowing orbs, each labeled with AI model names like 'GPT-4' and 'DeepSeek'. The bird carries scrolls containing user queries, delivering them to the appropriate AI orb, which then illuminates and sends back a response scroll. The switchboard is subtly integrated with UI elements and code snippets. The scene is set in a bright, futuristic workshop with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1010271930,
        "name": "drinfo",
        "description": "A Linux CLI tool for physical and network drive information",
        "url": "https://github.com/Lennart1978/drinfo",
        "language": "C",
        "stars": 29,
        "forks": 1,
        "created_at": "2025-06-28T18:03:37Z",
        "updated_at": "2025-08-28T06:03:48Z",
        "topics": [
            "cli-app",
            "drive",
            "linux",
            "system-programming"
        ],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-07-12T18:27:22Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1010271930/d9712d60-c6fe-427d-b01d-69efe20d8016"
        ],
        "homepage": "",
        "readme_summary": "Drinfo is a Linux command-line tool designed to monitor disk usage. It provides detailed information about physical and network drives, including cloud drives, presenting the data with colorful progress bars and human-readable sizes. The tool adapts to terminal width and displays mount point, filesystem type, device path, UUID, label, mount options, used space, available space, inodes, and SMART status.",
        "key_features": [
            "Physical Drive, Network (cloud) Drive Detection",
            "Colorful Progress Bars",
            "Human-Readable Sizes",
            "Terminal Responsive",
            "Detailed Information (mount point, filesystem type, device path, UUID, label, mount options, used, available, inodes, SMART status)"
        ],
        "primary_use_case": "Monitoring disk usage on Linux systems.",
        "open_issues": 0,
        "cover_image_prompt": "A doctor, stethoscope in hand, examines a patient whose torso is a server rack with glowing drives. The stethoscope's end displays a small UI showing disk usage statistics with colorful progress bars. The patient's face is a monitor displaying system information. Digital particles flow from the drives to the stethoscope, representing data being analyzed. The scene is set in a clean, modern clinic with soft, diffused lighting. Small code snippets related to disk monitoring are subtly displayed on the walls. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1002125012,
        "name": "vibe-kanban",
        "description": "Kanban board to manage your AI coding agents",
        "url": "https://github.com/BloopAI/vibe-kanban",
        "language": "Rust",
        "stars": 4118,
        "forks": 380,
        "created_at": "2025-06-14T19:10:21Z",
        "updated_at": "2025-08-28T10:00:15Z",
        "topics": [
            "agent",
            "ai-agents",
            "kanban",
            "management",
            "task-manager"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-28T08:43:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cc98688a2aaf8f6af5d7c6db7b30ec90171f1bf6117082244c030e185bfb7564/BloopAI/vibe-kanban"
        ],
        "homepage": "https://www.vibekanban.com/",
        "readme_summary": "Vibe Kanban is a Kanban board designed to manage AI coding agents. It allows users to easily switch between agents, orchestrate their execution, review their work, track task status, and centralize configuration. The primary use case is to streamline the software development process by effectively managing AI-powered coding assistance.",
        "key_features": [
            "Switching between different coding agents",
            "Orchestrating execution of multiple coding agents in parallel or sequence",
            "Reviewing work and starting dev servers",
            "Tracking task status",
            "Centralizing configuration of coding agent MCP configs"
        ],
        "primary_use_case": "Managing and orchestrating AI coding agents to streamline software development.",
        "open_issues": 31,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of AI coding agents, each represented by a unique instrument. The conductor, with a kanban board as their sheet music, guides the agents to seamlessly build a complex software project. Digital threads connect the agents to the kanban board, visualizing task assignments and progress. Small screens display snippets of code and agent configurations. The scene is set in a modern, collaborative workspace with soft, focused lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    }
]