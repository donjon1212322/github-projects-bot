[
    {
        "id": 409737972,
        "name": "Gitnuro",
        "description": "A FOSS Git multiplatform client for newbies and pros",
        "url": "https://github.com/JetpackDuba/Gitnuro",
        "language": "Kotlin",
        "stars": 1440,
        "forks": 75,
        "created_at": "2021-09-23T20:41:02Z",
        "updated_at": "2025-10-11T10:05:30Z",
        "topics": [
            "compose-multiplatform",
            "git",
            "jetbrains-compose",
            "jgit",
            "kotlin",
            "multiplatform",
            "rust"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-28T14:31:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/df63aa014927e2c2c2db6fbb2ed79bd0182b5b530bc4049203dba1edc7b011b1/JetpackDuba/Gitnuro"
        ],
        "homepage": "https://gitnuro.com/",
        "readme_summary": "Gitnuro is a free and open-source, multiplatform Git client built with Jetbrains Compose and JGit. It aims to provide a constraint-free Git client, not relying on web technologies, with features for both beginners and advanced users, including diff viewing, history browsing, staging, committing, branching, merging, and more.",
        "key_features": [
            "View diffs for text based files",
            "View history log and branches",
            "Add (stage) & reset (unstage) files",
            "Stage & unstage of hunks",
            "Checkout files",
            "Clone",
            "Commit",
            "Reset commits",
            "Revert commits",
            "Amend previous commit",
            "Merge",
            "Rebase",
            "Create and delete branches locally",
            "Create and delete tags locally",
            "View remote branches",
            "Pull and push",
            "Stash and pop stash",
            "Checkout a commit (detached HEAD)",
            "View changes/diff in images",
            "Force push",
            "Remove branches from remote",
            "Manage remotes",
            "Start a new local repository",
            "Search by commit message/author/commit id",
            "Rebase interactive",
            "Blame file",
            "View file history",
            "Theming",
            "Side by side diff in text files",
            "Stage/Unstage specific lines",
            "Submodules support",
            "Change the tracking of a specific branch"
        ],
        "primary_use_case": "Providing a multiplatform Git client for managing Git repositories without relying on web technologies.",
        "open_issues": 81,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a complex origami swan from a crumpled Git commit log. The swan represents the organized and refined state of the code after using Gitnuro. The artisan's hands are subtly glowing with digital energy as they fold the log, with small UI elements from Gitnuro floating around them like helpful spirits. The scene is set in a clean, modern workshop with soft, diffused lighting. The origami swan is pristine white, contrasting with the colorful, chaotic commit log. The image should be in a 3D isometric illustration style with rich details and a calming color scheme."
    },
    {
        "id": 601185172,
        "name": "telegram_media_downloader",
        "description": "基于Dineshkarthik的项目， 电报视频下载，电报资源下载，跨平台，支持web查看下载进度 ，支持bot下发指令下载，支持下载已经加入的私有群但是限制下载的资源， telegram media download,Download media files from a telegram conversation/chat/channel up to 2GiB per file",
        "url": "https://github.com/tangyoha/telegram_media_downloader",
        "language": "JavaScript",
        "stars": 4121,
        "forks": 465,
        "created_at": "2023-02-13T14:45:39Z",
        "updated_at": "2025-10-11T09:37:09Z",
        "topics": [
            "cosplatfrom",
            "cross-platform",
            "downloader",
            "flask",
            "media-downloader",
            "telegram-bot"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-07-15T01:18:33Z",
        "media_urls": [
            "https://opengraph.githubassets.com/76b22545d29e55ef6b02482e81072f2a4f5f572110f8b312c4d9c3cd442e96c6/tangyoha/telegram_media_downloader"
        ],
        "homepage": "",
        "readme_summary": "The Telegram Media Downloader is a tool for downloading media files (up to 2GiB per file) from Telegram conversations, chats, and channels, even from private groups with download restrictions. It supports both a web UI for browsing and downloading, and a Telegram bot interface for issuing download commands.",
        "key_features": [
            "Downloads media files from Telegram",
            "Supports web UI for browsing and downloading",
            "Supports Telegram bot interface for issuing commands",
            "Works with private groups with download restrictions",
            "Cross-platform support",
            "Supports audio, document, photo, video, video_note, voice media types"
        ],
        "primary_use_case": "Downloading media files from Telegram chats, channels, and groups, including those with download restrictions, using either a web interface or a Telegram bot.",
        "open_issues": 79,
        "cover_image_prompt": "A skilled librarian meticulously cataloging digital scrolls flowing from a glowing Telegram portal into labeled shelves representing different media types (audio, video, documents). The librarian uses a magnifying glass that subtly displays the repository's name. Small UI elements float around the scene, showing download progress and file information. The setting is a futuristic library with soft, ambient lighting. The color scheme is primarily blue and white with accents of green and yellow. The image should be in a 3D isometric illustration style with clean lines and a focus on clarity."
    },
    {
        "id": 979886407,
        "name": "mcp-context-forge",
        "description": "A Model Context Protocol (MCP) Gateway & Registry. Serves as a central management point for tools, resources, and prompts that can be accessed by MCP-compatible LLM applications. Converts REST API endpoints to MCP, composes virtual MCP servers with added security and observability, and converts between protocols (stdio, SSE, Streamable HTTP).",
        "url": "https://github.com/IBM/mcp-context-forge",
        "language": "Python",
        "stars": 2647,
        "forks": 332,
        "created_at": "2025-05-08T08:16:59Z",
        "updated_at": "2025-10-11T09:19:39Z",
        "topics": [
            "agents",
            "ai",
            "api-gateway",
            "asyncio",
            "authentication-middleware",
            "devops",
            "docker",
            "fastapi",
            "federation",
            "gateway",
            "generative-ai",
            "jwt",
            "kubernetes",
            "llm-agents",
            "mcp",
            "model-context-protocol",
            "observability",
            "prompt-engineering",
            "python",
            "tools"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-10-11T08:13:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5a8531a136eed8b6e884744c650a472775fe726ccbdcf21f9aa42b6eb6a108cc/IBM/mcp-context-forge"
        ],
        "homepage": "https://ibm.github.io/mcp-context-forge/",
        "readme_summary": "The MCP Gateway is a gateway, proxy, and registry for the Model Context Protocol (MCP). It unifies REST, MCP, and A2A services, providing features like federation, security, observability, and multi-transport protocol support for AI clients. It can be deployed via PyPI or Docker and scales to multi-cluster Kubernetes environments.",
        "key_features": [
            "REST to MCP conversion",
            "Federation of MCP and REST services",
            "Virtual server composition",
            "Security (authentication, rate-limiting)",
            "Observability",
            "Multi-transport protocol support (stdio, SSE, Streamable HTTP)",
            "Admin UI (optional)",
            "Docker and Kubernetes deployment"
        ],
        "primary_use_case": "Central management and access point for tools, resources, and prompts used by MCP-compatible LLM applications.",
        "open_issues": 198,
        "cover_image_prompt": "A skilled architect overseeing the construction of a grand gateway that connects various pathways, each representing different services (REST, MCP, A2A). The architect holds a blueprint displaying the gateway's unified structure, ensuring smooth traffic flow and secure access. Glowing digital particles represent data packets moving through the gateway, with small UI elements showing security protocols and monitoring dashboards. The scene is set in a bright, futuristic cityscape with a focus on connectivity and efficiency. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 920603619,
        "name": "verifiers",
        "description": "Environments for LLM Reinforcement Learning",
        "url": "https://github.com/PrimeIntellect-ai/verifiers",
        "language": "Python",
        "stars": 3277,
        "forks": 386,
        "created_at": "2025-01-22T12:58:34Z",
        "updated_at": "2025-10-11T09:04:55Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-10-11T06:52:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a1c147efcfd6d3b5955a697fba198d5b0e27086459cd6f634285b1644c9dd34a/PrimeIntellect-ai/verifiers"
        ],
        "homepage": "",
        "readme_summary": "The repository provides a library of modular components for creating Reinforcement Learning (RL) environments and training Large Language Model (LLM) agents. These environments can be used for LLM evaluations, synthetic data pipelines, or agent harnesses, and support various RL frameworks and training paradigms.",
        "key_features": [
            "Modular components for creating RL environments",
            "LLM agent training",
            "Async GRPO implementation",
            "Integration with prime-rl for large-scale FSDP training",
            "OpenAI-compatible inference client support"
        ],
        "primary_use_case": "Creating and utilizing RL environments for training and evaluating LLM agents.",
        "open_issues": 48,
        "cover_image_prompt": "A gardener tending to a garden of blossoming language models, each representing a different LLM. The gardener uses specialized tools (representing the 'Verifiers' library) to prune, shape, and nurture the models, ensuring they grow strong and healthy. The garden is filled with glowing data streams and small UI elements showing model performance metrics. The scene is set in a bright, futuristic greenhouse with sunlight streaming through the glass. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and clear outlines."
    },
    {
        "id": 912164685,
        "name": "clearcam",
        "description": "Add object detection, tracking, and mobile notifications to any RTSP Camera or iPhone.",
        "url": "https://github.com/roryclear/clearcam",
        "language": "Python",
        "stars": 466,
        "forks": 13,
        "created_at": "2025-01-04T19:32:55Z",
        "updated_at": "2025-10-11T08:10:44Z",
        "topics": [
            "ai",
            "ipcamera",
            "machine-learning",
            "nvr",
            "object-detection",
            "rtsp-server",
            "selfhosted",
            "tinygrad",
            "yolov8"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-10-11T00:29:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dd67a804b88235f0822cf7df0cddcdd472d92f878388b7b33bcb675b9bd4c738/roryclear/clearcam"
        ],
        "homepage": "https://apps.apple.com/app/clearcam/id6743237694",
        "readme_summary": "Clearcam turns RTSP-enabled cameras or old iPhones into AI security cameras with object detection, tracking, and mobile notifications. It allows users to self-host a network video recorder (NVR) with inference capabilities, view live camera feeds remotely, receive notifications on detected events, and view event clips with end-to-end encryption.",
        "key_features": [
            "Object detection",
            "Object tracking",
            "Mobile notifications",
            "RTSP camera support",
            "iPhone support",
            "Self-hosted NVR",
            "Remote viewing of live feeds",
            "Event clip viewing",
            "End-to-end encryption"
        ],
        "primary_use_case": "AI-powered security camera system using RTSP cameras or iPhones with object detection and remote monitoring.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a diligent robot butler standing in a high-tech home, attentively monitoring multiple security camera feeds displayed on a holographic screen. The butler identifies a potential intruder (represented by a cartoonish burglar) and sends a notification to the homeowner's phone, which glows with an alert. Small UI elements on the holographic screen show object detection bounding boxes and tracking data. The scene is set in a brightly lit, modern living room. Subtle digital particles flow around the robot, representing data streams. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 1025300166,
        "name": "how-to-build-a-coding-agent",
        "description": "A workshop that teaches you how to build your own coding agent. Similar to Roo code, Cline, Amp, Cursor, Windsurf or OpenCode.",
        "url": "https://github.com/ghuntley/how-to-build-a-coding-agent",
        "language": "Go",
        "stars": 3692,
        "forks": 410,
        "created_at": "2025-07-24T03:56:29Z",
        "updated_at": "2025-10-11T08:55:26Z",
        "topics": [
            "agent",
            "ai",
            "cursor",
            "tutorial",
            "workshop"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-27T09:54:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1b7953504c166c92dbbcdb6e0b92d50914965fc94edf97fff2bddc3fecd61d5d/ghuntley/how-to-build-a-coding-agent"
        ],
        "homepage": "https://ghuntley.com/agent/",
        "readme_summary": "This repository provides a step-by-step workshop for building an AI-powered coding assistant using Go. The workshop guides users through creating a chatbot and adding tools for file reading, command execution, code searching, and more, ultimately resulting in a local developer assistant.",
        "key_features": [
            "Connect to the Anthropic Claude API",
            "Build a simple AI chatbot",
            "Add tools for reading files, editing code, and running commands",
            "Handle tool requests and errors",
            "Build an agent that gets smarter with each step"
        ],
        "primary_use_case": "Building a local AI-powered coding assistant.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled architect stands before a complex blueprint, directing a team of robots that are constructing a digital skyscraper. The architect uses a tablet to send commands, which the robots execute to build the software structure. Each robot specializes in a different task: reading files, running commands, editing code, and searching for specific components. The blueprint glows with digital information, subtly displaying code snippets and file paths. The scene is set in a futuristic workshop with bright, focused lighting. The image should be in 3D isometric illustration style with clean lines and clear details, using a blue and orange color scheme."
    },
    {
        "id": 1043194037,
        "name": "lunar-test-v1",
        "description": "(OLD) LunarEngine – Open-source Luau 3D engine (API-compatible)",
        "url": "https://github.com/lunarengine/lunar-test-v1",
        "language": "C++",
        "stars": 506,
        "forks": 32,
        "created_at": "2025-08-23T10:35:44Z",
        "updated_at": "2025-10-11T00:54:43Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-09-07T23:42:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/71a175eb568887786d273078e04f3e3c2a23eb6e6201481029eb2d3f84973659/lunarengine/lunar-test-v1"
        ],
        "homepage": "",
        "readme_summary": "LunarEngine is an open-source 3D game engine powered by Luau, designed to be API-compatible with popular sandbox engines. It allows developers to build immersive experiences with a familiar interface while maintaining complete ownership of their platform, offering a subset of its planned API in the demo stage.",
        "key_features": [
            "Basic scene rendering (lighting, shadows, ambient, skybox)",
            "Standard data types (CFrame, Vector3, Color3, Random)",
            "Instance System (Parent, Destroy, Clone)",
            "Part support (Color, Transparency, Size, Position, CFrame)",
            "Client-sided services (Workspace, RunService, Lighting)",
            "Luau script support (Hyperball task scheduler, RTScriptSignal, Coroutines, Scripts, LocalScripts, task.spawn, task.wait, task.delay)",
            "Window handling and fullscreen optimization"
        ],
        "primary_use_case": "Developing 3D games and interactive experiences using Luau scripting language.",
        "open_issues": 4,
        "cover_image_prompt": "A skilled artisan meticulously crafting a miniature 3D world inside a glowing lunar globe. The artisan uses Luau code snippets as raw materials, shaping them with digital tools. The globe displays a vibrant game scene with parts, lighting, and dynamic elements. UI elements float around the globe, showing service connections and script execution. The scene is set in a futuristic workshop with soft, ethereal lighting. Small screens display code and engine parameters. The composition is focused and clean with a blue and purple color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]