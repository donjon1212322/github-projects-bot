[
    {
        "id": 958228271,
        "name": "WattWise",
        "description": "System Power Monitoring using Smart Plugs from the Terminal",
        "url": "https://github.com/naveenkul/WattWise",
        "language": "Python",
        "stars": 119,
        "forks": 5,
        "created_at": "2025-03-31T21:17:25Z",
        "updated_at": "2025-04-04T10:11:18Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T22:25:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9387081a5c051b13a1d96b6b0008b8760a1fa87ab6684febd7c4416234f9e3ed/naveenkul/WattWise"
        ],
        "homepage": null,
        "readme_summary": "WattWise is a command-line tool for monitoring power usage from smart plugs. It supports direct connection to TP-Link Kasa plugs or integration with Home Assistant, providing real-time power data with color-coded displays and historical charts. The tool offers a simple interface for monitoring wattage and current, making it easy to track energy consumption.",
        "key_features": [
            "Real-time power usage monitoring (wattage and current)",
            "Multiple connection options (TP-Link Kasa, Home Assistant)",
            "Dynamic color-coded power display",
            "Continuous monitoring with charts and historical data",
            "Simple command-line interface"
        ],
        "primary_use_case": "Monitoring power usage from smart plugs in real-time via the command line.",
        "open_issues": 0,
        "cover_image_prompt": "A diligent electrician meticulously monitors the power consumption of a miniature city using a sophisticated control panel. The city's buildings are powered by tiny smart plugs, each emitting a color-coded glow (green, yellow, red) indicating its energy usage. The electrician adjusts dials and observes real-time power data displayed on a sleek, modern interface integrated into the panel. A subtle chart visualizing historical power consumption is projected as a hologram above the city. The scene is set in a brightly lit, futuristic monitoring station. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity and detail."
    },
    {
        "id": 832458987,
        "name": "ImageIndexer",
        "description": "Creates an index of images, queries a local LLM and adds tags to the image metadata",
        "url": "https://github.com/jabberjabberjabber/ImageIndexer",
        "language": "Python",
        "stars": 154,
        "forks": 7,
        "created_at": "2024-07-23T04:28:14Z",
        "updated_at": "2025-04-04T07:28:31Z",
        "topics": [
            "ai",
            "dataset-generation",
            "exif-metadata",
            "exiftool",
            "image-classification",
            "image-processing",
            "image-recognition",
            "keywords",
            "koboldcpp",
            "large-language-models",
            "llamacpp",
            "local",
            "multimodal",
            "tags"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T01:11:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ab3afc688d90c0036c252fa2f4a965fd3c2b79cd9e9ae996cb5d4da07a9ae2e3/jabberjabberjabber/ImageIndexer"
        ],
        "homepage": "",
        "readme_summary": "The ImageIndexer repository provides a tool for automatically tagging images with metadata using a local AI model. It analyzes images, generates keywords and captions, and writes this information to the image's metadata. This allows users to index, search, and organize their images locally without relying on external services.",
        "key_features": [
            "Image Analysis using a local AI model",
            "Automatic metadata tagging",
            "Local processing",
            "Multi-format support",
            "User-friendly GUI",
            "Simple model selection and automatic backend configuration",
            "GPU acceleration",
            "Cross-platform support",
            "Stop and start capability",
            "Configurable processing steps"
        ],
        "primary_use_case": "To automatically generate and add metadata tags (keywords and descriptions) to images using a local AI model, enabling local indexing, searching, and organization of images without relying on cloud services or databases.",
        "open_issues": 0,
        "cover_image_prompt": "A librarian meticulously cataloging images in a vast, digital library. The librarian uses a magical monocle that reveals keywords and descriptions, which are then inscribed onto glowing metadata tags attached to each image. The library is filled with towering stacks of images, each emitting a soft, internal light. Small UI elements float around the librarian, showing the image analysis process and metadata editing. The scene is set in a futuristic library with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 98595746,
        "name": "Sickle",
        "description": "Payload development framework",
        "url": "https://github.com/wetw0rk/Sickle",
        "language": "Python",
        "stars": 724,
        "forks": 109,
        "created_at": "2017-07-28T01:46:40Z",
        "updated_at": "2025-04-04T08:06:46Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T21:17:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/36e52f40d3011330323a20213bda9877edd112986d8124ccd6659818d81580e4/wetw0rk/Sickle"
        ],
        "homepage": "",
        "readme_summary": "Sickle is a payload development framework designed to assist in developing and understanding shellcode. It offers features such as assembly to machine code conversion, shellcode execution, opcode formatting, bad character identification, disassembly, and diffing. The framework supports shellcode generation via the Keystone Engine and aims to simplify the process of testing and analyzing shellcode.",
        "key_features": [
            "Assembly to machine code conversion",
            "Bytecode execution",
            "Opcode formatting",
            "Bad character identification",
            "Linear disassembly",
            "Diffing",
            "Shellcode generation (Keystone Engine)",
            "Shellcode extraction"
        ],
        "primary_use_case": "Payload development and shellcode analysis.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled blacksmith meticulously forging shellcode on an anvil, sparks of assembly instructions flying as the hammer strikes. The blacksmith uses various tools representing different modules: a file for formatting, calipers for diffing, and a crucible for execution. A holographic display shows disassembled code floating nearby, while a magnifying glass reveals bad characters highlighted in the metal. The scene is set in a high-tech forge with glowing runes etched into the anvil. Small UI elements display the Sickle logo and module names. The image should be in 3D isometric illustration style with detailed textures and vibrant colors."
    },
    {
        "id": 887984411,
        "name": "DCOMUploadExec",
        "description": "DCOM Lateral movement POC abusing the IMsiServer interface - uploads and executes a payload remotely ",
        "url": "https://github.com/deepinstinct/DCOMUploadExec",
        "language": "C++",
        "stars": 355,
        "forks": 52,
        "created_at": "2024-11-13T16:05:29Z",
        "updated_at": "2025-04-04T03:32:54Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2024-12-13T14:02:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8f4d274efb8cdb70173826daa7e4691ca5ae0d3f2dbf0344a1879528871e2249/deepinstinct/DCOMUploadExec"
        ],
        "homepage": null,
        "readme_summary": "The DCOMUploadExec repository provides a proof-of-concept tool for lateral movement by abusing the DCOM IMsiServer interface. It allows uploading and executing a .NET assembly payload on a remote machine. The tool requires a strong-named assembly and configuration of payload details in PayloadConfig.h.",
        "key_features": [
            "Lateral movement via DCOM",
            "Remote payload upload and execution",
            "Abuse of IMsiServer interface",
            "Payload configuration via PayloadConfig.h",
            "Supports strong-named .NET assemblies"
        ],
        "primary_use_case": "Lateral movement and remote code execution in Windows environments by exploiting the DCOM IMsiServer interface.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled locksmith, representing the DCOMUploadExec tool, picks the lock of a heavily fortified server room door, symbolizing a remote computer. The locksmith holds a USB drive containing a glowing .NET assembly payload. Inside the server room, a miniature factory is producing message boxes, representing the execution of the payload. Subtle UI elements float in the air, displaying code snippets and assembly details. The scene is set in a dimly lit, high-tech server room with blue and purple hues. The image should be in a 3D isometric illustration style with sharp details and a focus on clarity."
    },
    {
        "id": 43695474,
        "name": "quasar",
        "description": "Quasar Framework - Build high-performance VueJS user interfaces in record time",
        "url": "https://github.com/quasarframework/quasar",
        "language": "JavaScript",
        "stars": 26427,
        "forks": 3587,
        "created_at": "2015-10-05T15:45:36Z",
        "updated_at": "2025-04-04T07:04:18Z",
        "topics": [
            "android",
            "browser-extension",
            "electron",
            "ios",
            "javascript",
            "material",
            "material-components",
            "material-design",
            "material-theme",
            "pwa",
            "quasar-framework",
            "server-side-rendering",
            "ssr",
            "vue",
            "vue-component",
            "vue-components",
            "vue3",
            "vuejs",
            "vuejs3"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-25T08:08:06Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0dd014f69271374c25f419ad9da7a4c74a24f5e97d856d04dd9d6084c2b6f2d7/quasarframework/quasar"
        ],
        "homepage": "https://quasar.dev",
        "readme_summary": "Quasar Framework enables developers to rapidly build high-performance VueJS user interfaces that can be deployed across various platforms, including web, mobile, and desktop. It supports SPAs, SSR apps, PWAs, browser extensions, and hybrid mobile/Electron applications, all from a single codebase. This allows for efficient development and maintenance of cross-platform applications.",
        "key_features": [
            "Build responsive Single Page Apps (SPAs)",
            "Server-Side Rendered (SSR) Apps",
            "Progressive Web Apps (PWAs)",
            "Browser extensions",
            "Hybrid Mobile Apps",
            "Electron Apps",
            "Single codebase for all platforms",
            "VueJS user interfaces"
        ],
        "primary_use_case": "Building high-performance VueJS user interfaces for multiple platforms (web, mobile, desktop) from a single codebase.",
        "open_issues": 526,
        "cover_image_prompt": "A skilled architect at a digital drafting table, effortlessly constructing a multi-platform building from a single blueprint. The blueprint glows with VueJS code, transforming into a structure capable of housing mobile apps, web applications, and desktop programs simultaneously. Small screens display live previews of the building running on different devices. The scene is set in a brightly lit, futuristic design studio with a clean, minimalist aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 597179753,
        "name": "MinerSearch",
        "description": "Program designed for search and kill silent miners",
        "url": "https://github.com/BlendLog/MinerSearch",
        "language": "C#",
        "stars": 311,
        "forks": 18,
        "created_at": "2023-02-03T20:01:57Z",
        "updated_at": "2025-04-04T08:59:30Z",
        "topics": [],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T18:24:13Z",
        "media_urls": [
            "https://opengraph.githubassets.com/289261f1fda03081d54ecf0f51ffd007c968a8c602af568832999c3ff5eebd83/BlendLog/MinerSearch"
        ],
        "homepage": "",
        "readme_summary": "MinerSearch is a C# program designed to detect and eliminate hidden cryptocurrency miners on Windows systems. It functions as an auxiliary tool, scanning for suspicious files, processes, and registry entries associated with mining malware. The program offers various command-line options for customized scans and includes features for blocking malicious services and scheduled tasks, as well as removing miners with valid signatures.",
        "key_features": [
            "Detects and removes hidden miners",
            "Scans for suspicious files, directories, and processes",
            "Blocks malicious service files and scheduled tasks",
            "Removes miners with valid signatures",
            "Improved registry debugger handling",
            "Offline signature database updates",
            "Command-line options for silent mode, full scans, and system privileges",
            "Handles Windows Defender blocking",
            "Removes malicious scheduled tasks and scripts"
        ],
        "primary_use_case": "Searching for and removing hidden cryptocurrency miners from a Windows system.",
        "open_issues": 0,
        "cover_image_prompt": "A detective meticulously examining a computer system, represented as a complex network of interconnected pipes and wires. The detective uses a magnifying glass to identify and remove small, shadowy figures (representing miners) that are siphoning resources from the system. The detective's tools include a digital scanner displaying code snippets and a quarantine chamber for the removed miners. The scene is set in a dimly lit server room with flickering lights, creating a sense of urgency and vigilance. The image should be in a digital painting style with sharp details and a dark, contrasting color scheme, emphasizing the detective's focus and the hidden nature of the miners."
    },
    {
        "id": 112235591,
        "name": "hacker101",
        "description": "Source code for Hacker101.com - a free online web and mobile security class.",
        "url": "https://github.com/Hacker0x01/hacker101",
        "language": "SCSS",
        "stars": 14011,
        "forks": 2580,
        "created_at": "2017-11-27T18:57:00Z",
        "updated_at": "2025-04-04T07:24:52Z",
        "topics": [
            "clickjacking",
            "csrf",
            "education",
            "hacker101",
            "hackerone",
            "hacking",
            "mobile-security",
            "security",
            "session-fixation",
            "sql-injection",
            "unchecked-redirects",
            "vulnerability",
            "web-security",
            "xss"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-02-22T06:59:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cf81efaf1071f8353c5a3fb140d226df2ed2c397615de90dc7402201cd3f8a87/Hacker0x01/hacker101"
        ],
        "homepage": "https://www.hacker101.com",
        "readme_summary": "Hacker101 is a free online web security class designed for programmers and security professionals. It provides a learning environment to understand and practice web and mobile security concepts, including common vulnerabilities like XSS, SQL injection, and CSRF. The repository contains the source code for the Hacker101 website.",
        "key_features": [
            "Free web security class",
            "Teaches web and mobile security",
            "Provides hands-on hacking experience"
        ],
        "primary_use_case": "Learning web and mobile security concepts and techniques.",
        "open_issues": 3,
        "cover_image_prompt": "A seasoned explorer, equipped with a magnifying glass and a map marked with 'Hacker101', carefully navigates a dense jungle representing the web. The explorer identifies hidden vulnerabilities, symbolized by glowing bugs, on various plants and structures. A small UI element displaying code snippets is subtly embedded in the explorer's backpack. The scene is set in a vibrant, overgrown jungle with dappled sunlight filtering through the canopy. The composition is focused and clear, with a warm color scheme. The image should be in a digital painting style with clean lines and clear details."
    }
]