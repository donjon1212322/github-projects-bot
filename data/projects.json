[
    {
        "id": 244377430,
        "name": "oha",
        "description": "Ohayou(„Åä„ÅØ„Çà„ÅÜ), HTTP load generator, inspired by rakyll/hey with tui animation.",
        "url": "https://github.com/hatoo/oha",
        "language": "Rust",
        "stars": 8206,
        "forks": 232,
        "created_at": "2020-03-02T13:26:35Z",
        "updated_at": "2025-05-10T09:26:05Z",
        "topics": [
            "benchmark",
            "cli",
            "command-line",
            "http",
            "http2",
            "load-generator",
            "load-testing",
            "rust",
            "tui"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T06:58:28Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/244377430/83c53cd7-4b03-4398-872e-66d17da051f6"
        ],
        "homepage": "",
        "readme_summary": "Oha is a command-line HTTP load generator written in Rust, inspired by `rakyll/hey`. It provides a real-time terminal user interface (TUI) to visualize the load testing process. Oha supports HTTP/1.1 and HTTP/2 protocols, and can be configured to use either native-tls or rustls for TLS.",
        "key_features": [
            "HTTP load generation",
            "Real-time TUI animation",
            "Inspired by rakyll/hey",
            "Written in Rust",
            "Powered by tokio and ratatui",
            "Supports HTTP/1.1 and HTTP/2",
            "Supports native-tls and rustls",
            "VSOCK support"
        ],
        "primary_use_case": "HTTP load testing and benchmarking of web applications.",
        "open_issues": 38,
        "cover_image_prompt": "A diligent postal worker, representing 'oha', efficiently delivers numerous letters (HTTP requests) to a grand, illuminated web server building. The worker uses a high-tech mailbag that displays real-time delivery statistics on a small screen. Some letters zoom towards the building with rocket boosters, indicating high concurrency. The scene is set in a vibrant, futuristic cityscape with glowing digital trails following each letter. The repository name, 'oha', is subtly displayed on the mailbag. The illustration is in a 3D isometric style with clean lines and a bright, optimistic color scheme."
    },
    {
        "id": 127029973,
        "name": "iconoir",
        "description": "An open source icons library with 1600+ icons, supporting React, React Native, Flutter, Vue, Figma, and Framer.",
        "url": "https://github.com/iconoir-icons/iconoir",
        "language": "TypeScript",
        "stars": 4025,
        "forks": 172,
        "created_at": "2018-03-27T18:33:08Z",
        "updated_at": "2025-05-10T09:58:39Z",
        "topics": [
            "figma",
            "flutter",
            "framer",
            "icon",
            "icons",
            "react",
            "react-native",
            "svg"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-13T09:53:11Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/127029973/f9aa5415-62ac-4037-9a5d-ed4ca0fd0c72"
        ],
        "homepage": "https://iconoir.com",
        "readme_summary": "Iconoir is an open-source icon library offering over 1600 unique SVG icons designed on a 24x24 grid. It supports popular frameworks and platforms like React, React Native, Flutter, and Vue, and integrates seamlessly with design tools such as Figma and Framer, making it a versatile resource for developers and designers.",
        "key_features": [
            "1600+ open-source SVG icons",
            "Support for React, React Native, Flutter, Vue",
            "Integration with Figma and Framer",
            "Available as NPM package",
            "CSS stylesheet included",
            "Swift Package available"
        ],
        "primary_use_case": "Providing a comprehensive library of open-source icons for use in various software development projects and design tools.",
        "open_issues": 110,
        "cover_image_prompt": "A skilled artisan meticulously crafting icons on a digital loom, weaving threads of code into a tapestry of diverse symbols. The loom displays a UI with various software platforms (React, Vue, Flutter) as selectable outputs. Finished icons float from the loom, radiating a soft glow, ready to be integrated into different applications. Small screens display snippets of code and design files (Figma, Framer) as inspiration. The scene is set in a bright, modern workshop with a clean, focused composition. The image should be in 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 616187681,
        "name": "chatblade",
        "description": "A CLI Swiss Army Knife for ChatGPT",
        "url": "https://github.com/npiv/chatblade",
        "language": "Python",
        "stars": 2604,
        "forks": 92,
        "created_at": "2023-03-19T21:14:16Z",
        "updated_at": "2025-05-10T08:04:40Z",
        "topics": [
            "chatgpt",
            "cli"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2024-10-12T06:51:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4f4a0577c3647f416f32af67c3c0db81e78ae3287163b2dfd9aee0c6b547473a/npiv/chatblade"
        ],
        "homepage": "",
        "readme_summary": "Chatblade is a command-line tool that provides a versatile interface for interacting with OpenAI's ChatGPT. It allows users to pipe input, save prompts, extract specific content from responses, and manage conversations. The tool supports various GPT models and offers different output formatting options, making it a Swiss Army knife for ChatGPT interactions.",
        "key_features": [
            "CLI interface for interacting with ChatGPT",
            "Accepts piped input and arguments",
            "Saves prompt preambles for quick usage",
            "Extracts JSON or Markdown from ChatGPT responses",
            "Supports recalling and continuing previous conversations",
            "Allows switching between different GPT models (3.5, 4, 4o, and custom models)",
            "Interactive chat mode",
            "Streaming responses",
            "Raw and extracted output formatting options"
        ],
        "primary_use_case": "Interacting with OpenAI's ChatGPT from the command line for various tasks, including code generation, data extraction, and general conversation.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled artisan meticulously crafting a Swiss Army knife, each tool representing a different function of Chatblade. The knife rests on a command-line interface, subtly glowing with digital code. The background features a stylized cityscape representing the versatility of ChatGPT. The image should be in a clean, modern digital illustration style with vibrant colors and sharp details."
    },
    {
        "id": 128782492,
        "name": "Wormholy",
        "description": "iOS network debugging, like a wizard üßô‚Äç‚ôÇÔ∏è",
        "url": "https://github.com/pmusolino/Wormholy",
        "language": "Swift",
        "stars": 2486,
        "forks": 200,
        "created_at": "2018-04-09T14:11:55Z",
        "updated_at": "2025-05-10T06:12:29Z",
        "topics": [
            "alamofire",
            "charles",
            "debugger",
            "https",
            "ios",
            "logger",
            "logging",
            "network",
            "nsurlsession"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T13:15:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5ab53994981a6d1601649dd806b8a331022fc470e2181678988606c3cd0530f0/pmusolino/Wormholy"
        ],
        "homepage": "",
        "readme_summary": "Wormholy is an iOS network debugging tool that allows developers to inspect network traffic without writing extra code. It captures all NSURLSession traffic, reveals request and response details, and offers features like host blacklisting, Postman collection export, and request statistics. It is designed to simplify and accelerate the process of finding and fixing network-related bugs in iOS applications.",
        "key_features": [
            "No code/imports required",
            "Records all NSURLSession traffic",
            "Reveals request/response content on shake",
            "Handles HTTPS calls without SSL headaches",
            "Swift & Objective-C compatible",
            "Works with Alamofire & AFNetworking",
            "Host blacklisting",
            "Postman collection export",
            "cURL representation sharing",
            "Programmatic enable/disable",
            "Shake gesture control",
            "Response filtering by status code",
            "Request statistics"
        ],
        "primary_use_case": "Debugging iOS network calls",
        "open_issues": 13,
        "cover_image_prompt": "Imagine a skilled detective, magnifying glass in hand, meticulously examining network cables that snake through a futuristic cityscape. The cables glow with data streams, some highlighted in red indicating errors, others in green showing smooth transmission. The detective's magnifying glass reveals detailed request and response headers on a small holographic screen. In the background, a stylized cityscape represents the iOS application, with subtle UI elements integrated into the buildings. The scene is set at night with neon lights and a cool color scheme. The image should be in a 3D isometric illustration style with sharp focus and vibrant colors."
    },
    {
        "id": 55044933,
        "name": "vscode-restclient",
        "description": "REST Client Extension for Visual Studio Code",
        "url": "https://github.com/Huachao/vscode-restclient",
        "language": "TypeScript",
        "stars": 5560,
        "forks": 464,
        "created_at": "2016-03-30T08:12:52Z",
        "updated_at": "2025-05-10T09:39:31Z",
        "topics": [
            "graphql",
            "http",
            "http-client",
            "rest",
            "rest-api",
            "rest-client",
            "typescript",
            "visual-studio-code",
            "vscode",
            "vscode-extension"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-10-10T11:38:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/64ce7bd18d045b1244ea7792abae7e24096b9a5069d301530ad07eafc331bb2a/Huachao/vscode-restclient"
        ],
        "homepage": "https://marketplace.visualstudio.com/items?itemName=humao.rest-client",
        "readme_summary": "The REST Client extension for Visual Studio Code allows developers to send HTTP requests and view the responses directly within the editor. It supports various features like GraphQL queries, cURL commands, request history, authentication, and environment variables. This eliminates the need for external tools and streamlines API testing.",
        "key_features": [
            "Send HTTP requests and view responses directly in VS Code",
            "Support for GraphQL queries and cURL commands",
            "Request history and multiple requests in a single file",
            "Image response viewing",
            "Authentication support (Basic, Digest, SSL, Azure AD, AWS)",
            "Environments and custom/system variables support",
            "Code snippet generation"
        ],
        "primary_use_case": "Sending HTTP requests and viewing the responses directly within Visual Studio Code, eliminating the need for external tools.",
        "open_issues": 502,
        "cover_image_prompt": "A skilled chef meticulously crafting a complex dish (the API request) in a state-of-the-art kitchen (VS Code). The chef carefully selects ingredients (request parameters) from labeled containers and uses advanced tools (REST Client features) to prepare the dish. Once complete, the dish is presented on a glowing platter (the API response) with steam rising to form data visualizations. Subtle UI elements and code snippets are visible on nearby screens. The kitchen has a clean, modern design with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 120538304,
        "name": "nocode",
        "description": "The best way to write secure and reliable applications. Write nothing; deploy nowhere.",
        "url": "https://github.com/kelseyhightower/nocode",
        "language": "Dockerfile",
        "stars": 62767,
        "forks": 4744,
        "created_at": "2018-02-06T23:54:00Z",
        "updated_at": "2025-05-10T09:20:25Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2020-01-21T19:25:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/64156d4b02aa346a3e562cca8635f0e471569fdb2bd74913845736031c0a52a3/kelseyhightower/nocode"
        ],
        "homepage": null,
        "readme_summary": "The 'nocode' repository is a humorous take on software development, advocating for writing no code and deploying nowhere. It satirically presents a 'no code' approach as the ultimate solution for secure and reliable applications, highlighting the absurdity of over-engineering and complex development processes. The repository serves as a conceptual joke, emphasizing simplicity through the complete absence of code.",
        "key_features": [
            "No code development",
            "Zero deployment",
            "Effortless scaling (by doing nothing)",
            "No contribution required"
        ],
        "primary_use_case": "Demonstrating the concept of 'no code' development as a satirical approach to software creation.",
        "open_issues": 4069,
        "cover_image_prompt": "A serene landscape painting depicting an empty field under a clear blue sky. A single signpost stands in the field, pointing nowhere. The signpost is subtly made of computer components, with faint lines of code etched into its surface. A gentle breeze rustles through the tall grass, symbolizing the effortless nature of 'no code'. The scene is bathed in soft, natural light, creating a sense of peace and simplicity. The style is reminiscent of a Bob Ross painting, with gentle brushstrokes and calming colors. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 903167385,
        "name": "blue95",
        "description": "A desktop for your childhood home's computer room",
        "url": "https://github.com/winblues/blue95",
        "language": "Shell",
        "stars": 915,
        "forks": 7,
        "created_at": "2024-12-13T22:42:15Z",
        "updated_at": "2025-05-10T09:29:11Z",
        "topics": [
            "atomic",
            "bluebuild",
            "bluebuild-image",
            "chicago95",
            "image-based",
            "immutable",
            "linux",
            "linux-custom-image",
            "ublue-os",
            "windows95",
            "xfce"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T19:57:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/903167385/baa29cc3-468a-43a2-9b38-bdd8ee8a9e88"
        ],
        "homepage": "https://blues.win/95",
        "readme_summary": "Blue95 is a Linux distribution that aims to recreate the look and feel of Windows 95 on a modern and lightweight desktop environment. It is based on Fedora Atomic Xfce and incorporates tweaks from Universal Blue to provide a usable out-of-the-box experience, including codecs and automatic updates. A live ISO is available for testing the distribution without installation.",
        "key_features": [
            "Modern desktop experience with a Windows 95 aesthetic",
            "Based on Fedora Atomic Xfce",
            "Includes tweaks from Universal Blue (codecs, automatic updates)",
            "Provides a lightweight and usable out-of-the-box experience",
            "Live ISO available for testing"
        ],
        "primary_use_case": "Providing a modern and lightweight desktop environment reminiscent of Windows 95.",
        "open_issues": 8,
        "cover_image_prompt": "A user sitting in a nostalgic computer room, bathed in the glow of a CRT monitor displaying a modern desktop environment styled like Windows 95. The user is happily clicking through familiar icons and windows, but with updated software and features. Digital particles subtly emanate from the monitor, blending the retro aesthetic with modern technology. The room is filled with classic 90s decor, like posters and floppy disks. The image should be in a digital painting style with clear outlines and a warm, inviting color scheme."
    }
]