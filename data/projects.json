[
    {
        "id": 657049902,
        "name": "hub",
        "description": "Merliot Device Hub",
        "url": "https://github.com/merliot/hub",
        "language": "Go",
        "stars": 123,
        "forks": 2,
        "created_at": "2023-06-22T07:53:55Z",
        "updated_at": "2025-05-19T09:21:32Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-17T00:39:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fb2b51fb0c5dfea9b07c65a9a3662a3f1a73ba2bc9c3b328a5d200e47a57a078/merliot/hub"
        ],
        "homepage": "https://merliot.io",
        "readme_summary": "Merliot Device Hub is an AI-integrated hub that allows users to control and interact with their DIY physical devices using natural language via LLM hosts. It emphasizes privacy through a distributed architecture and offers a web-based interface accessible from any device. The hub supports devices built from hobby-grade components and is deployable as a Docker image.",
        "key_features": [
            "Privacy-focused distributed architecture",
            "Web application interface",
            "AI-integration via Model Context Protocol (MCP)",
            "Cloud-ready Docker image deployment",
            "Support for DIY devices built from hobbyist components"
        ],
        "primary_use_case": "Acting as a gateway between AI language models and user-built physical devices, enabling control and interaction through natural language.",
        "open_issues": 4,
        "cover_image_prompt": "A skilled artisan meticulously crafting a complex clockwork device, seamlessly integrating physical components (gears, sensors) with glowing digital interfaces. The artisan uses natural language commands displayed on a holographic screen to control robotic arms assembling the device. The scene is set in a bright, modern workshop filled with tools and components. Small UI elements show device data flowing between the physical and digital realms. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 895202100,
        "name": "everwilds",
        "description": "MMORPG prototype inspired by World of Warcraft.",
        "url": "https://github.com/nickyvanurk/everwilds",
        "language": "TypeScript",
        "stars": 44,
        "forks": 7,
        "created_at": "2024-11-27T18:42:34Z",
        "updated_at": "2025-05-19T07:35:39Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-13T03:20:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2f64b50447daede5087b12c3cd4959b23e78e2bcc07f871603c0e78067de7585/nickyvanurk/everwilds"
        ],
        "homepage": "http://everwilds.io/",
        "readme_summary": "Everwilds is a prototype MMORPG demonstrating networking and netcode architecture, inspired by World of Warcraft. It serves as a learning resource, showcasing client-server interaction, character movement synchronization, and basic game systems. The project aims to provide insights into the technical foundations of large-scale online games.",
        "key_features": [
            "Client-server architecture",
            "Character movement with walk animation",
            "Basic combat system",
            "Simple leveling system (up to level 10)",
            "Character nameplate toggling",
            "Chat system",
            "Player movement synchronization (similar to World of Warcraft)"
        ],
        "primary_use_case": "Learning resource for developers interested in MMORPG networking and architecture.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned cartographer meticulously charting a vast, ever-expanding digital world on a large, glowing map table. The cartographer uses a stylus that emits particles of light, revealing pathways and structures representing network connections and game systems. Miniature figures representing players move across the map, their movements synchronized and fluid. Small UI elements displaying code snippets and network activity float around the table. The scene is set in a warmly lit workshop filled with scrolls and technical diagrams. The image should be in a detailed digital painting style with vibrant colors and clear outlines."
    },
    {
        "id": 262434885,
        "name": "Moriarty-Project",
        "description": "This tool gives information about the phone number that you entered.",
        "url": "https://github.com/AzizKpln/Moriarty-Project",
        "language": "Python",
        "stars": 1735,
        "forks": 243,
        "created_at": "2020-05-08T21:44:55Z",
        "updated_at": "2025-05-19T09:34:42Z",
        "topics": [
            "advanced",
            "advanced-osint-tool",
            "amazon-aws",
            "information",
            "information-gathering",
            "kali-osint",
            "moriarty",
            "moriarty-project",
            "osint",
            "osint-kali",
            "osint-python",
            "osint-tool",
            "osinttool",
            "phone",
            "phone-information",
            "phone-number",
            "phone-number-information",
            "phoneinfo",
            "python3-moriarty",
            "sms"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2022-09-21T10:36:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0de4075e36d0ff136cba26ef97a9efa6f48adb4f390d4ef06a75be240bbe8e1c/AzizKpln/Moriarty-Project"
        ],
        "homepage": null,
        "readme_summary": "Moriarty Project is a web-based tool designed for phone number investigation. It offers features such as identifying the owner, assessing spam risk, finding related links and comments, and discovering associated social media platforms. The tool aims to provide comprehensive information about a given phone number through various online sources.",
        "key_features": [
            "Phone number owner identification",
            "Spam risk assessment",
            "Related links discovery",
            "Comment retrieval",
            "Social media platform association"
        ],
        "primary_use_case": "Web-based phone number investigation",
        "open_issues": 16,
        "cover_image_prompt": "A detective meticulously examining a tangled web of phone lines, each connected to different social media platforms and databases. The detective uses a magnifying glass that highlights key pieces of information, such as owner details, spam risks, and related links. Small UI elements showing phone number inputs and data outputs are subtly integrated into the web. The scene is set in a dimly lit, high-tech office with scattered documents and glowing screens. The composition is focused and detailed with a dark blue and green color scheme. The image should be in a digital painting style with clear outlines and a sense of mystery."
    },
    {
        "id": 23690226,
        "name": "xray-16",
        "description": "Improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World. Join OpenXRay! ;)",
        "url": "https://github.com/OpenXRay/xray-16",
        "language": "C++",
        "stars": 3210,
        "forks": 471,
        "created_at": "2014-09-05T04:28:23Z",
        "updated_at": "2025-05-19T08:33:59Z",
        "topics": [
            "3d-engine",
            "3d-game-engine",
            "arm64",
            "cmake",
            "cplusplus",
            "cpp",
            "cpp17",
            "d3d11",
            "d3d9",
            "directx",
            "directx11",
            "engine",
            "game-engine",
            "opengl",
            "opensource",
            "sdl",
            "sdl2",
            "stalker",
            "x64",
            "xray-engine"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-28T15:49:25Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/23690226/65549f81-f8e2-484f-a5a2-83b93d0bca07"
        ],
        "homepage": "https://discord.gg/sjRMQwv",
        "readme_summary": "OpenXRay is an improved and extended version of the X-Ray Engine used in the S.T.A.L.K.E.R. game series. It offers 64-bit support, improved performance, bug fixes, new features for modders, and cross-platform compatibility. The project aims to provide a solid platform for modding and enhance the player experience while maintaining compatibility with the original games.",
        "key_features": [
            "64-bit support",
            "Improved performance and FPS",
            "Original bug fixes",
            "New features for modmakers",
            "Cross-platform support (Linux, macOS, *BSDs, ARM, ARM64, E2K, PPC64LE)"
        ],
        "primary_use_case": "Improving and extending the X-Ray Engine for S.T.A.L.K.E.R. games, providing a platform for modding and enhancing the player experience.",
        "open_issues": 203,
        "cover_image_prompt": "A skilled surgeon meticulously operating on a complex mechanical heart labeled \"X-Ray Engine,\" replacing damaged components with advanced, glowing cybernetic parts. The heart is connected to a larger, partially visible robotic body representing the S.T.A.L.K.E.R. game. UI elements displaying performance metrics and debugging code subtly float around the operating table. The scene is set in a sterile, futuristic laboratory with bright, focused lighting. The composition is a close-up shot emphasizing the heart and the surgeon's precision. The image should be in a detailed digital painting style with clean lines and a vibrant color scheme, conveying improvement and enhancement."
    },
    {
        "id": 352101248,
        "name": "zeno",
        "description": "ZEn NOde system - a simulation & rendering engine in nodes",
        "url": "https://github.com/zenustech/zeno",
        "language": "C++",
        "stars": 1333,
        "forks": 155,
        "created_at": "2021-03-27T15:01:30Z",
        "updated_at": "2025-05-19T09:20:25Z",
        "topics": [
            "3d",
            "cpp",
            "dataflow-programming",
            "graphics",
            "node-editor",
            "rendering",
            "simulation",
            "vfx",
            "visualization"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T17:18:32Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/352101248/d435ae80-d10d-11eb-8b3b-2f84dad6d9c9"
        ],
        "homepage": "http://zenustech.com",
        "readme_summary": "ZENO is an open-source node system framework designed for creating and rendering complex 3D simulations. It offers an integrated toolbox with features like volumetric geometry processing, physics solvers, and visualization nodes. ZENO enables users to build sophisticated VFX and simulation solutions through its node-based dataflow programming approach.",
        "key_features": [
            "Integrated Toolbox (OpenVDB, physics solvers, visualization nodes)",
            "VFX and simulation solutions based on nodes",
            "Multi Importance Sampling"
        ],
        "primary_use_case": "Creating complex simulations and rendering them using a node-based system.",
        "open_issues": 23,
        "cover_image_prompt": "Imagine an architect overseeing a city of intricate clockwork mechanisms, each representing a different simulation. The architect, using a node-based interface projected onto a large screen, connects and adjusts these mechanisms to create complex, synchronized movements throughout the city. Digital particles flow between the nodes, visually representing the data flow. The city is bathed in a soft, ethereal glow, highlighting the interconnectedness of the simulations. Small UI elements display node parameters and simulation outputs. The scene is in a 3D isometric illustration style with vibrant colors and intricate details, emphasizing the power and flexibility of the node system."
    },
    {
        "id": 562353733,
        "name": "pocketpy",
        "description": "Portable Python 3.x Interpreter in Modern C for Game Scripting",
        "url": "https://github.com/pocketpy/pocketpy",
        "language": "C",
        "stars": 1847,
        "forks": 143,
        "created_at": "2022-11-06T04:17:25Z",
        "updated_at": "2025-05-19T06:56:10Z",
        "topics": [
            "c",
            "c11",
            "header-only",
            "interpreter",
            "language",
            "programming-language",
            "python",
            "scripting-language",
            "vm"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-19T06:11:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f40ef3a00a0178d2d0875afd104025dbe6fac1e24569c673f15bf1e6fd8d274e/pocketpy/pocketpy"
        ],
        "homepage": "https://pocketpy.dev/",
        "readme_summary": "Pocketpy is a portable Python 3.x interpreter written in C11, designed as an alternative to Lua for game scripting. It's a header-only library with no external dependencies beyond the C standard library, making it easy to integrate into C/C++ projects. Developers can create Python bindings using C-API or pybind11 compatible interfaces.",
        "key_features": [
            "Portable Python 3.x interpreter",
            "Written in C11",
            "Header-only library",
            "Suitable for game scripting",
            "No dependencies other than the C standard library",
            "C-API and pybind11 compatible interfaces for Python bindings"
        ],
        "primary_use_case": "Game scripting",
        "open_issues": 6,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a miniature clockwork city inside a bottle. The city represents a complex software application, and the artisan is using a set of finely crafted tools (representing pocketpy) to precisely assemble and control the city's intricate mechanisms. The bottle rests on a desk beside a modern laptop displaying lines of Python code, subtly connecting the artisan's work to the digital realm. The scene is bathed in warm, inviting light, creating a sense of wonder and precision. The image should be in a detailed 3D isometric illustration style with vibrant colors and a focus on clarity."
    },
    {
        "id": 492897058,
        "name": "asm_book",
        "description": "A book teaching assembly language programming on the ARM 64 bit ISA. Along the way, good programming practices and insights into code development are offered which apply directly to higher level languages.",
        "url": "https://github.com/pkivolowitz/asm_book",
        "language": "Assembly",
        "stars": 2911,
        "forks": 154,
        "created_at": "2022-05-16T15:35:31Z",
        "updated_at": "2025-05-19T08:36:14Z",
        "topics": [
            "aarch64",
            "arm64",
            "assembly-language",
            "c",
            "cpp",
            "software-development"
        ],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-01-20T18:32:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/165a048d55506bf66724fafe814691962779ed4ce97800a4fa705a6ef1ed6219/pkivolowitz/asm_book"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a gentle introduction to assembly language programming on the ARM 64-bit ISA, targeting developers already familiar with C or C++. It offers macros for cross-platform compatibility (Linux and MacOS) and utilizes C-runtime wrappers to enhance code portability when making system calls.",
        "key_features": [
            "Gentle introduction to assembly language programming for those familiar with C/C++",
            "Focus on ARM 64-bit ISA (AARCH64/ARM V8)",
            "Macros for cross-platform development (Linux and MacOS)",
            "Use of C-runtime wrappers for system calls to improve portability"
        ],
        "primary_use_case": "Learning assembly language programming on the ARM 64-bit architecture, especially for those with a background in C/C++.",
        "open_issues": 2,
        "cover_image_prompt": "An apprentice learning from a seasoned artisan, meticulously crafting a complex clockwork mechanism. The artisan points to the blueprint (C code) while guiding the apprentice's hand as they assemble the gears (assembly instructions). The completed clock represents a functional program, demonstrating the bridge between high-level code and low-level implementation. Subtle digital elements, like glowing code snippets and circuit board patterns, are integrated into the workbench. The scene is set in a warmly lit workshop with a focused composition. The image should be in a detailed digital painting style with clear outlines and rich textures."
    },
    {
        "id": 975111685,
        "name": "no-as-a-service",
        "description": "No-as-a-Service (NaaS) is a simple API that returns a random rejection reason. Use it when you need a realistic excuse, a fun “no,” or want to simulate being turned down in style.",
        "url": "https://github.com/hotheadhacker/no-as-a-service",
        "language": "JavaScript",
        "stars": 1641,
        "forks": 101,
        "created_at": "2025-04-29T19:56:36Z",
        "updated_at": "2025-05-19T09:29:47Z",
        "topics": [
            "api",
            "expressjs",
            "json"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T07:23:04Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c45bff978e2e2e9136776858dec4884f9a947cc48ba4cf3032ff61331216419b/hotheadhacker/no-as-a-service"
        ],
        "homepage": "https://naas.isalman.dev/no",
        "readme_summary": "No-as-a-Service is a lightweight API that delivers random rejection reasons, perfect for scenarios where a polite or witty 'no' is needed. It can be self-hosted and integrated into various applications, offering a simple way to provide excuses and rejections programmatically. The API is rate-limited to ensure fair usage.",
        "key_features": [
            "Provides a simple API endpoint for retrieving random rejection reasons.",
            "Offers a variety of rejection reasons: generic, creative, and humorous.",
            "Allows self-hosting for customized deployments.",
            "Includes a rate limit to prevent abuse."
        ],
        "primary_use_case": "Generating random rejection reasons for various applications, such as apps, bots, landing pages, and Slack integrations.",
        "open_issues": 7,
        "cover_image_prompt": "A friendly, but firm, gatekeeper robot standing in front of a velvet rope at a bustling nightclub entrance, politely but resolutely turning away a diverse group of hopeful entrants. The robot holds a clipboard with a list of reasons, each displayed on a small holographic screen. Some entrants look disappointed, others amused. Subtle UI elements float around the robot, showing API calls and JSON responses. The nightclub is brightly lit with a futuristic design. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    }
]