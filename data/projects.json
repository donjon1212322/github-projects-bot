[
    {
        "id": 758197374,
        "name": "parlant",
        "description": "LLM agents built for control. Designed for real-world use. Deployed in minutes.",
        "url": "https://github.com/emcie-co/parlant",
        "language": "Python",
        "stars": 4276,
        "forks": 426,
        "created_at": "2024-02-15T20:16:15Z",
        "updated_at": "2025-08-17T10:10:13Z",
        "topics": [
            "ai-agents",
            "ai-alignment",
            "customer-service",
            "customer-success",
            "gemini",
            "genai",
            "llama3",
            "llm",
            "openai",
            "python"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-17T09:47:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/930d553f895889eceddd71d16834d65b4f08b78d937bbb3b3a12bca2f2f9f033/emcie-co/parlant"
        ],
        "homepage": "https://www.parlant.io",
        "readme_summary": "Parlant is a Python framework for building LLM agents designed for control and real-world use. It ensures agents follow instructions by using a principle-based approach rather than relying on system prompts. Parlant allows developers to define agent behavior with natural language and deploy agents quickly, offering guaranteed compliance and easy integration.",
        "key_features": [
            "Guaranteed compliance with instructions",
            "Principle-based AI agent development",
            "Easy deployment (60 seconds)",
            "Tools for defining agent behavior",
            "React widget integration"
        ],
        "primary_use_case": "Building and deploying LLM agents that reliably follow instructions in real-world applications.",
        "open_issues": 23,
        "cover_image_prompt": "Imagine a skilled architect meticulously guiding a team of robots constructing a grand building. The architect holds a blueprint representing the 'guidelines,' ensuring each robot (representing an LLM agent) precisely follows instructions for every brick laid. The building's foundation is solid and unwavering, symbolizing the guaranteed compliance. Subtle UI elements float around the scene, displaying code snippets and agent configurations. The setting is a bright, futuristic construction site with a clean, organized layout. The image should be in a 3D isometric illustration style with vibrant colors and sharp details, conveying precision and control."
    },
    {
        "id": 993676621,
        "name": "PolymarketViewer",
        "description": "Polymarket Viewer - Android client for Polymarket prediction markets. Free & Open Source.",
        "url": "https://github.com/Streamatico/PolymarketViewer",
        "language": "Kotlin",
        "stars": 10,
        "forks": 1,
        "created_at": "2025-05-31T09:22:19Z",
        "updated_at": "2025-08-17T05:24:01Z",
        "topics": [
            "free",
            "open-source",
            "polymarket",
            "prediction"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-21T09:57:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1fd5dbdd4dbe5ce9dec0725c709873b7b891b60912fa1465405ffe33b542beda/Streamatico/PolymarketViewer"
        ],
        "homepage": "",
        "readme_summary": "Polymarket Viewer is an Android application that allows users to browse, filter, and interact with prediction markets on Polymarket.com. It provides features such as detailed event information, interactive price charts, and a comment system, all within a Material 3 designed interface.",
        "key_features": [
            "Browse active prediction market events",
            "Filter and search events",
            "Sort events by various criteria",
            "View detailed event information",
            "Display interactive price history charts",
            "Adaptive card layouts for different market types",
            "Comments system with hierarchical structure",
            "Pagination for loading more events and comments",
            "Material 3 design with dynamic theming"
        ],
        "primary_use_case": "Browsing and interacting with Polymarket prediction markets on Android devices.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a bustling stock exchange floor, but instead of stocks, traders are intensely focused on glowing orbs representing predictions about future events. A central, large screen displays a Polymarket interface, showing real-time market data and price charts for each orb. Traders use tablets and phones to buy and sell 'prediction shares,' with digital confetti erupting from successful trades. The scene is energetic and vibrant, with a subtle overlay of blockchain-like nodes connecting the orbs. The repository name, 'Polymarket Viewer,' is subtly displayed on the central screen. The image should be in a 3D isometric illustration style with bright, contrasting colors and a futuristic feel."
    },
    {
        "id": 1031165657,
        "name": "EntangleMe",
        "description": "We built Entangleme to explore how quantum teleportation could work as a message transfer system. It uses Qiskit to simulate teleporting qubit states and connects it to a simple web interfaceâ€”where one user sends a bit and the other receives it.",
        "url": "https://github.com/dev-Ninjaa/EntangleMe",
        "language": "TypeScript",
        "stars": 6,
        "forks": 5,
        "created_at": "2025-08-03T06:37:39Z",
        "updated_at": "2025-08-17T05:21:15Z",
        "topics": [],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-08-11T14:12:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8e86c416c48d1032835efea33165f7aced75fc49cd4ea7f795c5c9b248593ca9/dev-Ninjaa/EntangleMe"
        ],
        "homepage": "https://entangleme.vercel.app",
        "readme_summary": "EntangleMe simulates quantum teleportation for secure message transfer using Qiskit. It provides a web interface built with React and FastAPI, allowing users to send and receive bits, demonstrating the principles of quantum communication. The project serves as a practical example of applying quantum computing to real-world communication systems.",
        "key_features": [
            "Simulates quantum teleportation for message transfer",
            "Uses Qiskit for quantum circuit simulation",
            "Web interface for sending and receiving bits",
            "Frontend built with React",
            "Backend built with FastAPI"
        ],
        "primary_use_case": "Demonstrates quantum teleportation as a message transfer system.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled messenger in a futuristic laboratory, carefully placing a glowing message into a quantum teleportation device. On the receiving end, another device reconstructs the message perfectly. The lab is filled with subtle UI elements displaying quantum states and circuit diagrams. Digital particles swirl around the devices, visualizing the teleportation process. The repository's name, 'EntangleMe,' is subtly displayed on a screen in the background. The scene is rendered in a clean, 3D isometric illustration style with a vibrant color scheme, emphasizing clarity and technological sophistication."
    },
    {
        "id": 512188824,
        "name": "cdimage",
        "description": "A tool for burning visible pictures on a compact disc surfase",
        "url": "https://github.com/arduinocelentano/cdimage",
        "language": "C++",
        "stars": 605,
        "forks": 24,
        "created_at": "2022-07-09T13:10:08Z",
        "updated_at": "2025-08-17T08:50:42Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2022-07-23T16:15:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ef72846ddacb6893ce3c878417af6fa452f093bd401f08e8e5f0155d5131860e/arduinocelentano/cdimage"
        ],
        "homepage": null,
        "readme_summary": "The CDImage repository provides a tool for burning visible pictures onto the surface of a compact disc. It includes a GUI with a visual preview mode and utilizes coordinate conversion code inspired by previous similar projects. The project has been ported to Qt6 and a Windows binary build is available, offering a way to create unique, visually customized CDs.",
        "key_features": [
            "Burns visible pictures onto a compact disc surface",
            "GUI with visual preview mode",
            "Coordinate conversion code based on unDEFER's implementation",
            "Ported to modern Qt6",
            "Windows binary build available"
        ],
        "primary_use_case": "Burning visible images onto CD-R media using custom software and algorithms.",
        "open_issues": 23,
        "cover_image_prompt": "Imagine an artist meticulously painting a compact disc with light, creating a visible image on its surface. The artist uses a palette of digital data, subtly represented by glowing particles, and a brush that emits laser beams. The compact disc rests on a turntable, slowly spinning as the image is burned onto it. A faint UI screen in the background displays the software interface with image adjustments and disc geometry settings. The scene is set in a dimly lit studio with a retro-futuristic vibe. The image should be in a digital painting style with vibrant colors and sharp details."
    },
    {
        "id": 319029846,
        "name": "Depixelization_poc",
        "description": "Depix is a PoC for a technique to recover plaintext from pixelized screenshots.",
        "url": "https://github.com/spipm/Depixelization_poc",
        "language": "Python",
        "stars": 551,
        "forks": 70,
        "created_at": "2020-12-06T12:39:08Z",
        "updated_at": "2025-08-17T09:28:08Z",
        "topics": [],
        "quality_score": 0.35,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T06:48:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/aad79a62d50511fdeb440981adb20dfb38b97afc623ef3e5ac4f00925e08dded/spipm/Depixelization_poc"
        ],
        "homepage": "",
        "readme_summary": "The Depix repository provides a proof-of-concept technique for recovering plaintext from pixelized screenshots. It focuses on images pixelized with a linear box filter and includes tools for visualizing box detection and generating pixelated images. The repository offers example usages demonstrating how to recover text from images pixelized with different software and settings.",
        "key_features": [
            "Recovers plaintext from pixelized screenshots",
            "Works on images pixelized with a linear box filter",
            "Includes tools for showing box detection and generating pixelated images",
            "Provides example usage scenarios with different pixelization methods and editors"
        ],
        "primary_use_case": "Recovering obscured text from pixelized images, particularly those pixelized using a linear box filter.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled archaeologist carefully piecing together fragments of a pixelated mosaic to reveal a hidden message. The archaeologist uses specialized tools that subtly display code snippets and algorithms. The revealed message glows with a soft light, contrasting with the blurred, pixelated fragments. The scene is set in a dimly lit study filled with ancient artifacts and modern tech. The composition is focused and clean, using a warm color scheme with hints of digital blue. The image should be in a detailed digital painting style with clear outlines and a sense of mystery."
    },
    {
        "id": 23044617,
        "name": "popmotion",
        "description": "Simple animation libraries for delightful user interfaces",
        "url": "https://github.com/Popmotion/popmotion",
        "language": "JavaScript",
        "stars": 20147,
        "forks": 671,
        "created_at": "2014-08-17T16:23:07Z",
        "updated_at": "2025-08-17T03:46:20Z",
        "topics": [
            "animation",
            "css",
            "javascript-motion-engine",
            "motion",
            "physics",
            "popmotion",
            "svg",
            "tween"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2022-08-15T12:37:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/46249a3ea2ac563954f51ead88f85487bf5f477b394d2f13455139e38282e64f/Popmotion/popmotion"
        ],
        "homepage": "https://popmotion.io",
        "readme_summary": "Popmotion is a JavaScript animation library designed for creating smooth and engaging user interfaces. It supports keyframe and spring animations for a variety of data types, including numbers, colors, and complex strings. Its composable and portable design makes it suitable for various JavaScript environments, and its small size ensures minimal impact on application performance.",
        "key_features": [
            "Keyframe and spring animations for numbers, colors, and complex strings",
            "Composable and portable design for various JavaScript environments",
            "TypeScript codebase with high test coverage",
            "Small size and individually importable functions"
        ],
        "primary_use_case": "Creating delightful user interfaces with simple animation libraries.",
        "open_issues": 42,
        "cover_image_prompt": "A skilled clockmaker meticulously adjusting the gears of a large, ornate clock. Each gear represents a different animation property (size, color, position), and as the clockmaker adjusts them, the clock hands move smoothly and precisely. Digital particles flow from the clock, forming UI elements that animate in sync with the clock's movement. Small screens display code snippets and animation curves. The scene is set in a bright, modern workshop with a clean, focused composition. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 9114826,
        "name": "Medoo",
        "description": "The lightweight PHP database framework to accelerate the development.",
        "url": "https://github.com/catfan/Medoo",
        "language": "PHP",
        "stars": 4900,
        "forks": 1149,
        "created_at": "2013-03-30T11:20:52Z",
        "updated_at": "2025-08-16T23:58:04Z",
        "topics": [
            "composer",
            "database",
            "hacktoberfest",
            "medoo",
            "mssql",
            "mysql",
            "php",
            "php-database-framework",
            "php-framework",
            "php-frameworks",
            "sqlite"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T08:03:33Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/9114826/74410600-f77a-11e9-9994-04de808acc47"
        ],
        "homepage": "https://medoo.in",
        "readme_summary": "Medoo is a lightweight PHP database framework designed to accelerate development by providing a simple and intuitive API for interacting with various database systems. It supports complex SQL queries, data mapping, and integrates seamlessly with popular PHP frameworks, making it a versatile tool for database-driven applications.",
        "key_features": [
            "Lightweight framework with minimal dependencies",
            "Simple and intuitive API",
            "Supports complex SQL queries and data mapping",
            "Compatible with multiple database systems (MySQL, MariaDB, PostgreSQL, SQLite, MSSQL, Oracle, Sybase)",
            "Integrates with popular PHP frameworks"
        ],
        "primary_use_case": "Accelerating database development in PHP projects.",
        "open_issues": 40,
        "cover_image_prompt": "A skilled architect meticulously constructing a grand database temple using lightweight, interlocking bricks. The architect carefully selects and places each brick, representing data, with precision and speed. The temple's foundation is solid and secure, symbolizing the framework's reliability. A blueprint displaying SQL queries subtly floats nearby, guiding the construction. The scene is bathed in warm, golden light, creating a sense of efficiency and elegance. Small UI elements showcasing database connections and data flows are subtly integrated into the temple's design. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 453068084,
        "name": "risingwave",
        "description": "Real-time event streaming platform. Streaming CDC, stream processing, low-latency serving, and Iceberg management.",
        "url": "https://github.com/risingwavelabs/risingwave",
        "language": "Rust",
        "stars": 8248,
        "forks": 668,
        "created_at": "2022-01-28T12:58:03Z",
        "updated_at": "2025-08-17T10:02:42Z",
        "topics": [
            "apache-iceberg",
            "data-engineering",
            "database",
            "elt-pipeline",
            "etl-pipeline",
            "kafka",
            "materialized-view",
            "postgresql",
            "rust",
            "stream-processing"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-08-15T14:01:10Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/453068084/5f79d6ef-c316-48ef-abac-ea202138d0da"
        ],
        "homepage": "https://go.risingwave.com/slack",
        "readme_summary": "RisingWave is a real-time event streaming platform that offers a simple and cost-effective way to process, analyze, and manage real-time event data. It features PostgreSQL compatibility, S3 storage, and Apache Iceberg integration. RisingWave supports both SQL and Python interfaces for interacting with streaming data.",
        "key_features": [
            "Real-time event streaming platform",
            "PostgreSQL compatibility",
            "S3 as primary storage",
            "Apache Iceberg integration",
            "SQL and Python interfaces"
        ],
        "primary_use_case": "Real-time processing, analysis, and management of event data.",
        "open_issues": 1140,
        "cover_image_prompt": "Imagine a bustling city powered by a massive, continuously flowing river of data. At the river's source, data streams pour in from various sources, visualized as glowing pipes. Along the river's course, sophisticated watermills (representing RisingWave) process and refine the data, extracting valuable insights. These insights then flow into a crystal-clear lake (Apache Iceberg), ready to be accessed and utilized by the city's inhabitants. Small screens display SQL queries and real-time data visualizations. The scene is set in a futuristic, vibrant cityscape with a bright, optimistic atmosphere. The illustration should be in a 3D isometric style with clean lines and a focus on clarity."
    }
]