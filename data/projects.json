[
    {
        "id": 68063511,
        "name": "ttyd",
        "description": "Share your terminal over the web",
        "url": "https://github.com/tsl0922/ttyd",
        "language": "C",
        "stars": 8760,
        "forks": 925,
        "created_at": "2016-09-13T01:43:54Z",
        "updated_at": "2025-03-27T10:06:23Z",
        "topics": [
            "openwrt",
            "ssl",
            "terminal",
            "terminal-emulators",
            "tty",
            "ttyd",
            "websocket",
            "websockets",
            "xterm"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-31T06:24:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/07b1f5df6184f0bc987d6a1f7b83ca43b51574e6ef4fc6049fa11517b32157eb/tsl0922/ttyd"
        ],
        "homepage": "https://tsl0922.github.io/ttyd",
        "readme_summary": "ttyd is a command-line tool that allows users to share their terminal over the web. It offers features such as ZMODEM/trzsz file transfer, Sixel image output, and SSL support, and is built on libuv and WebGL2 for speed. It supports various platforms including macOS, Linux, and Windows.",
        "key_features": [
            "Built on libuv and WebGL2 for speed",
            "Fully-featured terminal with CJK and IME support",
            "ZMODEM/trzsz file transfer support",
            "Sixel image output support",
            "SSL support (OpenSSL/Mbed TLS)",
            "Custom command execution with options",
            "Basic authentication support",
            "Cross-platform compatibility (macOS, Linux, FreeBSD/OpenBSD, OpenWrt, Windows)"
        ],
        "primary_use_case": "Sharing a terminal over the web.",
        "open_issues": 49,
        "cover_image_prompt": "Imagine a skilled artisan at a digital loom, weaving strands of raw terminal commands into a vibrant tapestry displayed on a web browser. The artisan carefully threads each command, represented as colorful threads, onto the loom, which then magically transforms them into a clear, interactive terminal interface visible on a nearby screen. Subtle UI elements float around the scene, displaying snippets of code and websocket connections. The scene is bathed in the soft glow of monitor light, creating a sense of focused creation. This conceptual illustration should be in a 3D isometric style with rich details and vibrant colors."
    },
    {
        "id": 909870795,
        "name": "doom-captcha",
        "description": null,
        "url": "https://github.com/rauchg/doom-captcha",
        "language": "C++",
        "stars": 553,
        "forks": 39,
        "created_at": "2024-12-29T23:58:32Z",
        "updated_at": "2025-03-27T09:55:47Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2024-12-31T07:33:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7747564ea2e7ea6d25e5693f0b108ecf56dfed5c1a5bf046613cc44d31b518a6/rauchg/doom-captcha"
        ],
        "homepage": "https://doom-captcha.vercel.app",
        "readme_summary": "The doom-captcha repository implements a CAPTCHA system using a WebAssembly-compiled version of Doom. It allows for user verification by requiring interaction with the game, communicating events like player birth, death, and enemy kills to a JavaScript-based CAPTCHA UI. Custom flags and configurations are used to tailor the game's difficulty and behavior for CAPTCHA purposes.",
        "key_features": [
            "WebAssembly compilation of a minimal Doom port",
            "Intercommunication between C game loop and JavaScript CAPTCHA UI",
            "Custom process flags for game customization (-nomenu, -autoreborn)",
            "JavaScript callbacks for CAPTCHA UI integration (onPlayerBorn, onPlayerKilled, onEnemyKilled)"
        ],
        "primary_use_case": "A DOOM-based CAPTCHA for web applications, leveraging the game's environment for user verification.",
        "open_issues": 12,
        "cover_image_prompt": "Imagine a classic arcade cabinet, its screen displaying a pixelated Doom level. Instead of a joystick, a disembodied hand hovers over the screen, cautiously navigating the Doomguy through a horde of demons. A small reCAPTCHA box floats in the corner of the screen, partially obscuring the game. The arcade cabinet is set in a brightly lit internet cafe, with other players in the background focused on their own games. Subtle UI elements and code snippets are projected onto the cabinet's surface. The scene is rendered in a vibrant, stylized 3D isometric illustration with a playful, nostalgic feel. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 52228925,
        "name": "payloads",
        "description": "Git All the Payloads! A collection of web attack payloads.",
        "url": "https://github.com/foospidy/payloads",
        "language": "Shell",
        "stars": 3712,
        "forks": 975,
        "created_at": "2016-02-21T21:27:15Z",
        "updated_at": "2025-03-27T07:36:46Z",
        "topics": [
            "appsec",
            "cybersecurity",
            "hacking",
            "passwords",
            "payload",
            "payloads",
            "pentest",
            "sqli",
            "web-attack-payloads",
            "xss"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2021-04-22T12:11:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1f1b4f90494a6246b265fe42f8f1e93205e967ace3bb71b78be848414794b8da/foospidy/payloads"
        ],
        "homepage": "",
        "readme_summary": "The 'payloads' repository is a curated collection of web attack payloads, designed to aid security professionals and researchers in penetration testing and vulnerability assessment. It aggregates payloads from various sources, covering a wide range of attack vectors such as XSS and SQL injection. The repository also includes a script to facilitate the download and extraction of external payload resources.",
        "key_features": [
            "Collection of web attack payloads",
            "Aggregates payloads from various sources",
            "Includes payloads for XSS, SQLi, and other web vulnerabilities",
            "Provides a script to download and unzip external payloads"
        ],
        "primary_use_case": "Providing a centralized collection of web attack payloads for security testing and research.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a blacksmith's forge, but instead of metal, the blacksmith is hammering and shaping glowing web attack payloads. The forge is filled with sparks of XSS, SQLi, and other vulnerabilities. The blacksmith, wearing protective gear, carefully crafts each payload with precision. Around the forge, screens display code snippets and security reports. A banner above the forge reads \"payloads\". The scene is set in a dimly lit workshop with dramatic lighting, emphasizing the intensity of the process. The image should be in a digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 130727736,
        "name": "filesystem_spec",
        "description": "A specification that python filesystems should adhere to.",
        "url": "https://github.com/fsspec/filesystem_spec",
        "language": "Python",
        "stars": 1132,
        "forks": 374,
        "created_at": "2018-04-23T16:45:08Z",
        "updated_at": "2025-03-27T09:55:11Z",
        "topics": [],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-17T21:48:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f28151443dd51aee031cc69749fd70c612a2105946c86ccc8b69f39113f8df2f/fsspec/filesystem_spec"
        ],
        "homepage": null,
        "readme_summary": "The `filesystem_spec` repository provides a specification for Python filesystem interfaces, promoting consistent behavior across various implementations like S3, GCS, and SSH. It allows applications to interact with different filesystems without worrying about backend-specific details. The repository offers a base installation via pip or conda, with optional extensions for specific features and uses Black for code formatting.",
        "key_features": [
            "Filesystem interface specification",
            "Common behavior across different filesystem implementations",
            "Installable via pip and conda",
            "Extensible with extra dependencies for specific backends (e.g., ssh)",
            "Includes implementations and sister projects (e.g., s3fs, gcsfs)",
            "Provides potential for additional functionality like key-value stores and FUSE mounting",
            "Uses Black for code formatting",
            "Uses GitHub Actions for CI"
        ],
        "primary_use_case": "Providing a specification for Pythonic filesystems to ensure common behavior and interoperability across different implementations.",
        "open_issues": 282,
        "cover_image_prompt": "A master architect overseeing a vast city where each building represents a different filesystem (S3, GCS, SSH, local). The architect holds a blueprint labeled 'fsspec,' ensuring all buildings adhere to a unified design. Digital threads connect the architect to each building, subtly displaying code snippets and data flow. The city is bathed in a soft, unifying light, symbolizing interoperability. The composition is clean and focused, emphasizing the architect's role in standardizing the filesystem landscape. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 510161994,
        "name": "software-papers",
        "description": "ðŸ“š A curated list of papers for Software Engineers",
        "url": "https://github.com/facundoolano/software-papers",
        "language": "Python",
        "stars": 5770,
        "forks": 274,
        "created_at": "2022-07-04T00:01:33Z",
        "updated_at": "2025-03-27T10:06:01Z",
        "topics": [
            "awesome-list",
            "computer-science",
            "papers",
            "research",
            "software-engineering"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-02-05T01:13:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a307306e9b6945c6806148b180069d5590b9796d9852d89c0ec811343d814832/facundoolano/software-papers"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a curated list of papers relevant to software engineers, categorized by topic. It serves as a valuable resource for students and professionals seeking to expand their knowledge and understanding of the field by providing links to important and influential publications.",
        "key_features": [
            "Curated list of software engineering papers",
            "Papers categorized by topic",
            "Links to the papers"
        ],
        "primary_use_case": "Providing a curated list of important papers for software engineers to learn from.",
        "open_issues": 3,
        "cover_image_prompt": "An archivist meticulously curating a vast library of scrolls, each representing a different software engineering paper. The archivist, wearing glasses and a thoughtful expression, carefully places each scroll into its designated section on towering shelves. Subtle UI elements glow on the scrolls, displaying titles and authors. Digital particles float around the archivist, representing the flow of knowledge. The scene is set in a grand, sunlit library with a warm, inviting atmosphere. The composition is wide and detailed, showcasing the breadth of the collection. The image should be in a detailed digital painting style with clear outlines and rich colors."
    },
    {
        "id": 838357935,
        "name": "fastapi-guard",
        "description": "A security library for FastAPI that provides middleware to control IPs, log requests, and detect penetration attempts. It integrates seamlessly with FastAPI to offer robust protection against various security threats.",
        "url": "https://github.com/rennf93/fastapi-guard",
        "language": "Python",
        "stars": 163,
        "forks": 3,
        "created_at": "2024-08-05T13:29:12Z",
        "updated_at": "2025-03-27T09:53:28Z",
        "topics": [
            "api",
            "fastapi",
            "ip",
            "middleware",
            "python",
            "rest",
            "security"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-03-24T11:00:51Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a678a0c0646dc8c91c5197915336c8bb725e0ac54b7339754fe3a7405f2bbc87/rennf93/fastapi-guard"
        ],
        "homepage": "https://rennf93.github.io/fastapi-guard/",
        "readme_summary": "FastAPI-Guard is a security library designed to protect FastAPI applications from various threats. It offers middleware for controlling IP access, logging requests, detecting penetration attempts, and configuring CORS. The library provides features like IP whitelisting/blacklisting, rate limiting, automatic IP banning, and cloud provider IP blocking, enhancing the security posture of FastAPI-based APIs.",
        "key_features": [
            "IP Whitelisting and Blacklisting",
            "User Agent Filtering",
            "Rate Limiting",
            "Automatic IP Banning",
            "Penetration Attempt Detection",
            "Custom Logging",
            "CORS Configuration",
            "Cloud Provider IP Blocking",
            "IP Geolocation",
            "Distributed State Management",
            "Flexible Storage"
        ],
        "primary_use_case": "Securing FastAPI applications by providing middleware for IP control, request logging, and penetration attempt detection.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled blacksmith forging a shield in a high-tech workshop. The blacksmith carefully hammers glowing digital code onto the shield, reinforcing it against incoming virtual arrows representing cyber threats. The shield deflects the arrows, which dissolve into harmless particles upon impact. Small UI elements display real-time security logs and IP address data. The workshop is clean and modern, with subtle neon accents. The image should be in a 3D isometric illustration style with vibrant colors and sharp details, emphasizing the shield's protective qualities."
    },
    {
        "id": 245704608,
        "name": "zod",
        "description": "TypeScript-first schema validation with static type inference",
        "url": "https://github.com/colinhacks/zod",
        "language": "TypeScript",
        "stars": 36310,
        "forks": 1293,
        "created_at": "2020-03-07T20:59:08Z",
        "updated_at": "2025-03-27T09:05:03Z",
        "topics": [
            "runtime-validation",
            "schema-validation",
            "static-types",
            "type-inference",
            "typescript"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-22T00:03:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/651268f21f39f684618f5703222c545282602e207da9e2ab1fb0929fee6742f3/colinhacks/zod"
        ],
        "homepage": "https://zod.dev",
        "readme_summary": "Zod is a TypeScript-first schema validation library that allows developers to define data schemas with static type inference. It provides runtime validation to ensure data conforms to the defined schema, enhancing type safety and data integrity in TypeScript applications.",
        "key_features": [
            "TypeScript-first schema validation",
            "Static type inference",
            "Runtime validation"
        ],
        "primary_use_case": "Schema validation and type inference for TypeScript applications.",
        "open_issues": 500,
        "cover_image_prompt": "A skilled architect meticulously crafting a building blueprint, representing a data schema. The architect uses special tools that convert abstract ideas into precise structural plans. Glowing lines of code subtly overlay the blueprint, symbolizing the TypeScript foundation. The blueprint is then validated by a robotic inspector, ensuring structural integrity and type safety. The scene is set in a brightly lit, modern design studio with a clean, focused composition. The image should be in a 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the Zod logo."
    }
]