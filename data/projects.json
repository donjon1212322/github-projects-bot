[
    {
        "id": 305646330,
        "name": "waha",
        "description": "WAHA - WhatsApp HTTP API (REST API) that you can configure in a click! 3 engines: WEBJS (browser based), NOWEB (websocket nodejs), GOWS (websocket go)",
        "url": "https://github.com/devlikeapro/waha",
        "language": "TypeScript",
        "stars": 2666,
        "forks": 657,
        "created_at": "2020-10-20T08:49:48Z",
        "updated_at": "2025-08-02T10:00:24Z",
        "topics": [
            "ai-bot",
            "bot",
            "http-api",
            "python-bot",
            "whatsapp",
            "whatsapp-api",
            "whatsapp-automation",
            "whatsapp-bot",
            "whatsapp-chat",
            "whatsapp-web",
            "whatsapp-web-api"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-07-27T10:39:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/add1a99e85dc1bfac1733457d89893c0ef46753b17a43e05bc92a149c1d3ecb0/devlikeapro/waha"
        ],
        "homepage": "https://waha.devlike.pro/",
        "readme_summary": "WAHA is a WhatsApp HTTP API that allows developers to automate WhatsApp interactions using a REST API. It offers multiple engines and can be easily configured and deployed using Docker. The API provides functionalities such as sending text messages and retrieving screenshots of the WhatsApp instance.",
        "key_features": [
            "WhatsApp HTTP API (REST API)",
            "Configurable in one click",
            "Multiple engines: WEBJS, NOWEB, GOWS",
            "Docker support",
            "Swagger documentation"
        ],
        "primary_use_case": "Automating WhatsApp interactions through a REST API.",
        "open_issues": 202,
        "cover_image_prompt": "Imagine a skilled messenger bird, representing WAHA, perched atop a server rack, diligently carrying messages (envelopes with 'WhatsApp' logos) between a bustling city (representing the internet) and a cozy home (representing a user's application). The bird wears a tiny headset, symbolizing the API connection. The server rack glows subtly with digital lights, and faint code snippets float in the background. The scene is rendered in a clean, 3D isometric illustration style with a warm color palette, emphasizing clarity and ease of use. The WAHA logo is subtly integrated into the server rack design."
    },
    {
        "id": 1027371257,
        "name": "zuse",
        "description": "ZUSE is an irc client for the terminal made in Go with Bubbletea",
        "url": "https://github.com/babycommando/zuse",
        "language": "Go",
        "stars": 235,
        "forks": 10,
        "created_at": "2025-07-27T22:12:35Z",
        "updated_at": "2025-08-02T01:01:56Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-07-28T07:19:38Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1027371257/e0b0044f-9b72-4a4c-913a-91dab2f3fcb6"
        ],
        "homepage": null,
        "readme_summary": "ZUSE is a terminal-based IRC client built with Go and the Bubble Tea framework. It provides a clean and minimal interface for chatting on IRC channels directly from the terminal. Key features include keybindings for navigation and a distraction-free environment.",
        "key_features": [
            "Sleek, minimal terminal IRC client",
            "Built with Go and Bubble Tea framework",
            "Keybindings for scrolling chat and switching panes"
        ],
        "primary_use_case": "Terminal-based IRC client for distraction-free chatting.",
        "open_issues": 1,
        "cover_image_prompt": "A focused coder in a minimalist terminal environment, effortlessly navigating IRC channels with sleek, text-based commands. The coder's fingers dance across the keyboard, sending messages that ripple outwards as clean, digital waves. The terminal window displays a clear, uncluttered IRC interface with subtle syntax highlighting. Small, glowing particles emanate from the terminal, forming the ZUSE logo. The scene is set in a dimly lit room with a single monitor illuminating the coder's face. The image should be in a flat design style with clear iconography and a cool color scheme."
    },
    {
        "id": 207245092,
        "name": "duckstation",
        "description": "Fast PlayStation 1 emulator for x86-64/AArch32/AArch64/RV64",
        "url": "https://github.com/stenzek/duckstation",
        "language": "C++",
        "stars": 8850,
        "forks": 793,
        "created_at": "2019-09-09T07:00:39Z",
        "updated_at": "2025-08-02T09:45:29Z",
        "topics": [
            "appimage",
            "emulator",
            "enhancements",
            "fast",
            "hardware-renderers",
            "jit-compiler",
            "opengl",
            "playstation",
            "ps1",
            "psx",
            "vulkan"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T07:44:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/902be0ed290bb8b0616b37119d83bbe866354064ee4bb61ca19985f56b1334f6/stenzek/duckstation"
        ],
        "homepage": "",
        "readme_summary": "DuckStation is a PlayStation 1 emulator focused on playability, speed, and accuracy. It supports multiple platforms and rendering APIs, offering enhancements like upscaling and texture filtering. The emulator aims to provide a user-friendly experience with features like save states and broad controller support.",
        "key_features": [
            "PlayStation 1 emulation",
            "CPU Recompiler/JIT (x86-64, armv7/AArch32, AArch64, RISC-V/RV64)",
            "Hardware renderers (D3D11, D3D12, OpenGL, Vulkan, Metal)",
            "Upscaling and texture filtering",
            "Save state support",
            "Multiple platform support (Windows, Linux, macOS)",
            "Multiple disc image format support",
            "Controller support (digital, analog, lightgun, NeGcon)"
        ],
        "primary_use_case": "Emulating PlayStation 1 games on various platforms.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled artisan meticulously restoring a vintage music box. The artisan carefully examines the intricate inner workings, represented by glowing digital circuits and code snippets subtly etched onto the gears. The music box plays classic PlayStation game soundtracks, visualized as shimmering sound waves emanating from the device. A holographic screen displays the DuckStation logo and a simplified UI. The scene is set in a cozy workshop filled with vintage tools and modern tech. The lighting is warm and inviting, emphasizing the blend of nostalgia and innovation. The image should be in a detailed 3D isometric illustration style with vibrant colors and a focus on clarity."
    },
    {
        "id": 965974441,
        "name": "klavis",
        "description": "Klavis AI (YC X25):  Open Source MCP integration for AI applications",
        "url": "https://github.com/Klavis-AI/klavis",
        "language": "Python",
        "stars": 3662,
        "forks": 306,
        "created_at": "2025-04-14T07:53:36Z",
        "updated_at": "2025-08-02T10:06:38Z",
        "topics": [
            "agents",
            "ai",
            "ai-agents",
            "api",
            "developer-tools",
            "discord",
            "function-calling",
            "integration",
            "llm",
            "mcp",
            "mcp-client",
            "mcp-server",
            "oauth2",
            "open-source"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T04:31:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/70340fd6c43cca738bbdb0a0fd62b12a1aa724470d0508b7b560d0c753e23cd0/Klavis-AI/klavis"
        ],
        "homepage": "https://www.klavis.ai/",
        "readme_summary": "Klavis AI offers open-source MCP integrations for AI applications, providing a hosted and secure MCP server solution. It simplifies integration with features like built-in authentication, SDKs for Python and TypeScript, and access to numerous tools. Klavis AI is compatible with various LLMs and AI agent frameworks and can also be self-hosted.",
        "key_features": [
            "Instant Integration with Python and TypeScript SDKs or REST API",
            "Built-in Authentication with Secure OAuth flows and API key management",
            "Production-Ready hosted infrastructure",
            "Access to 100+ Tools (CRM, GSuite, Github, Slack, databases, etc.)",
            "Multi-Platform compatibility with LLMs and AI agent frameworks",
            "Self-Hostable open-source MCP servers"
        ],
        "primary_use_case": "Open source MCP integration for AI applications, providing hosted, secure MCP servers and eliminating auth management and client-side code.",
        "open_issues": 7,
        "cover_image_prompt": "A skilled architect overseeing the construction of a bridge connecting various AI applications. The bridge is made of modular components, each representing a different MCP integration (CRM, GSuite, GitHub, etc.). The architect holds a blueprint labeled 'Klavis AI' and is directing robots that are assembling the bridge with secure connections and authentication protocols. The scene is set in a futuristic cityscape with glowing digital elements representing data flow and API connections. Small screens display code snippets and server metrics. The image should be in 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 104693921,
        "name": "mordant",
        "description": "Multiplatform text styling for Kotlin command-line applications",
        "url": "https://github.com/ajalt/mordant",
        "language": "Kotlin",
        "stars": 1085,
        "forks": 41,
        "created_at": "2017-09-25T02:22:28Z",
        "updated_at": "2025-08-02T08:53:56Z",
        "topics": [
            "ansi",
            "ansi-colors",
            "color",
            "console",
            "kotlin",
            "terminal"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-22T16:58:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f2003eb04f4932b2e78fb8085bdd2f1ee8b4277062b9d9a249de4ae4ce859b6c/ajalt/mordant"
        ],
        "homepage": "https://ajalt.github.io/mordant/",
        "readme_summary": "Mordant is a Kotlin library designed for creating visually appealing command-line applications. It allows developers to easily add color and style to text, render Markdown, create layouts with widgets like tables and lists, and even animate these widgets. Mordant simplifies the process of enhancing the user experience in terminal-based applications.",
        "key_features": [
            "Colorful ANSI output with terminal capability detection",
            "Markdown rendering to the terminal",
            "Widgets for terminal output layout (lists, tables, panels)",
            "Animation support for widgets (progress bars, dashboards)"
        ],
        "primary_use_case": "Rendering styled text in command-line applications.",
        "open_issues": 27,
        "cover_image_prompt": "A skilled tailor meticulously crafting a vibrant suit of armor for a knight from threads of pure color and style. The tailor uses a loom that weaves ANSI codes into the fabric, creating a dazzling display of terminal text effects. The knight stands proudly, ready to face any command-line challenge with unmatched flair. Small screens display code snippets and terminal outputs, subtly connecting the craft to software. The scene is set in a brightly lit workshop with a clean, focused composition and a modern color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 24911519,
        "name": "PcapPlusPlus",
        "description": "PcapPlusPlus is a multiplatform C++ library for capturing, parsing and crafting of network packets. It is designed to be efficient, powerful and easy to use. It provides C++ wrappers for the most popular packet processing engines such as libpcap, Npcap, WinPcap, DPDK, AF_XDP and PF_RING.",
        "url": "https://github.com/seladb/PcapPlusPlus",
        "language": "C++",
        "stars": 2959,
        "forks": 717,
        "created_at": "2014-10-07T21:04:05Z",
        "updated_at": "2025-08-02T07:51:31Z",
        "topics": [
            "cpp",
            "dpdk",
            "ebpf",
            "libpcap",
            "linux",
            "mac-osx",
            "multiplatform",
            "network-forensics",
            "network-tools",
            "networking",
            "packet-crafting",
            "packet-parsing",
            "packet-processing",
            "pcap",
            "pcap-files",
            "pcapplusplus",
            "pf-ring",
            "tcp-reassembly",
            "windows",
            "winpcap"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-28T03:34:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3c439b48e553eaffc5672da68610df4df26b51950b63f14df8e8777b9e2950fb/seladb/PcapPlusPlus"
        ],
        "homepage": "https://pcapplusplus.github.io/",
        "readme_summary": "PcapPlusPlus is a multiplatform C++ library designed for efficient capturing, parsing, and crafting of network packets. It provides C++ wrappers for popular packet processing engines like libpcap, WinPcap, Npcap, DPDK, AF_XDP and PF_RING. It supports decoding and forging capabilities for a large variety of network protocols and can be downloaded via GitHub, Homebrew, Vcpkg, Conan or built manually.",
        "key_features": [
            "Capturing network packets",
            "Parsing network packets",
            "Crafting network packets",
            "Multiplatform support",
            "C++ wrappers for packet processing engines (libpcap, WinPcap, Npcap, DPDK, eBPF AF_XDP, PF_RING)",
            "Decoding and forging capabilities for various network protocols"
        ],
        "primary_use_case": "Capturing, parsing, and crafting network packets in C++ applications across multiple platforms.",
        "open_issues": 35,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate glass bottles, each representing a network packet. The artisan uses various tools – a delicate blower for shaping (packet crafting), a precise cutter for parsing, and a sturdy mold for capturing. These bottles are then carefully placed onto a multi-lane highway, symbolizing network traffic. Subtle UI elements float nearby, displaying packet headers and protocol information. The scene is bathed in soft, diffused light, creating a sense of precision and control. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 45695616,
        "name": "mydumper",
        "description": "Official MyDumper Project",
        "url": "https://github.com/mydumper/mydumper",
        "language": "C",
        "stars": 2807,
        "forks": 479,
        "created_at": "2015-11-06T17:11:15Z",
        "updated_at": "2025-08-02T09:34:24Z",
        "topics": [
            "database",
            "mariadb",
            "multithreading",
            "mysql",
            "percona",
            "replication",
            "tidb"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T05:20:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5f95792eafb4422ccf7a6ca97c53eee52a00c572510bf5d3bf65cf885bd549ee/mydumper/mydumper"
        ],
        "homepage": "",
        "readme_summary": "MyDumper is a tool for creating logical backups of MySQL databases. It utilizes multithreading to achieve faster backup speeds and provides consistent snapshots. It also offers features like PCRE support for specifying database and table inclusions/exclusions and separate files for tables and metadata, making it easier to manage backups.",
        "key_features": [
            "Parallelism for faster backups",
            "Consistent snapshots across all threads",
            "PCRE support for database and table inclusion/exclusion",
            "Separate files for tables and metadata"
        ],
        "primary_use_case": "Creating consistent and efficient logical backups of MySQL databases.",
        "open_issues": 42,
        "cover_image_prompt": "Imagine a skilled archivist meticulously preserving ancient scrolls within a grand library. The archivist, representing MyDumper, carefully copies the knowledge from the fragile scrolls (MySQL databases) onto durable, modern tablets (backup files). Multiple hands (threads) work in parallel, ensuring no information is lost. Subtle UI elements glow on the tablets, displaying database schemas. The library is bathed in warm, golden light, symbolizing data integrity. The scene is a 3D isometric illustration with a focus on clarity and detail, conveying the essence of efficient and reliable database backup."
    }
]