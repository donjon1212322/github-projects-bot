[
    {
        "id": 801580724,
        "name": "Open_Duck_Mini",
        "description": "Making a mini version of the BDX droid",
        "url": "https://github.com/apirrone/Open_Duck_Mini",
        "language": "Python",
        "stars": 599,
        "forks": 68,
        "created_at": "2024-05-16T14:03:25Z",
        "updated_at": "2025-03-14T09:38:36Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T08:51:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a44d33c3b3197d8a673db7fe26786824c6548966279be29b8f80e69a5e68f29f/apirrone/Open_Duck_Mini"
        ],
        "homepage": "",
        "readme_summary": "The Open Duck Mini repository provides resources for building a miniature replica of the BDX droid, focusing on locomotion achieved through reinforcement learning. It includes CAD files, simulation environments, a BOM, build guides, and embedded runtime code. The project aims to create a functional, walking robot with a focus on sim-to-real transfer.",
        "key_features": [
            "Miniature BDX Droid replica",
            "Reinforcement learning for locomotion",
            "Sim-to-real gait development",
            "Mechanical design and CAD files",
            "Bill of Materials (BOM)",
            "Print and assembly guides",
            "Embedded runtime code for Raspberry Pi",
            "Actuator identification using Rhoban's BAM"
        ],
        "primary_use_case": "Development of a miniature, walking robot using reinforcement learning, including mechanical design, simulation, and embedded runtime implementation.",
        "open_issues": 3,
        "cover_image_prompt": "A skilled roboticist carefully assembling a miniature humanoid robot on a workbench, surrounded by tools and components. The robot, resembling a stylized duck, is in the final stages of completion. A holographic display projects reinforcement learning algorithms and gait simulations onto the workbench. Small UI elements show code snippets and robot parameters. The scene is set in a brightly lit, modern workshop with a clean and organized aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and crisp details, emphasizing the blend of robotics, AI, and miniature design."
    },
    {
        "id": 708393007,
        "name": "EyeGestures",
        "description": "gaze tracking software",
        "url": "https://github.com/NativeSensors/EyeGestures",
        "language": "Python",
        "stars": 290,
        "forks": 28,
        "created_at": "2023-10-22T12:40:48Z",
        "updated_at": "2025-03-14T09:54:49Z",
        "topics": [
            "eye-care",
            "eye-tracking",
            "eyetracking",
            "gaze-estimation",
            "gaze-tracking",
            "gazetracking",
            "healthcare",
            "hmi"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-02-13T17:25:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a27c1696e1af5e1ae5fc419adc8ac065039388bc6d15866a95a570cbbd337a71/NativeSensors/EyeGestures"
        ],
        "homepage": "",
        "readme_summary": "EyeGestures is an open-source Python library designed for eye-tracking and gaze estimation using standard webcams and phone cameras. It aims to democratize access to eye-tracking technology by eliminating the need for expensive, dedicated hardware. A JavaScript port, EyeGesturesLite, is also available.",
        "key_features": [
            "Open-source eye-tracking software/library",
            "Uses native webcams and phone cameras",
            "Aims to provide accessible eye-tracking without expensive hardware",
            "JavaScript port available (EyeGesturesLite)"
        ],
        "primary_use_case": "Enabling eye-tracking and eye-driven interfaces using standard webcams or phone cameras, making the technology accessible without specialized hardware.",
        "open_issues": 2,
        "cover_image_prompt": "A person using only their eyes to control a computer interface, represented by glowing lines extending from their eyes to various application windows. The scene takes place in a modern, minimalist office with soft, ambient lighting. Subtle UI elements are overlaid on the application windows, showing eye-tracking data and control options. The repository name, 'EyeGestures,' is subtly integrated into the background as a watermark. The image should be in a flat design style with clear iconography and a calming color scheme."
    },
    {
        "id": 268163609,
        "name": "qdrant",
        "description": "Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/",
        "url": "https://github.com/qdrant/qdrant",
        "language": "Rust",
        "stars": 22473,
        "forks": 1539,
        "created_at": "2020-05-30T21:37:01Z",
        "updated_at": "2025-03-14T09:56:39Z",
        "topics": [
            "ai-search",
            "ai-search-engine",
            "embeddings-similarity",
            "hnsw",
            "image-search",
            "knn-algorithm",
            "machine-learning",
            "mlops",
            "nearest-neighbor-search",
            "neural-network",
            "neural-search",
            "recommender-system",
            "search",
            "search-engine",
            "search-engines",
            "similarity-search",
            "vector-database",
            "vector-search",
            "vector-search-engine"
        ],
        "quality_score": 1.2000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-02-17T10:00:26Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/268163609/ff31dbce-d4ad-4020-b22c-a23250b2e713"
        ],
        "homepage": "https://qdrant.tech",
        "readme_summary": "Qdrant is a high-performance vector similarity search engine and database written in Rust. It allows users to store, search, and manage vector embeddings with associated payloads, enabling applications like neural network-based matching, faceted search, and recommendations. Qdrant offers client libraries in multiple languages and a cloud deployment option.",
        "key_features": [
            "Vector similarity search",
            "Extended filtering support",
            "High-performance Rust implementation",
            "Client libraries in multiple languages",
            "Cloud deployment option"
        ],
        "primary_use_case": "Storing, searching, and managing vector embeddings with associated payloads for AI applications.",
        "open_issues": 313,
        "cover_image_prompt": "Imagine a skilled librarian in a vast, futuristic library, effortlessly retrieving specific books from towering shelves using a neural network-powered search system. The librarian holds a glowing tablet displaying vector embeddings, which act as keys to unlock the desired information. Books matching the search query levitate towards the librarian, surrounded by shimmering particles representing data. Subtle UI elements on the tablet show search parameters and results. The scene is bathed in soft, ethereal light. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 658364446,
        "name": "web-check",
        "description": "üïµÔ∏è‚Äç‚ôÇÔ∏è All-in-one OSINT tool for analysing any website",
        "url": "https://github.com/Lissy93/web-check",
        "language": "TypeScript",
        "stars": 24345,
        "forks": 1900,
        "created_at": "2023-06-25T14:32:11Z",
        "updated_at": "2025-03-14T09:27:56Z",
        "topics": [
            "osint",
            "privacy",
            "security",
            "security-tools",
            "sysadmin"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2024-12-17T20:16:57Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/658364446/dbeba91d-807d-4479-8653-c7db4cf8ae18"
        ],
        "homepage": "https://web-check.xyz",
        "readme_summary": "Web-Check is an all-in-one OSINT tool designed for comprehensive website analysis. It uncovers potential attack vectors, analyzes server architecture, reveals security configurations, and identifies the technologies used by a site. The tool provides insights into various aspects, including IP information, SSL chain, DNS records, cookies, headers, domain information, and more, aiming to help users understand, optimize, and secure their websites.",
        "key_features": [
            "IP info",
            "SSL chain",
            "DNS records",
            "Cookies",
            "Headers",
            "Domain info",
            "Search crawl rules",
            "Page map",
            "Server location",
            "Redirect ledger",
            "Open ports",
            "Traceroute",
            "DNS security extensions",
            "Site performance",
            "Trackers",
            "Associated hostnames",
            "Carbon footprint"
        ],
        "primary_use_case": "Analyzing websites for security vulnerabilities, technology identification, and performance optimization.",
        "open_issues": 51,
        "cover_image_prompt": "Imagine a detective meticulously examining a website through a high-powered magnifying glass. The website, displayed on a holographic screen, reveals layers of hidden information like server details, security configurations, and tracking scripts. The detective, dressed in a modern trench coat, uses a tablet displaying various OSINT tools and data visualizations. The scene is set in a dimly lit, futuristic office with glowing digital interfaces and subtle code snippets projected onto the walls. The composition is focused and clean, with a blue and green color scheme to represent security and analysis. The image should be in a digital painting style with clear outlines and rich details."
    },
    {
        "id": 806192576,
        "name": "Upsonic",
        "description": "The most reliable AI agent framework that supports MCP.",
        "url": "https://github.com/Upsonic/Upsonic",
        "language": "Python",
        "stars": 6907,
        "forks": 654,
        "created_at": "2024-05-26T16:23:38Z",
        "updated_at": "2025-03-14T08:11:48Z",
        "topics": [
            "agent",
            "agent-framework",
            "claude",
            "computer-use",
            "llms",
            "mcp",
            "model-context-protocol",
            "openai",
            "rag",
            "reliability"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-13T22:14:36Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/806192576/e0b7465f-8e5e-4162-be7c-6eae14cec341"
        ],
        "homepage": "https://upsonic.ai",
        "readme_summary": "Upsonic is a Python framework designed to enhance the reliability of AI agents. It achieves this through features like verification layers, a Model Context Protocol for tool integration, and the ability to operate agents on systems without APIs. The framework also provides a secure runtime environment, making it suitable for production environments.",
        "key_features": [
            "Reliability through verification layers, triangular architecture, validator agents, and output evaluation systems",
            "Model Context Protocol (MCP) for leveraging diverse tools without custom development",
            "Integrated Browser Use and Computer Use for agents operating on non-API systems",
            "Secure Runtime environment for agent execution"
        ],
        "primary_use_case": "Building reliable AI agent workflows for real-world applications, particularly in scenarios requiring high accuracy and integration with diverse systems.",
        "open_issues": 20,
        "cover_image_prompt": "A skilled architect overseeing a construction site where AI agents are being meticulously assembled from modular components. The architect uses a blueprint labeled 'Model Context Protocol' to ensure each agent seamlessly integrates with various tools and systems. Verification layers act as quality control inspectors, rigorously testing each agent's reliability and accuracy. The construction site is set in a futuristic cityscape with a focus on secure runtime environments. The image should be in 3D isometric illustration style with clear outlines and vibrant colors."
    },
    {
        "id": 329782568,
        "name": "dioxus",
        "description": "Fullstack app framework for web, desktop, mobile, and more.",
        "url": "https://github.com/DioxusLabs/dioxus",
        "language": "Rust",
        "stars": 25727,
        "forks": 1013,
        "created_at": "2021-01-15T01:57:26Z",
        "updated_at": "2025-03-14T09:36:17Z",
        "topics": [
            "android",
            "css",
            "desktop",
            "html",
            "ios",
            "native",
            "react",
            "rust",
            "ssr",
            "ui",
            "virtualdom",
            "wasm",
            "web"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-14T07:51:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a677b259af5e58d421201f8c9d5e5a62bdd1f861127ac9fd896c0da482a463eb/DioxusLabs/dioxus"
        ],
        "homepage": "https://dioxuslabs.com",
        "readme_summary": "Dioxus is a Rust framework for building cross-platform applications. It enables developers to write code once and deploy it to web, desktop, and mobile platforms. Key features include ergonomic state management, type-safe routing, server functions, an integrated bundler, and instant hot-reloading for rapid development.",
        "key_features": [
            "Cross-platform app development (web, desktop, mobile, server)",
            "Ergonomic state management",
            "Type-safe Routing and server functions",
            "Integrated bundler",
            "Instant hot-reloading"
        ],
        "primary_use_case": "Building full-stack applications for web, desktop, and mobile from a single Rust codebase.",
        "open_issues": 327,
        "cover_image_prompt": "Imagine a skilled architect at a digital drafting table, effortlessly designing structures for various platforms: a sleek website, a modern desktop app, and a vibrant mobile interface, all stemming from a single blueprint. The blueprint glows with Rust-colored energy, branching out into these diverse applications. Subtle UI elements float around the architect, displaying code snippets and live previews. The scene is bathed in soft, ambient light, creating a sense of innovation and efficiency. The composition is clean and focused, with a harmonious color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 801710502,
        "name": "ch-ui",
        "description": "Use CH-UI to work with your data from Click House self-hosted with a user-friendly interface. CH-UI is a modern and feature-rich user interface for ClickHouse databases. It offers an intuitive platform for querying ClickHouse databases, executing queries, and visualizing metrics about your instance.",
        "url": "https://github.com/caioricciuti/ch-ui",
        "language": "TypeScript",
        "stars": 283,
        "forks": 23,
        "created_at": "2024-05-16T19:04:08Z",
        "updated_at": "2025-03-14T06:22:59Z",
        "topics": [
            "big-data",
            "big-data-analytics",
            "big-data-visualization",
            "clickhouse-ui"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-02-17T07:46:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f324817ec8d3a062e460916c652a0075d0aaaae522f301cff8e6d066a663b581/caioricciuti/ch-ui"
        ],
        "homepage": "https://ch-ui.com",
        "readme_summary": "CH-UI is a modern web interface for ClickHouse databases, providing an intuitive platform for managing data, executing SQL queries with an advanced editor, and visualizing instance metrics. It offers features like optimized performance, TypeScript implementation, and a customizable user interface, making it a comprehensive tool for ClickHouse database management and analytics.",
        "key_features": [
            "ClickHouse Integration",
            "Advanced SQL Editor with IntelliSense, syntax highlighting, and query history",
            "Dynamic Data Visualization with interactive tables and custom options",
            "Optimized Performance with IndexedDB caching",
            "TypeScript Implementation",
            "Custom Table Management",
            "Enhanced Metrics Dashboard for query performance and resource utilization",
            "Modern UI/UX with dark/light mode and customizable layouts"
        ],
        "primary_use_case": "Managing ClickHouse databases, executing queries, and visualizing metrics.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled cartographer meticulously crafting a detailed map of a vast data landscape, using specialized tools to chart ClickHouse databases. The cartographer's desk is adorned with glowing screens displaying real-time query results and performance metrics. Data streams flow from the ClickHouse server, visualized as rivers and mountains on the map. The map itself is interactive, allowing the cartographer to zoom in and explore specific data points. The scene is set in a bright, modern office with a large window overlooking a digital cityscape. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    }
]