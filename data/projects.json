[
    {
        "id": 995379598,
        "name": "3d-model-playground",
        "description": "Control 3D models using hand gestures and voice commands in real-time. Threejs / mediapipe computer vision",
        "url": "https://github.com/collidingScopes/3d-model-playground",
        "language": "JavaScript",
        "stars": 144,
        "forks": 11,
        "created_at": "2025-06-03T11:48:45Z",
        "updated_at": "2025-06-06T09:30:45Z",
        "topics": [
            "3d-model",
            "animation",
            "augmented-reality",
            "computer-vision",
            "hand-tracking",
            "mediapipe",
            "open-source",
            "rosebud",
            "threejs",
            "tutorial",
            "voice-recognition",
            "web-speech-api"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-06-03T15:21:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9fe7f9ca60123bacb390ae34a96a30f6a2ec9c1ce5f018ac3ee462c71c83e9fa/collidingScopes/3d-model-playground"
        ],
        "homepage": "https://collidingscopes.github.io/3d-model-playground/",
        "readme_summary": "The 3D Model Playground is an interactive web application that allows users to control 3D models in real-time using hand gestures and voice commands. It leverages Three.js for 3D rendering, MediaPipe for computer vision, and the Web Speech API for voice recognition, enabling users to manipulate and animate 3D models through intuitive interactions.",
        "key_features": [
            "Real-time 3D model control",
            "Hand gesture recognition",
            "Voice command recognition",
            "GLTF model import",
            "Interactive web application"
        ],
        "primary_use_case": "Interactive 3D model manipulation using hand gestures and voice commands.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled puppeteer stands before a large, transparent screen, manipulating a detailed 3D model of a futuristic robot with their hands and voice. The robot mirrors the puppeteer's gestures and responds to spoken commands, showcasing real-time control. Subtle UI elements float around the robot, displaying hand-tracking data and voice command interpretations. The scene is set in a modern, minimalist studio with soft, diffused lighting. Small code snippets and 3D wireframes are subtly projected onto the back wall. The composition is clean and focused, emphasizing the connection between the puppeteer and the 3D model. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 993002543,
        "name": "PhoneAgent",
        "description": null,
        "url": "https://github.com/rounak/PhoneAgent",
        "language": "Swift",
        "stars": 394,
        "forks": 52,
        "created_at": "2025-05-30T03:51:36Z",
        "updated_at": "2025-06-06T08:43:38Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-02T04:06:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/88ff413259f21ee035aa466b2c2a657c559f15ae5d5eb5eb5c864e37c464a3db/rounak/PhoneAgent"
        ],
        "homepage": null,
        "readme_summary": "PhoneAgent is an iOS application that leverages OpenAI models to automate tasks on an iPhone. It interacts with apps through accessibility features, allowing it to tap, swipe, scroll, type, and open apps based on user prompts. The application also supports voice control and an 'Always On' mode for continuous listening, making it possible to automate tasks hands-free.",
        "key_features": [
            "Uses OpenAI models to automate tasks on an iPhone.",
            "Can interact with apps by tapping, swiping, scrolling, and typing.",
            "Allows voice control via microphone.",
            "Offers an Always On mode for continuous listening.",
            "Securely stores OpenAI API key on the device."
        ],
        "primary_use_case": "Automating tasks on an iPhone using OpenAI models, spanning across multiple apps.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of iPhone apps. The conductor, with a baton emitting digital particles, directs various app icons floating in the air â€“ a messaging app sending a haiku, a map app routing an Uber, and a settings app adjusting preferences. Subtle UI elements and code snippets float around the conductor, representing the underlying AI. The scene is set in a bright, modern studio with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 951534260,
        "name": "rf-detr",
        "description": "RF-DETR is a real-time object detection model architecture developed by Roboflow, SOTA on COCO & designed for fine-tuning.",
        "url": "https://github.com/roboflow/rf-detr",
        "language": "Python",
        "stars": 2196,
        "forks": 228,
        "created_at": "2025-03-19T20:43:00Z",
        "updated_at": "2025-06-06T08:33:49Z",
        "topics": [
            "computer-vision",
            "detr",
            "machine-learning",
            "object-detection",
            "rf-detr"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-05-27T15:02:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/736d4a69fdccb8821f7f83f850234830d486d0f79b36c050ad4f414957cd6028/roboflow/rf-detr"
        ],
        "homepage": "https://blog.roboflow.com/rf-detr/",
        "readme_summary": "RF-DETR is a real-time object detection model architecture that achieves state-of-the-art performance on the COCO and RF100-VL benchmarks. It is designed for fine-tuning and can be deployed on edge devices using Roboflow Inference, making it suitable for applications requiring both accuracy and real-time performance.",
        "key_features": [
            "Real-time object detection",
            "Transformer-based architecture",
            "SOTA performance on COCO benchmark",
            "Competitive performance at base sizes",
            "State-of-the-art performance on RF100-VL benchmark",
            "Edge deployment capability using Roboflow Inference"
        ],
        "primary_use_case": "Real-time object detection tasks requiring high accuracy and speed, suitable for edge deployment.",
        "open_issues": 60,
        "cover_image_prompt": "Imagine a skilled falconer, representing RF-DETR, swiftly and accurately identifying objects in a bustling marketplace scene below. The falconer wears a high-tech visor displaying bounding boxes around various items like fruits, tools, and people. Digital particles stream from the visor, enhancing the falcon's vision. The marketplace is subtly overlaid with a grid, resembling a computer vision dataset. Small UI elements on the falconer's glove show real-time object detection metrics. The scene is bathed in warm, natural light, creating a sense of efficiency and precision. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 973180254,
        "name": "stagewise",
        "description": "What if Cursor, Github Copilot and Windsurf could actually interact with your browser?  ðŸ’¬ Comment on any DOM element ðŸ§  We send the real context to Windsurf âš¡ Save time manually selecting files  Setup in 30 seconds, fully open-source, works first prompt.  Supports every framework with first party support for React, Next.js, Vue and Nuxt.js",
        "url": "https://github.com/stagewise-io/stagewise",
        "language": "TypeScript",
        "stars": 3072,
        "forks": 147,
        "created_at": "2025-04-26T12:43:16Z",
        "updated_at": "2025-06-06T10:08:31Z",
        "topics": [
            "code-editor",
            "cursor",
            "cursor-ai",
            "ide",
            "vscode",
            "vscode-extension",
            "windsurf",
            "windsurf-extension"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-06-06T08:00:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/289e13c39c6aedfce98e33d265e45f653cf1e817a57371aa70e8480004acc37a/stagewise-io/stagewise"
        ],
        "homepage": "https://stagewise.io",
        "readme_summary": "Stagewise is a browser toolbar that bridges the gap between frontend UIs and code AI agents. It allows developers to select and comment on any DOM element, sending relevant context like DOM elements, screenshots, and metadata to the AI agent. This eliminates the need for manually providing file paths and other contextual information, streamlining the AI-assisted development process.",
        "key_features": [
            "Connects frontend UI to code AI agents",
            "Allows commenting on any DOM element",
            "Sends DOM elements, screenshots, and metadata to AI agent",
            "Works out of the box",
            "Customizable with a configuration file",
            "Does not impact bundle size"
        ],
        "primary_use_case": "Connecting a browser toolbar to code AI agents in a code editor, allowing developers to provide real-time, browser-powered context to their AI agents.",
        "open_issues": 30,
        "cover_image_prompt": "Imagine a skilled architect using a special lens to view a building's blueprint directly overlaid onto the real-world structure. The architect points to a specific window on the building, and a small AI assistant hovering nearby instantly displays the relevant code snippet and related documentation on a transparent screen. The scene is set in a bright, modern cityscape. Subtle digital particles flow between the building and the AI assistant, representing the real-time data connection. The repository name, 'stagewise,' is subtly displayed on the architect's tablet. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 748568485,
        "name": "whoBIRD",
        "description": "Identify bird sounds in real time with this Android version of BirdNET. Bird sound recognition for more than 6,000 species worldwide. ",
        "url": "https://github.com/woheller69/whoBIRD",
        "language": "Kotlin",
        "stars": 533,
        "forks": 27,
        "created_at": "2024-01-26T09:19:16Z",
        "updated_at": "2025-06-06T09:54:35Z",
        "topics": [
            "android-app",
            "artificial-intelligence",
            "birding",
            "birdnet",
            "birdsong"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-06-05T09:06:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b13bf5ed243a7e92174a1c5b2a47163b2e096432ad41211d032585477ec7810e/woheller69/whoBIRD"
        ],
        "homepage": "",
        "readme_summary": "The whoBIRD app is an Android application that identifies bird sounds in real-time using the BirdNET framework. It boasts a database of over 6,000 bird species and operates offline. The app offers various customization options, including the ability to filter noise, adjust detection thresholds, and save audio recordings.",
        "key_features": [
            "Real-time bird sound identification",
            "Offline functionality (no internet required)",
            "Database of over 6,000 bird species",
            "Customization options (ignore date/place, show images, audio source selection, high pass filter, threshold adjustment, weighted meta model)",
            "Option to save .wav files of detections"
        ],
        "primary_use_case": "Identifying bird sounds in real-time using an Android app, without requiring an internet connection.",
        "open_issues": 6,
        "cover_image_prompt": "A nature enthusiast with headphones stands in a lush forest, holding a smartphone displaying the whoBIRD app interface. The app identifies a nearby bird, visually represented by a glowing aura around the bird. The phone screen shows a waveform and the bird's name. Subtle UI elements and data visualizations float around the phone, connecting the natural scene to the app's functionality. The forest is bathed in soft, dappled sunlight. The image should be in a vibrant digital painting style with clear outlines and a focus on detail, creating a sense of wonder and technological integration."
    },
    {
        "id": 10332822,
        "name": "calibre",
        "description": "The official source code repository for the calibre ebook manager",
        "url": "https://github.com/kovidgoyal/calibre",
        "language": "Python",
        "stars": 21548,
        "forks": 2373,
        "created_at": "2013-05-28T10:03:23Z",
        "updated_at": "2025-06-06T09:47:13Z",
        "topics": [
            "calibre",
            "ebook",
            "ebook-formats",
            "ebook-manager",
            "ebook-reader",
            "ebooks",
            "epub",
            "epub-generation",
            "kindle",
            "python"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-05T01:28:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ba046025ee3d3b0809f6e8f3e2b1bf57b82f4f9434268318888e5d9b65fbfbe0/kovidgoyal/calibre"
        ],
        "homepage": "https://calibre-ebook.com",
        "readme_summary": "Calibre is a comprehensive e-book manager that allows users to view, convert, edit, and catalog e-books in various formats. It supports communication with e-book readers, fetches metadata from the internet, and can download and convert newspapers into e-books. Calibre is a cross-platform application available on Linux, Windows, and macOS.",
        "key_features": [
            "E-book management (view, convert, edit, catalog)",
            "E-book format conversion",
            "Communication with e-book reader devices",
            "Metadata fetching from the internet",
            "Newspaper downloading and conversion to e-books",
            "Cross-platform support (Linux, Windows, macOS)"
        ],
        "primary_use_case": "Managing and converting e-books across various formats and devices.",
        "open_issues": 0,
        "cover_image_prompt": "A librarian meticulously organizing a vast collection of books from various sources into a beautifully structured digital library. The librarian uses a magical interface that converts physical books, web articles, and handwritten notes into perfectly formatted ebooks. Glowing digital threads connect the books, representing metadata and format conversions. Small screens display UI elements of Calibre, subtly integrated into the scene. The setting is a bright, airy library with a futuristic touch. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 814028199,
        "name": "learn-agentic-ai",
        "description": "Learn Agentic AI using Dapr Agentic Cloud Ascent (DACA) Design Pattern and Agent-Native Cloud Technologies: OpenAI Agents SDK, Memory, MCP, A2A, Knowledge Graphs, Dapr, Rancher Desktop, and Kubernetes.",
        "url": "https://github.com/panaversity/learn-agentic-ai",
        "language": "Jupyter Notebook",
        "stars": 2800,
        "forks": 610,
        "created_at": "2024-06-12T07:50:04Z",
        "updated_at": "2025-06-06T10:03:39Z",
        "topics": [
            "a2a",
            "agentic-ai",
            "dapr",
            "dapr-pub-sub",
            "dapr-service-invocation",
            "dapr-sidecar",
            "dapr-workflow",
            "docker",
            "kafka",
            "kubernetes",
            "langmem",
            "mcp",
            "openai",
            "openai-agents-sdk",
            "openai-api",
            "postgresql-database",
            "rabbitmq",
            "rancher-desktop",
            "redis",
            "serverless-containers"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-05-29T05:18:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9e505bb6cdef71fe8bfc6ac099cd1b13d437d609eb75a0487b22ece771bd1972/panaversity/learn-agentic-ai"
        ],
        "homepage": "",
        "readme_summary": "The repository provides resources for learning Agentic AI development using the Dapr Agentic Cloud Ascent (DACA) design pattern. It focuses on building scalable AI agent systems leveraging technologies like Dapr, Kubernetes, and the OpenAI Agents SDK. The primary goal is to enable developers to design AI agents capable of handling a large number of concurrent users with minimal resources.",
        "key_features": [
            "Dapr Agentic Cloud Ascent (DACA) Design Pattern",
            "Agent-Native Cloud Technologies",
            "OpenAI Agents SDK integration",
            "Knowledge Graph utilization",
            "Kubernetes deployment",
            "Scalable AI Agent Design"
        ],
        "primary_use_case": "Learning and implementing Agentic AI systems using Dapr and related technologies for scalable agent orchestration.",
        "open_issues": 4,
        "cover_image_prompt": "A master architect overseeing a city of interconnected AI agents, each represented by small, glowing robots working in harmony. The city is built on a foundation of Dapr components, visualized as stylized building blocks, with data flowing seamlessly between them. The architect uses a holographic interface to monitor and manage the agents, ensuring smooth operation and scalability. Subtle UI elements display agentic workflows and performance metrics. The scene is set in a bright, futuristic cityscape with a clean, isometric perspective. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 14508450,
        "name": "gophish",
        "description": "Open-Source Phishing Toolkit",
        "url": "https://github.com/gophish/gophish",
        "language": "Go",
        "stars": 12681,
        "forks": 2586,
        "created_at": "2013-11-18T23:26:43Z",
        "updated_at": "2025-06-06T05:47:48Z",
        "topics": [
            "golang",
            "gophish",
            "phishing",
            "security"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-09-23T04:24:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b71642208d084a5db7280330113bf6c8edc88966d97f69c65c3f1b85f0c99e9b/gophish/gophish"
        ],
        "homepage": "https://getgophish.com",
        "readme_summary": "Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It enables users to quickly set up and execute phishing engagements to assess security vulnerabilities and conduct security awareness training. The toolkit supports multiple platforms and can be deployed via Docker.",
        "key_features": [
            "Phishing campaign setup and execution",
            "Security awareness training",
            "Cross-platform support (Windows, Mac, Linux)",
            "Docker support"
        ],
        "primary_use_case": "Simulating phishing attacks for security awareness training and penetration testing.",
        "open_issues": 579,
        "cover_image_prompt": "A skilled fisherman sitting in a small boat, casting a line baited with a tempting email into a sea teeming with unsuspecting fish (representing users). Some fish are easily caught, while others are more cautious. The fisherman's boat has a small control panel showing campaign statistics and email templates. A subtle overlay of digital code patterns shimmers on the water's surface. The scene is set at dawn with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 776991286,
        "name": "chiasmodon",
        "description": "Chiasmodon is an OSINT  tool designed to assist in the process of gathering information about a target domain. Its primary functionality revolves around searching for domain-related data, including domain emails, domain credentials, CIDRs , ASNs , and subdomains, the tool also allows users to search Google Play application ID.",
        "url": "https://github.com/chiasmod0n/chiasmodon",
        "language": "Python",
        "stars": 605,
        "forks": 44,
        "created_at": "2024-03-25T01:10:45Z",
        "updated_at": "2025-06-06T08:23:10Z",
        "topics": [
            "asn",
            "attack-surface",
            "bugbounty",
            "bugbounty-tool",
            "chiasmodon",
            "cidr",
            "credentials",
            "email-enumeration",
            "emails",
            "information-gathering",
            "intelligence",
            "intelligence-analysis",
            "osint",
            "reconnaissance",
            "reconnaissance-framework",
            "subdomain-enumeration",
            "subdomains"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-05-10T21:44:14Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/776991286/65f98959-bec7-414e-bb70-816b5a4a8109"
        ],
        "homepage": "http://chiasmodon.online",
        "readme_summary": "Chiasmodon is an OSINT tool designed to gather information about a target domain. It allows users to search for domain-related data, including emails, credentials, CIDRs, ASNs, and subdomains, as well as Google Play application information. The tool offers comprehensive scanning capabilities, customizable output formats, and additional options for enhanced data analysis.",
        "key_features": [
            "Domain information gathering",
            "Google Play application information retrieval",
            "Credential searching (email, username, password)",
            "IP address information retrieval",
            "CIDR block information retrieval",
            "ASN information retrieval",
            "Port scanning",
            "ISP information retrieval",
            "Organization information retrieval",
            "URL path analysis",
            "Phone number information retrieval",
            "Comprehensive domain scanning",
            "Country-based filtering",
            "Customizable output formats (text, JSON, CSV)",
            "Additional options (API tokens, timeouts, result limits)"
        ],
        "primary_use_case": "OSINT (Open Source Intelligence) gathering for domain reconnaissance and attack surface analysis.",
        "open_issues": 0,
        "cover_image_prompt": "A detective, cloaked in shadows, uses a magnifying glass to examine a digital globe. The globe is overlaid with a network of interconnected nodes representing domains, IP addresses, and email addresses. As the detective focuses on a specific domain, information fragments â€“ emails, usernames, passwords, and subdomains â€“ materialize around it like glowing clues. The scene is set in a dimly lit, high-tech office filled with screens displaying OSINT data. Subtle code snippets and data visualizations float in the background, connecting the metaphor to software. The image should be in a digital painting style with dramatic lighting and clear outlines."
    },
    {
        "id": 20230114,
        "name": "kippo",
        "description": "Kippo - SSH Honeypot",
        "url": "https://github.com/desaster/kippo",
        "language": "Python",
        "stars": 1689,
        "forks": 281,
        "created_at": "2014-05-27T18:13:09Z",
        "updated_at": "2025-06-06T01:43:03Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2023-08-26T17:39:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4a1a7a0621fe7d624003d6662b0083dbd3180df0d41c82156eab4f642e711759/desaster/kippo"
        ],
        "homepage": null,
        "readme_summary": "Kippo is a medium interaction SSH honeypot. It's designed to log brute force attacks and the entire shell interaction performed by attackers. Kippo includes features such as a fake filesystem, the ability to log downloaded files, and session replay capabilities.",
        "key_features": [
            "Logs brute force attacks",
            "Logs entire shell interaction performed by the attacker",
            "Fake filesystem with the ability to add/remove files",
            "Fake file contents",
            "Session logs stored in UML Compatible format",
            "Saves files downloaded with wget",
            "Trickery to simulate a real environment"
        ],
        "primary_use_case": "SSH honeypot designed to log brute force attacks and attacker shell interactions.",
        "open_issues": 59,
        "cover_image_prompt": "A blacksmith forging a key in a fiery forge. The blacksmith carefully hammers glowing digital code onto the key's teeth, shaping it to perfectly fit a lock representing a server. Sparks of data fly from the hammer, and small screens display SSH login attempts being deflected. The forge is set in a high-tech workshop with subtle network diagrams etched into the walls. The scene is illuminated by the warm glow of the forge and cool blue light from the screens. The composition is focused and clear, emphasizing the creation of a secure key. The image should be in a digital painting style with sharp details and vibrant colors."
    },
    {
        "id": 888632546,
        "name": "Exploit-Street",
        "description": "Complete list of LPE exploits for Windows (starting from 2023)",
        "url": "https://github.com/MzHmO/Exploit-Street",
        "language": "C",
        "stars": 794,
        "forks": 104,
        "created_at": "2024-11-14T18:24:50Z",
        "updated_at": "2025-06-05T14:05:31Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-04-23T17:18:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a6b54ac6ce2f32a9043c9a66ca7f8bda8b7d88403505dc0930dce183057e2b6d/MzHmO/Exploit-Street"
        ],
        "homepage": null,
        "readme_summary": "The Exploit-Street repository aims to be a comprehensive collection of Local Privilege Escalation (LPE) exploits for Windows systems, starting from 2023. It addresses the perceived lack of a consolidated resource for these exploits. The repository encourages contributions from the community to ensure its completeness and accuracy.",
        "key_features": [
            "Complete list of LPE (Local Privilege Escalation) exploits for Windows (starting from 2023)"
        ],
        "primary_use_case": "Providing a centralized resource for Windows LPE exploits.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled locksmith meticulously crafting a set of master keys in a high-tech workshop. Each key is designed to unlock a different, intricate lock representing various Windows systems. The locksmith uses advanced tools and blueprints, subtly displaying code snippets and vulnerability reports on holographic screens. Successfully crafted keys glow with a soft, secure light. The workshop is clean and organized, with a focus on precision and security. The image should be in a 3D isometric illustration style with detailed textures and a cool color palette."
    }
]