[
    {
        "id": 1024559174,
        "name": "wtffmpeg",
        "description": "a toy that has a local llm spit out ffmpeg commands from natural language prompts on the command-line",
        "url": "https://github.com/scottvr/wtffmpeg",
        "language": "Python",
        "stars": 232,
        "forks": 4,
        "created_at": "2025-07-22T22:38:32Z",
        "updated_at": "2025-07-24T09:53:56Z",
        "topics": [
            "ffmpeg",
            "llm"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-07-23T03:48:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/790374508cb41c4c7305563749628460575ca6cc482695f90798c1ba805902d0/scottvr/wtffmpeg"
        ],
        "homepage": "http://blehg.paperclipmaximizer.ai/wtffmpeg/",
        "readme_summary": "wtffmpeg is a command-line tool that leverages a local Large Language Model (LLM) to translate plain English descriptions into ffmpeg commands. It allows users to describe video and audio tasks in natural language and then generates the corresponding ffmpeg command, offering an interactive execution option and GPU acceleration for faster performance.",
        "key_features": [
            "Natural Language Interface for FFmpeg",
            "Local LLM execution (no external APIs)",
            "Interactive command review and execution",
            "GPU acceleration via llama-cpp-python",
            "Customizable LLM and system prompt"
        ],
        "primary_use_case": "Translating natural language descriptions of video and audio tasks into executable ffmpeg commands.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled translator, depicted as a digital scribe, sits at a high-tech workstation, effortlessly converting spoken words into complex lines of FFmpeg code. The scribe listens intently to a person describing a video editing task, and the workstation displays the corresponding FFmpeg command, ready for execution. The scene is set in a modern, minimalist studio with soft, diffused lighting. Small screens around the workstation show snippets of video and audio waveforms. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 855186891,
        "name": "PakePlus",
        "description": "Turn any webpage/Vue/React and so on into desktop and mobile app under 5M with easy in few minutes. 轻松将任意网站/Vue/React等项目构建为轻量级(小于5M)多端桌面应用和手机应用仅需几分钟. https://ppofficial.netlify.app",
        "url": "https://github.com/Sjj1024/PakePlus",
        "language": "Vue",
        "stars": 5156,
        "forks": 3322,
        "created_at": "2024-09-10T13:12:25Z",
        "updated_at": "2025-07-24T10:11:22Z",
        "topics": [
            "pake",
            "pakeplus",
            "rust",
            "tauri",
            "tauri2",
            "vue3",
            "webapp"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-23T14:39:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/536a0e4d1330e1d4ea9f14d870168d26b4865929632690fd5287bc834f73957e/Sjj1024/PakePlus"
        ],
        "homepage": "https://sjj1024.github.io/PakePlus",
        "readme_summary": "PakePlus is a tool for converting web pages and web applications into native desktop and mobile apps. It leverages Rust Tauri to create small, fast applications with features like custom JavaScript injection and cross-platform support. PakePlus offers both cloud-based and local packaging options, making it easy to create applications without complex local dependencies.",
        "key_features": [
            "Small size (under 5MB)",
            "Cross-platform support (Mac, Windows, Linux, Android, iOS)",
            "Rust Tauri based",
            "GitHub Actions for cloud-based packaging",
            "Custom JavaScript injection",
            "Local packaging support",
            "Static file packaging"
        ],
        "primary_use_case": "Turning web pages or web applications (Vue, React, etc.) into lightweight desktop and mobile applications.",
        "open_issues": 57,
        "cover_image_prompt": "Imagine a skilled artisan transforming rough stones into polished gems within a workshop. The artisan carefully selects a raw webpage (represented by a stone tablet with a URL etched on it) and, using specialized tools, meticulously shapes and refines it. The final product is a gleaming, miniature app icon, radiating a soft glow. UI elements float subtly around the artisan, hinting at the app's functionality. The workshop is bathed in warm, inviting light, with the repository name subtly displayed on a banner. This conceptual illustration should be in a 3D isometric style, emphasizing clarity and precision."
    },
    {
        "id": 313314343,
        "name": "DetoxDroid",
        "description": "Use your phone rather than letting your phone use you.",
        "url": "https://github.com/flxapps/DetoxDroid",
        "language": "Kotlin",
        "stars": 372,
        "forks": 22,
        "created_at": "2020-11-16T13:39:40Z",
        "updated_at": "2025-07-24T07:20:13Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-13T20:04:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/594dcf55fab1f088dd4cb0310e4a98006a2f4f4c08d7ca8d540753665f93be07/flxapps/DetoxDroid"
        ],
        "homepage": "",
        "readme_summary": "DetoxDroid is an Android application designed to help users reduce their phone usage and reclaim their attention. It offers features like grayscale mode with exceptions for specific apps, automatic 'Do Not Disturb' mode, app deactivation, and detection of infinite scrolling behavior. Unlike other digital detoxing apps, DetoxDroid encourages an opt-out approach, making digital detoxing the default state.",
        "key_features": [
            "Grayscale screen with app exceptions",
            "Automatic Do Not Disturb mode",
            "App disappearing/deactivation",
            "Infinite scrolling detection and exit strategy",
            "Opt-out default for detoxing"
        ],
        "primary_use_case": "Digital detoxing and reducing phone usage",
        "open_issues": 41,
        "cover_image_prompt": "A person gently untangling themselves from glowing digital cords that represent social media and distracting apps. The person is stepping out of a dark, cluttered digital space into a bright, serene garden filled with natural light and vibrant colors. Faint UI elements and notification icons are subtly woven into the cords, showing their origin. A small screen in the background displays the DetoxDroid logo. The scene is set in a minimalist, modern style with a focus on clean lines and calming colors. The image should be in 3D isometric illustration style with soft lighting and a sense of peaceful liberation."
    },
    {
        "id": 265122478,
        "name": "manim",
        "description": "A community-maintained Python framework for creating mathematical animations. ",
        "url": "https://github.com/ManimCommunity/manim",
        "language": "Python",
        "stars": 33691,
        "forks": 2361,
        "created_at": "2020-05-19T02:37:13Z",
        "updated_at": "2025-07-24T10:02:26Z",
        "topics": [
            "animations",
            "hacktoberfest",
            "manim",
            "math",
            "python"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-07-21T15:55:33Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fbaa8e3119c22bee724a18f9c2e388b99c7feb65a4f3cd93bd65683f802175fe/ManimCommunity/manim"
        ],
        "homepage": "https://www.manim.community",
        "readme_summary": "Manim is a Python framework for creating mathematical animations, primarily used for explanatory videos like those by 3Blue1Brown. The community edition (ManimCE) offers continued development, improved features, and enhanced documentation. It allows users to programmatically generate precise and visually appealing animations of mathematical concepts.",
        "key_features": [
            "Programmatic animation creation",
            "Used for explanatory math videos",
            "Community-maintained version (ManimCE)",
            "Extensive documentation",
            "Docker support",
            "Online Jupyter environment"
        ],
        "primary_use_case": "Creating mathematical animations for educational videos and presentations.",
        "open_issues": 456,
        "cover_image_prompt": "Imagine a skilled mathematician as a conductor of an orchestra, where mathematical equations are musical notes. With a baton in hand, the conductor animates these equations, bringing them to life as vibrant, dynamic visualizations on a large screen behind the orchestra. The screen displays evolving graphs, geometric shapes morphing seamlessly, and complex formulas dancing in harmony. Subtle UI elements overlay the screen, showing code snippets and animation controls. The scene is set in a grand concert hall with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors, conveying the power and beauty of mathematical animation."
    },
    {
        "id": 679784368,
        "name": "genaiscript",
        "description": "Automatable GenAI Scripting",
        "url": "https://github.com/microsoft/genaiscript",
        "language": "TypeScript",
        "stars": 2726,
        "forks": 197,
        "created_at": "2023-08-17T15:57:21Z",
        "updated_at": "2025-07-24T09:13:51Z",
        "topics": [
            "agent",
            "agents",
            "ai",
            "chatgpt",
            "deepseek-r1",
            "genai",
            "genaistack",
            "gpt",
            "gpt4",
            "javascript",
            "llm",
            "llm-framework",
            "phi4",
            "prompt-engineering",
            "scripting",
            "typescript",
            "vscode-extension"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-27T18:13:57Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/679784368/8680cb3f-9187-4f0b-ab9a-acd1b5016016"
        ],
        "homepage": "https://microsoft.github.io/genaiscript/",
        "readme_summary": "GenAIScript is a framework for programmatically building and managing prompts for LLMs using JavaScript or TypeScript. It provides tools and abstractions for working with prompts, integrates seamlessly with Visual Studio Code, and supports various LLMs and data formats, enabling developers to automate and streamline their GenAI workflows.",
        "key_features": [
            "Programmatic prompt assembly using JavaScript/TypeScript",
            "Visual Studio Code integration and command-line support",
            "Built-in support for multiple LLMs (GitHub Copilot, OpenAI, Azure OpenAI, Anthropic, etc.)",
            "Data schema definition, validation, and repair",
            "Ingestion of text from PDFs, DOCX, and other file formats"
        ],
        "primary_use_case": "Automating the creation and management of prompts for Large Language Models (LLMs) using JavaScript/TypeScript code.",
        "open_issues": 116,
        "cover_image_prompt": "Imagine a skilled gardener tending to a garden of code. The gardener carefully cultivates prompts, represented as delicate seedlings, nurturing them with data and tools. These prompts blossom into beautiful, functional applications, symbolized by vibrant flowers. A subtle UI overlay shows the gardener using GenAIScript to orchestrate the growth. The scene is set in a bright, airy greenhouse filled with natural light. The illustration should be in a 3D isometric style with soft, pastel colors and intricate details."
    },
    {
        "id": 925270205,
        "name": "cua",
        "description": "c/ua is the Docker Container for Computer-Use AI Agents.",
        "url": "https://github.com/trycua/cua",
        "language": "Python",
        "stars": 9044,
        "forks": 408,
        "created_at": "2025-01-31T15:02:49Z",
        "updated_at": "2025-07-24T09:11:29Z",
        "topics": [
            "agent",
            "ai-agent",
            "apple",
            "computer-use",
            "containerization",
            "cua",
            "lume",
            "macos",
            "manus",
            "operator",
            "swift",
            "virtualization",
            "virtualization-framework",
            "windows",
            "windows-sandbox"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-07-16T18:32:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/741fdae8ffb79596fc04fdca51f7f95ed8dbbad1ff38519b0c8892a94d1016b3/trycua/cua"
        ],
        "homepage": "https://trycua.com",
        "readme_summary": "The c/ua repository provides a Docker container environment for Computer-Use AI Agents, allowing them to control full operating systems. It supports both local and cloud deployment, offering a quick-start Docker-based installation and a Dev Container configuration for development. This enables users to automate desktop tasks with AI agents in a controlled and scalable manner.",
        "key_features": [
            "Enables AI agents to control full operating systems in virtual containers.",
            "Supports local and cloud deployment of AI agents.",
            "Provides a Docker-based guided install for quick use.",
            "Offers a Dev Container configuration for contributors and development."
        ],
        "primary_use_case": "Enabling AI agents to automate desktop tasks by controlling operating systems in virtual containers.",
        "open_issues": 54,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of robotic arms, each representing an AI agent, harmoniously interacting with various computer interfaces like macOS, Windows, and web browsers. The conductor stands on a raised platform resembling a Docker container, symbolizing the controlled environment. Subtle UI elements float around the scene, displaying snippets of Python and Swift code. The backdrop features a stylized cloudscape, hinting at cloud deployment. The overall scene is bathed in soft, ambient light, creating a sense of seamless integration and effortless automation. Render this in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 996851962,
        "name": "tokasaurus",
        "description": null,
        "url": "https://github.com/ScalingIntelligence/tokasaurus",
        "language": "Python",
        "stars": 379,
        "forks": 27,
        "created_at": "2025-06-05T15:01:24Z",
        "updated_at": "2025-07-23T21:11:41Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-18T09:41:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9971826fc7386724ce24976f1c66986d14db31e94e88128001a5ff7a028552c7/ScalingIntelligence/tokasaurus"
        ],
        "homepage": null,
        "readme_summary": "Tokasaurus is an LLM inference engine designed for high-throughput workloads, supporting features like OpenAI APIs, data parallelism, Llama3/Qwen2 architectures, and paged KV caching. It focuses on efficiency with low CPU overhead, CUDA graphs, and a scheduler to maximize batch size while preventing out-of-memory errors and recompiles, making it suitable for deploying LLMs in production environments.",
        "key_features": [
            "LLM inference engine",
            "High-throughput workloads",
            "OpenAI API support",
            "Data, pipeline, and tensor parallelism",
            "Llama3 and Qwen2 architecture support",
            "Paged KV caching with prefix caching",
            "Efficient attention over shared prefixes",
            "End-to-end torch compile with dynamic shapes",
            "CUDA graphs",
            "Low CPU overhead",
            "Scheduler for KV cache management",
            "OOM and recompile prevention"
        ],
        "primary_use_case": "High-throughput LLM inference",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a high-speed train, the 'Tokasaurus Express,' effortlessly pulling numerous carriages filled with data through a futuristic cityscape. The train's engine glows with efficient energy, symbolizing low CPU overhead. Along the tracks, holographic displays show Llama3 and Qwen2 logos, indicating architecture support. Above the train, a dynamic scheduler acts as a conductor, optimizing the flow of carriages and preventing any bottlenecks. The city is rendered in a clean, 3D isometric illustration style with vibrant colors, subtly incorporating UI elements and code snippets. The image should evoke speed, efficiency, and intelligent management of resources."
    },
    {
        "id": 954858451,
        "name": "mcptools",
        "description": "A command-line interface for interacting with MCP (Model Context Protocol) servers using both stdio and HTTP transport.",
        "url": "https://github.com/f/mcptools",
        "language": "Go",
        "stars": 1043,
        "forks": 70,
        "created_at": "2025-03-25T18:14:37Z",
        "updated_at": "2025-07-24T09:37:15Z",
        "topics": [
            "mcp",
            "mcp-server",
            "modelcontextprotocol"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-17T08:39:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9de99f68825cb35de332f05b4dba60a6b6d7d15ccc1f2d352ac4daa1e1b2f4f7/f/mcptools"
        ],
        "homepage": "",
        "readme_summary": "MCP Tools is a versatile command-line interface designed for interacting with Model Context Protocol (MCP) servers. It supports multiple transport methods (HTTP, stdio), offers various output formats, and includes features like mock server creation, proxying, interactive shells, and project scaffolding. The tool enables users to discover, call, and manage tools, resources, and prompts from any MCP-compatible server.",
        "key_features": [
            "Discover and call tools provided by MCP servers",
            "Access and utilize resources exposed by MCP servers",
            "Create mock servers for testing client applications",
            "Proxy MCP requests to shell scripts for easy extensibility",
            "Create interactive shells for exploring and using MCP servers",
            "Scaffold new MCP projects with TypeScript support",
            "Format output in various styles (JSON, pretty-printed, table)",
            "Guard and restrict access to specific tools and resources",
            "Support all transport methods (HTTP, stdio)"
        ],
        "primary_use_case": "Interacting with MCP (Model Context Protocol) servers using a command-line interface.",
        "open_issues": 12,
        "cover_image_prompt": "A skilled conductor standing before a complex orchestra of servers, each representing a different MCP service. The conductor uses a command-line interface as their baton, seamlessly directing the flow of data and orchestrating interactions between the servers. Visual cues like glowing data streams and harmonious waveforms emanate from the servers, illustrating the smooth communication facilitated by the tool. Small UI elements displaying MCP commands and server responses are subtly integrated into the scene. The setting is a modern, minimalist control room with soft, ambient lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]