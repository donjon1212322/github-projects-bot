[
    {
        "id": 970094935,
        "name": "focus-anchor",
        "description": "Software to anchor focus.",
        "url": "https://github.com/hamsteak1488/focus-anchor",
        "language": "TypeScript",
        "stars": 6,
        "forks": 0,
        "created_at": "2025-04-21T13:12:20Z",
        "updated_at": "2025-06-24T09:20:32Z",
        "topics": [
            "chrome-extension",
            "productivity",
            "readability",
            "typescript"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-23T17:24:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1ae05222e801ffb25ccda167551fb9022d429621aa792171fdf106c9ecad5ca8/hamsteak1488/focus-anchor"
        ],
        "homepage": "https://chromewebstore.google.com/detail/focus-anchor/fbgkhgandooofmekghflnglnmifponef",
        "readme_summary": "The focus-anchor repository provides a Chrome extension designed to improve readability and focus on web content. It allows users to highlight content at the sentence level with various styles and automatically scrolls to keep the focused sentence in view. This tool enhances productivity by minimizing distractions and promoting concentrated reading.",
        "key_features": [
            "Sentence-level focus",
            "Smart scrolling",
            "Multiple focus styles"
        ],
        "primary_use_case": "Anchoring focus while reading on websites.",
        "open_issues": 0,
        "cover_image_prompt": "A focused scholar sitting at a large, ornate desk, using a magnifying glass to meticulously examine a single sentence in a massive book. The sentence glows with a soft, warm light, drawing the eye. Around the scholar, other pages of the book are blurred and faded, emphasizing the highlighted sentence. Subtle UI elements float around the scene, showing options for underline, outline, and spotlight effects. The repository name, 'Focus Anchor,' is subtly etched into the desk. The scene is bathed in warm, inviting light. The image should be in a digital painting style with clear outlines and rich details."
    },
    {
        "id": 1003282346,
        "name": "reasonable",
        "description": "A Chrome extension which automatically rewrites clickbait-y tweets into reasonable ones.",
        "url": "https://github.com/ilijalichkovski/reasonable",
        "language": "JavaScript",
        "stars": 4,
        "forks": 0,
        "created_at": "2025-06-16T23:03:45Z",
        "updated_at": "2025-06-23T21:21:04Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-17T00:13:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/07724ccfe03f139525483a51572efbc82f8aac557b7ce3908094cfce4f9fabf1/ilijalichkovski/reasonable"
        ],
        "homepage": null,
        "readme_summary": "The 'reasonable' Chrome extension detects clickbait tweets on Twitter (X.com) and replaces them with more reasonable alternatives using the OpenAI API. Users can toggle between the original and rewritten tweets. The extension is configured via a popup where users can enter their OpenAI API key.",
        "key_features": [
            "Detects clickbait tweets",
            "Replaces clickbait tweets with reasonable alternatives using the OpenAI API",
            "Provides a toggle to show the original tweet",
            "Uses OpenAI API for tweet rewriting",
            "Configuration via Chrome extension popup"
        ],
        "primary_use_case": "Automatically rewrite clickbait tweets into reasonable ones.",
        "open_issues": 0,
        "cover_image_prompt": "A news editor sitting at a large oak desk, meticulously rewriting sensational headlines into clear, factual statements. The editor uses a magical quill that transforms clickbait text into reasonable alternatives displayed on a holographic screen. The desk is adorned with UI elements showing the extension interface and subtle code snippets. The scene is set in a cozy, well-lit office with a warm color scheme. The image should be in a digital painting style with clean lines and clear details, emphasizing the transformation process."
    },
    {
        "id": 541960471,
        "name": "ascii-movie",
        "description": "Star Wars SSH + Telnet server written in Go.",
        "url": "https://github.com/gabe565/ascii-movie",
        "language": "Go",
        "stars": 407,
        "forks": 26,
        "created_at": "2022-09-27T07:35:44Z",
        "updated_at": "2025-06-24T10:11:51Z",
        "topics": [
            "ascii-art",
            "golang",
            "ssh",
            "star-wars",
            "telnet",
            "tui"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-17T22:14:54Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/541960471/efe51f16-4297-4b08-99da-d73c9ba63c6e"
        ],
        "homepage": "",
        "readme_summary": "The ascii-movie repository provides a Go-based implementation of an SSH and Telnet server that streams the original Star Wars movie in ASCII format. It features an interactive terminal user interface and can be easily deployed using Docker. Inspired by asciimation and blinkenlights, this project offers a nostalgic command-line entertainment experience.",
        "key_features": [
            "Streams Star Wars ASCII movie",
            "SSH and Telnet server",
            "Interactive TUI with keyboard and mouse support",
            "Docker support"
        ],
        "primary_use_case": "Streaming the ASCII version of Star Wars to command-line clients via SSH or Telnet.",
        "open_issues": 3,
        "cover_image_prompt": "A vintage film projector casting an ASCII version of the Star Wars opening crawl onto a large, outdoor screen under a starry night sky. People sit on blankets, gazing up in wonder, their faces illuminated by the blocky, pixelated text. A small laptop sits nearby, subtly displaying the Go code that powers the projection. The projector itself has subtle glowing digital elements, hinting at its software-driven nature. The scene is set in a retro drive-in theater with a warm, nostalgic glow. The image should be in a digital painting style with clear outlines and a focus on capturing the magic of classic cinema."
    },
    {
        "id": 52159512,
        "name": "kaitai_struct",
        "description": "Kaitai Struct: declarative language to generate binary data parsers in C++ / C# / Go / Java / JavaScript / Lua / Nim / Perl / PHP / Python / Ruby",
        "url": "https://github.com/kaitai-io/kaitai_struct",
        "language": "Shell",
        "stars": 4221,
        "forks": 199,
        "created_at": "2016-02-20T15:17:00Z",
        "updated_at": "2025-06-24T10:11:11Z",
        "topics": [
            "c-plus-plus",
            "cpp",
            "csharp",
            "declarative-language",
            "file-format",
            "go",
            "golang",
            "graphviz",
            "java",
            "javascript",
            "lua",
            "nim",
            "perl",
            "php",
            "protocol-analyser",
            "python",
            "reverse-engineering",
            "ruby"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-05-01T16:32:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bbf4fc78d6cfc6e8fbafd4b470e3e3a7e17a2700b4e59254a2871806ce717769/kaitai-io/kaitai_struct"
        ],
        "homepage": "https://kaitai.io",
        "readme_summary": "Kaitai Struct is a declarative language and toolchain for describing binary data structures. It allows developers to define a format once and then compile it into parsers for various programming languages, simplifying the process of reading and interpreting binary data from files or network streams. The project also includes a repository of pre-defined format descriptions.",
        "key_features": [
            "Declarative language for describing binary data structures.",
            "Compiler (`ksc`) to generate parsers in multiple languages (C++, C#, Go, Java, JavaScript, Lua, Nim, Perl, PHP, Python, Ruby).",
            "Cross-language and cross-platform support.",
            "Growing collection of format descriptions in the `kaitai_struct_formats` repository."
        ],
        "primary_use_case": "Describing and parsing binary data formats (file formats, network packets, etc.) in a declarative way, generating code for multiple programming languages.",
        "open_issues": 498,
        "cover_image_prompt": "A skilled cartographer meticulously drafting a detailed map of a sprawling, uncharted digital landscape. The cartographer uses a special lens that reveals the underlying binary structures of the terrain, translating complex data into clear, understandable geographic features like mountains of integers and rivers of packets. Small UI elements float around the cartographer, displaying code snippets and data visualizations related to the map. The scene is set in a bright, airy workshop filled with scrolls and drafting tools. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 783007462,
        "name": "anyquery",
        "description": "Query anything (GitHub, Notion, +40 more) with SQL and let LLMs (ChatGPT, Claude) connect to using MCP",
        "url": "https://github.com/julien040/anyquery",
        "language": "Go",
        "stars": 956,
        "forks": 50,
        "created_at": "2024-04-06T17:17:25Z",
        "updated_at": "2025-06-24T10:10:08Z",
        "topics": [
            "ai",
            "analytics",
            "api",
            "business-intelligence",
            "chatgpt",
            "claude",
            "csv",
            "data-visualization",
            "database",
            "github",
            "go",
            "json",
            "llm",
            "mcp",
            "mysql",
            "notion",
            "parquet",
            "salesforce",
            "sql",
            "sqlite"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-06-11T07:56:16Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/783007462/65df2117-3909-4038-8231-fc4bb1cd51db"
        ],
        "homepage": "https://anyquery.dev",
        "readme_summary": "Anyquery is a SQL query engine that allows users to run SQL queries on various data sources, including files, databases, and applications. It integrates with LLMs like ChatGPT and Claude using the Model Context Protocol (MCP), enabling them to access and utilize the queried data. Additionally, Anyquery can act as a MySQL server, allowing users to connect with their favorite MySQL-compatible clients.",
        "key_features": [
            "SQL query engine for various data sources (files, databases, apps)",
            "Integration with LLMs (ChatGPT, Claude) via Model Context Protocol (MCP)",
            "Acts as a MySQL server for connecting with MySQL-compatible clients",
            "Extensible via plugins"
        ],
        "primary_use_case": "Querying diverse data sources with SQL and enabling LLMs to access and utilize this data.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a skilled cartographer standing over a vast, ever-shifting landscape representing diverse data sources like GitHub, Notion, and various databases. The cartographer uses a powerful SQL lens to survey the land, charting routes and uncovering hidden insights. A majestic MySQL server stands tall, acting as a central hub for accessing these newly discovered data treasures. In the background, ethereal LLMs like ChatGPT and Claude float, connecting to the server via glowing threads, eager to learn from the cartographer's findings. The scene is bathed in soft, illuminating light, creating a sense of exploration and discovery. The image should be in a detailed digital painting style with vibrant colors and clear outlines."
    },
    {
        "id": 232385658,
        "name": "wal-listener",
        "description": "PostgreSQL WAL listener",
        "url": "https://github.com/ihippik/wal-listener",
        "language": "Go",
        "stars": 403,
        "forks": 50,
        "created_at": "2020-01-07T18:06:32Z",
        "updated_at": "2025-06-24T06:17:07Z",
        "topics": [
            "golang",
            "logical-replication",
            "microservices-architecture",
            "postgresql"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-05-09T11:21:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/52b902190edd311bffbd51e7c8e12fcfe09e6657510886675b92ce8a28c1481b/ihippik/wal-listener"
        ],
        "homepage": null,
        "readme_summary": "The WAL-Listener service captures changes in a PostgreSQL database using logical decoding and publishes them as events to various message brokers like NATS, Kafka, RabbitMQ, and Google Pub/Sub. It supports filtering events based on tables and actions, and allows topic mapping for custom routing. This enables the implementation of Event-Driven Architecture with transactional messaging to maintain data consistency across microservices.",
        "key_features": [
            "Listens to PostgreSQL WAL (Write-Ahead Log) for data changes.",
            "Uses logical decoding (pgoutput) to convert WAL changes into a logical replication protocol.",
            "Publishes data change events to message brokers (NATS JetStream, Apache Kafka, RabbitMQ, Google Pub/Sub).",
            "Provides filtering capabilities to process specific table events (insert, update).",
            "Supports topic mapping for custom routing of events.",
            "Offers at-least-once message delivery guarantee."
        ],
        "primary_use_case": "Implementing Event-Driven Architecture by capturing PostgreSQL database changes and publishing them to message brokers for downstream services.",
        "open_issues": 8,
        "cover_image_prompt": "A skilled craftsman meticulously assembling intricate clockwork gears, each representing a database table, into a larger, synchronized mechanism. Data streams, visualized as glowing threads, flow from the gears into a central hub, where they are sorted and directed to different delivery trucks labeled 'NATS,' 'Kafka,' 'RabbitMQ,' and 'Google Pub/Sub.' The craftsman uses a magnifying glass to inspect a blueprint showing filter configurations. The scene is set in a brightly lit workshop filled with tools and diagrams. Small UI elements display database settings and topic mappings. The image should be in a detailed 3D isometric illustration style with vibrant colors and clear labels."
    }
]