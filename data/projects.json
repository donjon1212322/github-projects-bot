[
    {
        "id": 454164378,
        "name": "webvm",
        "description": "Virtual Machine for the Web",
        "url": "https://github.com/leaningtech/webvm",
        "language": "JavaScript",
        "stars": 15785,
        "forks": 2873,
        "created_at": "2022-01-31T20:45:58Z",
        "updated_at": "2025-10-20T08:39:26Z",
        "topics": [
            "cheerp",
            "cheerpx",
            "cpp",
            "lwip",
            "repl",
            "tailscale",
            "vm",
            "wasm",
            "webassembly",
            "webvm",
            "xterm-js"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-07T14:32:05Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/454164378/00ded6d6-99da-4861-a71d-59cfa2fcc785"
        ],
        "homepage": "https://webvm.io",
        "readme_summary": "WebVM is a server-less Linux virtual machine that runs entirely in a web browser using WebAssembly. It leverages CheerpX to enable client-side execution of x86 binaries and provides a sandboxed environment for running unmodified Debian distributions with native development toolchains.",
        "key_features": [
            "Runs a full Linux VM in the browser",
            "Uses CheerpX for x86-to-WebAssembly JIT compilation",
            "Includes a virtual block-based file system",
            "Provides a Linux syscall emulator",
            "Supports networking via Tailscale integration",
            "Allows customization with Dockerfiles",
            "Offers a server-less, client-side execution environment"
        ],
        "primary_use_case": "Running and experimenting with a Linux environment and x86 applications directly within a web browser without server-side dependencies.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled shipwright meticulously crafting a miniature sailing ship inside a glass bottle, representing a complete operating system contained within a browser. The shipwright uses tiny digital tools and glowing code fragments to assemble the ship. The bottle rests on a desk alongside a laptop displaying a terminal interface. The scene is set in a brightly lit workshop with a clean, focused composition. Small UI elements and data visualizations subtly connect the metaphor to software. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 652319769,
        "name": "filebrowser",
        "description": "üìÇ Web File Browser",
        "url": "https://github.com/gtsteffaniak/filebrowser",
        "language": "Go",
        "stars": 4105,
        "forks": 165,
        "created_at": "2023-06-11T19:19:09Z",
        "updated_at": "2025-10-20T10:07:22Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-18T11:35:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/71cc5baf242ef6e31be23169550c51448097669b849b67911887e148c727396c/gtsteffaniak/filebrowser"
        ],
        "homepage": "",
        "readme_summary": "FileBrowser Quantum is a web-based file manager written in Go, designed for easy access and management of files through a web interface. It is a fork of the original filebrowser project, offering enhanced features like multiple source support, advanced authentication options, a customizable UI, and improved indexing and sharing capabilities.",
        "key_features": [
            "Multiple sources support",
            "Login support for OIDC, password + 2FA, and proxy",
            "Responsive and customizable UI",
            "Simplified configuration via config.yaml",
            "Ultra-efficient indexing and real-time updates",
            "Better listing browsing with more file type previews",
            "Highly configurable and customizable sharing options",
            "Directory-level access control",
            "Developer API support"
        ],
        "primary_use_case": "Providing a user-friendly web interface for managing files on a server.",
        "open_issues": 89,
        "cover_image_prompt": "A librarian meticulously organizing digital files within a vast, glowing library. The librarian uses a special interface to categorize and sort files, represented by floating documents and folders. Each file glows with a different color based on its type. Small UI elements display file properties and access permissions. The scene is set in a futuristic library with soft, ambient lighting. Digital particles flow around the librarian, representing data streams. The composition is clean and focused with a balanced color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 725089041,
        "name": "OpenVoice",
        "description": "Instant voice cloning by MIT and MyShell. Audio foundation model.",
        "url": "https://github.com/myshell-ai/OpenVoice",
        "language": "Python",
        "stars": 35070,
        "forks": 3848,
        "created_at": "2023-11-29T12:17:01Z",
        "updated_at": "2025-10-20T10:09:26Z",
        "topics": [
            "text-to-speech",
            "tts",
            "voice-clone",
            "zero-shot-tts"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T15:59:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ff2a04ed33aeeab63fcc2e60ce2fabef83ed956be8b8a75ad8ea87062d392840/myshell-ai/OpenVoice"
        ],
        "homepage": "https://research.myshell.ai/open-voice",
        "readme_summary": "OpenVoice is an instant voice cloning tool developed by MIT and MyShell. It allows users to clone voices accurately, control voice styles, and perform zero-shot cross-lingual voice cloning. The tool has been powering the voice cloning capability of myshell.ai and is now available for commercial use under the MIT license.",
        "key_features": [
            "Accurate Tone Color Cloning",
            "Flexible Voice Style Control",
            "Zero-shot Cross-lingual Voice Cloning",
            "Better Audio Quality (V2)",
            "Native Multi-lingual Support (V2: English, Spanish, French, Chinese, Japanese, Korean)",
            "Free Commercial Use (V1 and V2)"
        ],
        "primary_use_case": "Instant voice cloning",
        "open_issues": 264,
        "cover_image_prompt": "A skilled artisan meticulously crafting a miniature vocal sculpture from sound waves, using a palette of diverse languages. The artisan carefully molds the sound waves, adjusting emotion and accent dials on a nearby console. The sculpture glows with a vibrant, multilingual aura. Small UI elements display waveforms and language settings. The scene is set in a bright, modern workshop with subtle digital particles floating in the air. The repository name, 'OpenVoice,' is subtly etched onto the artisan's workbench. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 903787960,
        "name": "WaterCrawl",
        "description": "Transform Web Content into LLM-Ready Data",
        "url": "https://github.com/watercrawl/WaterCrawl",
        "language": "TypeScript",
        "stars": 1399,
        "forks": 142,
        "created_at": "2024-12-15T15:08:51Z",
        "updated_at": "2025-10-20T09:53:51Z",
        "topics": [
            "aicrawler",
            "crawl4ai",
            "crawler",
            "crawling-python",
            "html2markdown",
            "llm-crawler",
            "llm-scraper",
            "scraper"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-09-02T00:13:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4bdee43ddfb71bf46b7bbe3e3c2911fc942e05215b13f76f28b4e68e8afeab1b/watercrawl/WaterCrawl"
        ],
        "homepage": "https://watercrawl.dev",
        "readme_summary": "WaterCrawl is a web application built with Python, Django, Scrapy, and Celery designed to crawl web pages and extract data, transforming web content into a format suitable for use with Large Language Models (LLMs). It offers features like customizable crawling depth, multi-language support, a REST API, and integrations with other AI/automation platforms.",
        "key_features": [
            "Advanced Web Crawling & Scraping",
            "Powerful Search Engine",
            "Multi-language Support",
            "Asynchronous Processing",
            "REST API with OpenAPI",
            "Rich Ecosystem",
            "Self-hosted & Open Source",
            "Advanced Results Handling"
        ],
        "primary_use_case": "Transforming web content into LLM-ready data through crawling and scraping.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a diligent librarian carefully collecting scattered books (representing web pages) and feeding them into a magical device that transforms them into neatly organized scrolls (LLM-ready data). The librarian wears a tech-enhanced monocle displaying snippets of code and data visualizations. The device glows with digital particles as it processes the information. The scene is set in a futuristic library with soft, warm lighting. Small UI elements displaying \"WaterCrawl\" subtly appear on the device. The composition is clean and focused, with a color scheme of blues and greens. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 985839104,
        "name": "BrowserOS",
        "description": "üåê The open-source Agentic browser; privacy-first alternative to Perplexity Comet, Arc, Dia",
        "url": "https://github.com/browseros-ai/BrowserOS",
        "language": "C++",
        "stars": 4923,
        "forks": 418,
        "created_at": "2025-05-18T16:23:54Z",
        "updated_at": "2025-10-20T09:53:45Z",
        "topics": [
            "browser",
            "browseros",
            "chromium",
            "hacktoberfest",
            "linux",
            "macos",
            "windows"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-19T00:43:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ee51e04a116429857268d142f9b636b3bedc6b45b1aeb6f1b748563834fd0b8a/browseros-ai/BrowserOS"
        ],
        "homepage": "https://BrowserOS.com",
        "readme_summary": "BrowserOS is an open-source Chromium-based browser that natively supports AI agents. It emphasizes user privacy by allowing users to use their own API keys or run local models, ensuring data remains on the user's computer. It aims to provide a familiar browsing experience with integrated AI capabilities.",
        "key_features": [
            "Open-source Chromium fork",
            "Native AI agent support",
            "Privacy-first design (user-controlled API keys or local models)",
            "Familiar interface (like Google Chrome)",
            "Extension compatibility",
            "MCP server functionality for remote control"
        ],
        "primary_use_case": "Running AI agents directly within the browser while maintaining user privacy and control over data.",
        "open_issues": 21,
        "cover_image_prompt": "Imagine a futuristic laboratory where a diligent researcher, representing BrowserOS, is conducting experiments with AI agents. The researcher carefully mixes various digital ingredients, symbolizing different AI models and data sources, within beakers labeled 'OpenAI,' 'Anthropic,' and 'Local Models.' A large monitor displays a clean browser interface with AI agents actively performing tasks. The lab is filled with glowing particles representing data streams, and subtle code snippets float in the background. The scene is brightly lit with a focus on clarity and precision. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 986669929,
        "name": "cpdown",
        "description": "üì• cpdown - Copy to clipboard any webpage content/youtube subtitle as clean markdown with one click or shortcut",
        "url": "https://github.com/ysm-dev/cpdown",
        "language": "TypeScript",
        "stars": 461,
        "forks": 20,
        "created_at": "2025-05-20T00:45:12Z",
        "updated_at": "2025-10-20T09:18:36Z",
        "topics": [
            "extension",
            "llm",
            "markdown",
            "productivity",
            "react",
            "subtitle",
            "wxt",
            "youtube"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-10-20T00:22:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/148a5f28f4b339f9ad7829d01254ce98b475cb96f782ae5bd78aba5912bc9262/ysm-dev/cpdown"
        ],
        "homepage": "https://chromewebstore.google.com/detail/cpdown/knnaflplggjdedobhbidojmmnocfbopf",
        "readme_summary": "cpdown is a browser extension that allows users to copy webpage content and YouTube subtitles as clean, formatted markdown. It utilizes libraries like Defuddle and Mozilla's Readability to extract the main content and removes unnecessary HTML elements, enhancing productivity for users who need to repurpose web content.",
        "key_features": [
            "Copy webpage content as clean markdown",
            "Copy YouTube subtitles as clean markdown",
            "Uses Defuddle or Mozilla's Readability for content extraction",
            "Removes unnecessary HTML elements",
            "Shows token count for LLM usage",
            "Keyboard shortcut support"
        ],
        "primary_use_case": "Copying webpage content and YouTube subtitles as clean markdown for repurposing in other applications or documents.",
        "open_issues": 7,
        "cover_image_prompt": "A diligent librarian meticulously transforming messy stacks of web pages and scattered YouTube transcripts into neatly organized markdown documents. The librarian uses a special tool that extracts the core content, discarding the clutter. Digital particles representing HTML tags float away as clean markdown text emerges. Small screens display the cpdown logo and a simplified options panel. The scene is set in a bright, modern library with a focus on organization and clarity. The image should be in a flat design style with clear iconography and a calming color palette."
    },
    {
        "id": 979886154,
        "name": "outbox",
        "description": "Lightweight library for the transactional outbox pattern in Go, not tied to any specific relational database or broker.",
        "url": "https://github.com/oagudo/outbox",
        "language": "Go",
        "stars": 105,
        "forks": 2,
        "created_at": "2025-05-08T08:16:25Z",
        "updated_at": "2025-10-20T08:36:49Z",
        "topics": [
            "go",
            "golang",
            "golang-library",
            "outbox",
            "outbox-example",
            "outbox-pattern"
        ],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-06-28T08:11:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2b0360da5895e2c42bbf4196a31eb5e9ddc66c783382cf4095a77b8a1dc611f7/oagudo/outbox"
        ],
        "homepage": "https://pkg.go.dev/github.com/oagudo/outbox?utm_source=godoc",
        "readme_summary": "The 'outbox' repository provides a lightweight Go library for implementing the transactional outbox pattern. It ensures reliable message delivery in microservice architectures by atomically storing messages alongside database transactions, decoupling services and guaranteeing eventual consistency without being tied to a specific database or message broker.",
        "key_features": [
            "Lightweight with minimal dependencies",
            "Database agnostic (PostgreSQL, MySQL, Oracle, etc.)",
            "Message broker agnostic",
            "Easy integration",
            "Observability through error and discarded message channels",
            "Optional immediate async message publishing",
            "Configurable retry and backoff policies",
            "Max attempts safeguard for poison messages"
        ],
        "primary_use_case": "Ensuring reliable and consistent message delivery in microservice architectures by implementing the transactional outbox pattern.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a diligent clockmaker meticulously crafting intricate clockwork gears, each representing a microservice. As each gear is perfectly placed (a database transaction), a small, precisely timed message (an outbox message) is simultaneously created and attached. These messages are then dispatched via pneumatic tubes to other clockwork mechanisms, ensuring synchronized operation across the entire system. Digital displays subtly show database logs and message queues. The scene is set in a brightly lit, organized workshop with a blue and gold color scheme. The image should be in a 3D isometric illustration style with high detail and a focus on clarity."
    }
]