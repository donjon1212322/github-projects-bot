[
    {
        "id": 60787328,
        "name": "MORT",
        "description": "MORT 번역기 프로젝트 - Real-time game translator with OCR",
        "url": "https://github.com/killkimno/MORT",
        "language": "C#",
        "stars": 811,
        "forks": 54,
        "created_at": "2016-06-09T15:54:33Z",
        "updated_at": "2025-04-17T08:35:46Z",
        "topics": [
            "auto-translation",
            "game",
            "game-translation",
            "image-to-text",
            "ocr",
            "tesseract-ocr",
            "translate",
            "translation"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-03-16T07:14:36Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/60787328/d1117064-81ca-4945-83fc-0114466a5f15"
        ],
        "homepage": "https://blog.naver.com/killkimno/70179867557",
        "readme_summary": "MORT is a real-time game translator that extracts dialog from the screen using OCR and translates it using machine translation services or a database. It supports multiple OCR engines and translation services, allowing users to play games in foreign languages with real-time translated subtitles. The program is designed for Windows and requires .NET 7.",
        "key_features": [
            "Realtime translate",
            "OCR (TesseractOCR, Windows OCR, NHOcr, Easy OCR)",
            "Machine translation (Naver Papago, Google Web, Google Sheet, ezTrans, DeepL)",
            "Language Patch with using DB",
            "Multiple OCR areas",
            "Image adjust"
        ],
        "primary_use_case": "Real-time translation of game dialogs using OCR and machine translation.",
        "open_issues": 25,
        "cover_image_prompt": "Imagine a skilled linguist sitting before a monitor displaying a video game. The linguist wears glasses that project OCR readings onto the screen, instantly translating the game's dialogue into multiple languages displayed as subtitles. Digital threads connect the game screen to various translation engines represented by glowing orbs labeled 'Papago', 'DeepL', and 'Google Translate'. The linguist smiles, effortlessly understanding the game. Small UI elements showing OCR settings and language codes float around the scene. The composition is clean and focused with a vibrant color scheme. The image should be in a flat design style with clear iconography."
    },
    {
        "id": 895165567,
        "name": "timr-tui",
        "description": "TUI to organize your time: Pomodoro, Countdown, Timer.",
        "url": "https://github.com/sectore/timr-tui",
        "language": "Rust",
        "stars": 116,
        "forks": 6,
        "created_at": "2024-11-27T17:16:56Z",
        "updated_at": "2025-04-17T07:26:28Z",
        "topics": [
            "ratatui",
            "rust",
            "tui"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-17T06:31:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6a8d02f1e264b32ad1feb7f988cd48ed88fdf1605de6c5b83b4133a350c03383/sectore/timr-tui"
        ],
        "homepage": "",
        "readme_summary": "timr-tui is a terminal-based application written in Rust that helps users organize their time. It provides Pomodoro, Countdown, and Timer functionalities, along with customizable styles and a CLI interface for easy integration and usage.",
        "key_features": [
            "Pomodoro timer",
            "Countdown timer",
            "Standard timer",
            "Customizable styles",
            "Decisecond display",
            "CLI interface"
        ],
        "primary_use_case": "Organizing and managing time using Pomodoro, Countdown, and Timer functionalities within a terminal user interface.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously crafting time within a vibrant workshop. The clockmaker uses various tools – a pomodoro-shaped lens for focused work, a countdown hourglass for precise tasks, and a timer dial for ongoing activities. Digital particles swirl around the workbench, subtly displaying code snippets and time data. The workshop is bathed in warm, focused light, with subtle UI elements projected onto the walls. The scene is rendered in a 3D isometric illustration style, with rich details and a clean, organized composition. The 'timr-tui' logo is subtly etched onto the clockmaker's workbench."
    },
    {
        "id": 301244405,
        "name": "atuin",
        "description": "✨ Magical shell history",
        "url": "https://github.com/atuinsh/atuin",
        "language": "Rust",
        "stars": 23269,
        "forks": 629,
        "created_at": "2020-10-04T23:01:58Z",
        "updated_at": "2025-04-17T10:00:12Z",
        "topics": [
            "bash",
            "fish",
            "history",
            "rust",
            "shell",
            "zsh"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T11:25:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/abc8d2b52ae2165ab1a1da9703fe5f69df6faecfb6d98ec0256cf4a0509d7290/atuinsh/atuin"
        ],
        "homepage": "https://atuin.sh",
        "readme_summary": "Atuin replaces your existing shell history with a SQLite database, recording additional context for commands. It offers optional, fully encrypted synchronization of history between machines via an Atuin server. Key features include a full-screen search UI, cross-device synchronization, and detailed command logging.",
        "key_features": [
            "Rebindable full-screen history search UI",
            "SQLite database storage for shell history",
            "Encrypted backup and sync of shell history",
            "Cross-terminal, cross-session, and cross-machine history",
            "Logging of exit code, cwd, hostname, session, command duration",
            "Statistics calculation (e.g., most used command)",
            "Quick-jump to previous items",
            "Switchable filter modes (session, directory, global)",
            "Tab to edit functionality"
        ],
        "primary_use_case": "Replacing existing shell history with a synchronized, searchable SQLite database.",
        "open_issues": 299,
        "cover_image_prompt": "Imagine a historian meticulously archiving shell commands in a magical library. The historian uses a glowing quill to transcribe commands onto enchanted scrolls, which are then stored in secure, crystalline vaults. The library is filled with floating UI elements displaying command statistics and usage patterns. A subtle network of interconnected terminals glows softly in the background, symbolizing synchronized history across machines. The scene is bathed in soft, ethereal light, creating a sense of security and organization. The image should be in a detailed digital painting style with vibrant colors and clear outlines."
    },
    {
        "id": 22072746,
        "name": "pex",
        "description": "A tool for generating .pex (Python EXecutable) files, lock files and venvs.",
        "url": "https://github.com/pex-tool/pex",
        "language": "Python",
        "stars": 3870,
        "forks": 295,
        "created_at": "2014-07-21T17:06:12Z",
        "updated_at": "2025-04-17T08:52:50Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T23:26:51Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8e6a1f8793f492e7b88b5e6a54e8cc985733ce6f84bb4f6a833671a179325d5a/pex-tool/pex"
        ],
        "homepage": "https://docs.pex-tool.org/",
        "readme_summary": "Pex is a tool for generating .pex files, which are self-contained executable Python environments similar to virtualenvs. It simplifies Python application deployment by packaging all dependencies into a single file that can be easily distributed and executed across different platforms. Pex also supports lock file and venv creation, and integrates with popular build systems.",
        "key_features": [
            ".pex file generation",
            "Lock file creation",
            "Virtual environment creation",
            "Executable Python environments",
            "Support for multiple platform-specific Python distributions",
            "Integration with build systems like Pants, Buck, and pygradle",
            "Entry point support for standalone executables"
        ],
        "primary_use_case": "Packaging and deploying Python applications as self-contained, executable files.",
        "open_issues": 75,
        "cover_image_prompt": "Imagine a skilled chef in a bustling kitchen, expertly blending various ingredients (representing Python libraries) into a single, perfectly sealed container (a .pex file). The chef carefully selects ingredients from labeled jars, each representing a different dependency. A conveyor belt carries these sealed containers to various locations, symbolizing the easy deployment of Python applications. Subtle UI elements on nearby screens display code snippets and dependency lists. The kitchen is brightly lit with a focus on cleanliness and efficiency. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 35133520,
        "name": "mostly-adequate-guide",
        "description": "Mostly adequate guide to FP (in javascript)",
        "url": "https://github.com/MostlyAdequate/mostly-adequate-guide",
        "language": "JavaScript",
        "stars": 23632,
        "forks": 1890,
        "created_at": "2015-05-06T01:44:15Z",
        "updated_at": "2025-04-17T05:50:31Z",
        "topics": [
            "functional-programming",
            "javascript",
            "reactive-programming",
            "tutorial"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-09-17T06:16:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5aefff8289487adb454af5bfb7afa28bba06d466802e7cba430cc795871044df/MostlyAdequate/mostly-adequate-guide"
        ],
        "homepage": null,
        "readme_summary": "The 'mostly-adequate-guide' repository is a resource for learning functional programming (FP) concepts using JavaScript. It provides practical examples, exercises, and downloadable resources to help developers apply FP principles in their daily work. The guide aims to make FP accessible by leveraging the familiarity of JavaScript.",
        "key_features": [
            "Teaches functional programming concepts using JavaScript.",
            "Provides practical examples applicable to real-world JavaScript projects.",
            "Offers exercises and an npm module for hands-on learning.",
            "Provides downloadable PDF and EPUB versions."
        ],
        "primary_use_case": "Learning and applying functional programming principles in JavaScript development.",
        "open_issues": 72,
        "cover_image_prompt": "A seasoned cartographer meticulously crafting a map of a vast, uncharted JavaScript landscape. The cartographer uses functional programming tools like lenses and compasses to survey the terrain, transforming complex code into elegant, interconnected pathways. The map reveals hidden treasures of immutability and pure functions, guiding developers towards a more maintainable and predictable codebase. Small UI elements displaying JavaScript code snippets are subtly integrated into the map's design. The scene is set in a sunlit workshop filled with scrolls and coding artifacts. The image should be in a detailed technical illustration style with labeled parts and a warm color scheme."
    },
    {
        "id": 956297926,
        "name": "urx",
        "description": "Extracts URLs from OSINT Archives for Security Insights",
        "url": "https://github.com/hahwul/urx",
        "language": "Rust",
        "stars": 71,
        "forks": 7,
        "created_at": "2025-03-28T02:48:27Z",
        "updated_at": "2025-04-17T08:52:59Z",
        "topics": [
            "osint",
            "osint-tool",
            "security",
            "url",
            "urx",
            "wayback-machine"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T14:14:28Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/956297926/d28b4111-45c9-4d0b-bda9-8c763d7cdfe2"
        ],
        "homepage": "https://crates.io/crates/urx",
        "readme_summary": "Urx is a command-line tool built with Rust that extracts URLs from OSINT archives like the Wayback Machine and Common Crawl. It allows users to fetch URLs from multiple sources in parallel, filter results based on various criteria, and output the data in different formats. The primary use case is gathering comprehensive URL datasets for security testing and analysis.",
        "key_features": [
            "Fetch URLs from multiple sources in parallel (Wayback Machine, Common Crawl, OTX)",
            "Filter results by file extensions, patterns, or predefined presets",
            "Support for multiple output formats: plain text, JSON, CSV",
            "Output results to the console or a file, or stream via stdin for pipeline integration",
            "Filter and validate URLs based on HTTP status codes and patterns",
            "Extract additional links from collected URLs"
        ],
        "primary_use_case": "Collecting URLs from OSINT archives for security testing and analysis.",
        "open_issues": 3,
        "cover_image_prompt": "A seasoned archaeologist meticulously sifting through layers of digital archives (represented by glowing, stacked hard drives) in a vast, futuristic library. The archaeologist uses a specialized magnifying glass that highlights URLs within the data streams, extracting them and organizing them into neat, labeled folders. Subtle UI elements float around the scene, displaying code snippets and data visualizations related to URL extraction. The library is bathed in soft, ethereal light, creating a sense of discovery and knowledge. The image should be in a 3D isometric illustration style with rich details and a muted color palette."
    },
    {
        "id": 758783944,
        "name": "FullBypass",
        "description": "A tool which bypasses AMSI (AntiMalware Scan Interface) and PowerShell CLM (Constrained Language Mode) and gives you a FullLanguage PowerShell reverse shell.",
        "url": "https://github.com/Sh3lldon/FullBypass",
        "language": "C#",
        "stars": 703,
        "forks": 132,
        "created_at": "2024-02-17T04:21:39Z",
        "updated_at": "2025-04-16T14:35:02Z",
        "topics": [
            "amsi-bypass",
            "powershellclm"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-03-28T08:38:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3cf82b426bc694ebbb9aab0a9a879d395c0b7edc1e3dd35727449d962c6dbaff/Sh3lldon/FullBypass"
        ],
        "homepage": "",
        "readme_summary": "The FullBypass tool is designed to circumvent AMSI and PowerShell Constrained Language Mode (CLM). It achieves this by employing memory hijacking techniques to modify the AmsiScanBuffer function. The tool ultimately provides a FullLanguage PowerShell reverse shell, enabling unrestricted PowerShell execution on the target system.",
        "key_features": [
            "AMSI bypass",
            "PowerShell CLM bypass",
            "FullLanguage PowerShell reverse shell"
        ],
        "primary_use_case": "Bypassing AMSI and PowerShell CLM to obtain a FullLanguage PowerShell reverse shell.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled locksmith bypassing a complex, glowing digital lock on a fortified vault, representing AMSI and CLM. The locksmith uses specialized digital tools, displaying snippets of code on their screens, to manipulate the lock's mechanisms. Inside the vault, a reverse shell, visualized as a phoenix, is taking flight. The scene is set in a futuristic server room with dramatic lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]