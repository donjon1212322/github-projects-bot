[
    {
        "id": 699874378,
        "name": "palettum",
        "description": "Web app and CLI tool that lets you recolor images, GIFs, and videos with any custom palette of your choosing",
        "url": "https://github.com/arrowpc/palettum",
        "language": "Rust",
        "stars": 261,
        "forks": 4,
        "created_at": "2023-10-03T14:08:38Z",
        "updated_at": "2025-07-27T09:22:33Z",
        "topics": [
            "cli",
            "gpu",
            "image-processing",
            "palette",
            "react",
            "rust",
            "typescript",
            "typescript-react",
            "webapp",
            "webassembly",
            "website",
            "wgpu"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T10:33:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3007152c9f1ad40329f23919a3b875eefce00c92ff7ee4a13f54df40b55e1285/arrowpc/palettum"
        ],
        "homepage": "https://palettum.com",
        "readme_summary": "Palettum is a versatile tool for recoloring images, GIFs, and videos using custom palettes. It offers both a CLI tool and a web application, allowing users to apply palettes by either snapping pixels to the closest color for a pixel-art effect or blending the palette for a smoother, filtered look. The project also supports self-hosting with Docker.",
        "key_features": [
            "Recoloring images, GIFs, and videos",
            "Custom palette application",
            "Pixel snapping for pixel-art styles",
            "Palette blending for smoother effects",
            "CLI tool",
            "Web app",
            "Docker support"
        ],
        "primary_use_case": "Recoloring images, GIFs, and videos with custom palettes.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine an artist's palette transforming a grayscale photograph into a vibrant, colorful painting. The palette contains a limited set of colors, yet the painting bursts with a harmonious blend of these hues. The artist carefully selects each color, applying it to the photograph to create a stunning transformation. Subtle UI elements float around the scene, displaying color palettes and image processing options. The repository name, 'Palettum,' is subtly etched onto the artist's easel. This conceptual illustration should be in a digital painting style with clear outlines and a warm, inviting color scheme."
    },
    {
        "id": 1021913531,
        "name": "MassGen",
        "description": "ðŸš€ MassGen: A Multi-Agent Scaling System Inspired by Grok Heavy and Gemini Deep Think. Discord channel: https://discord.com/invite/VVrT2rQaz5",
        "url": "https://github.com/Leezekun/MassGen",
        "language": "Python",
        "stars": 124,
        "forks": 15,
        "created_at": "2025-07-18T06:36:13Z",
        "updated_at": "2025-07-27T09:44:47Z",
        "topics": [
            "agent",
            "llm",
            "multi-agent",
            "test-time-scaling"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T22:20:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8f63452dc20237ae3cfacd2e1c9a10aa3bc6d3d3311112f51bf6bf855ee527b5/Leezekun/MassGen"
        ],
        "homepage": "",
        "readme_summary": "MassGen is a multi-agent system designed for GenAI that enables parallel processing and collaborative problem-solving. It leverages diverse AI agents, facilitating intelligence sharing and consensus building to achieve comprehensive and high-quality results. The system also offers live visualization of the agents' working processes.",
        "key_features": [
            "Cross-Model/Agent Synergy",
            "Parallel Processing",
            "Intelligence Sharing",
            "Consensus Building",
            "Live Visualization"
        ],
        "primary_use_case": "Multi-agent scaling for GenAI to solve complex tasks through collaborative AI.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a team of diverse AI avatars collaboratively building a complex structure out of glowing data blocks. Each avatar represents a different AI model (e.g., Claude, Gemini, GPT, Grok), contributing unique skills and perspectives. A central holographic display visualizes their progress and consensus-building process. Subtle UI elements and code snippets float in the background, connecting the scene to software. The structure is set in a clean, futuristic workspace with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details, conveying the concept of multi-agent collaboration and scaling."
    },
    {
        "id": 995150142,
        "name": "ito",
        "description": null,
        "url": "https://github.com/heyito/ito",
        "language": "TypeScript",
        "stars": 25,
        "forks": 4,
        "created_at": "2025-06-03T03:35:39Z",
        "updated_at": "2025-07-27T09:27:43Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-25T23:24:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a0da360599371758501f0cf07616aa7a0c09739ea8b7d0bde1e75421c9fb0abe/heyito/ito"
        ],
        "homepage": null,
        "readme_summary": "Ito is an intelligent voice assistant that provides seamless voice dictation across any application. It features real-time transcription, customizable shortcuts, and smart adaptation through custom dictionaries and usage pattern learning. Ito also offers data management features like note-saving, interaction history, and cloud syncing.",
        "key_features": [
            "Universal Voice Dictation",
            "Smart & Adaptive learning",
            "Powerful Customization",
            "Data Management (notes, history, cloud sync)"
        ],
        "primary_use_case": "Intelligent voice dictation for any application on your computer.",
        "open_issues": 19,
        "cover_image_prompt": "Imagine a skilled scribe in a modern, minimalist office, effortlessly transcribing spoken words into digital text on a glowing tablet. The scribe's quill emits a soft, blue light, symbolizing the real-time transcription. Around the scribe, subtle UI elements float, displaying customizable settings and language options. A small screen in the background shows the Ito logo integrated into a clean, modern interface. The scene is bathed in soft, ambient light, creating a sense of seamless integration and effortless productivity. The image should be in a flat design style with clear iconography and a calming color palette."
    },
    {
        "id": 485818631,
        "name": "goverlay",
        "description": "GOverlay is an opensource project that aims to create a Graphical UI to help manage Linux overlays.",
        "url": "https://github.com/benjamimgois/goverlay",
        "language": "Pascal",
        "stars": 822,
        "forks": 46,
        "created_at": "2022-04-26T14:20:58Z",
        "updated_at": "2025-07-26T17:59:36Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T00:56:13Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0b9eea7c8c0aea6357b2a641482fccaef91da16cf4f39b8919fdd7b69cd1abd4/benjamimgois/goverlay"
        ],
        "homepage": null,
        "readme_summary": "GOverlay is a graphical user interface designed to simplify the management of Vulkan and OpenGL overlays on Linux. It provides a user-friendly way to configure popular overlay tools like MangoHud and vkBasalt, as well as offering features such as cloning the reshade repository and displaying AMD CPU power information. The project aims to provide a comprehensive solution for users who want to customize and control their gaming or application overlays.",
        "key_features": [
            "Graphical UI for managing Vulkan/OpenGL overlays",
            "Configuration of MangoHud",
            "Configuration of vkBasalt",
            "Ability to clone reshade repository",
            "AMD CPU power display via zenergy"
        ],
        "primary_use_case": "Managing and configuring Vulkan/OpenGL overlays on Linux systems.",
        "open_issues": 75,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate stained-glass windows, each pane representing a different overlay setting (like MangoHud, vkBasalt, etc.). The artisan uses a set of specialized tools (GOverlay UI) to precisely adjust the colors, transparency, and patterns of each pane, creating a harmonious and visually stunning final window. Small screens displaying real-time performance metrics and overlay configurations are subtly integrated into the artisan's workbench. The scene is bathed in soft, diffused light, highlighting the vibrant colors of the stained glass. The image should be in a 3D isometric illustration style, with a focus on detail and clarity."
    },
    {
        "id": 925434317,
        "name": "kreuzberg",
        "description": "Document intelligence framework for Python - Extract text, metadata, and structured data   from PDFs, images, Office documents, and more. Built on Pandoc, PDFium, and Tesseract.",
        "url": "https://github.com/Goldziher/kreuzberg",
        "language": "Python",
        "stars": 1983,
        "forks": 78,
        "created_at": "2025-01-31T21:50:02Z",
        "updated_at": "2025-07-27T09:40:24Z",
        "topics": [
            "async",
            "document-intelligence",
            "mcp",
            "metadata-extraction",
            "ocr",
            "pandoc",
            "pdf-extraction",
            "pdfium",
            "python",
            "rag",
            "table-extraction",
            "tesseract",
            "text-extraction"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-07-18T17:01:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/68973b401c9b341b0deb4117a3bc9ca3310e8096282a275e054dc1e81dbbbbea/Goldziher/kreuzberg"
        ],
        "homepage": "https://kreuzberg.dev/",
        "readme_summary": "Kreuzberg is a Python document intelligence framework designed to extract text, metadata, and structured information from a wide range of document formats, including PDFs, images, and Office documents. It provides a unified API with both synchronous and asynchronous options, leveraging open-source technologies like Pandoc, PDFium, and Tesseract for robust format support and accurate data extraction.",
        "key_features": [
            "Text Extraction",
            "Metadata Extraction",
            "Format Support (PDF, Office, Images, HTML)",
            "OCR Integration (Tesseract, EasyOCR, PaddleOCR)",
            "Table Detection",
            "Document Classification",
            "Synchronous and Asynchronous APIs",
            "Extensible Plugin Architecture"
        ],
        "primary_use_case": "Extracting text, metadata, and structured data from various document formats.",
        "open_issues": 3,
        "cover_image_prompt": "A skilled librarian meticulously organizing a chaotic mountain of documents (PDFs, images, Office files) into a neatly structured digital library. The librarian uses a magical lens that extracts text, metadata, and tables from each document, displaying the information on floating UI screens. The organized library shelves glow with a soft, blue light, while discarded, unstructured documents fade into the background. Small code snippets and data visualizations subtly appear as holographic projections around the librarian. The scene is set in a futuristic, yet cozy library with warm lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 973180254,
        "name": "stagewise",
        "description": "stagewise is the first frontend coding agent for existing production-grade web apps ðŸª„  -- Lives inside your browser ðŸ’» -- Makes changes in local codebase ðŸ¤“ -- Compatible with all kinds of frameworks and setups ðŸ’ª",
        "url": "https://github.com/stagewise-io/stagewise",
        "language": "TypeScript",
        "stars": 4908,
        "forks": 270,
        "created_at": "2025-04-26T12:43:16Z",
        "updated_at": "2025-07-27T08:30:43Z",
        "topics": [
            "code-editor",
            "cursor",
            "cursor-ai",
            "ide",
            "vscode",
            "vscode-extension",
            "windsurf",
            "windsurf-extension"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T20:37:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e35e3c3d5dcb9cd58871ddfd451a5787055192681e39db5fde1f71da6cd5daad/stagewise-io/stagewise"
        ],
        "homepage": "https://stagewise.io",
        "readme_summary": "Stagewise is a frontend coding agent that allows developers to make changes to their production web applications by interacting with a browser-based interface. It works with various frameworks and enables users to specify changes visually, letting the agent automatically modify the local codebase. The tool is designed to streamline frontend development and reduce the need for manual code manipulation.",
        "key_features": [
            "Works out of the box",
            "Customizable and extensible with Plugins",
            "Open source",
            "Compatible with all kinds of frameworks",
            "Uses a dedicated frontend agent or any compatible agent through an open interface"
        ],
        "primary_use_case": "Frontend coding automation for existing production-grade web applications.",
        "open_issues": 25,
        "cover_image_prompt": "A skilled architect standing before a complex blueprint, directing a team of robotic construction workers who are rapidly building a modern web application. The architect uses a browser-based interface to select specific elements on the blueprint, and the robots instantly modify the corresponding code in a local codebase, represented by glowing data streams flowing between the blueprint and the construction site. Small screens display code snippets and UI previews, subtly connecting the metaphor to software development. The scene is set in a bright, futuristic workshop with a clean, focused composition and a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]