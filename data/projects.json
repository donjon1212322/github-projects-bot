[
    {
        "id": 34525124,
        "name": "HTTP-Shortcuts",
        "description": "Android app to create home screen shortcuts that trigger arbitrary HTTP requests and more",
        "url": "https://github.com/Waboodoo/HTTP-Shortcuts",
        "language": "Kotlin",
        "stars": 1505,
        "forks": 132,
        "created_at": "2015-04-24T15:03:58Z",
        "updated_at": "2025-10-27T09:06:25Z",
        "topics": [
            "android",
            "home-automation",
            "http",
            "http-client",
            "http-requests",
            "iot"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-19T11:59:20Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/34525124/d8b2d18d-0275-4efa-97c3-e24a9f569343"
        ],
        "homepage": "https://http-shortcuts.rmy.ch",
        "readme_summary": "HTTP Shortcuts is an Android application that allows users to create home screen shortcuts to trigger custom HTTP requests. It supports various HTTP methods, authentication schemes, and response handling options, enabling users to automate tasks and interact with web services directly from their mobile devices.",
        "key_features": [
            "Supports HTTP and HTTPS, and methods GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS and TRACE",
            "Basic Authentication, Digest Authentication & Bearer Authentication",
            "Custom request headers",
            "Custom request body (text based, from static file, file picker, or camera)",
            "Upload files as form-data parameters",
            "Client Certificate Authentication",
            "Support for TLSv1.3",
            "Support for HTTP & SOCKS proxies",
            "Support for Self-Signed Certificates & Certificate Pinning",
            "Value injection through variables",
            "Import & Export in JSON or cURL format",
            "Integration with 3rd party apps",
            "JavaScript scripting for customization"
        ],
        "primary_use_case": "Creating customizable home screen shortcuts to execute HTTP requests for home automation, IoT device control, and integration with other apps.",
        "open_issues": 10,
        "cover_image_prompt": "A chef in a modern kitchen, using a smartphone to send a recipe request to a smart oven. The oven receives the request and begins cooking, displaying the response on a small screen. The scene shows the smartphone shortcut acting as a remote control for the oven. Subtle UI elements on the phone show HTTP request details. The kitchen is clean and well-lit, with digital particles flowing between the phone and the oven. The repository name is subtly displayed on the oven's screen. The composition is focused and easy to understand, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 871717382,
        "name": "joycaption",
        "description": "JoyCaption is an image captioning Visual Language Model (VLM) being built from the ground up as a free, open, and uncensored model for the community to use in training Diffusion models.",
        "url": "https://github.com/fpgaminer/joycaption",
        "language": "Jupyter Notebook",
        "stars": 912,
        "forks": 57,
        "created_at": "2024-10-12T18:35:17Z",
        "updated_at": "2025-10-27T10:05:44Z",
        "topics": [
            "captioning",
            "joycaption",
            "vlm"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-14T23:22:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/84bae1f09d56e76bd65481d531759b857fa56901ef39a0ad203e88ec5f6794a6/fpgaminer/joycaption"
        ],
        "homepage": "",
        "readme_summary": "JoyCaption is an open-source Visual Language Model (VLM) designed for image captioning. It aims to provide a free, uncensored alternative to existing models like ChatGPT, enabling the training and fine-tuning of diffusion models on a wider range of images with diverse content and styles.",
        "key_features": [
            "Free and Open: Open weights, no restrictions, training scripts provided.",
            "Uncensored: Equal coverage of SFW and NSFW concepts.",
            "Diversity: Broad coverage of image styles, content, ethnicity, gender, orientation, etc.",
            "Minimal Filtering: Trained on large datasets to understand almost all aspects of our world, excluding illegal content."
        ],
        "primary_use_case": "Automated image captioning for training and fine-tuning diffusion models.",
        "open_issues": 31,
        "cover_image_prompt": "A skilled cartographer meticulously labeling a vast, uncharted map with vibrant descriptions. The map represents the world's visual data, and the cartographer uses a magical quill that translates images into eloquent captions. Small screens display diverse images being processed and captioned in real-time. The scene is set in a sunlit library filled with scrolls and reference materials. Digital particles representing language flow from the quill onto the map. The composition is focused and detailed with a warm color scheme. The image should be in a 3D isometric illustration style with rich textures and clear labels."
    },
    {
        "id": 209925723,
        "name": "ffmpeg-commander",
        "description": "A web-based GUI for quickly generating common FFmpeg command-line operations.",
        "url": "https://github.com/alfg/ffmpeg-commander",
        "language": "Vue",
        "stars": 963,
        "forks": 108,
        "created_at": "2019-09-21T04:41:05Z",
        "updated_at": "2025-10-27T05:58:31Z",
        "topics": [
            "avc",
            "command",
            "encoding",
            "ffmpeg",
            "ffmpeg-gui",
            "generator",
            "gui",
            "hevc",
            "javascript",
            "mp4",
            "multimedia",
            "video",
            "video-streaming",
            "vue",
            "x264",
            "x265"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2023-08-24T04:07:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8ad1faa4bc57d1b900671d44f0c224973fd4ba470b41786ab5ace1124899f5a8/alfg/ffmpeg-commander"
        ],
        "homepage": "https://alfg.github.io/ffmpeg-commander/",
        "readme_summary": "The `ffmpeg-commander` repository provides a web-based GUI for generating FFmpeg command-line operations. It simplifies the process of encoding video and audio by offering a user-friendly interface to create common FFmpeg commands. It also has an optional companion application `ffmpegd` that connects `ffmpeg-commander` to `ffmpeg` by providing a websocket server to send encode tasks and receive realtime progress updates back to the browser.",
        "key_features": [
            "Web-based GUI for FFmpeg",
            "Generates common FFmpeg encoding operations",
            "Vue.js and Bootstrap Vue based",
            "Docker support",
            "Optional companion application `ffmpegd` for realtime progress updates"
        ],
        "primary_use_case": "Simplifying FFmpeg command generation for video and audio encoding.",
        "open_issues": 18,
        "cover_image_prompt": "A skilled artisan in a workshop, meticulously crafting video streams from raw footage using a sophisticated control panel. The artisan adjusts settings on the panel, which translates into precise FFmpeg commands displayed on a nearby screen. The raw footage enters as a jumbled mess of film reels, and the output is a perfectly encoded video stream flowing into a digital projector. Small UI elements and code snippets subtly connect the scene to software. The workshop is brightly lit with a focused composition. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 948212112,
        "name": "branch-pad",
        "description": "branch-pad is an interactive Python notebook environment that allows you to create and explore multiple branches of code execution",
        "url": "https://github.com/alexyorke/branch-pad",
        "language": "TypeScript",
        "stars": 7,
        "forks": 1,
        "created_at": "2025-03-13T23:58:03Z",
        "updated_at": "2025-10-27T09:05:31Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-03-20T06:03:51Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b690690f828d21b57321e7fbead8d229341d6b47f3561fe0cde5960fed922174/alexyorke/branch-pad"
        ],
        "homepage": "",
        "readme_summary": "branch-pad is an interactive Python notebook environment that allows users to create and explore multiple branches of code execution. It provides features for branch management, independent code execution environments, snapshotting, versioning, and branch comparison. It also supports exporting notebooks and deployment packages.",
        "key_features": [
            "Branch Management (creation, customization)",
            "Independent Code Execution Environments",
            "Package Management (detection, installation, version tracking)",
            "Snapshotting & Versioning",
            "Branch Comparison (code, output, variables)",
            "Notebook Export",
            "Deployment Export (script, requirements, Dockerfile)",
            "UI Features (Tree View, Canvas Controls)"
        ],
        "primary_use_case": "Experimentation and hypothesis testing in Python code by exploring multiple branches simultaneously within an interactive notebook environment.",
        "open_issues": 0,
        "cover_image_prompt": "A gardener tending to a tree with multiple branches, each representing a different path of code execution. The gardener prunes and nurtures each branch, viewing code snippets and output data displayed on small screens attached to the branches. Roots of the tree are connected to a Python interpreter represented by glowing digital particles. The scene is set in a bright, futuristic greenhouse with a clean, organized layout. The composition is focused and clear, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 108631782,
        "name": "doodle",
        "description": "A pure Kotlin UI framework for the Web and Desktop.",
        "url": "https://github.com/nacular/doodle",
        "language": "Kotlin",
        "stars": 775,
        "forks": 31,
        "created_at": "2017-10-28T08:15:23Z",
        "updated_at": "2025-10-27T07:04:41Z",
        "topics": [
            "framework",
            "gui",
            "javascript",
            "kotlin",
            "kotlin-js",
            "kotlin-jvm",
            "kotlin-multiplatform",
            "kotlin-wasm",
            "object-oriented",
            "ui",
            "ui-kit",
            "web",
            "webapp"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-08-17T17:58:15Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/108631782/b675cd80-23f7-11eb-8fe7-1b28b2360870"
        ],
        "homepage": "https://nacular.github.io/doodle",
        "readme_summary": "Doodle is a pure Kotlin UI framework for building web and desktop applications. It provides an intuitive render model, making it easy to create complex UIs with pixel-level precision and layouts. The framework supports Kotlin/JS, Kotlin/Wasm, and Kotlin/JVM, enabling cross-platform development.",
        "key_features": [
            "Pure Kotlin UI framework",
            "Cross-platform support (Web, Desktop)",
            "Intuitive render model",
            "Pixel-level precision",
            "Support for complex UIs",
            "User input and drag and drop",
            "Animation capabilities"
        ],
        "primary_use_case": "Building cross-platform (web and desktop) user interfaces using Kotlin.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled artisan meticulously crafting a stained-glass window, each pane representing a UI component. The artisan uses a Kotlin compiler as a specialized tool, shaping the glass with precision and care. Light streams through the window, projecting vibrant colors and intricate designs onto a modern desktop and a sleek web browser, symbolizing the framework's cross-platform capabilities. Small code snippets and UI elements are subtly etched onto the glass panes. The scene is set in a bright, airy workshop with a focus on detail and craftsmanship. The image should be in a 3D isometric illustration style with rich textures and a warm color palette."
    },
    {
        "id": 946939412,
        "name": "infinite-ai-web",
        "description": null,
        "url": "https://github.com/TheLime1/infinite-ai-web",
        "language": "HTML",
        "stars": 6,
        "forks": 1,
        "created_at": "2025-03-11T23:06:05Z",
        "updated_at": "2025-10-27T09:57:37Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2025-03-14T11:24:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/89c2953b043b037a8e1b59641e4dc3493facd038e48586feb9db8473e67905a7/TheLime1/infinite-ai-web"
        ],
        "homepage": "https://thelime1.github.io/infinite-ai-web/",
        "readme_summary": "The Infinite AI Web repository is a dynamic web content generator that uses Google's Gemini AI model to create web pages on-the-fly. It allows users to search for any topic or navigate to any URL path, and the application will generate relevant content for that route, saving the generated content to the filesystem for future access.",
        "key_features": [
            "AI-Generated Content using Google's Gemini 2.0 Flash model",
            "Dynamic Routing to generate content for any URL path",
            "Search Interface for easy content discovery",
            "Content Persistence to save generated content for faster access",
            "Organized Structure to maintain directory structure based on URL paths",
            "Index of Saved Content for easy navigation of previously generated pages"
        ],
        "primary_use_case": "Dynamically generating web content for any given topic or URL path using AI, and serving it as a website.",
        "open_issues": 0,
        "cover_image_prompt": "A diligent librarian in a vast, futuristic library is using a glowing AI lens to instantly write new books based on empty shelves labeled with various topics. The lens emits streams of digital information that transform into bound books, filling the shelves with knowledge. Small UI elements displaying search queries and generated HTML code float around the librarian. The scene is set in a brightly lit, organized library with a blue and white color scheme. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, subtly incorporating the repository name 'Infinite AI Web' on a book spine."
    },
    {
        "id": 918049112,
        "name": "wetube_flutter",
        "description": "The lightweight YouTube experience client for android.",
        "url": "https://github.com/Purehi/wetube_flutter",
        "language": "Dart",
        "stars": 253,
        "forks": 10,
        "created_at": "2025-01-17T06:36:24Z",
        "updated_at": "2025-10-27T00:09:27Z",
        "topics": [
            "android",
            "app",
            "dart",
            "dartlang",
            "flutter",
            "flutter-app",
            "flutter-apps",
            "flutter-ui",
            "mobile",
            "youtube",
            "youtube-api",
            "youtube-dl"
        ],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-04-13T15:31:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/74f14a10e15fc05ae9f4d4775aa0caf5b4fe9346b444a2ed957205f066b01050/Purehi/wetube_flutter"
        ],
        "homepage": "https://play.google.com/store/apps/details?id=free.mor.mordo.do",
        "readme_summary": "WeTube is a lightweight Flutter-based Android client for YouTube, offering features like ad-skipping, background playback, and resolution switching. It allows users to browse and watch YouTube content without needing an account, providing access to videos, music, podcasts, and live streams.",
        "key_features": [
            "Auto-skip video ads",
            "Background play (PiP mode)",
            "YouTube login support",
            "Video and music search",
            "Dark mode support",
            "Up to 4K resolution support",
            "Live stream support",
            "Podcast stream support",
            "Music playlist browsing",
            "Channel video browsing",
            "Channel group video feeds"
        ],
        "primary_use_case": "Watching YouTube videos on Android with ad-skipping and background playback.",
        "open_issues": 3,
        "cover_image_prompt": "A friendly robot butler stands in a cozy living room, holding a holographic tray displaying various video icons (YouTube, podcast, music). The butler effortlessly swats away cartoonish ad monsters trying to reach the tray. A phone on a nearby table shows a video playing in picture-in-picture mode. Subtle UI elements and code snippets float in the background, hinting at the app's functionality. The scene is warmly lit with a focus on user-friendliness. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 947234643,
        "name": "fastrace",
        "description": "A fast, dependency-free traceroute implementation in pure C.",
        "url": "https://github.com/davidesantangelo/fastrace",
        "language": "C",
        "stars": 26,
        "forks": 1,
        "created_at": "2025-03-12T11:14:51Z",
        "updated_at": "2025-10-27T00:25:48Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-04-01T09:24:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d10eb44de98038da5e96a47696e415465baa61d1a38cf0df809e148fc99ade08/davidesantangelo/fastrace"
        ],
        "homepage": "https://davidesantangelo.github.io/fastrace/",
        "readme_summary": "Fastrace is a dependency-free traceroute implementation in pure C, designed for network diagnostics and performance analysis. It maps the route that packets take across an IP network, providing detailed timing information and identifying potential bottlenecks.",
        "key_features": [
            "Zero External Dependencies",
            "Maximum Performance (parallel probing, efficient packet handling)",
            "Low Memory Footprint",
            "Dual Socket Implementation (UDP probes, raw ICMP response capture)",
            "Visual Route Mapping (tree-like representation)",
            "Non-blocking I/O",
            "Probe Batching",
            "Precise RTT Calculation"
        ],
        "primary_use_case": "Network diagnostics and performance analysis by mapping network routes and identifying bottlenecks.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned explorer charting a river's course through a dense jungle, using a high-tech surveying tool. The explorer launches small, glowing drones (representing UDP probes) that fly ahead, mapping the river's path. As the drones return, they transmit data to a holographic display showing the river's branching routes and potential obstacles. The explorer's backpack has a small screen displaying real-time network statistics. The jungle is lush and vibrant, with subtle digital particles floating in the air. The composition is a wide shot with a focus on the explorer and the holographic display. The image should be in a 3D isometric illustration style with clear details and a sense of adventure."
    }
]