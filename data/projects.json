[
    {
        "id": 965313467,
        "name": "droidrun",
        "description": null,
        "url": "https://github.com/droidrun/droidrun",
        "language": "Python",
        "stars": 1554,
        "forks": 138,
        "created_at": "2025-04-12T22:03:47Z",
        "updated_at": "2025-04-18T10:05:25Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T13:03:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e0d3d7302ebde7284da6cb56b0719496571856e67dd64e8a40ac1b82858fa88b/droidrun/droidrun"
        ],
        "homepage": "https://droidrun.ai",
        "readme_summary": "DroidRun is a framework for controlling Android devices using LLM agents, enabling automation through natural language. It features a CLI, a Python API for custom automations, and supports multiple LLM providers like OpenAI, Anthropic, and Gemini. The framework also uses screenshot analysis for visual understanding of the device's state.",
        "key_features": [
            "Control Android devices with natural language commands",
            "Supports multiple LLM providers (OpenAI, Anthropic, Gemini)",
            "Easy to use CLI",
            "Extendable Python API for custom automations",
            "Screenshot analysis for visual understanding of the device"
        ],
        "primary_use_case": "Automating Android device interactions using natural language commands.",
        "open_issues": 9,
        "cover_image_prompt": "Imagine a skilled puppeteer controlling an Android device with strings of code, orchestrating automated tasks on the screen. The puppeteer stands in front of a large monitor displaying the Android device's interface, with lines of code subtly woven into the strings. The scene is set in a futuristic workshop filled with glowing screens and digital tools. The illustration should be in a 3D isometric style with vibrant colors and intricate details, conveying the power and control DroidRun offers over Android devices."
    },
    {
        "id": 966383042,
        "name": "dead-man-hand",
        "description": "DMH will execute action when you will not be able to. Dead-man-switch software with privacy in mind.",
        "url": "https://github.com/bkupidura/dead-man-hand",
        "language": "Go",
        "stars": 111,
        "forks": 0,
        "created_at": "2025-04-14T20:52:05Z",
        "updated_at": "2025-04-18T09:03:56Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-17T22:40:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/95ef855a8278928fbcb587a27b108abad30a56f481c2b2d22677cf90de77baed/bkupidura/dead-man-hand"
        ],
        "homepage": null,
        "readme_summary": "The dead-man-hand repository provides a dead-man-switch software solution designed with privacy in mind. It allows users to define actions that will be executed only when they are considered 'dead,' ensuring that these actions remain encrypted and confidential until that moment. The system integrates with Vault for secure key management and supports multiple action and probe methods.",
        "key_features": [
            "Privacy-focused action execution only after death",
            "Encrypted actions using age encryption",
            "Vault integration for private key management",
            "Multiple action execution methods (json_post, bulksms, mail)",
            "Multiple alive probe methods (json_post, bulksms, mail)"
        ],
        "primary_use_case": "Executing predefined actions when the user is no longer available, ensuring privacy and confidentiality until that time.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a locked vault in a serene, snow-covered mountain landscape. Inside, a person's most precious memories and wishes are stored, safe and sound. A lone raven, representing the 'Dead Man's Hand,' perches atop the vault, patiently waiting. The vault's door is intricately designed with digital circuitry patterns, subtly hinting at the software aspect. The scene is bathed in soft, ethereal light, creating a sense of peace and security. The image should be in a 3D isometric illustration style with rich details and a cool color palette."
    },
    {
        "id": 489384246,
        "name": "blackbird",
        "description": "An OSINT tool to search for accounts by username and email in social networks.",
        "url": "https://github.com/p1ngul1n0/blackbird",
        "language": "Python",
        "stars": 3381,
        "forks": 429,
        "created_at": "2022-05-06T14:25:44Z",
        "updated_at": "2025-04-18T08:05:44Z",
        "topics": [
            "cybersecurity",
            "osint",
            "pentesting",
            "python"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-03-10T15:34:30Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4725bd8403cdec32c8f492a52d5675bbf245bf6e43bafd1d32ca292af35f03b1/p1ngul1n0/blackbird"
        ],
        "homepage": "https://p1ngul1n0.gitbook.io/blackbird/",
        "readme_summary": "Blackbird is an OSINT tool designed to quickly locate user accounts on various platforms using usernames or email addresses. It integrates with WhatsMyName, offers multiple export formats, and includes AI-powered NER to enhance metadata extraction. The tool is intended for use in digital investigations and cybersecurity.",
        "key_features": [
            "OSINT tool for username/email searches",
            "WhatsMyName integration",
            "PDF, CSV, and HTTP export options",
            "Customizable search filters",
            "AI-powered NER for metadata extraction"
        ],
        "primary_use_case": "Searching for user accounts by username or email across social networks for digital investigations.",
        "open_issues": 4,
        "cover_image_prompt": "A detective meticulously examining a digital fingerprint under a magnifying glass, revealing connections between various social media profiles displayed on scattered screens. The detective's workspace is filled with glowing lines of code and data visualizations subtly connecting the fingerprint to the online world. The scene is set in a dimly lit, high-tech office with a focused atmosphere. Small UI elements displaying usernames and email addresses are visible on the screens. The image should be in a digital painting style with sharp details and a dark, mysterious color scheme."
    },
    {
        "id": 927981080,
        "name": "ScrapeServ",
        "description": "A self-hosted API that takes a URL and returns a file with browser screenshots.",
        "url": "https://github.com/goodreasonai/ScrapeServ",
        "language": "Python",
        "stars": 952,
        "forks": 63,
        "created_at": "2025-02-05T21:25:38Z",
        "updated_at": "2025-04-18T08:07:35Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T21:27:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/db6e3c7278807ced7b8262147d8eae153b7b24dcc030c6c69d58a0638e1e8389/goodreasonai/ScrapeServ"
        ],
        "homepage": "",
        "readme_summary": "ScrapeServ is a self-hosted API that allows users to send a URL and receive website data as a file, along with screenshots of the site. It utilizes Playwright to launch a Firefox browser context for each job, ensuring accurate rendering of websites with JavaScript. The API handles redirects, download links, and provides HTTP status codes and headers, making it a comprehensive solution for web scraping and screenshot generation.",
        "key_features": [
            "Takes screenshots of different sections of a webpage by scrolling.",
            "Runs in a Docker container.",
            "Browser-based (runs website Javascript).",
            "Returns HTTP status code and headers.",
            "Handles redirects automatically.",
            "Handles download links.",
            "Uses a task queue with configurable memory allocation.",
            "Blocking API."
        ],
        "primary_use_case": "Taking website screenshots via an API.",
        "open_issues": 1,
        "cover_image_prompt": "A diligent librarian meticulously archiving websites into physical books. The librarian uses a special camera that captures entire web pages, scrolls and all, and instantly prints them onto the book's pages. The books are then neatly organized on shelves, each labeled with the website's URL. A subtle UI overlay on the camera's screen shows the website rendering in real-time. The scene is set in a bright, modern library with a warm, inviting atmosphere. The image should be in a flat design style with clear iconography and a limited color palette."
    },
    {
        "id": 6909307,
        "name": "pyquery",
        "description": "A jquery-like library for python",
        "url": "https://github.com/gawel/pyquery",
        "language": "Python",
        "stars": 2349,
        "forks": 182,
        "created_at": "2012-11-28T20:27:39Z",
        "updated_at": "2025-04-17T21:43:13Z",
        "topics": [
            "css",
            "jquery",
            "lxml",
            "python",
            "python3"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-08-30T08:12:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9555d94c4d9d1f2e9d1e2893cac0bf9dfddef1c914da7da9224bb0b6927d427d/gawel/pyquery"
        ],
        "homepage": "http://pyquery.rtfd.org/",
        "readme_summary": "PyQuery is a Python library that provides a jQuery-like interface for querying and manipulating XML documents. It leverages lxml for efficient processing and offers a familiar API for developers accustomed to jQuery. PyQuery simplifies tasks such as selecting elements, traversing the DOM, and modifying content within XML/HTML structures.",
        "key_features": [
            "jQuery-like API for XML documents in Python",
            "Uses lxml for fast XML and HTML manipulation",
            "Ability to load XML from strings, lxml documents, files, or URLs",
            "Supports jQuery pseudo-classes like :first, :last, :even, :odd, etc."
        ],
        "primary_use_case": "Querying and manipulating XML/HTML documents in Python using a jQuery-like syntax.",
        "open_issues": 54,
        "cover_image_prompt": "Imagine a skilled sculptor meticulously shaping a block of raw XML data into a refined jQuery object. The sculptor uses specialized tools that resemble Python code snippets, carefully chiseling away imperfections and adding elegant features. The finished jQuery object glows with a soft, inviting light, ready to be seamlessly integrated into a web application displayed on a nearby screen. Subtle UI elements float around the sculptor, showcasing the transformation process. The scene is set in a bright, modern workshop with a focus on precision and artistry. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 187202744,
        "name": "python-benedict",
        "description": ":blue_book: dict subclass with keylist/keypath support, built-in I/O operations (base64, csv, html, ini, json, pickle, plist, query-string, toml, xls, xml, yaml), s3 support and many utilities.",
        "url": "https://github.com/fabiocaccamo/python-benedict",
        "language": "Python",
        "stars": 1550,
        "forks": 45,
        "created_at": "2019-05-17T11:13:40Z",
        "updated_at": "2025-04-18T09:55:51Z",
        "topics": [
            "base64",
            "csv",
            "decode",
            "dict",
            "dictionary",
            "encode",
            "filter",
            "flatten",
            "json",
            "keypath",
            "pickle",
            "plist",
            "python",
            "query-string",
            "subset",
            "toml",
            "traverse",
            "xls",
            "xml",
            "yaml"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T09:11:43Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/187202744/024f6180-049f-11eb-876a-be68f8b900d1"
        ],
        "homepage": "",
        "readme_summary": "The python-benedict library enhances Python's built-in dictionary with keylist, keypath, and keyattr support, simplifying access to nested data. It provides integrated I/O operations for common data formats like JSON, YAML, and CSV, as well as S3 support. This makes it easier to work with complex data structures and perform data serialization/deserialization tasks.",
        "key_features": [
            "Dict subclass with keylist/keypath/keyattr support",
            "Built-in I/O operations (base64, csv, html, ini, json, pickle, plist, query-string, toml, xls, xml, yaml)",
            "S3 support",
            "Utility methods for data manipulation"
        ],
        "primary_use_case": "Extending Python dictionaries with advanced key access methods and built-in I/O operations for various data formats.",
        "open_issues": 9,
        "cover_image_prompt": "A skilled librarian meticulously organizing a vast collection of dictionaries, each representing a different data format (JSON, YAML, CSV, etc.). The librarian uses a special key to unlock and access data within each dictionary, seamlessly converting between formats. Digital particles flow from one dictionary to another, symbolizing data transformation. A subtle UI overlay shows a keypath being used to access nested data. The scene is set in a bright, modern library with warm lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 370397287,
        "name": "AirPodsDesktop",
        "description": "☄️ AirPods desktop user experience enhancement program, for Windows and Linux (WIP)",
        "url": "https://github.com/SpriteOvO/AirPodsDesktop",
        "language": "C++",
        "stars": 1865,
        "forks": 111,
        "created_at": "2021-05-24T15:20:25Z",
        "updated_at": "2025-04-18T08:09:40Z",
        "topics": [
            "airpods",
            "battery",
            "bluetooth",
            "desktop",
            "helper",
            "media-control",
            "monitor",
            "power",
            "tool",
            "windows"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2023-10-16T04:53:49Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/370397287/01ccac85-7e2a-4e40-ab15-2807cabdfd8b"
        ],
        "homepage": "",
        "readme_summary": "AirPodsDesktop is a C++ application designed to improve the AirPods user experience on Windows and Linux. It provides features such as battery information display, automatic ear detection, low audio latency mode, and visually appealing animations. The application aims to integrate AirPods seamlessly with desktop environments, offering a more convenient and intuitive user experience.",
        "key_features": [
            "Battery information display",
            "Automatic ear detection",
            "Low audio latency mode",
            "Beautiful animation"
        ],
        "primary_use_case": "Enhance the user experience of AirPods on Windows and Linux desktops.",
        "open_issues": 63,
        "cover_image_prompt": "A friendly, animated AirPods icon sitting on a Windows desktop, acting as a conductor of an orchestra. The orchestra represents the computer's audio system, with instruments visually representing different audio functions like volume control, battery levels, and ear detection. The AirPods conductor uses a glowing baton to adjust the sound, with musical notes transforming into UI elements on nearby screens. The desktop background shows a subtle, stylized version of the AirPodsDesktop logo. The scene is brightly lit and cheerful, in a 3D isometric illustration style with clean lines and vibrant colors."
    }
]