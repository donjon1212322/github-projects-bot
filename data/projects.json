[
    {
        "id": 551376520,
        "name": "Pake",
        "description": "ü§±üèª Turn any webpage into a desktop app with Rust.  ü§±üèª Âà©Áî® Rust ËΩªÊùæÊûÑÂª∫ËΩªÈáèÁ∫ßÂ§öÁ´ØÊ°åÈù¢Â∫îÁî®",
        "url": "https://github.com/tw93/Pake",
        "language": "JavaScript",
        "stars": 41671,
        "forks": 7758,
        "created_at": "2022-10-14T09:32:57Z",
        "updated_at": "2025-08-27T10:03:40Z",
        "topics": [
            "chatgpt",
            "deepseek",
            "excalidraw",
            "gemini",
            "gemini-ai",
            "high-performance",
            "linux-desktop",
            "llm",
            "mac",
            "mac-desktop",
            "music",
            "no-electron",
            "openai",
            "productivity",
            "programming",
            "rust",
            "tauri",
            "twitter",
            "windows-desktop",
            "youtube"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-22T10:04:23Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/551376520/6d582704-13d1-4546-a7e9-f8793a010e85"
        ],
        "homepage": "",
        "readme_summary": "Pake is a tool that allows users to convert web pages into desktop applications using Rust and Tauri. It offers a smaller package size and better performance compared to Electron-based solutions. Pake provides a simple way to create desktop apps with features like shortcut pass-through and immersive windows.",
        "key_features": [
            "Small package size compared to Electron",
            "Uses Rust Tauri for performance",
            "Battery-included features (shortcuts, immersive windows)",
            "Simple tool for converting web pages to desktop apps"
        ],
        "primary_use_case": "Turning web pages into desktop applications",
        "open_issues": 18,
        "cover_image_prompt": "A skilled artisan in a bright workshop meticulously crafting desktop application shells around glowing web pages. The artisan uses a specialized Rust-powered tool, shaping the web pages into sleek, native-looking applications ready for distribution. Digital particles representing code flow seamlessly from the web pages into the crafted shells, enhancing their functionality. The workshop is filled with subtle tech elements like UI mockups and code snippets. The scene is set in a clean, modern environment with soft, diffused lighting. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 583528771,
        "name": "vet",
        "description": "Protect against malicious open source packages ü§ñ",
        "url": "https://github.com/safedep/vet",
        "language": "Go",
        "stars": 679,
        "forks": 66,
        "created_at": "2022-12-30T03:39:03Z",
        "updated_at": "2025-08-27T08:06:05Z",
        "topics": [
            "devsecops",
            "golang",
            "hacktoberfest",
            "npm",
            "policy-as-code",
            "pypi",
            "rubygems",
            "security",
            "software-composition-analysis",
            "static-analysis",
            "supply-chain-security"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-27T08:06:00Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/583528771/660bc6a3-497c-4083-ae21-94482ec53028"
        ],
        "homepage": "https://safedep.io",
        "readme_summary": "Vet is an open source software supply chain security tool designed for developers and security engineers. It offers features such as vulnerability and malicious package detection, policy as code using CEL, and real-time protection powered by SafeDep Cloud. Vet supports multiple ecosystems and integrates with CI/CD pipelines for DevSecOps workflows.",
        "key_features": [
            "Next-gen Software Composition Analysis",
            "Policy as Code using CEL",
            "Real-time malicious package detection via SafeDep Cloud",
            "Multi-ecosystem support (npm, PyPI, Maven, Go, Docker, GitHub Actions)",
            "CI/CD native integration for DevSecOps workflows",
            "MCP Server for vetting open source packages from AI suggested code",
            "AI Agents for querying and analyzing scan results"
        ],
        "primary_use_case": "Protecting software supply chains from vulnerabilities and malicious packages.",
        "open_issues": 74,
        "cover_image_prompt": "A vigilant guardian with a glowing shield inspecting open source software packages before they are integrated into a futuristic city. The guardian uses a special lens to see inside each package, revealing hidden vulnerabilities and malicious code that glow red. Successfully scanned packages emit a green aura as they pass through, ensuring the city's safety. Small monitors around the gate display scanning logs, policy checks, and security metrics. The scene has a blue and purple color scheme with dramatic lighting. The image should be in digital painting style with clean lines and clear details, emphasizing the protection against supply chain attacks."
    },
    {
        "id": 382926757,
        "name": "adbtuifm",
        "description": "A TUI File Manager for ADB",
        "url": "https://github.com/darkhz/adbtuifm",
        "language": "Go",
        "stars": 154,
        "forks": 6,
        "created_at": "2021-07-04T18:54:33Z",
        "updated_at": "2025-08-26T20:25:14Z",
        "topics": [
            "adb",
            "filemanager",
            "filemanager-ui",
            "tui"
        ],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2022-03-16T09:45:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bdb284ab88b52e0243edfa59456306ec5d1a54112795a890334ce8f6c9748e6b/darkhz/adbtuifm"
        ],
        "homepage": "",
        "readme_summary": "adbtuifm is a TUI-based file manager for the Android Debug Bridge (ADB), designed to simplify file transfers between Android devices and local machines. It offers features like multiselection, file operations (copy, move, delete), command execution, filtering, and directory navigation, all within a terminal interface.",
        "key_features": [
            "Multiselection support with a selections editor",
            "Transferring files/folders between device and local machine",
            "Opening files from device or local machine",
            "Copy, move, and delete operations",
            "View file operations with progress monitoring and cancellation",
            "Execute commands on device or local machine",
            "Filter entries in directories",
            "Rename files/folders or create directories",
            "Switch between adbtuifm and shell",
            "Change directory via inputbox with autocompletion"
        ],
        "primary_use_case": "Managing and transferring files between an Android device and a local machine using a terminal user interface (TUI).",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a skilled mechanic in a high-tech garage, effortlessly transferring files between a sleek Android device on a workbench and a powerful desktop computer nearby. The mechanic uses a holographic interface with glowing blue lines, representing the TUI, to manage the files. The Android device displays a file directory, and the desktop shows a progress bar for the transfer. Digital particles flow smoothly between the devices, symbolizing the data transfer. The garage is clean and well-lit, with subtle UI elements on the walls. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 273572521,
        "name": "Face-Depixelizer",
        "description": "Face Depixelizer based on \"PULSE: Self-Supervised Photo Upsampling via Latent Space Exploration of Generative Models\" repository. ",
        "url": "https://github.com/tg-bomze/Face-Depixelizer",
        "language": "Jupyter Notebook",
        "stars": 2512,
        "forks": 283,
        "created_at": "2020-06-19T19:35:11Z",
        "updated_at": "2025-08-27T09:15:52Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-01-06T11:27:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5ef5815a84d84890ebe4853b5d007a1c97156eafb28fe5d024d5e9b7e4987d4f/tg-bomze/Face-Depixelizer"
        ],
        "homepage": null,
        "readme_summary": "The Face Depixelizer repository provides a method for upscaling low-resolution face images. It leverages the PULSE algorithm and StyleGAN to generate perceptually realistic high-resolution images from pixelated inputs by exploring the latent space of generative models. The repository offers Google Colab notebooks for easy experimentation.",
        "key_features": [
            "Face depixelization",
            "Photo upsampling",
            "Latent space exploration of generative models",
            "Uses StyleGAN",
            "Based on PULSE"
        ],
        "primary_use_case": "Upscaling low-resolution face images to higher resolution images using generative models.",
        "open_issues": 7,
        "cover_image_prompt": "An artist meticulously restoring a heavily pixelated portrait with advanced digital tools, revealing a clear, lifelike face. The artist uses a glowing stylus on a digital canvas, with the pixelated image displayed on one side and the restored image on the other. Subtle UI elements and code snippets float around the scene, representing the underlying algorithms. The setting is a modern digital art studio with soft, diffused lighting. The composition is clean and focused, highlighting the transformation process. The image should be in a digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 994302499,
        "name": "swe-agent",
        "description": "ü§ñ AI-powered software engineering multi-agent system with researcher and developer agents that automate code implementation through intelligent planning and execution. Built with LangGraph multi-agent workflows",
        "url": "https://github.com/langtalks/swe-agent",
        "language": "Python",
        "stars": 529,
        "forks": 103,
        "created_at": "2025-06-01T16:48:04Z",
        "updated_at": "2025-08-27T04:16:42Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-05T03:49:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/44607e47bc336c763b7b5e5059b0eebb634b34fd840b5fa6f8c6c02577286248/langtalks/swe-agent"
        ],
        "homepage": "https://www.langtalks.ai",
        "readme_summary": "The SWE Agent repository provides an AI-powered software engineering multi-agent system that automates code implementation. It uses a LangGraph workflow with researcher and developer agents for intelligent planning, code generation, and codebase understanding, enabling incremental development through atomic task breakdown.",
        "key_features": [
            "Intelligent Code Planning",
            "Automated Code Generation",
            "Multi-Agent Workflow",
            "Codebase Understanding",
            "Incremental Development"
        ],
        "primary_use_case": "Automating code implementation through intelligent planning and execution using AI agents.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled architect meticulously crafting a complex blueprint for a towering skyscraper, while a team of diligent construction robots executes the plan with precision. The architect's blueprint glows with digital code, and the robots seamlessly integrate new modules into the building's structure. Small UI elements display real-time progress and code snippets. The scene is set in a futuristic construction site with bright, optimistic lighting. The composition is clean and focused, emphasizing the collaboration between planning and execution. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]