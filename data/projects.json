[
    {
        "id": 958900638,
        "name": "choof",
        "description": "Choof is a fast and minimal CLI tool for managing files, built with Bubble Tea for Linux",
        "url": "https://github.com/elParadigm/choof",
        "language": "Go",
        "stars": 14,
        "forks": 1,
        "created_at": "2025-04-02T00:22:12Z",
        "updated_at": "2025-04-07T08:27:47Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-07T00:58:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9bbf50dc8f0dfe7c99d5e7182b5b568bb7195e780aec1d5dfcef1f89d28829bc/elParadigm/choof"
        ],
        "homepage": null,
        "readme_summary": "Choof is a CLI tool for Linux that provides a user-friendly interface for viewing and managing file information. It allows users to inspect file details, delete, rename, and open files directly from the terminal using simple keybindings.",
        "key_features": [
            "Detailed File Info (size, creation/modification dates, permissions, hashes)",
            "File Operations (delete, rename, open)",
            "User-Friendly Interface",
            "Keyboard Shortcuts"
        ],
        "primary_use_case": "Managing files efficiently from the command line.",
        "open_issues": 0,
        "cover_image_prompt": "A meticulous librarian, surrounded by towering shelves of disorganized files, uses a special magnifying glass to instantly sort and organize them. The magnifying glass projects a clean, colorful UI onto each file, displaying key metadata like size, dates, and permissions. As the librarian examines each file, they can effortlessly rename, delete, or open it with simple gestures. Subtle digital particles float around the files, representing the underlying data. The scene is set in a bright, modern library with a clean, focused composition. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 959972299,
        "name": "regname",
        "description": "Mass renamer TUI written in Rust",
        "url": "https://github.com/linkdd/regname",
        "language": "Rust",
        "stars": 71,
        "forks": 2,
        "created_at": "2025-04-03T16:45:56Z",
        "updated_at": "2025-04-07T06:54:53Z",
        "topics": [
            "rust",
            "terminal",
            "tool",
            "tui"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T16:46:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e2b743518b1b9c008b3b8783f4ab3a53e9ca03f6cfcc8499da269008871653a0/linkdd/regname"
        ],
        "homepage": "",
        "readme_summary": "Regname is a Rust-based tool that provides a terminal user interface for mass renaming files. It allows users to interactively select files based on a pattern and rename them in batch, offering a convenient way to manage large numbers of files.",
        "key_features": [
            "Mass renaming of files",
            "Terminal User Interface (TUI)",
            "Interactive selection of files to rename",
            "Pattern matching for file selection"
        ],
        "primary_use_case": "Batch renaming files in a directory using a terminal-based interface.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously reshaping a collection of clay pots on a potter's wheel. Each pot is labeled with a different file name, and the artisan carefully adjusts their forms to match a master template displayed on a nearby screen. The screen shows a simple user interface with input fields for 'Match' and 'Rename'. Digital particles swirl around the pots, representing the transformation process. The scene is set in a bright, modern workshop with natural lighting. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 33783491,
        "name": "reaver-wps-fork-t6x",
        "description": null,
        "url": "https://github.com/t6x/reaver-wps-fork-t6x",
        "language": "C",
        "stars": 1781,
        "forks": 419,
        "created_at": "2015-04-11T16:36:37Z",
        "updated_at": "2025-04-07T09:26:09Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-12-12T14:35:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dba77533bcf156a380e5b28d6013ea7bc6d9e880d80351fab9f20929e4863de0/t6x/reaver-wps-fork-t6x"
        ],
        "homepage": null,
        "readme_summary": "The reaver-wps-fork-t6x repository is a community-maintained fork of the Reaver tool, designed for brute-forcing WPS PINs to recover WPA/WPA2 passphrases. It includes bug fixes, new features like the Pixie Dust attack, and aims to be a robust solution for testing the security of WPS implementations.",
        "key_features": [
            "Brute-force attack against Wifi Protected Setup (WPS) registrar PINs",
            "Recovery of WPA/WPA2 passphrases",
            "Offline Pixie Dust attack",
            "Bug fixes and new features compared to original Reaver",
            "Compatibility with various access points and WPS implementations"
        ],
        "primary_use_case": "Recovering WPA/WPA2 passphrases by exploiting vulnerabilities in Wi-Fi Protected Setup (WPS) implementations.",
        "open_issues": 22,
        "cover_image_prompt": "A locksmith meticulously picking a complex lock on a Wi-Fi router, revealing a treasure chest overflowing with WPA/WPA2 passphrases. The locksmith uses specialized tools emitting digital particles, and small UI elements display WPS PINs being cracked. The scene is set in a brightly lit, futuristic workshop with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and rich details, subtly incorporating the 'reaver-wps-fork-t6x' name on a tool."
    },
    {
        "id": 59782406,
        "name": "CloudFail",
        "description": "Utilize misconfigured DNS and old database records to find hidden IP's behind the CloudFlare network",
        "url": "https://github.com/m0rtem/CloudFail",
        "language": "Python",
        "stars": 2326,
        "forks": 486,
        "created_at": "2016-05-26T20:49:20Z",
        "updated_at": "2025-04-07T08:54:07Z",
        "topics": [
            "bruteforce",
            "cloudflare",
            "cloudflare-ip",
            "database",
            "ip",
            "pentest",
            "pentesting",
            "python3",
            "recon",
            "scanner",
            "tor"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2023-12-11T16:48:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/47f2b3f928bbe497940e0ee4f8a3827dcb6757c7196e57c6427e69e739e3b39c/m0rtem/CloudFail"
        ],
        "homepage": "",
        "readme_summary": "CloudFail is a reconnaissance tool designed to uncover the original IP addresses of servers protected by Cloudflare. It achieves this by employing techniques such as scanning for misconfigured DNS records, searching the Crimeflare.com database, and performing brute-force subdomain enumeration, optionally using Tor for anonymity.",
        "key_features": [
            "Misconfigured DNS scan using DNSDumpster.com",
            "Crimeflare.com database scan",
            "Bruteforce scan over 2500 subdomains",
            "Tor support for anonymized scanning"
        ],
        "primary_use_case": "Discovering the real IP addresses of servers hidden behind Cloudflare.",
        "open_issues": 44,
        "cover_image_prompt": "A detective meticulously piecing together fragments of DNS records and database entries to reveal a hidden server behind a shimmering, distorted Cloudflare shield. The detective uses a magnifying glass to examine digital clues, with faint code snippets and IP addresses subtly overlaid on the scene. The background shows a cityscape partially obscured by clouds, representing the hidden infrastructure. The scene is illuminated by a single spotlight, creating a noir atmosphere. The image should be in a digital painting style with sharp details and a dark, moody color palette."
    },
    {
        "id": 909145061,
        "name": "pgdog",
        "description": "Horizontal scaling for PostgreSQL with automatic sharding.",
        "url": "https://github.com/pgdogdev/pgdog",
        "language": "Rust",
        "stars": 588,
        "forks": 10,
        "created_at": "2024-12-27T21:10:04Z",
        "updated_at": "2025-04-07T08:27:20Z",
        "topics": [
            "load-balancer",
            "pooler",
            "postgresql",
            "rust",
            "sharding"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-04T15:25:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b75cb9fa2e4ce1b12692b9b0c08ea576dbb4a4ab29316d08046c272f304296f3/pgdogdev/pgdog"
        ],
        "homepage": "https://pgdog.dev",
        "readme_summary": "PgDog is a Rust-based transaction pooler and logical replication manager designed for horizontal scaling of PostgreSQL. It offers features like load balancing, transaction pooling, and automatic sharding, enabling efficient management of numerous databases and connections. PgDog supports healthchecks, failover, and runtime configuration, ensuring high availability and adaptability.",
        "key_features": [
            "Load balancer with healthchecks and failover",
            "Transaction pooling",
            "Sharding with COPY command support",
            "Logical replication",
            "Runtime configuration"
        ],
        "primary_use_case": "Horizontal scaling of PostgreSQL databases with automatic sharding.",
        "open_issues": 9,
        "cover_image_prompt": "A skilled architect meticulously managing a city skyline where each building represents a database shard. The architect uses a control panel displaying real-time traffic flow, rerouting connections to ensure smooth operations. Some buildings glow brighter, indicating higher activity, while others are dimmed for maintenance. A subtle overlay of network cables connects the buildings, symbolizing the sharding and load balancing. The scene is set at dusk with a futuristic cityscape backdrop. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 912948166,
        "name": "RustPotato",
        "description": "A Rust implementation of GodPotato — abusing SeImpersonate to gain SYSTEM privileges. Includes a TCP-based reverse shell and indirect NTAPI for various operations.",
        "url": "https://github.com/safedv/RustPotato",
        "language": "Rust",
        "stars": 263,
        "forks": 27,
        "created_at": "2025-01-06T18:10:14Z",
        "updated_at": "2025-04-07T10:00:44Z",
        "topics": [
            "offensive-security",
            "privilege-escalation",
            "red-team"
        ],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-01-06T18:10:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d788b8024c1497a37b5463a74206b3d3815d55a786dbc89d2e35e458ceb2ee67/safedv/RustPotato"
        ],
        "homepage": "",
        "readme_summary": "RustPotato is a Rust-based privilege escalation tool that implements the GodPotato technique. It leverages DCOM and RPC to exploit SeImpersonatePrivilege and gain SYSTEM privileges, featuring a TCP-based reverse shell and indirect NTAPI calls for token manipulation.",
        "key_features": [
            "TCP-based Reverse Shell",
            "Indirect NTAPI"
        ],
        "primary_use_case": "Privilege escalation on Windows systems by abusing SeImpersonatePrivilege.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled locksmith, representing RustPotato, meticulously picks the lock of a heavily fortified vault labeled 'Windows System'. Inside the vault, glowing tokens of privilege are scattered. The locksmith holds a blueprint labeled 'SeImpersonatePrivilege' and a small screen displays 'RPCSS Connection Established'. Digital particles flow from the lock into the locksmith's tools, visualizing the exploitation process. The scene is set in a dimly lit, high-tech security room with a blue and green color scheme. The image should be in a 3D isometric illustration style with sharp focus and detailed textures."
    },
    {
        "id": 133827809,
        "name": "tbls",
        "description": "tbls is a CI-Friendly tool to document a database, written in Go.",
        "url": "https://github.com/k1LoW/tbls",
        "language": "Go",
        "stars": 3707,
        "forks": 174,
        "created_at": "2018-05-17T14:47:27Z",
        "updated_at": "2025-04-07T08:24:40Z",
        "topics": [
            "bigquery",
            "continuous-integration",
            "database-document",
            "database-schema",
            "documentation-tool",
            "dynamodb",
            "er-diagram",
            "excel",
            "hacktoberfest",
            "mariadb",
            "markdown",
            "mermaid",
            "mysql",
            "plantuml",
            "postgresql",
            "redshift",
            "snowflake",
            "spanner",
            "sqlite",
            "sqlserver"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T21:00:39Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/133827809/40610100-6fdf-11e9-9f08-7f73d6741c26"
        ],
        "homepage": "",
        "readme_summary": "tbls is a CI-friendly tool written in Go that automatically documents databases in various formats, including GFM. It supports a wide range of databases and functions as a linter, ensuring database structure quality. Its single-binary design makes it ideal for continuous integration environments.",
        "key_features": [
            "Automatic database documentation in GFM format",
            "Single binary for CI-friendliness",
            "Support for many databases",
            "Database linting capabilities"
        ],
        "primary_use_case": "Documenting databases in a CI-friendly manner.",
        "open_issues": 34,
        "cover_image_prompt": "Imagine a meticulous architect meticulously drafting blueprints for a grand library, each book representing a database schema. The architect uses a special lens that automatically translates the complex blueprints into easily understandable diagrams and documentation. Digital particles flow from the lens, forming clear, labeled ER diagrams and markdown documents that surround the architect. The library's foundation is solid and well-organized, symbolizing the robust database structure. Small UI elements display database connection strings and schema details. The scene is set in a bright, modern studio with a clean, focused composition. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 22486533,
        "name": "shattered-pixel-dungeon",
        "description": "Shattered Pixel Dungeon is an open-source traditional roguelike dungeon crawler with randomized levels and enemies, and hundreds of items to collect and use. It's based on the source code of Pixel Dungeon, by Watabou.",
        "url": "https://github.com/00-Evan/shattered-pixel-dungeon",
        "language": "Java",
        "stars": 5136,
        "forks": 1206,
        "created_at": "2014-07-31T21:56:31Z",
        "updated_at": "2025-04-07T07:08:29Z",
        "topics": [
            "android",
            "game",
            "game-development",
            "ios",
            "java",
            "libgdx"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-20T18:45:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/74c4fa354c215e3da7ace84a723cac8e01569111b927d6ca84dcc9b11599374a/00-Evan/shattered-pixel-dungeon"
        ],
        "homepage": "https://shatteredpixel.com/shatteredpd/",
        "readme_summary": "Shattered Pixel Dungeon is an open-source, cross-platform roguelike game based on Pixel Dungeon. It features randomized levels, enemies, and items, providing a unique gameplay experience each time. The repository provides the source code for users to play, modify, and compile the game for various platforms.",
        "key_features": [
            "Open-source",
            "Roguelike dungeon crawler",
            "Randomized levels and enemies",
            "Hundreds of items to collect and use",
            "Cross-platform (Android, iOS, Desktop)"
        ],
        "primary_use_case": "Playing and modifying a traditional roguelike game.",
        "open_issues": 4,
        "cover_image_prompt": "A lone adventurer carefully navigating a multi-layered dungeon, each level procedurally generated and filled with diverse monsters and treasures. The adventurer holds a glowing pixelated sword and shield, representing the game's roguelike nature. Above the dungeon, a subtle interface displays code snippets and game parameters, connecting the adventure to its open-source roots. The scene is set in a dimly lit, cavernous environment with a sense of mystery and exploration. The composition is isometric, providing a clear view of the dungeon's layout. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 903631539,
        "name": "squish",
        "description": "Squish - Batch Browser-based Image Compression",
        "url": "https://github.com/addyosmani/squish",
        "language": "TypeScript",
        "stars": 858,
        "forks": 82,
        "created_at": "2024-12-15T05:43:22Z",
        "updated_at": "2025-04-07T03:34:30Z",
        "topics": [
            "batch",
            "batch-processing",
            "image-compression",
            "image-processing"
        ],
        "quality_score": 0.7000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-01-16T02:56:23Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/903631539/4ccbb78c-4501-4749-ad9c-81a81f2e5f71"
        ],
        "homepage": "https://squish.addy.ie",
        "readme_summary": "Squish is a browser-based image compression tool that allows users to compress images in various formats (AVIF, JPEG, JPEG XL, PNG, and WebP) without server uploads. It supports batch processing, format conversion, and quality adjustment, leveraging WebAssembly for high-performance image optimization.",
        "key_features": [
            "Browser-based compression",
            "Batch processing",
            "Multiple image format support (AVIF, JPEG, JPEG XL, PNG, WebP)",
            "Quality adjustment",
            "Format conversion"
        ],
        "primary_use_case": "Batch browser-based image compression and format conversion.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a skilled artisan meticulously sculpting a collection of raw stone blocks (various image formats) into perfectly polished gems (compressed images) using a magical browser-based workstation. The artisan carefully adjusts dials representing quality settings, while a real-time preview screen displays the transformation. Digital particles representing compression algorithms swirl around the workstation, enhancing the process. The scene is set in a bright, modern studio with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and sharp details, subtly incorporating the 'Squish' logo."
    }
]