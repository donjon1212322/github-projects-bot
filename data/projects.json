[
    {
        "id": 939470275,
        "name": "csm",
        "description": "A Conversational Speech Generation Model",
        "url": "https://github.com/SesameAILabs/csm",
        "language": "Python",
        "stars": 9319,
        "forks": 586,
        "created_at": "2025-02-26T15:38:54Z",
        "updated_at": "2025-03-16T10:08:57Z",
        "topics": [],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-15T15:52:41Z",
        "media_urls": [
            "https://opengraph.githubassets.com/336805f9b6dcdc2383b877de2db9e224ad2a749548f1e8141b09502245ec63b4/SesameAILabs/csm"
        ],
        "homepage": null,
        "readme_summary": "The CSM repository provides a conversational speech generation model capable of generating realistic audio from text and audio inputs. It utilizes a Llama backbone and a smaller audio decoder to produce RVQ audio codes, enabling the creation of diverse voices and contextual speech. The model can be fine-tuned for specific voices and supports prompting and context using audio segments.",
        "key_features": [
            "Generates RVQ audio codes from text and audio inputs",
            "Employs a Llama backbone and a smaller audio decoder",
            "Uses Mimi audio codes",
            "Can be fine-tuned for specific voices",
            "Supports contextual audio generation"
        ],
        "primary_use_case": "Conversational speech generation",
        "open_issues": 16,
        "cover_image_prompt": "A skilled sculptor meticulously crafting a human voice from raw clay, shaping the mouth and throat with precision tools. The clay is fed by a stream of text flowing from a digital tablet, while the finished voice emanates as a clear sound wave from the sculpture's mouth. Subtle UI elements on the tablet display waveforms and speech analysis data. The scene is set in a bright, modern studio with natural light. The composition is focused on the sculptor and the clay figure, with the tablet and sound wave subtly framing the scene. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 947345888,
        "name": "vimtea",
        "description": null,
        "url": "https://github.com/kujtimiihoxha/vimtea",
        "language": "Go",
        "stars": 9,
        "forks": 0,
        "created_at": "2025-03-12T14:42:44Z",
        "updated_at": "2025-03-16T04:29:17Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-13T13:45:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/702a3ac94f31258447d5c94560f11bd67358b30d16a7bf93b57a4ca63b4e5245/kujtimiihoxha/vimtea"
        ],
        "homepage": null,
        "readme_summary": "VimTea is a lightweight, Vim-inspired text editor for the terminal, built with Go and the Bubble Tea TUI framework. It offers a modular and extensible foundation, enabling developers to create Vim-like text editors within their terminal applications, complete with features like multiple editing modes, custom keybindings, and customizable highlighting.",
        "key_features": [
            "Multiple editing modes (Normal, Insert, Visual, Command)",
            "Vim-like keybindings and commands",
            "Line numbers (absolute and relative)",
            "Count-based movement commands",
            "Undo/redo functionality",
            "Visual mode selection",
            "Command mode",
            "Clipboard operations",
            "Word operations",
            "Extensible architecture",
            "Custom key bindings",
            "Customizable highlighting"
        ],
        "primary_use_case": "Building Vim-like text editors in terminal applications.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled tailor meticulously crafting a suit of armor for a knight, but instead of metal, the armor is woven from lines of code. The tailor carefully adjusts the code-armor, ensuring a perfect fit and maximum protection. A holographic screen displays the VimTea logo and snippets of text being edited within the armor. The scene is set in a futuristic workshop with glowing tools and digital blueprints. The image should be in a detailed digital painting style with a focus on texture and light, conveying the idea of VimTea providing a robust and customizable editing environment."
    },
    {
        "id": 220809393,
        "name": "rich",
        "description": "Rich is a Python library for rich text and beautiful formatting in the terminal.",
        "url": "https://github.com/Textualize/rich",
        "language": "Python",
        "stars": 51232,
        "forks": 1802,
        "created_at": "2019-11-10T15:28:09Z",
        "updated_at": "2025-03-16T09:36:10Z",
        "topics": [
            "ansi-colors",
            "emoji",
            "markdown",
            "progress-bar",
            "progress-bar-python",
            "python",
            "python-library",
            "python3",
            "rich",
            "syntax-highlighting",
            "tables",
            "terminal",
            "terminal-color",
            "traceback",
            "tracebacks-rich",
            "tui"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2024-11-01T16:42:58Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/220809393/12627680-30c7-11eb-8f70-7dc307a33ce0"
        ],
        "homepage": "https://rich.readthedocs.io/en/latest/",
        "readme_summary": "Rich is a Python library designed to enhance the appearance and readability of terminal output. It provides a simple API for adding color, styles, tables, progress bars, syntax highlighting, and more to command-line applications. Rich aims to make terminal-based applications more visually appealing and user-friendly.",
        "key_features": [
            "Rich text formatting in the terminal",
            "Pretty tables",
            "Progress bars",
            "Markdown rendering",
            "Syntax highlighting",
            "Traceback formatting",
            "Emoji support"
        ],
        "primary_use_case": "Enhancing terminal output with rich text, formatting, and visual elements for improved readability and aesthetics.",
        "open_issues": 204,
        "cover_image_prompt": "A master craftsman meticulously polishing a raw terminal window until it gleams with vibrant colors, elegant tables, and beautifully highlighted code. The craftsman uses specialized tools that resemble Python modules, each adding a unique feature to the terminal's display. A faint, glowing blueprint of a traceback is visible in the background, showcasing the library's debugging capabilities. The scene is set in a futuristic workshop bathed in soft, diffused light. Small screens display snippets of Python code and the resulting rich output. The image should be in 3D isometric illustration style with a clean, modern aesthetic and a focus on clarity and detail."
    },
    {
        "id": 556491507,
        "name": "audio-share",
        "description": "Audio Share can share Windows/Linux computer's audio to Android phone over network, so your phone becomes the speaker of computer. (You needn't buy a new speakerðŸ˜„.)",
        "url": "https://github.com/mkckr0/audio-share",
        "language": "C++",
        "stars": 1376,
        "forks": 68,
        "created_at": "2022-10-24T00:35:21Z",
        "updated_at": "2025-03-16T09:53:05Z",
        "topics": [
            "android",
            "asio",
            "audio",
            "audio-capture",
            "audio-playback",
            "audio-stream",
            "cpp",
            "kotlin",
            "linux",
            "pipewire",
            "windows"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T14:54:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/10a79ec18faebdea5aee72730d0896140346ffbc67fa06ace7db162e5fd5689e/mkckr0/audio-share"
        ],
        "homepage": "",
        "readme_summary": "Audio Share allows users to stream audio from their Windows or Linux computer to their Android phone, effectively turning the phone into a wireless speaker. This eliminates the need for dedicated speakers by leveraging the user's existing mobile device. The application utilizes network connectivity for audio transmission.",
        "key_features": [
            "Audio streaming from Windows/Linux to Android",
            "Network-based audio sharing",
            "Turns Android phone into a computer speaker"
        ],
        "primary_use_case": "Sharing computer audio to an Android phone over a network.",
        "open_issues": 30,
        "cover_image_prompt": "A skilled musician in a recording studio, capturing sound waves emanating from a computer and transmitting them wirelessly to a nearby Android phone acting as a speaker. The computer displays audio waveforms, while the phone subtly glows with the rhythm of the music. The studio is modern and minimalist, with soft lighting and acoustic panels. Small UI elements on the computer screen show audio sharing settings. The scene is in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 772264663,
        "name": "MindGame",
        "description": "Mind Game is a C# plugin for Godot 4.3 to run LLMs locally in games",
        "url": "https://github.com/adammikulis/MindGame",
        "language": "C#",
        "stars": 58,
        "forks": 2,
        "created_at": "2024-03-14T21:11:07Z",
        "updated_at": "2025-03-16T08:45:18Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2024-06-25T01:36:52Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/772264663/523ea66e-1194-4fe6-bd1f-71c64f000a1e"
        ],
        "homepage": "",
        "readme_summary": "Mind Game is a C# plugin for Godot 4.3 that allows developers to run LLMs locally within their games. It leverages the LLamaSharp library to provide fast, in-engine chat models with easy configuration. The plugin supports various LLM families and offers a MindManager autoload for simplified model management and a MindAgent node for seamless interaction with the loaded model.",
        "key_features": [
            "Enables local LLM integration in Godot 4.3 games.",
            "Uses LLamaSharp C# library for fast, local chat models.",
            "Provides easy configuration for LLM models within the game engine.",
            "Supports various LLM families like Llama, Phi, and Mistral.",
            "Offers a MindManager autoload for backend model loading and access.",
            "Includes a MindAgent node for sending/receiving input to the model."
        ],
        "primary_use_case": "Integrating local Large Language Models (LLMs) into Godot 4.3 game projects for in-game AI and interactive experiences.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled artisan meticulously crafting a miniature game world within a bottle. The artisan carefully pours glowing liquid representing AI models into the world, bringing its characters to life with intelligent conversations. Tiny UI screens float around the bottle, displaying configuration options and model parameters. The bottle rests on a workbench surrounded by tools and code snippets. The scene is warmly lit, emphasizing the artisan's focus and the vibrant game world. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 907966119,
        "name": "twice",
        "description": "chrome extension asking you to think twice when visit social media sites",
        "url": "https://github.com/chaosprint/twice",
        "language": "JavaScript",
        "stars": 49,
        "forks": 5,
        "created_at": "2024-12-24T18:16:42Z",
        "updated_at": "2025-03-16T05:45:17Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-02-03T14:41:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/49c39b1c43edd94b7ef50b83207f4ca1c4439b920ad650024005aaa3488f7bbe/chaosprint/twice"
        ],
        "homepage": "",
        "readme_summary": "The Twice Chrome extension helps users be more mindful of their social media usage. It displays a reminder when a user attempts to visit a social media site, encouraging them to pause and reflect on their browsing habits, promoting intentional internet usage.",
        "key_features": [
            "Displays a gentle reminder when visiting social media sites",
            "Promotes mindful internet usage",
            "Helps reduce impulsive social media checking"
        ],
        "primary_use_case": "Reduce mindless social media scrolling by prompting users to think twice before visiting social media sites.",
        "open_issues": 2,
        "cover_image_prompt": "A person sitting at a desk, reaching for a glowing social media icon on their computer screen, but a translucent hand gently blocks their path, holding a thought bubble with a question mark inside. The computer screen subtly displays the Twice extension icon. The scene is set in a cozy, modern office with soft, warm lighting. Small UI elements showing a pause button and reflection prompts are subtly integrated into the background. The composition is clean and focused, with a calming color scheme. The image should be in a flat design style with clear iconography and pastel colors."
    },
    {
        "id": 908941738,
        "name": "nPassword",
        "description": "A Password Manager for Windows Active Directory.",
        "url": "https://github.com/Vincent550102/nPassword",
        "language": "TypeScript",
        "stars": 43,
        "forks": 2,
        "created_at": "2024-12-27T10:53:40Z",
        "updated_at": "2025-03-16T04:31:37Z",
        "topics": [
            "active-directory",
            "frontend",
            "hacking-tools",
            "local-storage",
            "nextjs",
            "password-manager",
            "pentesting",
            "red-team",
            "security",
            "tools",
            "typescript",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T15:03:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8031c9910b9b9d5659a1718223ce1b14fd79af805c0e0c4c3ca850d49efc83fc/Vincent550102/nPassword"
        ],
        "homepage": "https://pw.pornhub.mov",
        "readme_summary": "nPassword is a front-end password manager designed for Windows Active Directory. It stores data locally and offers features like domain-specific account management, one-click export/import, local account support, and command template integration. It is intended for research and educational purposes.",
        "key_features": [
            "Pure Front-End (local storage)",
            "Domain-Specific Account Management",
            "One-Click Export/Import",
            "Local Account Support",
            "Add Notes to Accounts",
            "User-Friendly UI",
            "Automatic Command Integration",
            "Command Templates",
            "Customizable Templates (Upcoming)"
        ],
        "primary_use_case": "Password management for Windows Active Directory environments.",
        "open_issues": 1,
        "cover_image_prompt": "A locksmith in a high-tech workshop meticulously crafting a master key that unlocks a glowing vault filled with digital accounts and passwords. The locksmith uses advanced tools and holographic displays showing Active Directory domain structures. The vault is surrounded by a network of interconnected servers, with the repository name 'nPassword' subtly displayed on one of the server racks. The scene is set in a clean, futuristic environment with cool lighting and a focus on security and precision. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 477528511,
        "name": "bore",
        "description": "ðŸ•³ bore is a simple CLI tool for making tunnels to localhost",
        "url": "https://github.com/ekzhang/bore",
        "language": "Rust",
        "stars": 9472,
        "forks": 400,
        "created_at": "2022-04-04T02:47:54Z",
        "updated_at": "2025-03-16T08:41:53Z",
        "topics": [
            "cli",
            "localhost",
            "networking",
            "proxy",
            "rust",
            "self-hosted",
            "tcp",
            "tunnel"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-01-10T18:31:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b5dbf368fad7ba38ae9f16943880acf9569aec24ed63250158d84f0029fa39f6/ekzhang/bore"
        ],
        "homepage": "http://bore.pub",
        "readme_summary": "Bore is a simple CLI tool written in Rust for creating TCP tunnels to localhost. It allows users to expose local ports to a remote server, bypassing standard NAT connection firewalls. Bore can be self-hosted, offering an alternative to services like localtunnel and ngrok, with a focus on efficiency and ease of use.",
        "key_features": [
            "TCP Tunneling",
            "Local Port Forwarding",
            "Self-Hosting",
            "Bypasses NAT Firewalls"
        ],
        "primary_use_case": "Exposing local ports to a remote server, bypassing NAT firewalls for development and testing purposes.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a skilled artisan crafting tunnels through mountains with ease, using a specialized tool that emits beams of light connecting a secluded village on one side to a bustling city on the other. The artisan meticulously carves pathways, bypassing obstacles and ensuring seamless passage. Small holographic displays show network traffic flowing smoothly through the tunnels. The scene is set in a vibrant, stylized landscape with a clear sky. The image should be in a 3D isometric illustration style with bright colors and sharp details, emphasizing the simplicity and efficiency of the tunneling process."
    }
]