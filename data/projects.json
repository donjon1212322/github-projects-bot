[
    {
        "id": 486815039,
        "name": "actual",
        "description": "A local-first personal finance app",
        "url": "https://github.com/actualbudget/actual",
        "language": "TypeScript",
        "stars": 19946,
        "forks": 1608,
        "created_at": "2022-04-29T02:41:34Z",
        "updated_at": "2025-07-02T10:07:54Z",
        "topics": [
            "budgeting",
            "finance",
            "money",
            "personal-finance"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-01T18:35:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2a758816216eacf10e01c03209780af7765c8a9f61f2f69118e0d7bf4d98bc5c/actualbudget/actual"
        ],
        "homepage": "https://actualbudget.org",
        "readme_summary": "Actual is a local-first, open-source personal finance application designed for budgeting and tracking expenses. It offers cross-device synchronization and supports envelope budgeting. The application provides migration guides to help users transition from other budgeting tools.",
        "key_features": [
            "Local-first personal finance management",
            "Free and open-source",
            "Cross-device synchronization",
            "Envelope budgeting support",
            "Migration guides from other budgeting apps"
        ],
        "primary_use_case": "Personal finance tracking and budgeting",
        "open_issues": 141,
        "cover_image_prompt": "A skilled financial architect meticulously crafting a sturdy house of cards, each card representing a different aspect of personal finance: budgeting, savings, investments. The architect uses a digital blueprint displayed on a nearby tablet to guide the construction, ensuring stability and balance. Subtle UI elements and data visualizations float around the structure, connecting the physical metaphor to the digital realm. The scene is set in a bright, modern studio with a focus on precision and clarity. The image should be in a clean, flat design style with clear iconography and a pastel color scheme."
    },
    {
        "id": 1009192288,
        "name": "arch-cleaner",
        "description": "A bash script to perform routine maintenance and cleanup tasks on Arch Linux systems.",
        "url": "https://github.com/antonio-foti/arch-cleaner",
        "language": "Shell",
        "stars": 16,
        "forks": 1,
        "created_at": "2025-06-26T18:15:47Z",
        "updated_at": "2025-07-02T09:44:52Z",
        "topics": [
            "archlinux"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-02T09:44:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9323d26825495c40f773effdc64a3b7f83a0b788a60a4e3a5c8007291789297c/antonio-foti/arch-cleaner"
        ],
        "homepage": "",
        "readme_summary": "Arch-Cleaner is a bash script designed to automate routine maintenance and cleanup tasks on Arch Linux systems. It offers features such as system updates, removal of orphaned packages, cleaning the Pacman cache and journal logs, and temporary file removal. The script also includes options for emptying the trash and rebooting the system after cleanup.",
        "key_features": [
            "System updates",
            "Orphaned package removal",
            "Pacman cache cleaning",
            "Journal log cleaning",
            "Temporary file removal",
            "User cache cleaning",
            "Trash emptying",
            "Post-cleanup reboot"
        ],
        "primary_use_case": "Routine maintenance and cleanup of Arch Linux systems.",
        "open_issues": 0,
        "cover_image_prompt": "A meticulous housekeeper, armed with a digital broom and a glowing vacuum, tidying up a sprawling digital cityscape representing an Arch Linux system. The housekeeper sweeps away dust bunnies made of unused packages and clears away overflowing trash cans labeled 'Pacman Cache' and 'Journal Logs'. Small screens display system resource usage and cleanup progress. A subtle Arch Linux logo is integrated into the cityscape's skyline. The scene is set in a bright, clean, futuristic environment with a pastel color scheme. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 990421796,
        "name": "Chain-of-Zoom",
        "description": "Official repository for \"Chain-of-Zoom: Extreme Super-Resolution via Scale Autoregression and Preference Alignment\"",
        "url": "https://github.com/bryanswkim/Chain-of-Zoom",
        "language": "Python",
        "stars": 663,
        "forks": 66,
        "created_at": "2025-05-26T05:10:07Z",
        "updated_at": "2025-07-02T10:12:49Z",
        "topics": [],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-06-02T04:47:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5be4dea8ed276b7f710f9c8402f8e4d6891c8fe45a86c4e5eb145399f7e0163d/bryanswkim/Chain-of-Zoom"
        ],
        "homepage": "",
        "readme_summary": "Chain-of-Zoom is a model-agnostic framework for extreme super-resolution. It utilizes an autoregressive chain of intermediate scale-states with multi-scale-aware prompts to magnify images beyond the capabilities of traditionally trained models. The framework also incorporates a VLM prompt extractor fine-tuned through GRPO to align text guidance towards human preference.",
        "key_features": [
            "Extreme Super-Resolution",
            "Scale Autoregression",
            "Preference Alignment",
            "Model-agnostic framework",
            "Multi-scale-aware prompts",
            "VLM prompt extractor",
            "GRPO fine-tuning"
        ],
        "primary_use_case": "Achieving extreme super-resolution beyond the training regime of existing models without retraining.",
        "open_issues": 13,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously piecing together fragments of blurry maps to create a single, high-resolution world map. The cartographer uses a magnifying glass that emits glowing digital particles, enhancing the details of each fragment. Around the table, small screens display snippets of code and data visualizations related to super-resolution algorithms. The scene is set in a bright, airy workshop filled with antique maps and modern technology. The composition is clean and focused, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the 'Chain-of-Zoom' logo."
    },
    {
        "id": 130928221,
        "name": "glauth",
        "description": "A lightweight LDAP server for development, home use, or CI",
        "url": "https://github.com/glauth/glauth",
        "language": "Go",
        "stars": 2645,
        "forks": 229,
        "created_at": "2018-04-25T00:20:14Z",
        "updated_at": "2025-07-02T08:31:36Z",
        "topics": [
            "developer-tools",
            "go",
            "golang",
            "ldap",
            "ldap-server",
            "security"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-11T22:12:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6f2f534a3c2a2ae73fbeefaaec23015b19822ebc91811aaf9b411c3d76c981f6/glauth/glauth"
        ],
        "homepage": "",
        "readme_summary": "GLAuth is a lightweight and configurable LDAP server designed for development, home use, and CI environments. It offers features like configurable backends (file, SQL, LDAP proxy), two-factor authentication, and centralized account management. It can manage SSH keys and Linux accounts, providing a simpler alternative to OpenLDAP or Active Directory.",
        "key_features": [
            "Lightweight LDAP server",
            "Configurable backends (file, SQL, LDAP proxy)",
            "Two-factor authentication",
            "Centralized account management",
            "Manages SSH keys and Linux accounts",
            "Suitable for development, home use, or CI"
        ],
        "primary_use_case": "LDAP authentication for development, home use, or CI environments.",
        "open_issues": 80,
        "cover_image_prompt": "A gatekeeper, clad in server rack armor, stands before a grand LDAP directory, meticulously checking credentials presented as digital keys. Approved keys glow with a green aura, unlocking access to the directory, while invalid keys are flagged red. The gatekeeper's visor displays real-time authentication logs. The scene is set in a futuristic server room with cool blue lighting. Small UI elements show GLAuth's configuration options. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 25437858,
        "name": "pyinfra",
        "description": "ðŸ”§ pyinfra turns Python code into shell commands and runs them on your servers. Execute ad-hoc commands and write declarative operations. Target SSH servers, local machine and Docker containers. Fast and scales from one server to thousands.",
        "url": "https://github.com/pyinfra-dev/pyinfra",
        "language": "Python",
        "stars": 4289,
        "forks": 419,
        "created_at": "2014-10-19T19:37:45Z",
        "updated_at": "2025-07-02T08:35:01Z",
        "topics": [
            "cloud-management",
            "configuration-management",
            "high-performance",
            "infrastructure",
            "pyinfra",
            "python",
            "remote-execution"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-06-30T09:20:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d14770dc352365958e154eea47ac3350d0672efc880f0826b2ca4a2e52547e8b/pyinfra-dev/pyinfra"
        ],
        "homepage": "https://pyinfra.com",
        "readme_summary": "pyinfra is a Python-based infrastructure automation tool that allows users to define infrastructure as code and execute it on various targets, including SSH servers, Docker containers, and the local machine. It focuses on speed, idempotency, and extensibility, offering features like real-time debugging and integrations with popular tools like Docker and Terraform.",
        "key_features": [
            "Fast execution over thousands of hosts",
            "Realtime debugging output",
            "Idempotent operations",
            "Extendable with Python packages",
            "Agentless execution",
            "Integrated with Docker, Terraform, Vagrant"
        ],
        "primary_use_case": "Automating infrastructure tasks by writing Python code that executes shell commands on servers, Docker containers, or the local machine.",
        "open_issues": 174,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of servers. The conductor, representing pyinfra, stands before a vast network of interconnected machines, each playing its part in harmony. With a flick of their baton, Python code transforms into precise shell commands, flowing seamlessly across the network. Some servers are represented by Docker containers, others by physical machines, all responding instantly to the conductor's direction. The scene is bathed in a soft, digital glow, with subtle UI elements floating around the conductor, displaying real-time execution logs and performance metrics. The image should be in a 3D isometric illustration style with vibrant colors and clean lines."
    },
    {
        "id": 968197216,
        "name": "gemini-cli",
        "description": "An open-source AI agent that brings the power of Gemini directly into your terminal.",
        "url": "https://github.com/google-gemini/gemini-cli",
        "language": "TypeScript",
        "stars": 49224,
        "forks": 4121,
        "created_at": "2025-04-17T17:04:31Z",
        "updated_at": "2025-07-02T10:13:00Z",
        "topics": [
            "gemini",
            "gemini-api"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-02T03:18:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ef03c237571ef950d118ff3b4a9701ccae1180d68a9d93aee1dcf5de700756e1/google-gemini/gemini-cli"
        ],
        "homepage": "",
        "readme_summary": "The Gemini CLI is an open-source tool that allows users to leverage the power of the Gemini AI model directly from their terminal. It enables users to query and edit large codebases, generate applications from various inputs, automate operational tasks, and integrate with other tools and services.",
        "key_features": [
            "Query and edit large codebases beyond Gemini's 1M token context window.",
            "Generate new apps from PDFs or sketches using Gemini's multimodal capabilities.",
            "Automate operational tasks.",
            "Connect new capabilities using tools and MCP servers.",
            "Ground queries with the Google Search tool."
        ],
        "primary_use_case": "The Gemini CLI is primarily used to interact with the Gemini AI model from the command line to automate tasks, query codebases, and generate new applications.",
        "open_issues": 655,
        "cover_image_prompt": "A skilled conductor standing before a complex orchestra of computers and servers, orchestrating data streams into a harmonious symphony of automated tasks. The conductor's baton glows with digital energy, directing the flow of information. UI elements float around the orchestra, displaying code snippets and real-time data visualizations. The scene is set in a futuristic concert hall with vibrant lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 752514174,
        "name": "dgmjs",
        "description": "An infinite canvas with smart shapes",
        "url": "https://github.com/dgmjs/dgmjs",
        "language": "TypeScript",
        "stars": 1300,
        "forks": 62,
        "created_at": "2024-02-04T03:59:41Z",
        "updated_at": "2025-07-02T07:18:57Z",
        "topics": [
            "canvas",
            "diagram",
            "drawing",
            "sketch",
            "whiteboard"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-29T08:43:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f36f78003f88e3465790fabf05191f47cb61f081f0907ccac7ab367e72ed3389/dgmjs/dgmjs"
        ],
        "homepage": "https://dgmjs.dev",
        "readme_summary": "DGM.js is a TypeScript library for creating an infinite canvas with smart shapes. It supports features like scripting, constraints, multi-page support, hand-drawn styles, real-time collaboration, and various export formats. It is suitable for building diagramming, drawing, and sketching applications.",
        "key_features": [
            "Smart shapes with scripting and constraints",
            "Infinite canvas",
            "Multi-page support",
            "Hand-drawn styles",
            "Real-time collaboration",
            "Export to image (PNG, JPEG, WebP, SVG)",
            "Export to PDF",
            "JSON export/import"
        ],
        "primary_use_case": "Creating diagrams, drawings, and sketches on an infinite canvas with smart shapes and real-time collaboration.",
        "open_issues": 17,
        "cover_image_prompt": "An architect sketching a complex building design on an infinite canvas that extends beyond the table. The canvas intelligently transforms rough lines into precise shapes and diagrams. UI elements float around the architect, displaying properties and constraints of the shapes. A small screen shows a JSON representation of the design. The scene is set in a bright, modern studio with natural light. The composition is clean and focused, emphasizing the seamless integration of sketching and structured design. The image should be in a flat design style with clear iconography and a pastel color scheme."
    }
]