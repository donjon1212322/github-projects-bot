[
    {
        "id": 683837120,
        "name": "presenterm",
        "description": "A markdown terminal slideshow tool",
        "url": "https://github.com/mfontanini/presenterm",
        "language": "Rust",
        "stars": 4651,
        "forks": 97,
        "created_at": "2023-08-27T21:15:15Z",
        "updated_at": "2025-03-13T10:10:40Z",
        "topics": [
            "cli",
            "markdown",
            "markdown-slides",
            "presentation",
            "rust",
            "slides",
            "slideshow",
            "terminal"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-13T02:46:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/94b7bed9b49d37847bdc103e319cff0d836cfeb75232ebaf1cb4d76ef3a3f5ab/mfontanini/presenterm"
        ],
        "homepage": "https://mfontanini.github.io/presenterm/",
        "readme_summary": "Presenterm is a Rust-based tool that allows users to create and deliver presentations directly from the terminal using markdown. It supports a wide range of features, including image and GIF integration, customizable themes, code highlighting, and PDF exporting. Presenterm aims to provide a flexible and efficient way to present information in a terminal environment.",
        "key_features": [
            "Markdown-based presentations",
            "Image and animated GIF support",
            "Customizable themes",
            "Code highlighting",
            "PDF export",
            "Selective code highlighting",
            "Column layouts",
            "Mermaid graph rendering",
            "LaTeX and typst formula rendering",
            "Snippet execution",
            "Speaker notes",
            "Hot reload"
        ],
        "primary_use_case": "Creating and running terminal-based slideshow presentations from markdown files.",
        "open_issues": 8,
        "cover_image_prompt": "A skilled stage director standing in a grand, yet minimalist, theater. The director holds a markdown document as a script, which magically transforms into a dynamic slideshow projected onto the stage's large screen. The stage is subtly decorated with terminal-like elements, such as command-line symbols and stylized code snippets integrated into the backdrop. The audience seats are empty, implying the presentation is ready to begin. The scene is bathed in soft, focused stage lighting, creating a sense of anticipation and clarity. The image should be in a 3D isometric illustration style with clean lines and a vibrant color scheme."
    },
    {
        "id": 333536823,
        "name": "algorithmica",
        "description": "A computer science textbook",
        "url": "https://github.com/algorithmica-org/algorithmica",
        "language": "Jupyter Notebook",
        "stars": 3959,
        "forks": 382,
        "created_at": "2021-01-27T19:28:30Z",
        "updated_at": "2025-03-13T09:44:30Z",
        "topics": [
            "computer-science",
            "education",
            "markdown"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2022-12-11T08:40:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dc8bb5d1acd97bdeafbb2c9587b047b6df8f89532ac58ac1a12c12fe15ff9300/algorithmica-org/algorithmica"
        ],
        "homepage": "https://algorithmica.org/",
        "readme_summary": "Algorithmica is an open-access computer science textbook designed to teach algorithms and data structures. It supports contributions via Prose or GitHub using a Markdown dialect. Key features include rich metadata, automated table of contents, theming, and search functionality.",
        "key_features": [
            "Open-access web book",
            "Contribution via Prose or GitHub",
            "Markdown dialect with Hugo support",
            "Rich metadata support",
            "Automated global table of contents",
            "Theming support",
            "Search support (Lunr)"
        ],
        "primary_use_case": "Education in computer science algorithms and data structures.",
        "open_issues": 36,
        "cover_image_prompt": "A wise librarian meticulously organizing knowledge within a vast, glowing digital library. The librarian carefully shelves books representing different algorithms, each book radiating a soft light. A grand, central table displays an open book titled 'Algorithmica,' its pages filled with elegant mathematical formulas and diagrams. Subtle UI elements float around the scene, showcasing code snippets and interactive visualizations. The library is bathed in warm, inviting light, creating an atmosphere of learning and discovery. The image should be in a 3D isometric illustration style with rich details and a vibrant color scheme."
    },
    {
        "id": 304836585,
        "name": "ezbookkeeping",
        "description": "A lightweight personal bookkeeping app hosted by yourself.",
        "url": "https://github.com/mayswind/ezbookkeeping",
        "language": "Go",
        "stars": 520,
        "forks": 68,
        "created_at": "2020-10-17T08:54:02Z",
        "updated_at": "2025-03-13T10:08:30Z",
        "topics": [
            "account-book",
            "accounting",
            "app",
            "bookkeeping",
            "financial",
            "golang",
            "javascript",
            "mobile",
            "money",
            "money-management",
            "money-manager",
            "personal",
            "personal-finance",
            "self-hosted",
            "vue"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-10T16:29:22Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/304836585/b54a8e74-4f66-4f6a-95ec-91940bb9f3d7"
        ],
        "homepage": "https://ezbookkeeping.mayswind.net",
        "readme_summary": "ezBookkeeping is a self-hosted, lightweight personal bookkeeping application. It supports multiple databases and platforms, including mobile devices. Key features include Docker support, multi-currency support, two-factor authentication, and data export/import capabilities.",
        "key_features": [
            "Self-hosted",
            "Docker support",
            "Multiple database support (SQLite, MySQL, PostgreSQL)",
            "Multi-platform support (Windows, macOS, Linux & x86, amd64, ARM)",
            "Mobile UI",
            "Multiple currency support",
            "Two-factor authentication",
            "Data export & import (OFX, QFX, QIF, IIF, CSV, GnuCash, FireFly III)"
        ],
        "primary_use_case": "Lightweight personal bookkeeping",
        "open_issues": 13,
        "cover_image_prompt": "A meticulous librarian meticulously balancing a towering stack of books representing personal finances. Each book is labeled with categories like 'Income,' 'Expenses,' and 'Savings.' The librarian uses a magnifying glass to examine the books, revealing subtle digital interfaces overlaid on the pages, displaying charts and graphs. A warm, inviting library setting with soft lighting. Small UI elements showing transaction details subtly float around the scene. The composition is balanced and focused, with a muted color scheme. The image should be in a 3D isometric illustration style with rich details and a sense of calm organization."
    },
    {
        "id": 254202848,
        "name": "florisboard",
        "description": "An open-source keyboard for Android which respects your privacy. Currently in early-beta.",
        "url": "https://github.com/florisboard/florisboard",
        "language": "Kotlin",
        "stars": 6627,
        "forks": 428,
        "created_at": "2020-04-08T21:18:23Z",
        "updated_at": "2025-03-13T09:20:34Z",
        "topics": [
            "android",
            "input-method",
            "keyboard",
            "kotlin",
            "kotlin-android"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T23:26:12Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/254202848/81799060-9b89-4aa6-b68b-54a12ab3b3ff"
        ],
        "homepage": "https://florisboard.org",
        "readme_summary": "FlorisBoard is an open-source keyboard for Android that prioritizes user privacy and customization. It offers features like a clipboard manager, advanced theming, extension support, and an emoji keyboard. The project is currently in early-beta and aims to be a modern and user-friendly alternative to proprietary keyboards.",
        "key_features": [
            "Integrated clipboard manager/history",
            "Advanced theming support and customization",
            "Integrated extension support",
            "Emoji keyboard/history/suggestions"
        ],
        "primary_use_case": "An open-source, customizable, and privacy-focused keyboard for Android devices.",
        "open_issues": 480,
        "cover_image_prompt": "A skilled artisan meticulously crafting a keyboard from various components, each representing a different feature or customization option. The artisan uses a digital sculpting tool to shape the keys and layout, with small code snippets and UI elements floating around the workspace. The finished keyboard glows with a soft, customizable light, reflecting the user's personal preferences. The scene is set in a modern, well-lit workshop with a clean and focused composition. The image should be in 3D isometric illustration style with rich details and vibrant colors, emphasizing the open-source nature and user-centric design."
    },
    {
        "id": 6417181,
        "name": "afwall",
        "description": "AFWall+ (Android Firewall +) - iptables based firewall for Android ",
        "url": "https://github.com/ukanth/afwall",
        "language": "Java",
        "stars": 2951,
        "forks": 462,
        "created_at": "2012-10-27T13:20:30Z",
        "updated_at": "2025-03-13T06:31:35Z",
        "topics": [
            "afwall",
            "android",
            "android-firewall",
            "block",
            "crowdin",
            "firewall",
            "iptables"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-11-12T16:34:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f1a7de5a131f1b17088ad69c8bc4e8beb4479b8eac02cb4995bde168842c5ec7/ukanth/afwall"
        ],
        "homepage": "",
        "readme_summary": "AFWall+ is an Android firewall application that provides fine-grained control over which apps can access the network. It uses iptables to manage network traffic and offers features like multi-user support, Tasker integration, and IPv6 compatibility. The application is designed to be easy to use and provides a simple interface for managing complex firewall rules.",
        "key_features": [
            "iptables based firewall",
            "Fine-grained control over network access for Android apps",
            "Support for Android versions 5.x to 11.x",
            "Compatible with Magisk and LineageOS su",
            "IPv4 & IPv6 support",
            "Tasker and Locale plugin support"
        ],
        "primary_use_case": "Providing a GUI for managing iptables rules on Android devices, allowing users to control network access for individual applications.",
        "open_issues": 298,
        "cover_image_prompt": "A gatekeeper meticulously inspecting network traffic flowing through a digital city's entrance. The gatekeeper, representing AFWall+, uses a magnifying glass to examine data packets, represented as glowing envelopes, blocking any suspicious or unauthorized ones. Some packets are allowed through, symbolized by a green checkmark, while others are blocked, indicated by a red 'X'. Small UI elements displaying firewall rules and logs are subtly integrated into the city's architecture. The scene is set against a futuristic cityscape with a clean, focused composition and a blue and green color scheme. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 477116300,
        "name": "bonsai",
        "description": ":deciduous_tree: A multiplatform tree view for Jetpack Compose",
        "url": "https://github.com/adrielcafe/bonsai",
        "language": "Kotlin",
        "stars": 382,
        "forks": 16,
        "created_at": "2022-04-02T16:54:02Z",
        "updated_at": "2025-03-12T17:48:54Z",
        "topics": [
            "android",
            "android-library",
            "android-ui",
            "compose",
            "desktop",
            "expandable",
            "jetpack-compose",
            "kotlin",
            "kotlin-android",
            "kotlin-dsl",
            "kotlin-multiplatform",
            "selectable",
            "tree",
            "tree-structure",
            "treeview"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-02-07T16:03:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6a5a8411086b91956b899d17f6b93b6b590f84c329a63432cce26fc098dd5b56/adrielcafe/bonsai"
        ],
        "homepage": "",
        "readme_summary": "Bonsai is a multiplatform Jetpack Compose library for creating tree view components. It offers a DSL for easy tree construction, supports features like lazy loading, state management, and styling, and provides integrations for file system and JSON data. It simplifies the display and interaction with hierarchical data in Compose-based applications.",
        "key_features": [
            "Multiplatform (Android, Desktop)",
            "State-aware recomposition",
            "Unlimited depth",
            "Lazy loaded nodes",
            "Built-in DSL",
            "File System integration",
            "JSON integration",
            "Expandable/Collapsible nodes",
            "Selectable nodes",
            "Clickable nodes",
            "Styleable nodes",
            "Extendable nodes"
        ],
        "primary_use_case": "Creating and managing tree view structures in Jetpack Compose applications for Android and Desktop platforms.",
        "open_issues": 10,
        "cover_image_prompt": "Imagine a skilled gardener carefully tending to a bonsai tree, meticulously shaping its branches and leaves. The tree represents a complex data structure, with each branch symbolizing a different category or element. The gardener, representing the Bonsai library, uses specialized tools (DSL) to effortlessly navigate, expand, and style the tree. A subtle UI overlay shows a tree view interface with expandable nodes and selectable items. The scene is set in a serene Japanese garden with soft, diffused lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, emphasizing the ease and control the library provides over tree structures."
    },
    {
        "id": 915158079,
        "name": "Instagram-AI-Agent",
        "description": "Instagram Ai Agent 🌸 is built using Node.js and TypeScript 🛠️, designed for seamless job execution 📸. It's lightweight, efficient, and still evolving 🚧—exciting new features coming soon! 🌟",
        "url": "https://github.com/David-patrick-chuks/Instagram-AI-Agent",
        "language": "TypeScript",
        "stars": 2945,
        "forks": 463,
        "created_at": "2025-01-11T05:45:37Z",
        "updated_at": "2025-03-13T08:22:07Z",
        "topics": [],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T17:20:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8e4b32c730f19b7df9c50ecd03d81421948a23952a2469028b9ba783f22ea015/David-patrick-chuks/Instagram-AI-Agent"
        ],
        "homepage": "",
        "readme_summary": "The Instagram-AI-Agent is designed to automate social media interactions on Instagram, such as posting, liking, and commenting. It uses AI to generate engaging content and provides features like proxy support and cookie management for efficient account management. The tool aims to streamline Instagram activities through automation and AI-driven content creation.",
        "key_features": [
            "Instagram Automation",
            "AI-Powered Content Generation",
            "Proxy Support",
            "Cookie Management"
        ],
        "primary_use_case": "Automating Instagram interactions and content generation using AI.",
        "open_issues": 27,
        "cover_image_prompt": "A diligent gardener tending to a thriving Instagram garden, carefully planting seeds of AI-generated content and pruning away spam. The gardener uses a watering can labeled 'AI Agent' to nourish the plants, which blossom into engaging posts, likes, and comments. Small screens display snippets of code and data visualizations related to Instagram automation. The garden is surrounded by a futuristic cityscape with glowing digital elements. The scene is set in the early morning with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 828545688,
        "name": "ChromeStealer",
        "description": "ChromeStealer is a tool for educational purposes to demonstrate how to extract and decrypt stored passwords from Google Chrome on a Windows system using C/C++. ",
        "url": "https://github.com/BernKing/ChromeStealer",
        "language": "C++",
        "stars": 133,
        "forks": 18,
        "created_at": "2024-07-14T13:27:30Z",
        "updated_at": "2025-03-13T08:53:00Z",
        "topics": [
            "decryption",
            "malware-development",
            "password-safety",
            "windows"
        ],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2024-07-25T08:27:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/287d4d91403459e3fd18630578a0536067a8789f3caca3a16dae210b127a7b11/BernKing/ChromeStealer"
        ],
        "homepage": "https://bernking.github.io//2024/chrome-stealer/",
        "readme_summary": "ChromeStealer is a C++ tool designed for educational purposes, demonstrating how to extract and decrypt stored passwords from Google Chrome on Windows systems. It utilizes libraries like libsodium, nlohmann/json, and sqlite3 to access and decrypt password data. The repository provides a practical example of password security vulnerabilities and extraction techniques.",
        "key_features": [
            "Extracts stored passwords from Google Chrome on Windows",
            "Decrypts stored passwords",
            "Educational tool for demonstrating password extraction techniques"
        ],
        "primary_use_case": "Educational demonstration of password extraction and decryption from Google Chrome for security awareness and learning purposes.",
        "open_issues": 1,
        "cover_image_prompt": "A locksmith meticulously picking the lock of a gleaming, futuristic Chrome browser safe. Inside the safe, digital passwords float like glowing butterflies, some already captured in the locksmith's net. The locksmith's tools subtly display UI elements of a password extraction tool. The scene is set in a brightly lit, minimalist workshop with subtle code snippets projected onto the walls. The composition is focused and clean, with a color scheme of blues, silvers, and glowing accents. The image should be in a 3D isometric illustration style with high detail and a sense of precision."
    }
]