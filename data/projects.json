[
    {
        "id": 149112365,
        "name": "Videomass",
        "description": "Videomass is a free, open source and cross-platform GUI for FFmpeg",
        "url": "https://github.com/jeanslack/Videomass",
        "language": "Python",
        "stars": 1388,
        "forks": 61,
        "created_at": "2018-09-17T11:04:43Z",
        "updated_at": "2025-09-23T09:54:45Z",
        "topics": [
            "audio",
            "conversion",
            "converter-encoding",
            "cross-platform",
            "ffmpeg",
            "ffmpeg-gui",
            "ffmpeg-wrapper",
            "media-converter",
            "multimedia",
            "multitasking",
            "python",
            "python-gui",
            "video",
            "wxpython"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-19T16:54:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f4a1d93871b7833cc60aba227137eb3a1e2bd3f6f830aa01a3b40003a053d429/jeanslack/Videomass"
        ],
        "homepage": "https://jeanslack.github.io/Videomass/",
        "readme_summary": "Videomass is a free, open-source, and cross-platform GUI for FFmpeg. It's designed for both advanced and beginner users, offering a wide range of features for video and audio conversion and manipulation. The application is built with Python and wxPython, supporting Linux, macOS, Windows, and FreeBSD.",
        "key_features": [
            "Cross-platform support",
            "GUI for FFmpeg",
            "Multitasking",
            "Wide range of features for video/audio conversion",
            "Beginner and advanced user friendly"
        ],
        "primary_use_case": "Providing a graphical interface to FFmpeg for video and audio conversion and manipulation tasks.",
        "open_issues": 19,
        "cover_image_prompt": "A skilled artisan sitting at a workbench, carefully shaping raw video footage (represented by clay) into various finished products (DVDs, online videos, audio files). The artisan uses specialized tools (representing FFmpeg functions) to mold and refine the clay. A nearby screen displays a user-friendly interface with options for different output formats. Digital particles flow from the screen to the workbench, subtly enhancing the artisan's work. The scene is set in a bright, organized workshop with a focus on precision and control. The composition is clean and focused, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1057588813,
        "name": "neo_multiseat",
        "description": "multiseat on windows 11 pc :]",
        "url": "https://github.com/neo0oen619/neo_multiseat",
        "language": "PowerShell",
        "stars": 65,
        "forks": 5,
        "created_at": "2025-09-16T00:07:28Z",
        "updated_at": "2025-09-23T09:02:05Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-20T15:08:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c797dcfd656b59c8f8a364bc68119863f3f4902809a72a89c14625fb09152452/neo0oen619/neo_multiseat"
        ],
        "homepage": null,
        "readme_summary": "The neo_multiseat repository provides a PowerShell script to enable multiple users to simultaneously use a single Windows PC via Remote Desktop. It simplifies the process of creating and managing extra seats, offering features like user management, automatic updates, and built-in troubleshooting.",
        "key_features": [
            "One script for end-to-end multi-seat configuration",
            "User account management (create, reset password)",
            "Automatic .rdp file generation",
            "Support for multiple concurrent user sessions",
            "Automatic updates and configuration management",
            "Built-in RDP repair functionality",
            "Menu status line with color-coded health indicators",
            "Network mode configuration (LAN, WAN, Tailscale)",
            "Live logon monitoring"
        ],
        "primary_use_case": "Enabling multiple users to work simultaneously on a single Windows PC, suitable for pair programming, family use, or lab setups.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a control panel with multiple screens, each showing a different user working on a task. The panel is connected to a single, powerful computer represented by a glowing server rack in the background. A technician is adjusting settings on the panel, ensuring each user has a smooth experience. Small UI elements on the screens show remote desktop connections and user profiles. Digital particles flow from the server to each screen, representing data streams. The repository name is subtly displayed on the control panel. The scene is set in a modern, clean server room with cool lighting. The image should be in 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 985853356,
        "name": "octelium",
        "description": "A next-gen FOSS self-hosted unified zero trust secure access platform that can operate as a remote access VPN, a ZTNA/BeyondCorp architecture, API/AI gateway, a PaaS, an infrastructure for MCP & A2A architectures or even as an ngrok-alternative and a homelab infrastructure.",
        "url": "https://github.com/octelium/octelium",
        "language": "Go",
        "stars": 2351,
        "forks": 69,
        "created_at": "2025-05-18T16:56:34Z",
        "updated_at": "2025-09-23T09:44:01Z",
        "topics": [
            "abac",
            "ai-gateway",
            "api-gateway",
            "beyondcorp",
            "homelab",
            "kubernetes",
            "mcp-gateway",
            "mfa",
            "opentelemetry",
            "paas",
            "policy-as-code",
            "quic",
            "remote-access",
            "ssh",
            "sso",
            "tunnel",
            "vpn",
            "wireguard",
            "zero-trust",
            "ztna"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-23T08:35:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/42f8d74c2b7d4d71f736b3389a5355527cf71dc912ef6eeee472863370b407ff/octelium/octelium"
        ],
        "homepage": "https://octelium.com/docs",
        "readme_summary": "Octelium is a self-hosted, unified zero trust secure access platform written in Go. It offers functionalities including remote access VPN, ZTNA/BeyondCorp architecture, API/AI gateway, PaaS, and homelab infrastructure, providing secure access to resources via WireGuard/QUIC tunnels and context-aware access control.",
        "key_features": [
            "Remote Access VPN",
            "ZTNA/BeyondCorp Architecture",
            "Secure Tunnels (ngrok alternative)",
            "PaaS",
            "API Gateway",
            "AI Gateway",
            "Unified Zero Trust Access to SaaS APIs"
        ],
        "primary_use_case": "Unified Zero Trust Secure Access Platform",
        "open_issues": 3,
        "cover_image_prompt": "A skilled architect overseeing the construction of a secure, futuristic city. The city walls are made of interconnected servers, and data streams flow like rivers through the city. The architect holds a blueprint displaying access policies and user identities. A holographic interface shows real-time traffic monitoring and threat detection. Small UI elements display code snippets and security logs. The scene is set during twilight with a blue and orange color scheme, creating a sense of vigilance and innovation. The image should be in 3D isometric illustration style with detailed textures and vibrant colors."
    },
    {
        "id": 1024401073,
        "name": "clime",
        "description": "Beautiful Terminal UI for Go",
        "url": "https://github.com/alperdrsnn/clime",
        "language": "Go",
        "stars": 166,
        "forks": 11,
        "created_at": "2025-07-22T16:32:04Z",
        "updated_at": "2025-09-23T08:53:43Z",
        "topics": [
            "cli",
            "go",
            "golang",
            "library",
            "terminal-ui",
            "tui"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-09-09T10:10:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/078620f394eb7577259877b794dfc60720abcd66b1da5c3de4e183b72f20cf4a/alperdrsnn/clime"
        ],
        "homepage": "",
        "readme_summary": "Clime is a Go library designed to simplify the creation of visually appealing and interactive command-line interfaces. It offers a range of features including terminal utilities, rich text formatting, interactive spinners, progress bars, data tables, user input prompts, and responsive design to enhance the user experience in terminal applications.",
        "key_features": [
            "Terminal Utilities (clear screen, cursor movement, size detection)",
            "Rich Colors & Formatting (16+ colors, bold, italic, underline, rainbow effects)",
            "Interactive Spinners (multiple styles with customizable colors and messages)",
            "Progress Bars (single and multi-bar support with ETA and rate display)",
            "Styled Banners (success, warning, error, and info messages)",
            "Data Tables (formatted tables with column styling and alignment)",
            "Decorative Boxes (multiple border styles with titles and content wrapping)",
            "User Input (text, password, email, number, and confirmation prompts)",
            "Autocomplete (smart suggestions with fuzzy matching)",
            "Cross-platform support (Windows, macOS, Linux)",
            "Terminal Detection (automatic TTY detection and sizing)",
            "Responsive Design (adapts to terminal width and height)"
        ],
        "primary_use_case": "Building visually appealing and interactive command-line applications in Go.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a beautiful stained-glass window, where each pane represents a different element of a command-line interface: a vibrant color for text, a spinning gear for a loading animation, a rising bar for progress. The artisan carefully arranges these panes, fitting them perfectly into a responsive frame that adapts to different sizes. Subtle code patterns are etched into the glass, and the repository name, 'Clime,' is subtly integrated into the window's design. The scene is bathed in soft, diffused light, highlighting the artistry and precision of the creation. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 981177285,
        "name": "presenton",
        "description": "Open-Source AI Presentation Generator and API (Gamma, Beautiful AI, Decktopus Alternative)",
        "url": "https://github.com/presenton/presenton",
        "language": "TypeScript",
        "stars": 2229,
        "forks": 388,
        "created_at": "2025-05-10T14:12:46Z",
        "updated_at": "2025-09-23T09:36:02Z",
        "topics": [
            "ai-agent",
            "ai-presentation",
            "api",
            "gamma",
            "powerpoint-automation",
            "powerpoint-free",
            "powerpoint-generation",
            "presentation"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-09-22T11:46:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9700bc229ddfbbbcb74351305c7ed3a9b7b2356ca2f25c9381306199c944c662/presenton/presenton"
        ],
        "homepage": "https://presenton.ai",
        "readme_summary": "Presenton is an open-source AI presentation generator and API that allows users to create presentations locally using models like OpenAI and Gemini, or their own hosted models. It offers features like custom templates, AI template generation from existing PowerPoint files, flexible generation from prompts or documents, and export to PPTX and PDF formats.",
        "key_features": [
            "Custom Templates & Themes",
            "AI Template Generation",
            "Flexible Generation",
            "Export Ready (PPTX and PDF)",
            "Built-In MCP Server",
            "Bring Your Own Key (OpenAI, Gemini, etc.)",
            "Ollama Integration",
            "OpenAI API Compatible",
            "Multi-Provider Support",
            "Versatile Image Generation (DALL-E 3, Gemini Flash, etc.)",
            "Rich Media Support",
            "Runs Locally",
            "API Deployment",
            "Fully Open-Source",
            "Docker Ready"
        ],
        "primary_use_case": "Generating presentations with AI, either from scratch or using existing PowerPoint templates, while maintaining control over data and privacy.",
        "open_issues": 26,
        "cover_image_prompt": "A skilled architect standing before a digital blueprint, effortlessly transforming abstract ideas into a stunning presentation. The architect uses an AI-powered pen that converts thoughts into slides, complete with charts, images, and formatted text. The blueprint subtly displays the Presenton logo. The scene is set in a bright, modern office with large windows overlooking a cityscape. Small UI elements show the AI generating slides in real-time. The composition is clean and focused with a blue and white color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 188700274,
        "name": "copyparty",
        "description": "Portable file server with accelerated resumable uploads, dedup, WebDAV, FTP, TFTP, zeroconf, media indexer, thumbnails++ all in one file, no deps",
        "url": "https://github.com/9001/copyparty",
        "language": "Python",
        "stars": 30946,
        "forks": 1229,
        "created_at": "2019-05-26T15:28:33Z",
        "updated_at": "2025-09-23T10:11:51Z",
        "topics": [
            "copyparty",
            "file-server",
            "file-sharing",
            "file-upload-server",
            "ftp-server",
            "nas-frontend",
            "tftp-server",
            "webdav-server"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-22T21:15:26Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/188700274/42754d5b-fa34-45dd-9030-6ff0c16036be"
        ],
        "homepage": "",
        "readme_summary": "Copyparty is a portable file server written in Python that supports accelerated resumable uploads and downloads through a web browser. It offers multiple protocols including HTTP, WebDAV, FTP, TFTP, and SMB/CIFS, and includes features like media indexing, thumbnails, and zeroconf, all within a single file and without external dependencies.",
        "key_features": [
            "Resumable uploads/downloads",
            "Web browser interface",
            "HTTP, WebDAV, FTP, TFTP, SMB/CIFS support",
            "Media indexer",
            "Thumbnails generation",
            "Zeroconf support",
            "Android app and iPhone shortcuts",
            "File management (cut/paste, rename, delete)",
            "Shares (temporary links)",
            "Batch rename",
            "RSS feeds",
            "Media player with playlist support"
        ],
        "primary_use_case": "Turning any device into a file server with easy access and management through a web browser.",
        "open_issues": 164,
        "cover_image_prompt": "Imagine a friendly octopus, each of its tentacles managing a different type of file transfer – one uploading a photo, another downloading a video, a third serving files to a web browser on a phone, and a fourth organizing files in a neatly labeled folder. Small screens on each tentacle display progress bars and file icons. The octopus sits atop a server rack in a cozy basement, glowing with soft, warm light. The repository name, 'copyparty,' is subtly displayed on the server rack. The image should be in a 3D isometric illustration style with vibrant colors and a clean, organized composition."
    },
    {
        "id": 873617127,
        "name": "flare-gun",
        "description": "Offline SOS signaling and recovery app for wars and disasters (iOS & Android) — like a digital flare-gun.",
        "url": "https://github.com/igatha/flare-gun",
        "language": "Kotlin",
        "stars": 313,
        "forks": 11,
        "created_at": "2024-10-16T13:17:30Z",
        "updated_at": "2025-09-23T08:33:02Z",
        "topics": [
            "android",
            "bluetooth-le",
            "disaster-recovery",
            "disaster-response",
            "distress-detection",
            "distress-signal",
            "ios",
            "offline",
            "sos"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-05-02T14:03:40Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/873617127/2a869e32-2e16-488a-9d69-ca799e7a2491"
        ],
        "homepage": "https://igatha.link/github",
        "readme_summary": "Igatha is an open-source SOS signaling and recovery application designed for use in war zones and disaster areas. It leverages Bluetooth Low Energy (BLE) and device sensors to enable offline emergency communication when traditional networks are unavailable, facilitating both sending distress signals and aiding in recovery efforts.",
        "key_features": [
            "Offline SOS signaling via Bluetooth Low Energy (BLE)",
            "Distress signal broadcasting and scanning",
            "Approximate distance estimation to signal source",
            "Audible siren generation for location assistance",
            "Automatic disaster detection using device sensors (accelerometer, gyroscope, barometer)",
            "Manual SOS signal sending",
            "Recovery mode for helping others"
        ],
        "primary_use_case": "Enabling offline emergency communication and recovery assistance in areas affected by war or disaster where traditional networks are unavailable.",
        "open_issues": 14,
        "cover_image_prompt": "A lone hiker, lost in a dense, fog-covered forest, holding up a glowing, stylized flare gun that emits a beam of light composed of Bluetooth symbols. The light illuminates a path through the forest, revealing faint outlines of other hikers moving towards the signal. Small UI elements are subtly overlaid on the flare gun, showing signal strength and broadcast status. The scene is set in a misty, atmospheric forest with cool, muted colors. The image should be in a digital painting style with clear outlines and a focus on atmospheric perspective."
    }
]