[
    {
        "id": 981803794,
        "name": "maps_screenshot_to_3d",
        "description": "Converting Google Maps Screenshot to 3D Model",
        "url": "https://github.com/aliaksandr960/maps_screenshot_to_3d",
        "language": "Jupyter Notebook",
        "stars": 15,
        "forks": 4,
        "created_at": "2025-05-11T22:58:33Z",
        "updated_at": "2025-05-17T00:54:36Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-12T01:26:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/61ccf71115fe446e50e3163e279d7cdf0478f499b2b1cac698a707193692b56f/aliaksandr960/maps_screenshot_to_3d"
        ],
        "homepage": null,
        "readme_summary": "This repository provides a Jupyter Notebook-based pipeline for converting Google Maps screenshots into 3D models. It leverages monocular depth estimation to estimate depth from the 2D image, removes the background, corrects perspective, and visualizes the result as a mesh or point cloud. The primary use case is for experimentation and generating 3D models from aerial imagery.",
        "key_features": [
            "Converts Google Maps screenshots into 3D models",
            "Uses monocular depth estimation models",
            "Removes background and adjusts perspective",
            "Visualizes mesh or point cloud"
        ],
        "primary_use_case": "Generating 3D models from aerial imagery, specifically Google Maps screenshots, for experimental or artistic purposes.",
        "open_issues": 0,
        "cover_image_prompt": "An artist meticulously sculpting a 3D model of a cityscape from a flat, 2D Google Maps screenshot. The artist uses digital tools, with a holographic projection of the evolving 3D model floating above their workbench. The screenshot is subtly textured with code snippets and data points. The scene is set in a bright, modern studio with large windows overlooking a real cityscape. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 350411909,
        "name": "streamrip",
        "description": "A scriptable music downloader for Qobuz, Tidal, SoundCloud, and Deezer",
        "url": "https://github.com/nathom/streamrip",
        "language": "Python",
        "stars": 3356,
        "forks": 287,
        "created_at": "2021-03-22T16:23:36Z",
        "updated_at": "2025-05-17T08:57:08Z",
        "topics": [
            "deezer",
            "hi-res",
            "lossless-music",
            "qobuz",
            "soundcloud",
            "tidal"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-12T21:55:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0c6eaeac273dc02883004e268ec2110fbc3adc1bbabb48f46efb6ec01bbc20e8/nathom/streamrip"
        ],
        "homepage": "",
        "readme_summary": "Streamrip is a scriptable music downloader that supports multiple streaming platforms like Qobuz, Tidal, Deezer, and SoundCloud. It allows users to download tracks, albums, and playlists, convert them to preferred formats, and avoid duplicates. The tool offers features like concurrent downloads, rate limiting, interactive search, and integration with youtube-dl, making it a versatile solution for music enthusiasts.",
        "key_features": [
            "Fast, concurrent downloads",
            "Downloads from Qobuz, Tidal, Deezer, and SoundCloud",
            "Supports Spotify and Apple Music playlists via last.fm",
            "Automatic format conversion",
            "Duplicate track avoidance",
            "Concurrency and rate limiting",
            "Interactive search",
            "Customizable configuration",
            "Integration with youtube-dl"
        ],
        "primary_use_case": "Downloading music from streaming services for offline listening and archival.",
        "open_issues": 185,
        "cover_image_prompt": "A skilled musician stands before a grand mixing console, expertly routing streams of music from various sources (Qobuz, Tidal, SoundCloud, Deezer) into a single, high-quality audio output. The console glows with vibrant colors, each representing a different music platform. The musician carefully adjusts knobs and sliders, optimizing the sound quality and format. Small screens embedded in the console display waveforms and metadata. The scene is set in a professional recording studio with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 142004087,
        "name": "pywebcopy",
        "description": "Locally saves webpages to your hard disk with images, css, js & links as is.",
        "url": "https://github.com/rajatomar788/pywebcopy",
        "language": "Python",
        "stars": 588,
        "forks": 112,
        "created_at": "2018-07-23T11:18:54Z",
        "updated_at": "2025-05-17T08:54:18Z",
        "topics": [
            "archive-tool",
            "crawler",
            "html",
            "html-parser",
            "mirror",
            "python",
            "web",
            "webpage"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-13T08:54:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/142004087/7dffa000-3a2f-11ea-9136-294a4ffcccfc"
        ],
        "homepage": "https://rajatomar788.github.io/pywebcopy/",
        "readme_summary": "PyWebCopy is a Python tool designed to download websites or specific webpages to your local machine for offline access. It automatically remaps links to ensure resources like stylesheets and images function correctly. The tool also features a command-line interface for simplified usage.",
        "key_features": [
            "Downloads entire or partial websites locally.",
            "Remaps links to resources for offline viewing.",
            "Crawls websites to discover and download linked resources.",
            "Command-line interface for easy usage."
        ],
        "primary_use_case": "Saving webpages and websites locally for offline viewing and archiving.",
        "open_issues": 22,
        "cover_image_prompt": "A skilled cartographer meticulously tracing a digital map onto a physical parchment, preserving every detail. The cartographer uses a glowing stylus that emits digital particles, capturing web pages as if they were ancient lands. Around the table, small screens display snippets of HTML and CSS, subtly connecting the map to its digital source. The scene is set in a cozy, sunlit study filled with antique globes and stacks of books. The image should be in a detailed 3D isometric illustration style with warm colors and a sense of timelessness, emphasizing the act of archiving and preserving digital content."
    },
    {
        "id": 156939672,
        "name": "onnxruntime",
        "description": "ONNX Runtime: cross-platform, high performance ML inferencing and training accelerator",
        "url": "https://github.com/microsoft/onnxruntime",
        "language": "C++",
        "stars": 16594,
        "forks": 3212,
        "created_at": "2018-11-10T02:22:53Z",
        "updated_at": "2025-05-17T10:10:06Z",
        "topics": [
            "ai-framework",
            "deep-learning",
            "hardware-acceleration",
            "machine-learning",
            "neural-networks",
            "onnx",
            "pytorch",
            "scikit-learn",
            "tensorflow"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-16T22:37:42Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/156939672/37b1cb00-864b-11eb-8220-76153935f7da"
        ],
        "homepage": "https://onnxruntime.ai",
        "readme_summary": "ONNX Runtime is a cross-platform machine learning accelerator for both inference and training. It supports models from popular frameworks like PyTorch and TensorFlow, as well as classical machine learning libraries. By leveraging hardware acceleration and graph optimizations, ONNX Runtime aims to provide optimal performance across diverse hardware and operating systems.",
        "key_features": [
            "Cross-platform inference and training accelerator",
            "Supports models from various deep learning frameworks and classical machine learning libraries",
            "Compatible with different hardware, drivers, and operating systems",
            "Leverages hardware accelerators and graph optimizations for optimal performance",
            "Accelerates model training time on multi-node NVIDIA GPUs for transformer models"
        ],
        "primary_use_case": "Accelerating machine learning inference and training across various platforms and hardware.",
        "open_issues": 2684,
        "cover_image_prompt": "A skilled architect overseeing the construction of a towering skyscraper, representing a machine learning model. The architect uses blueprints (ONNX models) from various sources (TensorFlow, PyTorch, scikit-learn) and directs a team of specialized robots (hardware accelerators) to efficiently build each floor. Some robots are optimizing the building's structure (graph optimizations). The skyscraper stands tall and strong, symbolizing high-performance inference and training. Small screens display real-time performance metrics and model graphs. The scene is set in a bright, futuristic cityscape with a blue and orange color scheme. The image should be in 3D isometric illustration style with clean lines and clear details."
    },
    {
        "id": 928902972,
        "name": "switchsearch",
        "description": "Minimalist intuitive search engine switcher",
        "url": "https://github.com/thedmdim/switchsearch",
        "language": "JavaScript",
        "stars": 86,
        "forks": 7,
        "created_at": "2025-02-07T12:57:07Z",
        "updated_at": "2025-05-17T07:34:52Z",
        "topics": [
            "brave",
            "extension",
            "osint",
            "search"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-07T05:54:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8f308692b049f83bb0f78674e0e157ae29079f5defac4e72b5ff12fb36430795/thedmdim/switchsearch"
        ],
        "homepage": "",
        "readme_summary": "SwitchSearch is a browser extension that allows users to quickly switch between different search engines. It comes with several built-in options and allows users to add their own. It also offers convenient image search integration for Google and Yandex.",
        "key_features": [
            "Built-in search engine options (Google, Yandex, Brave, DuckDuckGo, Perplexity, ChatGPT, Wiby, Marginalia)",
            "Ability to add custom search engines",
            "Google and Yandex image search via right-click"
        ],
        "primary_use_case": "Quickly switching between different search engines with a single click.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a train station with multiple platforms, each labeled with a different search engine logo (Google, DuckDuckGo, etc.). A traveler stands in the center, effortlessly switching between platforms with a single click to board the train that best suits their destination. UI elements showing search results appear subtly on nearby screens. The station is clean and modern, with a blue and white color scheme. This conceptual illustration should be in a flat design style with clear iconography and a focus on ease of use."
    },
    {
        "id": 762837,
        "name": "ricochet",
        "description": "Anonymous peer-to-peer instant messaging",
        "url": "https://github.com/ricochet-im/ricochet",
        "language": "C++",
        "stars": 3900,
        "forks": 413,
        "created_at": "2010-07-07T23:01:23Z",
        "updated_at": "2025-05-17T04:32:34Z",
        "topics": [
            "c-plus-plus",
            "cross-platform",
            "gui",
            "messaging",
            "privacy",
            "tor"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2017-08-16T22:11:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/063b419efeeb5133bf7ae40f087d837196437078f1925c17b6a7159cc1eab84f/ricochet-im/ricochet"
        ],
        "homepage": "https://ricochet.im/",
        "readme_summary": "Ricochet is an anonymous peer-to-peer instant messaging system that prioritizes privacy and metadata resistance. It leverages the Tor network to hide user identities and prevent the exposure of contact lists or communication content. The application is designed to be cross-platform and user-friendly, focusing on secure communication without reliance on central servers.",
        "key_features": [
            "Anonymous messaging",
            "Metadata resistance",
            "Peer-to-peer communication",
            "Cross-platform support"
        ],
        "primary_use_case": "Anonymous and secure instant messaging",
        "open_issues": 161,
        "cover_image_prompt": "A lone traveler shrouded in shadow, communicating with distant figures through glowing, interconnected constellations. Each star represents a contact, and the lines connecting them pulse with encrypted messages. The traveler's face is obscured, emphasizing anonymity. Subtle UI elements float nearby, displaying encrypted message streams and Tor network pathways. The scene is set against a dark, starry sky with a faint digital grid overlay. The composition is clean and focused, drawing attention to the interconnectedness of the figures. The image should be in a digital painting style with a cool color palette and a sense of mystery."
    },
    {
        "id": 922192456,
        "name": "tapnote",
        "description": "Instant, self-hosted publishing with Markdown.",
        "url": "https://github.com/vorniches/tapnote",
        "language": "Python",
        "stars": 51,
        "forks": 5,
        "created_at": "2025-01-25T15:10:57Z",
        "updated_at": "2025-05-17T06:56:53Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-02-13T09:46:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2c9eb3e0bb968d461027b24d54460d2df73c6e10e9b8c5ebe9f23aec6cb4609b/vorniches/tapnote"
        ],
        "homepage": "",
        "readme_summary": "TapNote is a minimalist, self-hosted publishing platform that allows users to instantly create and publish Markdown-based content. It offers a distraction-free writing experience with features like unique URLs, secure editing, and support for images and code snippets. TapNote is ideal for quick notes, blog posts, or documentation sharing, giving users full control over their content.",
        "key_features": [
            "Minimalist Writing Experience",
            "Distraction-free Markdown editor",
            "Instant publishing",
            "Self-hosted content management",
            "Unique URL for each post",
            "Edit functionality with secure tokens",
            "Support for images and code snippets"
        ],
        "primary_use_case": "Instant, self-hosted Markdown-based content creation and publishing.",
        "open_issues": 0,
        "cover_image_prompt": "A writer sitting at a minimalist desk, effortlessly transforming thoughts into beautifully formatted Markdown documents that instantly appear on a clean, modern website. The writer's fingers dance across the keyboard, creating content that flows seamlessly onto the screen. A subtle digital overlay shows the Markdown syntax being rendered in real-time. Small UI elements display the 'Publish' button and unique URL generation. The scene is set in a bright, airy room with natural light. The image should be in a flat design style with clear iconography and a calming color palette."
    },
    {
        "id": 926455740,
        "name": "amoy-todo-wallpaper",
        "description": "Set To-Do list as windows wallpaper",
        "url": "https://github.com/casualwriter/amoy-todo-wallpaper",
        "language": "Python",
        "stars": 13,
        "forks": 3,
        "created_at": "2025-02-03T09:37:13Z",
        "updated_at": "2025-05-16T19:48:45Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-02-03T16:01:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/22fec63d0a011c477104d9ca46b581da2b340f9f4e69bbe2edb136dff18f5036/casualwriter/amoy-todo-wallpaper"
        ],
        "homepage": null,
        "readme_summary": "This repository provides a Python program that sets a user-editable To-Do list as the Windows desktop wallpaper. It includes a UI for editing the To-Do list content and allows customization of font color, background color, and font size. The program utilizes a background image to enhance the visual appeal of the wallpaper.",
        "key_features": [
            "Sets a To-Do list as Windows wallpaper",
            "Allows editing of the To-Do list via a UI",
            "Allows customization of font color and background color",
            "Supports setting font size",
            "Uses a background image"
        ],
        "primary_use_case": "Setting a customizable To-Do list as a Windows desktop wallpaper for increased visibility and task management.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a digital artist sitting at a computer, using a palette of text and colors to paint a vibrant to-do list directly onto a Windows desktop wallpaper. The artist carefully arranges the tasks, ensuring they are clear and visually appealing against a background image. The desktop displays icons representing the program's settings for font size and color. The scene is bathed in soft, ambient light, creating a productive and inspiring atmosphere. Small code snippets float subtly in the background, hinting at the underlying Python code. The image should be in a digital painting style with clean lines and a focus on usability."
    },
    {
        "id": 816373900,
        "name": "SAMPart3D",
        "description": "SAMPart3D: Segment Any Part in 3D Objects",
        "url": "https://github.com/Pointcept/SAMPart3D",
        "language": "Python",
        "stars": 387,
        "forks": 20,
        "created_at": "2024-06-17T16:00:57Z",
        "updated_at": "2025-05-17T08:41:02Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-04T01:38:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5880e6ecbf14691d173af6246f29335408d0c8af5a5ab5d99f67335c604820b9/Pointcept/SAMPart3D"
        ],
        "homepage": "",
        "readme_summary": "SAMPart3D is a Python-based project focused on segmenting parts within 3D objects. It provides tools and scripts for training segmentation models, utilizing multi-view rendering with Blender, and evaluating the segmentation results. The repository also includes utilities for highlighting segmented parts in rendered images and provides a dataset called PartObjaverse-Tiny.",
        "key_features": [
            "3D object part segmentation",
            "Training pipeline for SAMPart3D",
            "Multi-view rendering using Blender",
            "Testing with pretrained MLPs",
            "Highlighting 3D segments on multi-view renderings"
        ],
        "primary_use_case": "Segmenting any part in 3D objects.",
        "open_issues": 17,
        "cover_image_prompt": "Imagine a skilled sculptor meticulously chiseling a 3D model from a rough block of stone, revealing distinct, perfectly segmented parts. The sculptor uses advanced digital tools, with holographic projections displaying the model's structure and segmentation boundaries. Subtle UI elements float around the scene, showing the SAMPart3D logo and code snippets related to 3D segmentation. The setting is a bright, modern digital workshop. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity and detail."
    }
]