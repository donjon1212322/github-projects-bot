[
    {
        "id": 334702754,
        "name": "KeyPass",
        "description": "KeyPass: Open Source Project & An Offline Password Manager. Store, manage, and take control securely.",
        "url": "https://github.com/yogeshpaliyal/KeyPass",
        "language": "Kotlin",
        "stars": 647,
        "forks": 84,
        "created_at": "2021-01-31T16:34:20Z",
        "updated_at": "2025-05-06T10:07:56Z",
        "topics": [
            "andorid",
            "android",
            "android-app",
            "android-application",
            "android-development",
            "hacktoberfest",
            "kotlin",
            "kotlin-redux",
            "material-design",
            "material3",
            "mvi",
            "password-generator",
            "password-manager"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-26T11:59:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4be876bfa5d2fdd3ee3b755f5d0bb6ec8dffca4b6d48e42a0936d10f63b563c3/yogeshpaliyal/KeyPass"
        ],
        "homepage": "https://github.yogeshpaliyal.com/KeyPass/",
        "readme_summary": "KeyPass is an open-source, offline password manager built with Kotlin. It allows users to securely store, manage, and generate passwords without relying on internet connectivity. Key features include encrypted backups, dark mode support, Material Design 3, biometric authentication, TOTP, and import/export functionality.",
        "key_features": [
            "Offline password management",
            "Open Source",
            "Encrypted Backup and Restore",
            "Dark Mode Support",
            "Material Design 3",
            "Screenshot Blocked",
            "Authentication with device credentials",
            "Auto Backup",
            "TOTP",
            "Jetpack Compose",
            "Import from Google Chrome CSV, KeePass CSV",
            "Autofill Service"
        ],
        "primary_use_case": "Securely store and manage passwords offline.",
        "open_issues": 16,
        "cover_image_prompt": "A blacksmith meticulously forging a key from raw data, representing the creation of secure passwords. The blacksmith's workshop is filled with glowing screens displaying password strength metrics and encryption algorithms. The finished key radiates a protective aura, symbolizing secure access. UI elements showing password generation options are subtly integrated into the scene. The workshop is clean and well-lit, with a focus on the blacksmith's focused expression. The composition is centered on the blacksmith and the key, with a warm color scheme. The image should be in a detailed digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 966383040,
        "name": "sxwm",
        "description": "tiling window managers dont have to be difficult",
        "url": "https://github.com/uint23/sxwm",
        "language": "C",
        "stars": 83,
        "forks": 2,
        "created_at": "2025-04-14T20:52:05Z",
        "updated_at": "2025-05-06T08:57:39Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-04T09:52:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8f4a825783551cd801e2a775491a05895bff4028f6d7db16d955962616fbbdc9/uint23/sxwm"
        ],
        "homepage": "",
        "readme_summary": "sxwm is a lightweight and configurable tiling window manager for X11. It offers features like tiling and floating layouts, workspace support, live config reload, and mouse support. It's designed to be fast, dependency-free, and easily configurable through a human-friendly `sxwmrc` file.",
        "key_features": [
            "Tiling and Floating window management",
            "Workspace support",
            "Live configuration reload",
            "Easy configuration via sxwmrc file",
            "Master-Stack layout",
            "Mouse support for window manipulation",
            "Minimal dependencies",
            "Lightweight implementation",
            "Bar friendly",
            "Xinerama support",
            "Fast performance"
        ],
        "primary_use_case": "A tiling window manager for X11 environments, designed for users who want a minimal, fast, and configurable window management solution.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a mosaic window, each tile representing a different application. The artisan carefully arranges and resizes the tiles to fit perfectly within the frame, creating a harmonious and efficient workspace. Subtle digital lines connect the tiles, suggesting the underlying code and window management. The scene is bathed in soft, focused light, highlighting the precision and control of the artisan. Small UI elements float around the window, displaying configuration options and workspace indicators. The image should be in a clean, flat design style with clear iconography and a muted color palette."
    },
    {
        "id": 120156076,
        "name": "Cloudreve",
        "description": "üå©ÊîØÊåÅÂ§öÂÆ∂‰∫ëÂ≠òÂÇ®ÁöÑ‰∫ëÁõòÁ≥ªÁªü (Self-hosted file management and sharing system, supports multiple storage providers)",
        "url": "https://github.com/cloudreve/Cloudreve",
        "language": "Go",
        "stars": 22931,
        "forks": 3523,
        "created_at": "2018-02-04T04:56:38Z",
        "updated_at": "2025-05-06T10:04:50Z",
        "topics": [
            "cloud",
            "cloud-storage",
            "cloudreve",
            "file",
            "file-manager",
            "file-sharing",
            "golang"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-04-27T02:38:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ea85e3f730d1f0bf285832d6f358dfb7e8ae29b240d53acbeb6b334dd453de1a/cloudreve/Cloudreve"
        ],
        "homepage": "https://cloudreve.org",
        "readme_summary": "Cloudreve is a self-hosted file management system that supports multiple cloud storage providers, enabling users to store, share, and manage their files in a centralized location. It offers features like direct transmission upload/download, offline downloading via Aria2, WebDAV support, and customizable themes, providing a comprehensive solution for personal or organizational file management needs.",
        "key_features": [
            "Supports multiple cloud storage providers (Local, Remote, Qiniu, Aliyun OSS, Tencent COS, Upyun, OneDrive, S3 compatible API)",
            "Direct transmission upload/download with speed limiting",
            "Aria2 integration for offline downloads",
            "File compression/extraction and batch downloading",
            "WebDAV support for all storage providers",
            "Drag & Drop upload with streaming processing",
            "Drag & Drop file management",
            "Multi-user and multi-group support",
            "Share link creation with expiration dates",
            "Online preview and editing of various file types",
            "Customizable themes, dark mode, PWA, SPA, i18n",
            "All-in-one packaging"
        ],
        "primary_use_case": "Self-hosted file management and sharing with multi-cloud support.",
        "open_issues": 146,
        "cover_image_prompt": "A skilled architect overseeing the construction of a towering cloud-shaped building, meticulously organizing and managing files represented as glowing blocks. The architect uses a holographic interface to connect the building to various cloud storage providers, symbolized by distinct logos subtly integrated into the structure. Data streams flow seamlessly between the cloud building and smaller devices, representing file sharing and access. The scene is set in a bright, futuristic cityscape with a clean, minimalist aesthetic. Small UI elements display file management operations. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 973783344,
        "name": "suitcase-lock-recovery",
        "description": null,
        "url": "https://github.com/Prajwalsrinvas/suitcase-lock-recovery",
        "language": "HTML",
        "stars": 5,
        "forks": 0,
        "created_at": "2025-04-27T18:18:54Z",
        "updated_at": "2025-05-06T07:42:29Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-04-27T18:31:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/035d89b8d366278638c155fc839253c75b9a328ba90f85bb998a7098ad52d2df/Prajwalsrinvas/suitcase-lock-recovery"
        ],
        "homepage": "https://voyagevault.vercel.app",
        "readme_summary": "The Suitcase Lock Recovery Tool is a web-based application designed to help travelers recover forgotten combinations for their 3-digit suitcase locks. It uses an interactive 3D simulation and a guided process to exploit the mechanical design of the locks, significantly reducing the number of combinations needed to try.",
        "key_features": [
            "Interactive 3D lock simulation with rotating dials",
            "Visual feedback for hole alignment",
            "Step-by-step guided recovery process",
            "Progress tracking for combinations tried",
            "Combination generator",
            "Light/Dark mode toggle",
            "Responsive design"
        ],
        "primary_use_case": "Recovering forgotten combinations for 3-digit suitcase locks.",
        "open_issues": 0,
        "cover_image_prompt": "A traveler standing in front of a large, ornate suitcase, looking perplexed. A beam of light shines down, revealing a faint, glowing combination lock on the suitcase. The traveler holds a magnifying glass, focusing on the lock, with small UI elements displaying rotating dials and potential combinations floating around them. The scene is set in a bustling airport terminal with soft, diffused lighting. Small code snippets related to combination generation are subtly incorporated as background elements. The image should be in a 3D isometric illustration style with rich details and a warm color scheme."
    },
    {
        "id": 347277349,
        "name": "sqlglot",
        "description": "Python SQL Parser and Transpiler",
        "url": "https://github.com/tobymao/sqlglot",
        "language": "Python",
        "stars": 7646,
        "forks": 842,
        "created_at": "2021-03-13T05:01:56Z",
        "updated_at": "2025-05-06T09:26:13Z",
        "topics": [
            "bigquery",
            "clickhouse",
            "databricks",
            "duckdb",
            "hive",
            "mysql",
            "optimizer",
            "parser",
            "postgres",
            "presto",
            "python",
            "redshift",
            "snowflake",
            "spark",
            "sql",
            "sqlite",
            "sqlparser",
            "transpiler",
            "trino",
            "tsql"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-05T16:38:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b27dfd25103d090311c62abd0e22fd8f6f7f19a34b72cac92056d7117bac3a19/tobymao/sqlglot"
        ],
        "homepage": "https://sqlglot.com/",
        "readme_summary": "SQLGlot is a Python library for parsing, transpiling, optimizing, and formatting SQL queries. It supports conversion between 24 different SQL dialects and provides features for syntax error detection, custom dialect support, and abstract syntax tree (AST) analysis and manipulation. It enables developers to work with SQL queries in a dialect-agnostic way.",
        "key_features": [
            "SQL Parsing",
            "SQL Transpilation",
            "SQL Optimization",
            "SQL Dialect Conversion (24 dialects)",
            "Syntax Error Detection",
            "Custom Dialect Support",
            "AST Analysis and Manipulation"
        ],
        "primary_use_case": "Parsing, transpiling, optimizing, and formatting SQL queries across different dialects.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled linguist standing at a grand translator's desk, surrounded by stacks of ancient scrolls representing various SQL dialects. The linguist expertly deciphers one scroll (e.g., Hive SQL) and meticulously rewrites it onto a fresh, pristine parchment (e.g., Snowflake SQL). Glowing digital particles subtly flow between the scrolls, symbolizing the parsing, transpilation, and optimization processes. Small UI elements displaying SQL code snippets are subtly embedded in the desk. The scene is bathed in warm, inviting light, creating an atmosphere of scholarly precision. The image should be in a detailed digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 407436572,
        "name": "wowy",
        "description": "WOWY is a modern, full-featured e-commerce platform built with Django 4.x, designed to provide a seamless shopping experience for both customers and administrators. This comprehensive solution offers robust product management with multi-image support, real-time cart operations, and wishlist functionality, alongside a powerful admin dashboard",
        "url": "https://github.com/manjurulhoque/wowy",
        "language": "Jinja",
        "stars": 161,
        "forks": 29,
        "created_at": "2021-09-17T06:49:51Z",
        "updated_at": "2025-05-06T09:10:59Z",
        "topics": [
            "django",
            "django-rest-framework",
            "ecommerce"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T15:08:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7f4d31029fabb2853c648667d9880503d38dd4bce057c8c129bb1b54585419a0/manjurulhoque/wowy"
        ],
        "homepage": "",
        "readme_summary": "WOWY is a Django-based e-commerce platform designed for creating and managing online stores. It offers features such as product and order management, user accounts, an admin dashboard with analytics, payment integration, and a product variant system. The platform aims to provide a seamless shopping experience for customers and efficient administrative tools for store owners.",
        "key_features": [
            "Product Management (multi-image support, category management, stock tracking)",
            "Order Management (shopping cart, order tracking, PDF invoice generation)",
            "User Management (customer accounts, wishlist, multiple shipping addresses)",
            "Admin Dashboard (sales analytics, revenue tracking, customer analytics)",
            "Payment Integration (Stripe, multiple payment methods, secure payment processing)",
            "Product Variant System (size/color combinations, individual pricing, separate stock tracking)"
        ],
        "primary_use_case": "Building and managing a full-featured e-commerce platform.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a bustling marketplace where a skilled shopkeeper, representing the Django-based e-commerce platform, efficiently manages a diverse array of products displayed on interactive screens. Customers browse seamlessly, adding items to their carts with ease. Behind the shopkeeper, a dashboard displays real-time sales analytics and customer insights. The scene is bathed in warm, inviting light, with subtle digital elements like glowing data streams and UI components integrated into the environment. The repository name, WOWY, is subtly displayed on the shop's awning. This conceptual illustration, rendered in a vibrant 3D isometric style, captures the essence of a modern, full-featured e-commerce platform."
    },
    {
        "id": 631258918,
        "name": "pandas-ai",
        "description": "Chat with your database or your datalake (SQL, CSV, parquet). PandasAI makes data analysis conversational using LLMs and RAG.",
        "url": "https://github.com/sinaptik-ai/pandas-ai",
        "language": "Python",
        "stars": 19951,
        "forks": 1885,
        "created_at": "2023-04-22T12:58:01Z",
        "updated_at": "2025-05-06T09:44:43Z",
        "topics": [
            "ai",
            "csv",
            "data",
            "data-analysis",
            "data-science",
            "data-visualization",
            "database",
            "datalake",
            "gpt-4",
            "llm",
            "pandas",
            "sql",
            "text-to-sql"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-04-14T08:01:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/97c3634f3487ea5634e0db91b28404aea2e88b8a49b41ed98f4cc53bc0c410f3/sinaptik-ai/pandas-ai"
        ],
        "homepage": "https://getpanda.ai",
        "readme_summary": "PandasAI is a Python library that enables conversational data analysis by leveraging LLMs and RAG techniques. It allows users to interact with data from various sources like SQL databases, CSV files, and Parquet files using natural language. The library also supports data visualization and handling multiple DataFrames, making data analysis more accessible and efficient.",
        "key_features": [
            "Natural language interaction with data",
            "Integration with LLMs and RAG",
            "Support for SQL, CSV, and Parquet data sources",
            "Data visualization capabilities",
            "Multiple DataFrame support"
        ],
        "primary_use_case": "Conversational data analysis using LLMs, allowing users to interact with their data using natural language.",
        "open_issues": 18,
        "cover_image_prompt": "A friendly panda sitting at a desk, conversing with a glowing computer screen filled with data visualizations. The panda is pointing at a complex SQL query on the screen, which is instantly translated into a simple, natural language question displayed in a speech bubble above its head. Around the panda, colorful charts and graphs float in the air, representing the results of the data analysis. The scene is set in a bright, modern office with subtle tech elements like glowing data streams and small code snippets in the background. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 894891699,
        "name": "PdfDing",
        "description": "Selfhosted PDF manager, viewer and editor offering a seamless user experience on multiple devices.",
        "url": "https://github.com/mrmn2/PdfDing",
        "language": "Python",
        "stars": 957,
        "forks": 43,
        "created_at": "2024-11-27T07:29:55Z",
        "updated_at": "2025-05-06T08:39:49Z",
        "topics": [
            "document-management",
            "lightweight",
            "pdf",
            "pdf-cloud",
            "pdf-editor",
            "pdf-management",
            "pdf-viewer",
            "self-hosted"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-21T06:38:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/370439d552796b83ec7193b16df01c6a1f36d807feed7d4edffd927bab8e344a/mrmn2/PdfDing"
        ],
        "homepage": "",
        "readme_summary": "PdfDing is a self-hosted PDF manager, viewer, and editor designed for seamless use across multiple devices. It offers features like tagging, starring, archiving, and editing PDFs with comments and highlights. The application provides a clean user interface with dark mode, SSO support, and the ability to share PDFs with external audiences.",
        "key_features": [
            "Browser-based PDF viewing with remembered position",
            "Multi-level tagging, starring, and archiving",
            "PDF editing with comments, highlighting, and drawings",
            "Highlight and comment management and export",
            "Clean UI with dark mode and custom themes",
            "SSO support via OIDC",
            "PDF sharing with access control",
            "Markdown Notes",
            "Progress bars for reading progress"
        ],
        "primary_use_case": "Self-hosted PDF management, viewing, and editing.",
        "open_issues": 13,
        "cover_image_prompt": "Imagine a skilled librarian in a vast, sunlit library, meticulously organizing scattered PDF documents into labeled shelves. The librarian uses a magical quill that highlights key information and adds annotations to the PDFs. Floating above, a translucent screen displays a user interface with tagging and editing options. The library is filled with people reading comfortably on various devices, their progress tracked by glowing bars above each document. The scene is in a vibrant, 3D isometric illustration style with warm lighting and a color scheme of greens, blues, and yellows. The repository name, 'PdfDing,' is subtly etched on the librarian's desk."
    },
    {
        "id": 688232459,
        "name": "VTScanner",
        "description": "A comprehensive Python-based security tool for file scanning, malware detection, and analysis in an ever-evolving cyber landscape.",
        "url": "https://github.com/samhaxr/VTScanner",
        "language": "Python",
        "stars": 103,
        "forks": 12,
        "created_at": "2023-09-06T23:50:53Z",
        "updated_at": "2025-05-06T03:53:27Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2023-09-07T18:13:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6b605f23bb9f86210aa14fd606511c30c4f10a26acd223ce6e14ba7cd8dd1951/samhaxr/VTScanner"
        ],
        "homepage": "",
        "readme_summary": "VTScanner is a Python-based security tool designed for comprehensive file scanning and malware detection within specified directories. It integrates with the VirusTotal API to provide detailed scan reports, hash-based checks, and interactive exploration of VirusTotal results. The tool offers features for both free and premium VirusTotal API users, including time delay functionality and concurrent scanning support.",
        "key_features": [
            "Directory-based scanning",
            "Detailed scan reports",
            "Hash-based checks",
            "VirusTotal integration",
            "Time delay functionality for free VirusTotal accounts",
            "Premium API support for concurrent scanning",
            "Interactive VirusTotal exploration",
            "Preinstalled Windows binaries",
            "Custom binary generation"
        ],
        "primary_use_case": "File scanning for malware detection and analysis.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned detective meticulously examining files within a digital archive, using a magnifying glass that reveals hidden malware signatures. The archive is depicted as a vast library of glowing data streams, with some files emitting a suspicious red aura upon closer inspection. The detective's workstation displays a clean UI showing VirusTotal scan results and file hashes. The scene is set in a dimly lit, high-tech office with holographic displays. Small code snippets and data visualizations float subtly in the background. The image should be in a digital painting style with clear outlines, dramatic lighting, and a focus on detail."
    },
    {
        "id": 967096214,
        "name": "ml-comotion",
        "description": null,
        "url": "https://github.com/apple/ml-comotion",
        "language": "Python",
        "stars": 119,
        "forks": 5,
        "created_at": "2025-04-15T23:34:44Z",
        "updated_at": "2025-05-06T02:38:52Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T00:39:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0a4e148dd2640a8db4ddddfeed091fdd2be2000fae267e291c06a800ed746a1a/apple/ml-comotion"
        ],
        "homepage": null,
        "readme_summary": "The CoMotion repository provides tools and scripts for detecting and tracking detailed 3D human poses from monocular video streams. It uses a combination of per-frame detection and learned pose updates to maintain temporally coherent predictions, even in crowded scenes with occlusions. The repository includes pretrained models, demo scripts, and visualization tools, supporting both video and single-image inputs.",
        "key_features": [
            "Detects and tracks detailed 3D poses of multiple people from a single monocular camera stream.",
            "Maintains temporally coherent predictions in crowded scenes with difficult poses and occlusions.",
            "Performs strong per-frame detection and learned pose update for tracking.",
            "Offers online tracking through occlusion by directly updating poses from new input images.",
            "Provides helper functions and scripts for inference and visualization.",
            "Includes pretrained checkpoints for detection and refinement stages.",
            "Supports running on video files and single images.",
            "Outputs SMPL pose parameters, 2D/3D coordinates, confidences, and MOT format tracking data."
        ],
        "primary_use_case": "Detecting and tracking 3D poses of multiple people from a single camera in real-time, even in crowded and occluded environments.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled choreographer directing a group of dancers in a complex, crowded performance. The choreographer uses a tablet displaying a 3D skeletal model, adjusting poses and movements in real-time. Each dancer's pose is captured by a single camera, with digital particles flowing from the camera to the choreographer's tablet, updating the 3D model. The scene is set in a modern dance studio with dynamic lighting. Small UI elements on the tablet show pose estimation and tracking data. The composition is clean and focused with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 969010919,
        "name": "dia",
        "description": "A TTS model capable of generating ultra-realistic dialogue in one pass.",
        "url": "https://github.com/nari-labs/dia",
        "language": "Python",
        "stars": 14746,
        "forks": 1103,
        "created_at": "2025-04-19T07:15:57Z",
        "updated_at": "2025-05-06T10:04:44Z",
        "topics": [
            "ai",
            "open-weight",
            "text-to-speech"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T06:47:29Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/969010919/22e8e92e-9d9a-4966-867c-410500d411c8"
        ],
        "homepage": "",
        "readme_summary": "Dia is a text-to-speech model that generates highly realistic dialogue in a single pass. It allows for conditioning on audio to control emotion and tone, and can produce nonverbal cues. The repository provides access to pretrained model checkpoints and inference code for research purposes, focusing on English language generation.",
        "key_features": [
            "Generates realistic dialogue from text",
            "Supports emotion and tone control via audio conditioning",
            "Produces nonverbal communications (laughter, coughing, etc.)",
            "Provides pretrained model checkpoints and inference code"
        ],
        "primary_use_case": "Generating ultra-realistic dialogue from text transcripts, with the ability to control emotion and tone using audio prompts.",
        "open_issues": 58,
        "cover_image_prompt": "Imagine a skilled sculptor meticulously crafting a realistic human face from raw clay, breathing life into it with each touch. The sculptor's hands glow with digital particles, subtly hinting at the underlying AI technology. Around the sculptor, floating UI elements display waveforms and text transcripts, representing the input and output of the text-to-speech process. The scene is set in a bright, modern studio with soft, diffused lighting. The composition is clean and focused, emphasizing the transformation from text to lifelike speech. The image should be in a 3D rendering style with hyperrealistic details and a warm color palette."
    }
]