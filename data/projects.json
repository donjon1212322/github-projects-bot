[
    {
        "id": 1064663442,
        "name": "flareprox",
        "description": "Use Cloudflare to create HTTP pass-through proxies for unique IP rotation, similar to fireprox",
        "url": "https://github.com/MrTurvey/flareprox",
        "language": "Python",
        "stars": 376,
        "forks": 25,
        "created_at": "2025-09-26T11:15:43Z",
        "updated_at": "2025-10-01T09:52:25Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-09-29T09:43:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/05328c5f87a5b68fc8959ea14a6102b514c9c9f65c93e9596c9ebc476f1f67ca/MrTurvey/flareprox"
        ],
        "homepage": null,
        "readme_summary": "FlareProx is a Python tool that simplifies the creation of HTTP pass-through proxies using Cloudflare Workers. It enables IP rotation and URL redirection, masking the original IP address through Cloudflare's global network, and supports all HTTP methods, offering a free tier of 100,000 requests per day.",
        "key_features": [
            "HTTP Support for all methods (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD)",
            "Simple URL Redirection",
            "Global Network via Cloudflare CDN",
            "Free Tier (100,000 requests per day)",
            "Easy Deployment"
        ],
        "primary_use_case": "Creating HTTP proxies with IP rotation and URL redirection using Cloudflare Workers.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled network engineer orchestrating traffic flow through a miniature Cloudflare data center represented by glowing server racks. The engineer redirects streams of data, visualized as colorful light beams, from various sources (representing user requests) through the Cloudflare network, masking their origins. Each data stream emerges with a new, distinct IP address. Small monitors display Cloudflare worker logs and IP addresses. The scene is set in a clean, futuristic control room with cool blue lighting. The image should be in a 3D isometric illustration style with detailed textures and vibrant colors."
    },
    {
        "id": 693752164,
        "name": "basalt",
        "description": "TUI Application to manage Obsidian notes directly from the terminal",
        "url": "https://github.com/erikjuhani/basalt",
        "language": "Rust",
        "stars": 561,
        "forks": 14,
        "created_at": "2023-09-19T16:32:40Z",
        "updated_at": "2025-10-01T07:13:53Z",
        "topics": [
            "markdown",
            "obsidian",
            "ratatui",
            "tui"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-30T21:26:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2faff0abf04d8faaba85371637f95e2afe2f09b0bab0602adf2fcd3be4033eb2/erikjuhani/basalt"
        ],
        "homepage": "",
        "readme_summary": "Basalt is a terminal-based user interface (TUI) application designed for managing Obsidian vaults and notes directly from the command line. It provides a minimalist approach to note management, offering readable markdown rendering and a WYSIWYG experience, aiming to complement Obsidian by enabling quick note editing without leaving the terminal.",
        "key_features": [
            "TUI for Obsidian note management",
            "Cross-platform support (Windows, macOS, Linux)",
            "WYSIWYG markdown editor in the terminal",
            "Customizable key mappings",
            "CLI functionality for note operations (find, delete, create)"
        ],
        "primary_use_case": "Managing Obsidian notes and vaults directly from the terminal for quick editing and access without disrupting the terminal workflow.",
        "open_issues": 36,
        "cover_image_prompt": "A skilled calligrapher meticulously writing in a large, ornate journal, representing an Obsidian vault. The journal rests on a command-line interface, subtly glowing with digital code. The calligrapher's quill emits streams of markdown syntax that transform into beautifully rendered text and images within the journal. Small UI elements float around the scene, showing file navigation and editing options. The setting is a minimalist workspace with soft, focused lighting. The image should be in a flat design style with clear iconography and a muted color scheme."
    },
    {
        "id": 1055435059,
        "name": "EdgeBox",
        "description": "A fully-featured, GUI-powered local LLM Agent sandbox with complete MCP protocol support.   Features both CLI and full desktop environment, enabling AI agents to operate browsers, terminal, and other desktop applications just like humans. Based on E2B oss code.",
        "url": "https://github.com/BIGPPWONG/EdgeBox",
        "language": "TypeScript",
        "stars": 95,
        "forks": 10,
        "created_at": "2025-09-12T09:05:04Z",
        "updated_at": "2025-10-01T03:38:18Z",
        "topics": [
            "code-interpreter",
            "computer-use",
            "e2b",
            "llm-agent",
            "llm-sandbox",
            "mcp"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-28T08:25:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/983fc81b5c7429af2bc398d2f4315a046f18e43d7482c09b936509e4c20af958/BIGPPWONG/EdgeBox"
        ],
        "homepage": "",
        "readme_summary": "EdgeBox is a local LLM agent sandbox that provides a fully-featured GUI and CLI environment for developing and executing AI agents. It's based on the E2B open-source project and offers complete MCP protocol support, enabling agents to interact with browsers, terminals, and desktop applications locally.",
        "key_features": [
            "Full Desktop Environment (Computer Use)",
            "Complete Code Interpreter & Shell",
            "Seamless LLM Agent Integration (via MCP)",
            "GUI and CLI interface",
            "Local execution environment"
        ],
        "primary_use_case": "Developing and testing AI agents with 'Computer Use' capabilities in a local, controlled environment.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled architect in a brightly lit, futuristic workshop, designing a complex city blueprint on a holographic table. The blueprint represents an AI agent's workflow, with interconnected modules for browsing, coding, and desktop application interaction. The architect uses specialized tools that translate natural language instructions into precise actions within the blueprint. Small screens display code snippets and data visualizations, subtly connecting the metaphor to software. The scene is in a 3D isometric illustration style with vibrant colors and clear details, emphasizing the control and precision EdgeBox provides."
    },
    {
        "id": 994110247,
        "name": "takumi",
        "description": "Render your React components to images. Available for Rust, Node.js, and WebAssembly.",
        "url": "https://github.com/kane50613/takumi",
        "language": "Rust",
        "stars": 760,
        "forks": 3,
        "created_at": "2025-06-01T08:19:38Z",
        "updated_at": "2025-10-01T09:45:02Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-23T10:38:56Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/994110247/53306eb4-2f69-4169-b4f5-5fea92b9f1c4"
        ],
        "homepage": "https://takumi.kane.tw",
        "readme_summary": "Takumi is a Rust-based image rendering engine that provides bindings for Node.js and WebAssembly. It's designed for high-throughput image rendering workloads, such as generating Open Graph and Twitter images, by allowing developers to render React components to images.",
        "key_features": [
            "React components to image rendering",
            "Node.js bindings",
            "WebAssembly bindings",
            "RTL support",
            "Variable fonts support",
            "WOFF2 font format support",
            "PNG, JPEG, WebP, AVIF output support"
        ],
        "primary_use_case": "High-throughput image rendering (e.g., Open Graph images, Twitter images) from React components.",
        "open_issues": 9,
        "cover_image_prompt": "A skilled artisan meticulously crafting intricate mosaics from React components, transforming them into vibrant, high-resolution images. The artisan uses a specialized workbench equipped with digital tools and glowing runes that represent different image formats. Finished mosaics are displayed on nearby screens, showcasing their crisp details and vivid colors. Small code snippets and UI elements float around the scene, subtly connecting the artistic process to software. The scene is set in a brightly lit workshop with a focus on precision and artistry. The image should be in a 3D isometric illustration style with rich textures and vibrant colors."
    },
    {
        "id": 728438436,
        "name": "mesh2motion-app",
        "description": "Import a 3D Model and automatically assign and export animations",
        "url": "https://github.com/scottpetrovic/mesh2motion-app",
        "language": "TypeScript",
        "stars": 1509,
        "forks": 118,
        "created_at": "2023-12-07T00:08:05Z",
        "updated_at": "2025-10-01T09:48:06Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-09-24T12:33:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0d25122433b4cca88dfcd1f695567e0df9485fd90433613ba8ef0e2262c38fef/scottpetrovic/mesh2motion-app"
        ],
        "homepage": null,
        "readme_summary": "The mesh2motion-app repository provides a tool for importing 3D models and automatically assigning and exporting animations. It aims to offer more flexibility than existing tools like Mixamo by supporting various model and skeleton types. The application allows users to import models, select skeleton types, adjust the skeleton to fit the model, test animations, and export the results.",
        "key_features": [
            "Import 3D models (GLB/GLTF format)",
            "Skeleton type selection",
            "Skeleton modification and fitting",
            "Animation testing",
            "Animation selection and export (GLB/GLTF format)",
            "Local building and running (Node.js)",
            "Production build creation (Vite)",
            "Docker support",
            "Video preview generation tool"
        ],
        "primary_use_case": "Automatically assigning and exporting animations for 3D models.",
        "open_issues": 19,
        "cover_image_prompt": "A skilled puppeteer meticulously attaching strings to a 3D model puppet on a digital stage. The puppet represents a character, and the strings symbolize various animations being assigned. A nearby control panel features a user interface with animation options and export settings. Digital particles flow from the control panel to the puppet, bringing it to life with fluid movements. The stage is set in a brightly lit studio with subtle UI elements and the \"Mesh2Motion\" logo subtly displayed. The composition is clean and focused with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1039227029,
        "name": "doxx",
        "description": "Expose the contents of .docx files without leaving your terminal. Fast, safe, and smart — no Office required!",
        "url": "https://github.com/bgreenwell/doxx",
        "language": "Rust",
        "stars": 2979,
        "forks": 71,
        "created_at": "2025-08-16T18:48:24Z",
        "updated_at": "2025-10-01T08:56:37Z",
        "topics": [
            "cli",
            "docx",
            "msword",
            "render",
            "rust",
            "terminal",
            "tui"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-09-28T01:33:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f9d16aac640c9455198b258cca25a54c337323dbffb05154bde985b197485fc5/bgreenwell/doxx"
        ],
        "homepage": "https://bgreenwell.github.io/doxx/",
        "readme_summary": "doxx is a command-line tool written in Rust that allows users to view, search, and export `.docx` files directly in their terminal without requiring Microsoft Word. It supports features like formatted text, tables, lists, search highlighting, and export to various formats like Markdown, CSV, and plain text.",
        "key_features": [
            "Beautiful terminal rendering with formatting, tables, and lists",
            "Fast search with highlighting",
            "Smart tables with proper alignment and Unicode borders",
            "Copy to clipboard",
            "Export formats (Markdown, CSV, JSON, plain text, ANSI-colored output)",
            "Terminal images for Kitty, iTerm2, WezTerm",
            "Color support"
        ],
        "primary_use_case": "Viewing, searching, and exporting `.docx` documents from the command line.",
        "open_issues": 10,
        "cover_image_prompt": "A librarian stands amidst towering shelves of books, using a magnifying glass to examine a `.docx` file projected onto a screen. The screen displays formatted text, tables, and lists, showcasing the document's content. The librarian copies text snippets from the screen to a clipboard with a glowing cursor. Digital particles representing different export formats (Markdown, JSON, CSV) swirl around the librarian. The scene is set in a warmly lit, futuristic library with subtle UI elements on nearby screens. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1006267824,
        "name": "clip-vault",
        "description": null,
        "url": "https://github.com/densumesh/clip-vault",
        "language": "Rust",
        "stars": 97,
        "forks": 2,
        "created_at": "2025-06-21T21:44:53Z",
        "updated_at": "2025-10-01T10:00:52Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-07-18T07:07:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7d9a5ee4c8cea0453af24429d63ea6c6fa13df2bbcfe0a557ea83a5bf4a68c59/densumesh/clip-vault"
        ],
        "homepage": null,
        "readme_summary": "Clip Vault is a secure, cross-platform clipboard manager built with Rust and Tauri. It automatically captures and encrypts clipboard history, making it searchable and accessible across macOS, Windows, and Linux.",
        "key_features": [
            "End-to-end encryption using SQLCipher",
            "Cross-platform support (macOS, Windows, Linux)",
            "Fast search for clipboard items",
            "Global hotkeys for easy access"
        ],
        "primary_use_case": "Securely managing and accessing clipboard history across multiple platforms.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a blacksmith forging digital keys and locking them into a chest. The blacksmith's hammer glows with encryption symbols. The chest represents the Clip Vault, and the keys are clipboard entries. A UI element floats nearby, displaying a search bar and snippets of encrypted text. The scene is set in a futuristic workshop with soft, diffused lighting. Small code snippets and data visualizations are subtly integrated into the background. The composition is focused and clean, with a blue and silver color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1001684671,
        "name": "RapidRAW",
        "description": "A beautiful, non-destructive, and GPU-accelerated RAW image editor built with performance in mind.",
        "url": "https://github.com/CyberTimon/RapidRAW",
        "language": "Rust",
        "stars": 3026,
        "forks": 82,
        "created_at": "2025-06-13T20:16:40Z",
        "updated_at": "2025-10-01T08:12:25Z",
        "topics": [
            "color-grading",
            "editing",
            "image-processing",
            "masks",
            "raw",
            "react",
            "rust",
            "tauri"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-30T16:10:06Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e6ceeeced8e099208ca57a0b78f1bf159118a576cc2366c5daa8788e085360e4/CyberTimon/RapidRAW"
        ],
        "homepage": "",
        "readme_summary": "RapidRAW is a GPU-accelerated RAW image editor designed for performance and a streamlined user experience. It offers non-destructive editing capabilities and aims to be a lightweight alternative to software like Adobe Lightroom, focusing on speed and ease of use for photographers.",
        "key_features": [
            "GPU-accelerated image processing",
            "Non-destructive editing",
            "RAW image support",
            "Color grading tools",
            "Masking capabilities",
            "Preset management",
            "Collage maker",
            "Automatic image culling",
            "Community preset sharing"
        ],
        "primary_use_case": "RAW image editing and color correction for photographers seeking a fast and intuitive workflow.",
        "open_issues": 62,
        "cover_image_prompt": "An artist stands before a digital easel, transforming a dull, unprocessed RAW image into a vibrant, polished photograph. The artist uses a glowing stylus to adjust colors and details, with the RAW image on one side of the easel and the enhanced image on the other. Small UI elements and adjustment sliders float around the scene. The easel is powered by a GPU core, subtly glowing with energy. The scene is set in a modern, minimalist studio with soft, diffused lighting. The composition is clean and focused, with a balanced color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]