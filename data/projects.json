[
    {
        "id": 1052645535,
        "name": "gacua",
        "description": "The World's First Out-of-the-Box Computer Use Agent Powered by Gemini-CLI @openmule",
        "url": "https://github.com/openmule/gacua",
        "language": "TypeScript",
        "stars": 53,
        "forks": 6,
        "created_at": "2025-09-08T10:52:49Z",
        "updated_at": "2025-09-16T08:22:59Z",
        "topics": [
            "agent",
            "ai",
            "computer-use",
            "gacua"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-12T03:28:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/564b7594dfa243f10b8efe693300021462ab3008b6f80cbeac6e3a5dfda30c64/openmule/gacua"
        ],
        "homepage": "https://blog.mulerun.com/p/gacua-a-free-and-open-source-computer-use-agent-for-developers/",
        "readme_summary": "GACUA (Gemini CLI as Computer Use Agent) is an out-of-the-box computer use agent powered by Gemini CLI. It allows users to automate computer tasks with step-by-step control and observability, enabling remote operation and high accuracy task execution through an \"Image Slicing + Two-Step Grounding\" method.",
        "key_features": [
            "Out-of-the-box computer use",
            "High accuracy task execution",
            "Step-by-step control & observability",
            "Remote operation"
        ],
        "primary_use_case": "Automating computer tasks such as gameplay assistance and software installation.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled puppeteer controlling a computer screen with strings, guiding digital hands that interact with various applications. The puppeteer sits in a brightly lit control room filled with monitors displaying different software interfaces. The strings glow with a soft, blue light, representing the agent's control over the computer. Small UI elements float around the scene, subtly connecting the metaphor to software. The repository name, 'GACUA,' is subtly displayed on one of the monitors. The composition is clean and focused with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1053061334,
        "name": "yapyap",
        "description": "fast and simple push to talk dictation",
        "url": "https://github.com/lxe/yapyap",
        "language": "Python",
        "stars": 19,
        "forks": 0,
        "created_at": "2025-09-09T00:02:10Z",
        "updated_at": "2025-09-16T08:41:37Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-09T02:20:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/36898d9bd76957a4f6023f5bb13b0acf38694ecafcb5e250bc510eb3c432097e/lxe/yapyap"
        ],
        "homepage": null,
        "readme_summary": "Yapyap is a push-to-talk dictation tool that transcribes audio to text using whisper.cpp and outputs the transcription to stdout. It's primarily designed for Linux and allows users to record audio by holding down a key combination, which is then transcribed and can be piped to other commands for further processing, such as copying to the clipboard and pasting.",
        "key_features": [
            "Push-to-talk dictation",
            "Transcription using whisper.cpp",
            "Output to stdout",
            "Customizable key combination",
            "Model selection for transcription",
            "Linux support (with TODO for Mac and Windows)"
        ],
        "primary_use_case": "Voice dictation and transcription for text input in Linux environments.",
        "open_issues": 0,
        "cover_image_prompt": "An ancient scribe in a dimly lit study, rapidly transcribing spoken words into a digital document on a holographic screen. The scribe holds a microphone-shaped quill, capturing the voice of a disembodied speaker represented by glowing sound waves. The transcribed text flows directly from the screen to a waiting cursor on a futuristic text editor. Small code snippets related to speech recognition subtly float in the background. The scene is rendered in a 3D isometric illustration style with warm, inviting colors and a focus on clarity and detail."
    },
    {
        "id": 1006184123,
        "name": "Windows-Use",
        "description": "üñ•Ô∏èOpen-source Computer-Use for Windows",
        "url": "https://github.com/CursorTouch/Windows-Use",
        "language": "Python",
        "stars": 821,
        "forks": 93,
        "created_at": "2025-06-21T17:20:41Z",
        "updated_at": "2025-09-16T10:11:29Z",
        "topics": [
            "ai-agents",
            "browser-automation",
            "llm",
            "windows-automation",
            "windows-use"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-16T05:25:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/729e64ee7ce13b87de1e1ddfdbaebdc321e3e0a89316b45e025122da656e71fc/CursorTouch/Windows-Use"
        ],
        "homepage": "",
        "readme_summary": "Windows-Use is a Python-based automation agent that allows AI agents to interact directly with the Windows GUI layer. It enables tasks like opening applications, clicking buttons, typing, and executing shell commands without relying on traditional computer vision models, making it suitable for LLMs to perform computer automation.",
        "key_features": [
            "Windows GUI automation",
            "AI agent integration",
            "Task automation (opening apps, clicking buttons, typing)",
            "Shell command execution",
            "UI state capture",
            "LLM integration"
        ],
        "primary_use_case": "Automating Windows tasks using AI agents and LLMs.",
        "open_issues": 5,
        "cover_image_prompt": "A skilled puppeteer controlling a giant Windows desktop environment with strings attached to various application windows and UI elements. The puppeteer is an AI agent represented by a glowing brain-shaped interface. The desktop displays common applications like a browser, text editor, and command prompt, all responding to the puppeteer's commands. Subtle code snippets and data visualizations float around the scene, connecting the metaphor to software. The scene is set in a futuristic control room with dramatic lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1047458606,
        "name": "omarchist",
        "description": "A GUI app for Omarchy. ",
        "url": "https://github.com/tahayvr/omarchist",
        "language": "Rust",
        "stars": 286,
        "forks": 14,
        "created_at": "2025-08-30T13:18:31Z",
        "updated_at": "2025-09-16T07:35:55Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-09-14T10:18:58Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1047458606/2c9b9207-5928-4fb3-9baa-3117afce57ba"
        ],
        "homepage": null,
        "readme_summary": "Omarchist is a GUI application built with Tauri/Rust/Svelte for creating and editing themes for Omarchy. It provides a visual editor with color pickers and an intuitive interface to design, preview, and fine-tune themes, simplifying the customization process.",
        "key_features": [
            "Theme Designer: Visual editor for creating and editing Omarchy themes"
        ],
        "primary_use_case": "Visual creation and editing of Omarchy themes.",
        "open_issues": 2,
        "cover_image_prompt": "An artist in a brightly lit studio uses a digital palette to paint vibrant color schemes onto a minimalist cityscape model. The artist selects colors using a sophisticated color picker UI displayed on a large monitor. The cityscape changes in real-time to reflect the chosen colors. Small screens around the studio show code snippets and configuration files. The repository name, 'Omarchist,' is subtly displayed on the artist's tablet. The scene is set in a modern, airy studio with natural light. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 683332044,
        "name": "dbcls",
        "description": "DbCls is a powerful terminal database client that supports various databases",
        "url": "https://github.com/Sets88/dbcls",
        "language": "Python",
        "stars": 25,
        "forks": 2,
        "created_at": "2023-08-26T08:15:13Z",
        "updated_at": "2025-09-16T08:34:50Z",
        "topics": [
            "clickhouse",
            "clickhouse-client",
            "datagrip",
            "db",
            "dbeaver",
            "mysql",
            "postgres",
            "psql"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-07-30T06:29:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3e52af2389df39a85512695ca461a55fb5215ad41e37fd27157940296e308eeb/Sets88/dbcls"
        ],
        "homepage": "",
        "readme_summary": "DbCls is a terminal-based database client that combines SQL query editing with data visualization. It supports multiple database engines like MySQL, PostgreSQL, and ClickHouse, allowing users to execute queries, inspect table schemas, and visualize data using interactive tables.",
        "key_features": [
            "SQL query editing with syntax highlighting",
            "Direct query execution from the editor",
            "Data visualization with interactive tables",
            "Support for multiple database engines (MySQL, PostgreSQL, ClickHouse)",
            "Configuration via command line or config file",
            "Table schema inspection",
            "Database and table browsing",
            "Query history and file-based query storage"
        ],
        "primary_use_case": "Database management and data analysis through a terminal interface.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan sitting at a workbench, meticulously crafting a gemstone from rough data crystals. The artisan uses specialized tools to shape and polish the crystals, revealing intricate patterns and facets within. A holographic display shows SQL queries transforming into these beautiful data gems. The workbench is surrounded by shelves filled with different types of data crystals, each representing a database. The scene is set in a brightly lit workshop with a clean, organized aesthetic. Small UI elements show database connections and query results. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 52420005,
        "name": "griddb",
        "description": "GridDB is a next-generation open source database that makes time series IoT and big data fast,and easy.",
        "url": "https://github.com/griddb/griddb",
        "language": "C++",
        "stars": 2449,
        "forks": 5038,
        "created_at": "2016-02-24T06:31:40Z",
        "updated_at": "2025-09-16T09:41:12Z",
        "topics": [
            "bigdata",
            "database",
            "fast",
            "griddb",
            "iot",
            "newsql",
            "nosql",
            "sql",
            "time-series",
            "timeseries"
        ],
        "quality_score": 0.7000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-06-16T02:29:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5fc99623c2cd4739f48df69e9d7288df7d010fa87bfe2a492c5fd2af67dfb9b5/griddb/griddb"
        ],
        "homepage": "https://griddb.org/",
        "readme_summary": "GridDB is a next-generation open-source database designed for time series, IoT, and big data applications. It offers both NoSQL and SQL interfaces, aiming for fast and easy data management. The repository includes server and Java client components, with additional JDBC driver support available in a separate repository.",
        "key_features": [
            "NoSQL interface",
            "SQL interface",
            "Time series data support",
            "IoT data management",
            "Big data processing",
            "Java client",
            "JDBC driver (separate repository)"
        ],
        "primary_use_case": "Storing, managing, and analyzing time series data from IoT devices and other big data sources with high performance and flexibility through NoSQL and SQL interfaces.",
        "open_issues": 43,
        "cover_image_prompt": "A clockmaker meticulously crafting a giant clockwork heart that pulses with streams of data flowing in and out. The heart represents the GridDB database, efficiently managing the flow of time-series data. Tiny robots representing IoT devices feed data streams into the heart, while analysts extract insights via SQL interfaces displayed on holographic screens nearby. Subtle digital elements like glowing data particles and code snippets enhance the scene. The composition is clean and focused, with a blue and green color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 459739627,
        "name": "Replibyte",
        "description": "Seed your development database with real data ‚ö°Ô∏è",
        "url": "https://github.com/Qovery/Replibyte",
        "language": "Rust",
        "stars": 4305,
        "forks": 134,
        "created_at": "2022-02-15T20:31:25Z",
        "updated_at": "2025-09-16T09:27:22Z",
        "topics": [
            "aws",
            "backup",
            "cloud",
            "cloudnative",
            "database",
            "mongodb",
            "mysql",
            "postgres",
            "postgresql",
            "rust",
            "rust-lang",
            "s3"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-05-04T05:42:24Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/459739627/6d24316e-c920-4073-9668-cb89e0802a7a"
        ],
        "homepage": "https://www.replibyte.com",
        "readme_summary": "Replibyte is a tool designed to seed development databases with production data while ensuring sensitive information is protected. It supports data dumping and restoration for PostgreSQL, MySQL, and MongoDB, and includes features for data subsetting, on-the-fly compression/encryption, and custom data transformations.",
        "key_features": [
            "Support data dump and restore for PostgreSQL, MySQL and MongoDB",
            "Analyze your data schema",
            "Replace sensitive data with fake data",
            "Works on large database (> 10GB)",
            "Database Subsetting",
            "Start a local database with the production data in a single command",
            "On-the-fly data (de)compression (Zlib)",
            "On-the-fly data de/encryption (AES-256)",
            "Fully stateless and lightweight binary",
            "Use custom transformers"
        ],
        "primary_use_case": "Seeding development databases with anonymized production data.",
        "open_issues": 104,
        "cover_image_prompt": "A gardener carefully transplanting fully grown trees (production data) into a miniature garden (development database). The gardener wears gloves that automatically blur out certain parts of the trees (sensitive data). Small screens display database schemas and transformation rules. The scene is set in a bright, airy greenhouse with a subtle digital overlay. The repository name, 'Replibyte', is subtly etched into a garden tool. The composition is clean and focused, with a pastel color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]