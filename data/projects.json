[
    {
        "id": 1049730948,
        "name": "richpixelvid",
        "description": "Play videos in your terminal using rich-pixel",
        "url": "https://github.com/pj4533/richpixelvid",
        "language": "Python",
        "stars": 3,
        "forks": 0,
        "created_at": "2025-09-03T12:16:07Z",
        "updated_at": "2025-09-06T07:01:57Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-03T12:16:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e3204131aecc3c0f920b6a68d932ae57238bae19b8465abfd2b4de94f005a6a4/pj4533/richpixelvid"
        ],
        "homepage": null,
        "readme_summary": "The Rich-Pixel Video Player is a Python-based tool that allows users to play videos in their terminal using Unicode half-block characters, creating a retro-style visual experience. It supports various video formats and offers options for controlling frame rate, looping, and video dimensions within the terminal.",
        "key_features": [
            "Automatic terminal size detection and video scaling",
            "Configurable frame rate",
            "Memory-efficient streaming",
            "Support for various video formats (mp4, avi, mov, mkv, etc.)",
            "Loop playback option",
            "Graceful interrupt handling (Ctrl+C)"
        ],
        "primary_use_case": "Playing videos in the terminal with a retro, pixelated aesthetic.",
        "open_issues": 0,
        "cover_image_prompt": "An old-fashioned film projector casting a beam of light onto a terminal screen, displaying a pixelated video of a bustling city street. The projector is powered by glowing code snippets and digital circuits. The terminal screen is made of individual Unicode half-block characters that form the video. Small UI elements float around the scene, showing frame rate controls and video settings. The scene is set in a dimly lit, vintage theater with a modern twist. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1047498571,
        "name": "localports",
        "description": "List network ports with their associated binaries",
        "url": "https://github.com/diegoholiveira/localports",
        "language": "Rust",
        "stars": 35,
        "forks": 1,
        "created_at": "2025-08-30T14:59:42Z",
        "updated_at": "2025-09-06T07:30:19Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-30T16:06:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0abce8ed6c19b3eff52592193df31abdbe9fa6fa710fe7b79428b4ed9b1b5a82/diegoholiveira/localports"
        ],
        "homepage": null,
        "readme_summary": "The `localports` repository provides a command-line tool written in Rust that lists network ports and their associated binaries. It helps developers quickly identify which processes are using specific ports, filtering out system processes to focus on developer-relevant applications.",
        "key_features": [
            "Lists all listening network ports",
            "Shows the binary path for each port",
            "Filters out system processes",
            "Clean table output with port, PID, and binary information"
        ],
        "primary_use_case": "Quickly identify which processes are listening on specific network ports.",
        "open_issues": 0,
        "cover_image_prompt": "A detective with a magnifying glass examines a city map where each building represents a network port. The detective is tracing connections between the buildings and small, glowing figures representing processes. The magnifying glass highlights the port number and the associated process's icon. A subtle UI overlay shows a table with port, PID, and binary information. The scene is set in a dimly lit, futuristic office with holographic displays. The image should be in a 3D isometric illustration style with clear details and a cool color scheme, emphasizing clarity and investigation."
    },
    {
        "id": 1033896376,
        "name": "dinov3",
        "description": "Reference PyTorch implementation and models for DINOv3",
        "url": "https://github.com/facebookresearch/dinov3",
        "language": "Jupyter Notebook",
        "stars": 6565,
        "forks": 352,
        "created_at": "2025-08-07T14:11:34Z",
        "updated_at": "2025-09-06T09:44:03Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-04T07:18:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ecdc604b47309e116baac9965b2ea6cf5ca101139751d765e28f1a14266e5ed7/facebookresearch/dinov3"
        ],
        "homepage": "",
        "readme_summary": "The DINOv3 repository provides a PyTorch implementation of the DINOv3 self-supervised vision model. It offers pretrained models and code for generating high-quality dense image features, enabling strong performance on various vision tasks without fine-tuning. The models are available on Hugging Face Hub and supported by the Transformers library.",
        "key_features": [
            "PyTorch implementation of DINOv3",
            "Pretrained ViT models (ViT-S, ViT-S+, ViT-B, ViT-L, ViT-H+)",
            "High-resolution dense features",
            "Self-supervised learning",
            "Availability on Hugging Face Hub",
            "Support by Transformers library"
        ],
        "primary_use_case": "Generating high-quality dense image features for various vision tasks using self-supervised learning.",
        "open_issues": 58,
        "cover_image_prompt": "A skilled cartographer meticulously crafting a detailed map of a vast, uncharted territory using advanced surveying tools. The cartographer uses a special lens to analyze the terrain, revealing hidden patterns and intricate details that glow with digital light. The map transforms into a vibrant, high-resolution image filled with rich information. Small UI elements display the DINOv3 logo and data processing metrics. The scene is set in a futuristic cartography lab with soft, ambient lighting. The composition is focused and clear, emphasizing the transformation of raw data into a comprehensive visual representation. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1032808806,
        "name": "strix",
        "description": "‚ú® Open-source AI hackers for your apps üë®üèª‚Äçüíª ",
        "url": "https://github.com/usestrix/strix",
        "language": "Python",
        "stars": 600,
        "forks": 56,
        "created_at": "2025-08-05T21:28:30Z",
        "updated_at": "2025-09-06T09:30:57Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-01T03:50:04Z",
        "media_urls": [
            "https://opengraph.githubassets.com/136038945d4c11e911cf3ab2d7b5dd32c4f9408180d21729bcc732c09724403d/usestrix/strix"
        ],
        "homepage": "https://usestrix.com/",
        "readme_summary": "Strix is an open-source AI-powered security tool that acts as an autonomous hacker to find vulnerabilities in applications. It uses dynamic testing and exploitation to validate vulnerabilities, aiming to provide accurate security testing with fewer false positives than static analysis tools.",
        "key_features": [
            "Agentic Security Tools (HTTP Proxy, Browser Automation, Terminal Environments, Python Runtime, Reconnaissance, Code Analysis, Knowledge Management)",
            "Comprehensive Vulnerability Detection (Access Control, Injection Attacks, Server-Side, Client-Side, Business Logic, Authentication, Infrastructure)",
            "Graph of Agents (Distributed Workflows, Scalable Testing, Dynamic Coordination)"
        ],
        "primary_use_case": "Automated security testing and vulnerability detection in applications, including web applications, codebases, and repositories.",
        "open_issues": 3,
        "cover_image_prompt": "A team of AI agents, depicted as futuristic hackers with glowing interfaces, meticulously examining the blueprints of a digital fortress. One agent uses a magnifying glass to identify weak points, while another tests the walls with simulated attacks. Data streams flow around them, highlighting vulnerabilities and security metrics. Small screens display code snippets and security reports. The scene is set in a high-tech security operations center with blue and green lighting. The image should be in 3D isometric illustration style with sharp details and vibrant colors."
    },
    {
        "id": 29600789,
        "name": "emoji-translate",
        "description": ":books: Translate text to ‚ú®emoji ‚ú®!",
        "url": "https://github.com/notwaldorf/emoji-translate",
        "language": "JavaScript",
        "stars": 1652,
        "forks": 160,
        "created_at": "2015-01-21T17:06:30Z",
        "updated_at": "2025-09-06T08:01:41Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2018-02-13T15:53:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6c95950b75cbadbabb42f703e61b5a934a1bf19899d0071dcbe4fc9688827110/notwaldorf/emoji-translate"
        ],
        "homepage": "http://meowni.ca/emoji-translate/",
        "readme_summary": "The `emoji-translate` repository provides a JavaScript library and a Chrome extension that translates text into emoji. It allows users to convert English text into strings of emoji, either for standalone use or within a browser environment.",
        "key_features": [
            "Translation of text to emoji",
            "Standalone library usage via npm",
            "Chrome extension for translating web pages",
            "API with methods for emoji translation and display"
        ],
        "primary_use_case": "Translating text into emoji for communication and display purposes.",
        "open_issues": 5,
        "cover_image_prompt": "A friendly robot meticulously replacing words in a children's book with corresponding emoji stickers. The book lies open on a workbench amidst colorful emoji sheets and digital displays showing code snippets related to emoji translation. The robot uses a precision tool to carefully apply each emoji. Soft, playful lighting illuminates the scene, creating a whimsical and engaging atmosphere. Small UI elements on the workbench subtly display the repository name. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details."
    }
]