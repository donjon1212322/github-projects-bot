[
    {
        "id": 247350713,
        "name": "neko",
        "description": "A self hosted virtual browser that runs in docker and uses WebRTC.",
        "url": "https://github.com/m1k1o/neko",
        "language": "Go",
        "stars": 11535,
        "forks": 769,
        "created_at": "2020-03-14T20:46:07Z",
        "updated_at": "2025-07-01T10:08:10Z",
        "topics": [
            "docker",
            "golang",
            "media-streaming",
            "remote-control",
            "remote-desktop",
            "self-hosted",
            "virtual-browser",
            "vue",
            "webrtc"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-17T08:05:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d2a6f2a3854864a0741c904e781ec95316cb79733eaf4445ec1a6d7389f91f96/m1k1o/neko"
        ],
        "homepage": "https://neko.m1k1o.net/",
        "readme_summary": "Neko is a self-hosted virtual browser that runs in Docker and uses WebRTC for streaming. It provides a secure and private browsing environment accessible from anywhere, with support for multiple users and use cases like collaborative browsing and hosting watch parties. It allows users to run a fully functional browser in an isolated environment.",
        "key_features": [
            "Self-hosted virtual browser",
            "Docker containerization",
            "WebRTC streaming",
            "Secure and private browsing",
            "Multi-user access",
            "Remote control",
            "Media streaming",
            "Watch party hosting"
        ],
        "primary_use_case": "Secure and private remote browsing, collaborative browser access, and hosting watch parties.",
        "open_issues": 122,
        "cover_image_prompt": "Imagine a lighthouse, its beam a virtual browser window, projecting onto a stormy sea of fragmented screens representing different devices. Inside the lighthouse, friends gather, watching anime together on the projected browser window, safe from the chaotic digital sea. Subtle code snippets float as particles in the air, powering the lighthouse's beam. The lighthouse is built on a Docker container, subtly labeled 'Neko'. The scene is set at twilight, with a warm, inviting glow emanating from the lighthouse. The image should be in a digital painting style with clear outlines and a focus on conveying a sense of shared experience and secure access."
    },
    {
        "id": 426848256,
        "name": "quadratic",
        "description": "Spreadsheet with AI, Code, Connections",
        "url": "https://github.com/quadratichq/quadratic",
        "language": "Rust",
        "stars": 3736,
        "forks": 236,
        "created_at": "2021-11-11T02:41:07Z",
        "updated_at": "2025-07-01T08:27:58Z",
        "topics": [
            "ai",
            "data",
            "data-analysis",
            "data-engineering",
            "data-science",
            "etl",
            "python",
            "quadratic",
            "spreadsheet",
            "sql",
            "wasm",
            "webgl"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-28T01:22:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d4679c7c9bf98aca73758d9430b51af8f926fbed9d6d6523f3215f067835b2ce/quadratichq/quadratic"
        ],
        "homepage": "https://QuadraticHQ.com",
        "readme_summary": "Quadratic is a spreadsheet application that integrates AI capabilities, code execution, and real-time collaboration. It aims to provide a powerful environment for data analysis, engineering, and general spreadsheet tasks, leveraging technologies like WebAssembly for performance and offering connections to various data sources.",
        "key_features": [
            "AI integration",
            "Code execution within spreadsheets",
            "Real-time collaboration",
            "Data connectivity (SQL, ETL)",
            "WebAssembly (WASM) based"
        ],
        "primary_use_case": "Spreadsheet application enhanced with AI, code execution, and collaborative features for data analysis and engineering.",
        "open_issues": 264,
        "cover_image_prompt": "Imagine an architect at a drafting table, using AI tools to design a complex building blueprint. The blueprint starts as a simple sketch but transforms into a detailed, multi-layered plan with interactive elements and data visualizations. The architect seamlessly integrates code snippets and data streams into the design, collaborating with other architects via connected screens. The scene is set in a bright, modern studio with subtle digital interfaces displaying spreadsheet data and AI-assisted design suggestions. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity and functionality."
    },
    {
        "id": 821360765,
        "name": "latitude-llm",
        "description": "Latitude is the open-source prompt engineering platform to build, evaluate, and refine your prompts with AI",
        "url": "https://github.com/latitude-dev/latitude-llm",
        "language": "TypeScript",
        "stars": 2916,
        "forks": 186,
        "created_at": "2024-06-28T11:16:02Z",
        "updated_at": "2025-07-01T09:28:34Z",
        "topics": [],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-01T09:10:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/29e8f386ea6bced46d967461460a39a73489397b18eea018bcca74a908f27a0b/latitude-dev/latitude-llm"
        ],
        "homepage": "https://latitude.so",
        "readme_summary": "Latitude is an open-source platform designed for AI prompt engineering. It provides tools for building, testing, deploying, and evaluating prompts, enabling teams to collaboratively design and version prompts, test iterations, deploy prompts as API endpoints, monitor performance, and systematically improve prompts.",
        "key_features": [
            "Prompt Manager with PromptL language support",
            "Interactive Playground for prompt testing",
            "AI Gateway for prompt deployment as API endpoints",
            "Evaluations using LLM-as-judge, programmatic rules, or human review",
            "Logs & Observability for prompt interactions",
            "Datasets for batch evaluations and regression testing",
            "Integrations via SDKs and APIs"
        ],
        "primary_use_case": "AI prompt engineering, deployment, and evaluation.",
        "open_issues": 100,
        "cover_image_prompt": "A skilled architect meticulously crafting a blueprint for a towering skyscraper of code, each floor representing a different prompt version. The architect uses advanced tools to test and refine the blueprint, ensuring the building's stability and efficiency. Holographic displays show real-time performance metrics and evaluation results. The scene is set in a bright, modern design studio with a clean, focused composition. Small UI elements and code snippets are subtly integrated into the design. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 812467608,
        "name": "radashi",
        "description": "The modern, community-first TypeScript toolkit with all of the fast, readable, and minimal utility functions you need. Type-safe, dependency-free, tree-shakeable, fully tested.",
        "url": "https://github.com/radashi-org/radashi",
        "language": "TypeScript",
        "stars": 598,
        "forks": 41,
        "created_at": "2024-06-09T01:23:51Z",
        "updated_at": "2025-07-01T04:21:55Z",
        "topics": [
            "functions",
            "typescript",
            "utility-library"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-06-27T02:32:46Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/812467608/9f8908f6-e6cb-41c3-a1ac-0fd64abb38e6"
        ],
        "homepage": "https://radashi.js.org",
        "readme_summary": "Radashi is a modern TypeScript utility library designed to replace larger alternatives like Lodash. It offers a collection of type-safe, dependency-free, and tree-shakeable functions, focusing on performance and readability. Radashi aims to be community-driven and actively maintained, providing developers with essential utility functions for their TypeScript projects.",
        "key_features": [
            "Type-safe",
            "Dependency-free",
            "Tree-shakeable",
            "Fully tested",
            "Community-first",
            "Actively maintained",
            "Performance tracking",
            "Well-documented",
            "Nightly releases"
        ],
        "primary_use_case": "Providing a modern TypeScript utility toolkit with fast, readable, and minimal functions.",
        "open_issues": 14,
        "cover_image_prompt": "A skilled artisan meticulously crafting intricate clockwork gears from raw TypeScript code, each gear representing a utility function. The gears interlock seamlessly, powering a miniature, efficient machine. Digital particles flow around the gears, highlighting their type-safe nature. A blueprint subtly displays the Radashi logo. The scene is set in a clean, well-lit workshop with a focus on precision and craftsmanship. The illustration should be in a 3D isometric style with vibrant colors and sharp details."
    },
    {
        "id": 105757332,
        "name": "art",
        "description": "ðŸŽ¨ ASCII art library for Python",
        "url": "https://github.com/sepandhaghighi/art",
        "language": "Python",
        "stars": 2305,
        "forks": 148,
        "created_at": "2017-10-04T10:45:44Z",
        "updated_at": "2025-07-01T06:25:02Z",
        "topics": [
            "art",
            "ascii",
            "ascii-art",
            "ascii-art-library",
            "ascii-text",
            "easy",
            "easy-to-use",
            "figlet",
            "fonts",
            "fun",
            "library",
            "pip",
            "pypi-packages",
            "python",
            "python-lib",
            "python-library",
            "python3",
            "status",
            "text",
            "twitter"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-04-12T05:59:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/105757332/fc758200-add9-11eb-802d-668e04e31ce3"
        ],
        "homepage": "https://www.ascii-art.site",
        "readme_summary": "The 'art' library is a Python package designed for converting text into ASCII art. It provides a variety of fonts and pre-made art pieces, allowing users to easily generate fancy and decorative text-based visuals. The library aims to be an easy-to-use tool for adding artistic flair to text-based applications.",
        "key_features": [
            "Text to ASCII art conversion",
            "Support for various fonts",
            "Collection of pre-made ASCII art",
            "Decoration capabilities"
        ],
        "primary_use_case": "Converting text into visually appealing ASCII art.",
        "open_issues": 10,
        "cover_image_prompt": "A skilled calligrapher, surrounded by an array of ornate fonts and digital screens, meticulously crafts ASCII art from plain text. The calligrapher uses a specialized stylus that transforms letters into intricate patterns on a digital canvas, showcasing a variety of artistic styles. The scene is set in a modern studio filled with glowing monitors displaying code snippets and font lists. Digital particles flow from the stylus, forming the ASCII art in mid-air. The composition is clean and focused, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]