[
    {
        "id": 515647260,
        "name": "1Panel",
        "description": "ðŸ”¥ 1Panel provides an intuitive web interface and MCP Server to manage websites, files, containers, databases, and LLMs on a Linux server.",
        "url": "https://github.com/1Panel-dev/1Panel",
        "language": "Go",
        "stars": 29675,
        "forks": 2586,
        "created_at": "2022-07-19T15:44:52Z",
        "updated_at": "2025-07-13T09:09:17Z",
        "topics": [
            "1panel",
            "cockpit",
            "docker",
            "docker-ui",
            "lamp",
            "linux",
            "lnmp",
            "ollama",
            "webmin"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-11T09:35:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3ab527ae970fd10f283d2bc133d095a0d14ae7ae288659980374f4c1c7ba1c44/1Panel-dev/1Panel"
        ],
        "homepage": "https://1panel.pro",
        "readme_summary": "1Panel is a web-based Linux server management tool that provides an intuitive interface for managing websites, files, containers, and databases. It simplifies website deployment and offers an application store for easy installation and updates, while also emphasizing security and reliability through containerization.",
        "key_features": [
            "Web-based Linux server management",
            "Website deployment",
            "Application store",
            "Security and reliability"
        ],
        "primary_use_case": "Linux server management through a web interface.",
        "open_issues": 591,
        "cover_image_prompt": "Imagine a skilled gardener managing a thriving digital garden. The gardener, representing 1Panel, uses a tablet interface to oversee various plants (websites, databases, containers) growing in neatly organized plots. Some plants are blossoming with vibrant colors, while others are securely contained within glass jars. The gardener effortlessly adjusts settings on the tablet, causing digital particles to flow and nourish the plants. A small screen in the background displays server metrics. The scene is bathed in warm, inviting light, creating a sense of calm and control. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 113111650,
        "name": "detect-secrets",
        "description": "An enterprise friendly way of detecting and preventing secrets in code.",
        "url": "https://github.com/Yelp/detect-secrets",
        "language": "Python",
        "stars": 4159,
        "forks": 510,
        "created_at": "2017-12-05T00:38:38Z",
        "updated_at": "2025-07-13T08:06:09Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-01-06T20:58:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/894eaeb172afc0daf41fc3823812741fd95c94286046106443247e5e860135b0/Yelp/detect-secrets"
        ],
        "homepage": "",
        "readme_summary": "detect-secrets is a tool designed for enterprise environments to detect and prevent secrets in code. It focuses on preventing new secrets from being committed, detecting bypasses, and providing a checklist for managing existing secrets. It achieves this by scanning diff outputs against regex statements, avoiding the need to scan the entire repository history.",
        "key_features": [
            "Detecting secrets within a code base",
            "Preventing new secrets from entering the code base",
            "Detecting bypassed preventions",
            "Providing a checklist of secrets to roll and migrate"
        ],
        "primary_use_case": "Detecting and preventing secrets in code, particularly in enterprise environments, by scanning for newly committed secrets and providing a baseline for existing ones.",
        "open_issues": 83,
        "cover_image_prompt": "A detective, with a magnifying glass, meticulously examining lines of code displayed on a holographic screen. The code contains highlighted secrets, which the detective is identifying and flagging. Behind the detective, a vault door is closing, symbolizing the prevention of secrets entering the codebase. Small UI elements on the screen show scanning logs and security metrics. The scene is set in a futuristic office with cool lighting. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 188247623,
        "name": "dockle",
        "description": "Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start",
        "url": "https://github.com/goodwithtech/dockle",
        "language": "Go",
        "stars": 2959,
        "forks": 145,
        "created_at": "2019-05-23T14:14:05Z",
        "updated_at": "2025-07-13T09:59:46Z",
        "topics": [
            "containers",
            "docker",
            "go",
            "golang",
            "kubernetes",
            "linter",
            "security",
            "security-audit",
            "security-tools",
            "vulnerability"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-01-06T06:53:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2c764b3ce7efce6d827ac8806316fb8b14cf30fa916d8152fc56935efafaee77/goodwithtech/dockle"
        ],
        "homepage": "https://containers.goodwith.tech/",
        "readme_summary": "Dockle is a container image linter focused on security and best practices. It helps developers build secure and compliant Docker images by identifying potential vulnerabilities and ensuring adherence to CIS Benchmarks. Dockle is designed for easy integration into CI/CD pipelines, enabling automated security audits.",
        "key_features": [
            "Detect container vulnerabilities",
            "Helps build best-practice Dockerfiles",
            "Simple usage",
            "CIS Benchmarks support",
            "Suitable for CI/CD pipelines"
        ],
        "primary_use_case": "Security auditing and linting of container images to ensure they adhere to best practices and security benchmarks.",
        "open_issues": 32,
        "cover_image_prompt": "Imagine a meticulous architect reviewing blueprints of a towering skyscraper, ensuring every detail adheres to the highest safety standards. The architect uses a special lens that highlights potential vulnerabilities in the structure, marking them for immediate correction. Digital blueprints overlay the physical plans, subtly displaying code snippets and security protocols. The scene is set in a bright, modern design studio with a focus on precision and security. The image should be in a clean, technical illustration style with labeled parts and a blue and green color scheme, emphasizing security and best practices."
    }
]