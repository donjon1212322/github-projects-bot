[
    {
        "id": 1025842535,
        "name": "vistadream",
        "description": null,
        "url": "https://github.com/rerun-io/vistadream",
        "language": "Jupyter Notebook",
        "stars": 29,
        "forks": 0,
        "created_at": "2025-07-24T22:35:19Z",
        "updated_at": "2025-08-11T07:16:58Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T22:09:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b3357fc4ac6763742ea327165857ae5598923345989907ac8b5eb891114d2740/rerun-io/vistadream"
        ],
        "homepage": null,
        "readme_summary": "VistaDream is a framework for reconstructing 3D scenes from single images. It leverages Flux diffusion models for image outpainting and inpainting, 3D Gaussian Splatting for efficient scene representation, and Rerun for real-time visualization. The framework uses a two-stage pipeline involving coarse 3D scaffold construction and multi-view consistency sampling to generate high-quality novel views.",
        "key_features": [
            "Reconstructs 3D scenes from single-view images.",
            "Uses Flux-based diffusion models for image outpainting and inpainting.",
            "Employs 3D Gaussian Splatting for efficient 3D scene representation.",
            "Integrates Rerun for real-time 3D visualization and debugging.",
            "Utilizes Multi-view Consistency Sampling (MCS) for high-quality novel view generation."
        ],
        "primary_use_case": "3D scene reconstruction from single images",
        "open_issues": 0,
        "cover_image_prompt": "A skilled architect meticulously crafting a miniature 3D cityscape from a single blueprint. The architect uses a magical brush that paints depth and perspective onto the flat blueprint, transforming it into a vibrant, multi-faceted model. The cityscape glows with soft, diffused light, showcasing intricate details and realistic textures. Subtle UI elements float around the architect, displaying code snippets and rendering parameters. The scene is set in a bright, airy studio with a focus on the transformation process. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1029649031,
        "name": "skynet",
        "description": "Skynet is a lightweight command line interface for LLMs to control real robots and drones with MCP using Bash.",
        "url": "https://github.com/hybridgroup/skynet",
        "language": "Shell",
        "stars": 20,
        "forks": 1,
        "created_at": "2025-07-31T11:07:10Z",
        "updated_at": "2025-08-11T04:40:00Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-05T14:20:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c696e947217b536d3eefba399c9a7f736b09a8dc5f9e785d8795a1b292ca59ff/hybridgroup/skynet"
        ],
        "homepage": "",
        "readme_summary": "Skynet is a command-line tool that allows LLMs to control robots and drones using Bash and the Model Context Protocol (MCP). It facilitates multi-step interactions with models like Qwen 2.5 and can be run locally or with remote services like Docker Model Runner, enabling AI-driven control of physical devices.",
        "key_features": [
            "Command-line interface for LLMs to control robots and drones",
            "Written in Bash using Osprey",
            "Supports multi-step interactions with models like Qwen 2.5",
            "Uses MCP (Model Context Protocol) for communication with robots",
            "Can run locally or with remote services (Docker Model Runner)"
        ],
        "primary_use_case": "Controlling real-world robots and drones using Large Language Models (LLMs) through a command-line interface.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled puppeteer, representing Skynet, manipulates strings attached to a miniature drone and a robot, showcasing control over physical devices. The puppeteer stands before a large language model interface, visualized as a glowing brain, receiving instructions. The background features subtle code snippets and data visualizations, connecting the metaphor to software. The scene is set in a futuristic workshop with warm lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors, emphasizing the seamless integration of AI and robotics."
    },
    {
        "id": 1027643050,
        "name": "ScreenCoder",
        "description": "ScreenCoder â€” Turn any UI screenshot into clean, editable HTML/CSS with full control. Fast, accurate, and easy to customize.",
        "url": "https://github.com/leigest519/ScreenCoder",
        "language": "Python",
        "stars": 979,
        "forks": 67,
        "created_at": "2025-07-28T10:10:58Z",
        "updated_at": "2025-08-11T09:14:04Z",
        "topics": [],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-07-31T07:01:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3a1eb5b3cedeb272316c0dab77e87df5d82f4adcfdc674616c8ab399ba1c1d64/leigest519/ScreenCoder"
        ],
        "homepage": "",
        "readme_summary": "ScreenCoder is an intelligent UI-to-code generation system that converts screenshots into clean, editable HTML/CSS. It employs a modular multi-agent architecture, combining visual understanding and adaptive code synthesis. The system supports customized modifications, bridging the gap between design and development for rapid prototyping and pixel-perfect interfaces.",
        "key_features": [
            "UI-to-code generation",
            "Modular multi-agent architecture",
            "Customizable modifications",
            "Visual understanding",
            "Layout planning",
            "Adaptive code synthesis"
        ],
        "primary_use_case": "Transforming UI screenshots or design mockups into clean, production-ready HTML/CSS code.",
        "open_issues": 1,
        "cover_image_prompt": "An architect meticulously crafting a digital blueprint on a transparent screen, transforming a hand-drawn sketch into a fully realized HTML/CSS structure. The architect uses advanced tools that convert visual elements into clean code, displayed as glowing lines and interactive components. The scene is set in a bright, modern studio with UI elements floating around, subtly incorporating the 'ScreenCoder' logo. The composition is clean and focused, with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors, emphasizing precision and creativity."
    },
    {
        "id": 26768643,
        "name": "docker-selenium",
        "description": "Provides a simple way to run Selenium Grid with Chrome, Firefox, and Edge using Container Platform, making it easier to perform browser automation at scale",
        "url": "https://github.com/SeleniumHQ/docker-selenium",
        "language": "Shell",
        "stars": 8450,
        "forks": 2563,
        "created_at": "2014-11-17T17:39:22Z",
        "updated_at": "2025-08-11T10:10:26Z",
        "topics": [
            "containerization",
            "devops",
            "distributed-systems",
            "docker",
            "docker-selenium-grid",
            "helm-chart",
            "keda",
            "kubernetes",
            "kubernetes-selenium-grid",
            "selenium",
            "selenium-grid",
            "selenium-grid-4",
            "selenium-grid-setup",
            "selenium-server",
            "tools-and-automation",
            "webdriver"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-08-10T18:09:33Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/26768643/2c0f35cf-146a-4c1d-9691-000d024455c1"
        ],
        "homepage": "http://www.selenium.dev/docker-selenium/",
        "readme_summary": "The docker-selenium repository provides Docker images for setting up a Selenium Grid, enabling scalable browser automation with Chrome, Firefox, and Edge. It simplifies the process of running Selenium tests in a containerized environment, offering support for Kubernetes deployments via a Helm chart and multi-architecture images. The repository also provides nightly, dev, and beta channel browser images for testing against different browser versions.",
        "key_features": [
            "Provides Docker images for Selenium Grid Server",
            "Supports Chrome, Firefox, and Edge browsers",
            "Enables browser automation at scale",
            "Offers Helm chart for Kubernetes deployment",
            "Provides multi-arch images (amd64/aarch64/armhf)",
            "Offers nightly, dev, and beta channel browser images"
        ],
        "primary_use_case": "Running Selenium Grid with Chrome, Firefox, and Edge using Docker containers for browser automation at scale.",
        "open_issues": 71,
        "cover_image_prompt": "Imagine a bustling city where automated browser robots, resembling friendly delivery bots, are navigating various websites displayed as colorful buildings. These robots, powered by a central Selenium Grid control tower, efficiently test website functionality, ensuring smooth operation for all users represented by miniature figures. The robots carry small packages labeled 'Tests' and deliver them to the appropriate website building. Subtle UI elements and code snippets are integrated into the building facades, connecting the scene to software. The illustration is in a vibrant, 3D isometric style with a focus on clarity and accessibility."
    },
    {
        "id": 867344664,
        "name": "dockerify-android",
        "description": "A Dockerized Android emulator supporting multiple CPU architectures (x86 and arm64) with native performance and seamless ADB & Scrcpy Web access.",
        "url": "https://github.com/Shmayro/dockerify-android",
        "language": "Dockerfile",
        "stars": 330,
        "forks": 28,
        "created_at": "2024-10-03T22:12:45Z",
        "updated_at": "2025-08-11T09:40:16Z",
        "topics": [
            "android",
            "android-emulator",
            "ci-pipline",
            "docker",
            "docker-android",
            "magisk",
            "root-android",
            "rooted-android",
            "scrcpy-android",
            "scrcpy-web"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T22:14:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e2f2b4bf9733835941e6d811afc222c9271279460e1be5947b2f048df57e951e/Shmayro/dockerify-android"
        ],
        "homepage": "",
        "readme_summary": "Dockerify Android provides a Dockerized Android emulator that supports multiple CPU architectures, offering native performance and seamless ADB & Web access. It enables developers to efficiently run Android virtual devices within Docker containers, facilitating scalable testing and development. Key features include a web interface, root access with Magisk, and support for ADB and scrcpy.",
        "key_features": [
            "Web Interface for emulator access",
            "Root and Magisk preinstalled",
            "PICO GAPPS preinstalled",
            "Seamless ADB Access",
            "scrcpy Support",
            "Optimized Performance",
            "Multi-Architecture Support (x86 and arm64)",
            "Docker Integration",
            "Easy Setup",
            "Supervisor Management",
            "Unified Container Logs"
        ],
        "primary_use_case": "Running Android emulators in Docker containers for scalable testing and development environments.",
        "open_issues": 4,
        "cover_image_prompt": "A skilled architect meticulously constructing a miniature city inside a clear, protective dome. The city represents an Android operating system, complete with tiny app icons and bustling digital activity. The architect uses a set of specialized tools, each representing different CPU architectures (x86 and arm64), to ensure the city runs smoothly and efficiently. A holographic screen displays ADB commands and Scrcpy web interface, showcasing seamless access. The scene is set in a bright, modern laboratory with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and clear details, subtly incorporating the 'Dockerify Android' logo."
    },
    {
        "id": 277661181,
        "name": "kool",
        "description": "From local development to the cloud: web apps development with containers made easy.",
        "url": "https://github.com/kool-dev/kool",
        "language": "Go",
        "stars": 701,
        "forks": 49,
        "created_at": "2020-07-06T22:25:04Z",
        "updated_at": "2025-08-11T08:36:25Z",
        "topics": [
            "cloud",
            "cloud-native",
            "containerization",
            "containers",
            "development-environment",
            "docker",
            "docker-compose",
            "golang",
            "kool",
            "kubernetes",
            "local-development"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-23T20:18:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ee879e877efebcab9626ff1b9a6d5af0b8c4a084945d7bf267825abd3ac0c710/kool-dev/kool"
        ],
        "homepage": "https://kool.dev",
        "readme_summary": "Kool is a CLI tool designed to streamline web application development using containers. It simplifies the complexities of Docker for local environments and offers a user-friendly interface for deploying to Kubernetes in the cloud. Kool provides presets for popular frameworks, making it suitable for both individual developers and teams looking to accelerate their development and deployment workflows.",
        "key_features": [
            "Simplifies Docker container usage for local development",
            "Provides a simplified interface for Kubernetes deployment to the cloud",
            "Offers pre-configured presets for popular frameworks and stacks",
            "Suitable for solo developers and teams of all sizes"
        ],
        "primary_use_case": "Simplifying web application development with containers, from local development to cloud deployment.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a skilled artisan in a workshop, effortlessly assembling intricate clockwork mechanisms representing web applications. The artisan uses a set of specialized tools (kool CLI) to quickly connect and configure various components (containers), streamlining the development process. Completed mechanisms smoothly transition onto a conveyor belt leading to a vibrant, cloud-filled sky. Subtle UI elements displaying container configurations and deployment scripts are visible on the artisan's workbench. The scene is bathed in warm, inviting light, conveying ease and efficiency. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    }
]