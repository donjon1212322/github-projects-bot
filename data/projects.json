[
    {
        "id": 969461377,
        "name": "TikTok-ReverseEngineering",
        "description": null,
        "url": "https://github.com/LukasOgunfeitimi/TikTok-ReverseEngineering",
        "language": "JavaScript",
        "stars": 511,
        "forks": 62,
        "created_at": "2025-04-20T07:41:24Z",
        "updated_at": "2025-04-23T09:34:31Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-20T23:59:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5916b9a714bcfdae1f5d1d893c59bbf11231df3adc454d76dfcb18f67e4b4b21/LukasOgunfeitimi/TikTok-ReverseEngineering"
        ],
        "homepage": null,
        "readme_summary": "This repository provides tools and techniques for reverse engineering TikTok's custom virtual machine (VM), specifically focusing on deobfuscating `webmssdk.js`, decompiling VM instructions, injecting scripts with the deobfuscated VM, and generating signed URLs. It aims to provide insights into TikTok's obfuscation and security layers by making the code more readable and understandable.",
        "key_features": [
            "Deobfuscation of webmssdk.js",
            "Decompilation of TikTok VM instructions",
            "Script injection with deobfuscated VM",
            "Signed URL generation"
        ],
        "primary_use_case": "Reverse engineering the TikTok Virtual Machine (VM) to understand its obfuscation and security mechanisms.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled archaeologist meticulously piecing together fragments of an ancient scroll within a brightly lit, futuristic laboratory. The scroll, representing obfuscated code, is gradually being deciphered, revealing clear, readable text. Holographic displays around the archaeologist show snippets of JavaScript code and deobfuscation processes. Subtle digital particles flow from the scroll, forming recognizable code structures. The scene is set against a backdrop of advanced technology, with the repository name subtly displayed on a monitor. The image should be in a detailed digital painting style with a focus on clarity and vibrant colors."
    },
    {
        "id": 967893951,
        "name": "dir2txt",
        "description": "A blazing-fast CLI tool to export a directory's structure and contents into a neatly formatted `.txt` or `.json` file.",
        "url": "https://github.com/shubhamoy/dir2txt",
        "language": "C++",
        "stars": 26,
        "forks": 1,
        "created_at": "2025-04-17T07:02:39Z",
        "updated_at": "2025-04-23T10:03:41Z",
        "topics": [
            "code-generation",
            "context",
            "cpp",
            "gpt",
            "llm",
            "rag"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-04-18T09:04:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d8f223fcd7cfb944d72977b77457503b793569e5dd8e9e37f99a10269314df5d/shubhamoy/dir2txt"
        ],
        "homepage": "",
        "readme_summary": "dir2txt is a blazing-fast CLI tool that exports a directory's structure and contents into a neatly formatted .txt or .json file. It's designed to prepare messy source directories into clean, structured input for language models, making it ideal for AI and LLM workflows like Retrieval-Augmented Generation (RAG) and code-aware copilots.",
        "key_features": [
            "Generates directory tree view",
            "Dumps file contents (optionally stripped of comments)",
            "Respects .gitignore, .dockerignore, and custom ignore files",
            "Smart binary file detection",
            "Outputs in text or structured JSON"
        ],
        "primary_use_case": "Structuring codebases for context ingestion in AI and LLM workflows, such as RAG, code-aware copilots, and other AI-powered tools.",
        "open_issues": 1,
        "cover_image_prompt": "A meticulous gardener tending to a sprawling digital garden, carefully pruning and shaping the chaotic growth of files and folders into a neatly organized topiary. The gardener uses special shears that transform the unruly branches into clean, readable text and structured JSON. Small UI elements float around the garden, showing directory trees and file contents. The scene is set in a vibrant, sunlit greenhouse with a futuristic aesthetic. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 957085330,
        "name": "physics-sims",
        "description": "Interesting physics-sims generated via LLM prompting.",
        "url": "https://github.com/gemsjohn/physics-sims",
        "language": "HTML",
        "stars": 237,
        "forks": 28,
        "created_at": "2025-03-29T14:20:00Z",
        "updated_at": "2025-04-23T08:40:29Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T16:05:59Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/957085330/35b82419-90fe-470c-baf1-fd342c031789"
        ],
        "homepage": "https://www.renderfiction.com/simulations",
        "readme_summary": "This repository provides a collection of interactive physics simulations, including demonstrations of Earth's magnetic field, electromagnetic solenoids, general relativity, and planetary orbits with Hohmann transfer. These simulations, generated via LLM prompting, are intended to visually illustrate complex physics concepts in an accessible manner.",
        "key_features": [
            "Earth's magnetic field simulation",
            "Electromagnetic solenoid simulation",
            "General relativity demonstration",
            "Planetary orbit simulation with Hohmann transfer"
        ],
        "primary_use_case": "Demonstrating physics concepts through interactive simulations.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a skilled celestial artisan meticulously crafting miniature planetary systems within a cosmic workshop. Using glowing tools, they carefully arrange planets around stars, demonstrating orbital mechanics and gravitational forces. One system showcases a Hohmann transfer orbit, illustrating launch windows. Subtle UI elements display code snippets and simulation parameters. The workshop is bathed in soft, ethereal light with a color scheme of deep blues and vibrant oranges. This conceptual illustration, rendered in a 3D isometric style with rich details, visually represents the physics simulations created by this repository."
    },
    {
        "id": 899983311,
        "name": "probly",
        "description": null,
        "url": "https://github.com/PragmaticMachineLearning/probly",
        "language": "TypeScript",
        "stars": 808,
        "forks": 44,
        "created_at": "2024-12-07T14:51:45Z",
        "updated_at": "2025-04-23T07:37:25Z",
        "topics": [
            "artificial-intelligence",
            "data-analysis",
            "llms",
            "spreadsheet"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-12T12:18:06Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ffe4e00444dc0b2ec6c4eeaf624be74225f0dab62f3e72d7ca39e414aec15ae/PragmaticMachineLearning/probly"
        ],
        "homepage": "https://probly-ai.readthedocs.io/en/latest/",
        "readme_summary": "Probly is a next-generation spreadsheet application that combines traditional spreadsheet functionality with AI-driven analysis and Python computation. It allows users to perform data analysis, create visualizations, and process documents, all within a privacy-focused, browser-based environment. The platform leverages technologies like Next.js, Pyodide, and the OpenAI API to provide a powerful and versatile data analysis tool.",
        "key_features": [
            "Smart Spreadsheet with formula support",
            "Python Integration using WebAssembly",
            "Data Visualization",
            "AI-Powered Analysis",
            "Document Processing",
            "Prompt Library"
        ],
        "primary_use_case": "Data analysis with spreadsheets, enhanced by AI and Python integration.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled cartographer meticulously charting a vast, ever-changing landscape of data on a giant, interactive spreadsheet. The cartographer uses AI-powered lenses to identify hidden patterns and Python-powered tools to carve out new insights. The spreadsheet is filled with glowing cells that represent data points, and the cartographer's quill emits sparks of analysis as they work. Small screens display code snippets and AI analysis results. The scene is set in a bright, airy workshop filled with maps and charts. The image should be in 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 535010087,
        "name": "arnis",
        "description": "Generate any location from the real world in Minecraft Java Edition with a high level of detail.",
        "url": "https://github.com/louis-e/arnis",
        "language": "Rust",
        "stars": 7077,
        "forks": 441,
        "created_at": "2022-09-10T13:42:29Z",
        "updated_at": "2025-04-23T08:58:33Z",
        "topics": [
            "maps",
            "minecraft",
            "openstreetmap",
            "osm",
            "overpass-api",
            "rust",
            "tauri"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T20:39:49Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/535010087/eb4bef9b-429b-424f-a274-2b61e121b743"
        ],
        "homepage": "",
        "readme_summary": "Arnis is a Rust-based tool that generates detailed Minecraft Java Edition worlds from real-world locations using OpenStreetMap data. It allows users to select an area and automatically processes geospatial data to create accurate representations of geography and architecture within Minecraft. The tool provides a GUI for ease of use and supports Minecraft versions 1.21.4 and above.",
        "key_features": [
            "Generates Minecraft Java Edition worlds from real-world locations.",
            "Uses OpenStreetMap data for accurate geography and architecture.",
            "Processes and sorts geospatial data to create detailed environments.",
            "Offers a GUI for easy area selection and world generation."
        ],
        "primary_use_case": "Generating realistic Minecraft worlds based on real-world locations for exploration, recreation, or unique building projects.",
        "open_issues": 98,
        "cover_image_prompt": "A skilled cartographer meticulously crafting a miniature Minecraft world from a detailed, glowing map spread across a large wooden table. The map, filled with intricate lines and symbols representing real-world geographical data, is being carefully translated into a block-by-block replica within the Minecraft world. Small UI elements float around the scene, displaying data processing visualizations and coordinate transformations. The scene is set in a warmly lit workshop filled with drafting tools and digital displays. The composition is focused and clear, with a vibrant color scheme emphasizing the transformation process. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 536802516,
        "name": "lan-mouse",
        "description": "mouse & keyboard sharing via LAN",
        "url": "https://github.com/feschber/lan-mouse",
        "language": "Rust",
        "stars": 3062,
        "forks": 106,
        "created_at": "2022-09-15T00:15:20Z",
        "updated_at": "2025-04-23T07:29:00Z",
        "topics": [
            "gplv3",
            "gtk4-rs",
            "hyprland",
            "keyboard-emulation",
            "kvm-switch",
            "lan",
            "libadwaita",
            "linux",
            "macos",
            "mouse-emulation",
            "open-source",
            "rust",
            "tcp",
            "udp",
            "wayland",
            "wayland-client",
            "windows",
            "wlroots"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T00:39:49Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/536802516/e428ece5-71e2-44f6-8194-c8f2b3466c2e"
        ],
        "homepage": "",
        "readme_summary": "Lan Mouse is a cross-platform software KVM switch that allows users to control multiple computers with a single mouse and keyboard over a LAN. It focuses on performance, ease of use, and maintainability, offering an open-source alternative to proprietary solutions. The software encrypts network traffic and supports various desktop environments, including GNOME, KDE Plasma, wlroots compositors, Windows, and MacOS.",
        "key_features": [
            "Cross-platform mouse and keyboard sharing",
            "Software KVM switch functionality",
            "Encryption using DTLS (WebRTC.rs)",
            "Support for GNOME, KDE Plasma, wlroots-based compositors, Windows, and MacOS",
            "GTK frontend"
        ],
        "primary_use_case": "Sharing a single mouse and keyboard across multiple computers via a local area network.",
        "open_issues": 63,
        "cover_image_prompt": "A skilled conductor orchestrating a symphony of computers, each represented by a musical instrument. The conductor's baton seamlessly moves between screens, controlling the keyboards and mice of each instrument. Digital streams of light connect the instruments, visualizing the shared input. A subtle UI overlay on one screen displays the Lan Mouse interface. The scene is set in a futuristic concert hall with dynamic lighting. The image should be in a vibrant 3D isometric illustration style with rich details and a harmonious color scheme."
    },
    {
        "id": 90902132,
        "name": "flameshot",
        "description": "Powerful yet simple to use screenshot software :desktop_computer: :camera_flash:",
        "url": "https://github.com/flameshot-org/flameshot",
        "language": "C++",
        "stars": 26021,
        "forks": 1664,
        "created_at": "2017-05-10T19:44:51Z",
        "updated_at": "2025-04-23T09:35:13Z",
        "topics": [
            "capture",
            "cross-platform",
            "free-software",
            "gnu-linux",
            "gui",
            "hacktoberfest",
            "image-editing",
            "qt",
            "screenshot"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-04-07T08:06:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2d8524f82a74e1b246d9ab9f1c7cd52afbda6c898239f100997ac1fce3bd5246/flameshot-org/flameshot"
        ],
        "homepage": "https://flameshot.org",
        "readme_summary": "Flameshot is a powerful and user-friendly screenshot tool. It allows users to easily capture and edit screenshots, offering customizable appearance and in-app editing features. It also provides a DBus interface and the ability to upload screenshots to Imgur.",
        "key_features": [
            "Customizable appearance",
            "Easy to use",
            "In-app screenshot editing",
            "DBus interface",
            "Upload to Imgur"
        ],
        "primary_use_case": "Taking and editing screenshots",
        "open_issues": 735,
        "cover_image_prompt": "A skilled artisan meticulously crafting a stained-glass window, each pane representing a screenshot. The artisan uses digital tools to precisely cut and shape the glass, adding vibrant colors and intricate details. The finished window displays a complex scene, perfectly captured and enhanced. Subtle UI elements float around the artisan, showing editing tools and capture options. The workshop is filled with natural light, highlighting the beauty of the stained glass. The image should be in a detailed digital painting style with clear outlines and a focus on vibrant colors and intricate details, reminiscent of a classic stained-glass masterpiece."
    },
    {
        "id": 937253475,
        "name": "claude-code",
        "description": "Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflows - all through natural language commands.",
        "url": "https://github.com/anthropics/claude-code",
        "language": "Shell",
        "stars": 7916,
        "forks": 410,
        "created_at": "2025-02-22T17:41:21Z",
        "updated_at": "2025-04-23T10:11:25Z",
        "topics": [],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T21:08:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d4c2b53658073449335f453374bb911a4f4b8558265fcf007e70a28b9853ea3d/anthropics/claude-code"
        ],
        "homepage": "https://docs.anthropic.com/s/claude-code",
        "readme_summary": "Claude Code is an agentic coding tool designed to enhance developer productivity. It operates within the terminal, providing capabilities such as code editing, bug fixing, code explanation, test execution, and Git workflow management, all accessible through natural language commands. This tool aims to streamline development processes and improve collaboration with AI agents.",
        "key_features": [
            "Edit files and fix bugs across your codebase",
            "Answer questions about your code's architecture and logic",
            "Execute and fix tests, lint, and other commands",
            "Search through git history, resolve merge conflicts, and create commits and PRs"
        ],
        "primary_use_case": "Agentic coding tool that helps developers code faster by executing routine tasks, explaining complex code, and handling git workflows through natural language commands.",
        "open_issues": 314,
        "cover_image_prompt": "A skilled artisan in a workshop, crafting lines of code with a set of specialized tools. The artisan uses natural language commands whispered into a microphone, which are then translated into precise code edits displayed on holographic screens. The workshop is filled with glowing digital particles representing code execution and debugging. A blueprint on the wall subtly displays the repository name, \"Claude Code.\" The scene is bathed in soft, ambient light, creating a sense of innovation and precision. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]