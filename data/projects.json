[
    {
        "id": 980772545,
        "name": "terminal-rain-lightning",
        "description": "Terminal-based ASCII rain and lightning animation.",
        "url": "https://github.com/rmaake1/terminal-rain-lightning",
        "language": "Python",
        "stars": 187,
        "forks": 3,
        "created_at": "2025-05-09T17:30:25Z",
        "updated_at": "2025-05-22T08:12:14Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-09T19:03:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b497f3c66643b6ec18b61af204049159404c81d07b6616aa43e5455c48a17334/rmaake1/terminal-rain-lightning"
        ],
        "homepage": "",
        "readme_summary": "The terminal-rain-lightning repository provides a Python script that generates a visually engaging rain and lightning animation directly within a terminal. It features customizable colors, a thunderstorm mode, and adapts to terminal resizing, offering a lightweight and entertaining experience for users.",
        "key_features": [
            "Smooth ASCII rain effect with varying drop characters",
            "Toggleable \"Thunderstorm\" mode for more intense rain and lightning",
            "Customizable rain and lightning colors via command-line arguments",
            "Responsive to terminal resizing",
            "Lightweight and runs in most modern terminals"
        ],
        "primary_use_case": "Creating a terminal-based ASCII rain and lightning animation for entertainment and visual appeal.",
        "open_issues": 1,
        "cover_image_prompt": "A digital artist sitting at a glowing terminal, painting a vibrant cityscape with rain and lightning using a digital brush. The terminal screen displays lines of code that translate into falling rain streaks and flashes of lightning on the canvas. The cityscape reflects the terminal's output, creating a dynamic and immersive scene. Small UI elements on the terminal show customizable color palettes and animation controls. The scene is set in a modern studio with soft, ambient lighting. The image should be in a digital painting style with clean lines and vibrant colors, reminiscent of pixel art."
    },
    {
        "id": 975711238,
        "name": "sshsync",
        "description": null,
        "url": "https://github.com/Blackmamoth/sshsync",
        "language": "Python",
        "stars": 128,
        "forks": 5,
        "created_at": "2025-04-30T19:10:38Z",
        "updated_at": "2025-05-22T04:07:31Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-18T18:33:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/049b8bdc3e936de039255331cff6fe516e8feba877514ce76805685b1f46217f/Blackmamoth/sshsync"
        ],
        "homepage": null,
        "readme_summary": "sshsync is a CLI tool designed for sysadmins, developers, and automation workflows to execute shell commands and transfer files across multiple remote servers. It allows users to target all servers or specific groups, execute commands concurrently, and offers features like adjustable SSH timeouts, operation history, and dry-run mode for previewing actions.",
        "key_features": [
            "Run shell commands on all hosts or specific groups",
            "Executes commands concurrently across servers",
            "Group-based configuration",
            "Adjustable SSH timeout settings",
            "Push/pull files between local and remote hosts",
            "Operation history and logging",
            "Dry-run mode"
        ],
        "primary_use_case": "Running shell commands and transferring files across multiple remote servers via SSH.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a seasoned conductor leading an orchestra of servers. Each server, represented by a musical instrument, plays its part in harmony, executing commands in perfect synchronicity. The conductor, symbolizing sshsync, stands on a platform adorned with subtle digital interfaces, monitoring the performance. Glowing lines of code subtly weave through the air, connecting the conductor to each server. The scene is bathed in a soft, focused light, highlighting the precision and efficiency of the operation. This conceptual illustration, rendered in a clean, flat design style with clear iconography, captures the essence of sshsync as a tool for orchestrating commands across multiple servers."
    },
    {
        "id": 749126547,
        "name": "Scrapegraph-ai",
        "description": "Python scraper based on AI",
        "url": "https://github.com/ScrapeGraphAI/Scrapegraph-ai",
        "language": "Python",
        "stars": 19712,
        "forks": 1665,
        "created_at": "2024-01-27T16:54:38Z",
        "updated_at": "2025-05-22T09:57:12Z",
        "topics": [
            "ai",
            "ai-scraping",
            "automated-scraper",
            "crawler",
            "html-to-markdown",
            "llm",
            "markdown",
            "rag",
            "scraping",
            "scraping-python",
            "web-crawler",
            "web-crawlers",
            "web-scraping"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-22T08:59:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a83d75d5580708c5a26160218893993c79c23644d3b65401f1ad96f77d2f1d37/ScrapeGraphAI/Scrapegraph-ai"
        ],
        "homepage": "https://scrapegraphai.com",
        "readme_summary": "ScrapeGraphAI is a Python library that leverages LLMs and graph logic to automate web scraping. It supports various data formats and integrates with popular frameworks like Langchain and Llama Index. The library provides SDKs for Python and Node.js, as well as integrations with low-code platforms, making it versatile for different development environments.",
        "key_features": [
            "Web scraping using LLM and graph logic",
            "Support for websites and local documents (XML, HTML, JSON, Markdown)",
            "Integration with Langchain, Llama Index, Crew.ai, CamelAI",
            "SDKs for Python and Node.js",
            "Low-code integrations with Pipedream, Bubble, Zapier, n8n"
        ],
        "primary_use_case": "Automated web scraping and data extraction using AI.",
        "open_issues": 16,
        "cover_image_prompt": "A diligent librarian meticulously cataloging books from various websites, each book glowing with unique data. The librarian uses a special AI lens to extract specific information from the books, transforming them into organized digital notes on a holographic screen. Small UI elements display scraping pipelines and data extraction processes. The scene is set in a futuristic library with soft, ambient lighting. The composition is clean and focused with a blue and green color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 148061471,
        "name": "TLG_JoinCaptchaBot",
        "description": "Telegram Bot to verify if users joining a group are human. The Bot sends an image captcha to each new user and removes those who fail to solve it within a specified time.",
        "url": "https://github.com/J-Rios/TLG_JoinCaptchaBot",
        "language": "Python",
        "stars": 557,
        "forks": 229,
        "created_at": "2018-09-09T20:05:44Z",
        "updated_at": "2025-05-22T08:56:43Z",
        "topics": [
            "bot",
            "captcha",
            "hacktoberfest",
            "python",
            "python-telegram-bot",
            "python3",
            "telegram",
            "telegram-bot"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-04-24T20:50:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6e03fc4648ac736c6af90b538c341bd313a1d4332797f426e8a73afb5e4581ac/J-Rios/TLG_JoinCaptchaBot"
        ],
        "homepage": "",
        "readme_summary": "TLG_JoinCaptchaBot is a Telegram bot that uses image-based CAPTCHAs to verify new users joining a group. It automatically sends a CAPTCHA to each new member and removes those who fail to solve it within a specified time. Additionally, it prevents spam by deleting messages containing URLs sent by unverified users.",
        "key_features": [
            "Automatic CAPTCHA for new users",
            "Removes users failing CAPTCHA",
            "Deletes URL messages from unverified users (anti-spam)"
        ],
        "primary_use_case": "Verifying new Telegram group members are human and preventing spam.",
        "open_issues": 13,
        "cover_image_prompt": "Imagine a vigilant gatekeeper standing before a bustling Telegram group chat entrance, diligently checking each new member with a magnifying glass that reveals a hidden CAPTCHA puzzle. Those who solve the puzzle correctly are welcomed with a green checkmark, while bots and spammers are blocked by a red 'access denied' symbol. The gatekeeper wears a Python badge and is surrounded by subtle Telegram UI elements. The scene is set in a bright, friendly digital landscape with a clean, focused composition. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 967152344,
        "name": "FaceEnhance",
        "description": "Enhance faces in AI generated images",
        "url": "https://github.com/RishiDesai/FaceEnhance",
        "language": "Python",
        "stars": 35,
        "forks": 3,
        "created_at": "2025-04-16T02:34:01Z",
        "updated_at": "2025-05-22T08:04:15Z",
        "topics": [
            "comfyui",
            "controlnet",
            "face",
            "flux",
            "pulid"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-04T08:32:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3d8330dfd505321e6516e025a0e17191f3287ed6c97a3957c3b61ae0188e2eb5/RishiDesai/FaceEnhance"
        ],
        "homepage": "https://huggingface.co/spaces/rdesai2/FaceEnhance",
        "readme_summary": "The FaceEnhance repository provides tools for enhancing faces in AI-generated images while preserving the original image's context. It offers ComfyUI workflows and a Gradio demo for interactive use, focusing on improving facial fidelity and consistency. The tool aims to produce high-quality results without altering the background or overall composition of the original image.",
        "key_features": [
            "Face enhancement in AI-generated images",
            "Preservation of original image background, lighting, and composition",
            "ComfyUI workflows for face enhancement and embedding distance calculation",
            "Gradio demo for interactive face enhancement"
        ],
        "primary_use_case": "Improving facial consistency and quality in AI-generated images.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a skilled sculptor meticulously refining a rough clay face, transforming it into a lifelike portrait with enhanced details and clarity. The sculptor uses advanced digital tools, represented by subtle holographic interfaces displaying facial metrics and enhancement algorithms. The background shows a gallery of AI-generated images, some with blurry faces and others with the sculptor's refined, high-fidelity faces. The scene is bathed in soft, focused lighting, highlighting the transformation process. The composition is clean and elegant, emphasizing the sculptor's precision. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 111583593,
        "name": "scrcpy",
        "description": "Display and control your Android device",
        "url": "https://github.com/Genymobile/scrcpy",
        "language": "C",
        "stars": 122434,
        "forks": 11502,
        "created_at": "2017-11-21T18:00:27Z",
        "updated_at": "2025-05-22T09:40:46Z",
        "topics": [
            "android",
            "c",
            "ffmpeg",
            "libav",
            "mirroring",
            "recording",
            "screen",
            "sdl2"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T08:30:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bb87b2ce6c77f458c32f65eebe6aee0f2f7ba056f94e464f445b7f39f703ecec/Genymobile/scrcpy"
        ],
        "homepage": "",
        "readme_summary": "Scrcpy mirrors and controls Android devices on a computer via USB or TCP/IP, enabling users to interact with their device using the computer's keyboard and mouse. It supports features like audio forwarding, screen recording, and virtual displays, offering a seamless control experience without requiring root access or an app installation on the device.",
        "key_features": [
            "Android device mirroring and control via USB or TCP/IP",
            "Audio forwarding (Android 11+)",
            "Screen recording",
            "Virtual display support",
            "Copy-paste in both directions",
            "Configurable quality",
            "Camera mirroring (Android 12+)",
            "Webcam mirroring (V4L2, Linux-only)",
            "Physical keyboard and mouse simulation (HID)",
            "Gamepad support",
            "OTG mode"
        ],
        "primary_use_case": "Displaying and controlling Android devices from a computer.",
        "open_issues": 2344,
        "cover_image_prompt": "Imagine a skilled puppeteer controlling a vibrant Android device on a brightly lit stage. The puppeteer's hands, connected to the device by glowing USB cables, manipulate the device's screen with precision. The device's screen mirrors onto a large monitor behind the puppeteer, showcasing the puppeteer's actions in real-time. The stage is adorned with subtle tech elements, such as UI icons and data streams, subtly connecting the scene to software. The overall scene is bathed in soft, focused lighting, creating a sense of control and seamless interaction. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 78527274,
        "name": "WiFi-autopwner",
        "description": "WiFi-autopwner: script to automate searching and auditing Wi-Fi networks with weak security",
        "url": "https://github.com/Mi-Al/WiFi-autopwner",
        "language": "Shell",
        "stars": 240,
        "forks": 74,
        "created_at": "2017-01-10T11:27:54Z",
        "updated_at": "2025-05-22T08:25:30Z",
        "topics": [],
        "quality_score": 0.35,
        "contributors_count": 0,
        "last_commit_date": "2019-01-14T10:10:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7ff521fa6eff95fc18de2f0a2e8b9db4b4896c4b4eb61d4d88de4a491ddea422/Mi-Al/WiFi-autopwner"
        ],
        "homepage": "https://miloserdov.org/?p=35",
        "readme_summary": "The WiFi-autopwner repository provides a shell script designed to automate the searching and auditing of Wi-Fi networks, specifically targeting those with weak security configurations. It also incorporates a fix for a common Reaver error, enhancing its utility for penetration testing and security assessments of wireless networks.",
        "key_features": [
            "Automates searching and auditing Wi-Fi networks",
            "Identifies Wi-Fi networks with weak security",
            "Includes a built-in fix for Reaver 'Failed to associate with' errors"
        ],
        "primary_use_case": "Automating the process of identifying and auditing Wi-Fi networks with weak security to assess their vulnerability.",
        "open_issues": 5,
        "cover_image_prompt": "A locksmith meticulously picking the lock of a Wi-Fi router secured behind a fragile, outdated padlock. The locksmith uses a set of digital lockpicks that glow with a soft, blue light, displaying code snippets as they work. A small screen nearby shows a network diagram with vulnerable access points highlighted in red. The scene is set in a dimly lit alleyway behind a modern office building, casting long shadows. The image should be in a digital painting style with clean lines and clear details, emphasizing the contrast between the old padlock and the modern digital tools."
    },
    {
        "id": 38626980,
        "name": "machinae",
        "description": "Machinae Security Intelligence Collector",
        "url": "https://github.com/HurricaneLabs/machinae",
        "language": "Python",
        "stars": 520,
        "forks": 103,
        "created_at": "2015-07-06T15:14:14Z",
        "updated_at": "2025-05-22T08:16:25Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-05-15T21:21:13Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b4f367fb73d5b8d672579d215f54dc92a1d5ef237d23dc04869b448d7141f3b2/HurricaneLabs/machinae"
        ],
        "homepage": null,
        "readme_summary": "Machinae is a security intelligence collector that gathers data from public sources about IPs, domains, URLs, emails, file hashes, and SSL fingerprints. It offers improvements over Automater, including a Python 3 compatible codebase, YAML configuration, JSON parsing support, and multiple output formats. It also features a configuration merging system for easy customization.",
        "key_features": [
            "Collects security intelligence from public sources.",
            "Supports YAML configuration.",
            "Parses JSON input.",
            "Supports multiple output types, including JSON.",
            "Configuration merging system for easy customization."
        ],
        "primary_use_case": "Collecting and aggregating security intelligence data from various online sources to identify potential threats.",
        "open_issues": 7,
        "cover_image_prompt": "A detective meticulously examining a chaotic web of interconnected data points (IP addresses, domains, URLs) with a magnifying glass. The detective's desk is covered in glowing screens displaying security feeds and threat intelligence reports. The magnifying glass highlights malicious connections, transforming them into clear warning signs. Subtle code snippets and data visualizations float in the background, connecting the scene to software. The scene is set in a dimly lit, high-tech office with a focused atmosphere. The image should be in a digital painting style with sharp details and a dark, contrasting color scheme."
    },
    {
        "id": 30870954,
        "name": "LaZagne",
        "description": "Credentials recovery project",
        "url": "https://github.com/AlessandroZ/LaZagne",
        "language": "Python",
        "stars": 10075,
        "forks": 2072,
        "created_at": "2015-02-16T14:10:02Z",
        "updated_at": "2025-05-22T08:16:03Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T14:11:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f945aa761d0fcc11bb2a8db292586a1460126c0b9e98b49925b57bd28611fbaa/AlessandroZ/LaZagne"
        ],
        "homepage": null,
        "readme_summary": "LaZagne is a password recovery tool designed to retrieve stored credentials from a local computer. It supports various software and operating systems, employing different techniques to extract passwords. The tool offers modular execution, output formatting options, and the ability to specify a user password for decryption.",
        "key_features": [
            "Password recovery from various software",
            "Support for multiple operating systems (Windows, Linux, Mac OS)",
            "Modular design allowing for specific module execution",
            "Output formatting options (Normal txt, Json, All)",
            "Option to specify user password for decryption",
            "Standalone executables available"
        ],
        "primary_use_case": "Credentials recovery from local computers",
        "open_issues": 10,
        "cover_image_prompt": "A skilled locksmith meticulously picking a complex lock on a treasure chest, revealing a cascade of passwords (represented as glowing keys and digital certificates). The locksmith uses specialized tools that subtly display UI elements of LaZagne, showing the software in action. The treasure chest is adorned with logos of various software applications (browsers, databases, etc.). The scene is set in a dimly lit vault with dramatic lighting, emphasizing the sensitive nature of the recovered credentials. The image should be in a detailed digital painting style with clean lines and a focus on clarity."
    },
    {
        "id": 14343142,
        "name": "webshells",
        "description": "Various webshells. We accept pull requests for additions to this collection.",
        "url": "https://github.com/BlackArch/webshells",
        "language": "PHP",
        "stars": 938,
        "forks": 343,
        "created_at": "2013-11-12T19:46:03Z",
        "updated_at": "2025-05-22T03:17:43Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2023-01-28T13:44:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2ef2bf26c3ff3a89a0f143f2323966894b4be4ac5dae5b8ef0ac0d2ea0f11285/BlackArch/webshells"
        ],
        "homepage": null,
        "readme_summary": "This repository provides a collection of various webshells, intended for use in penetration testing and security analysis. It encourages community contributions through pull requests. A package is available for easy installation on BlackArch Linux, but users are strongly advised to review the source code of each webshell before use due to potential security risks.",
        "key_features": [
            "Collection of various webshells",
            "Accepts pull requests for additions",
            "Package available for BlackArch Linux"
        ],
        "primary_use_case": "Providing a collection of webshells for penetration testing and security analysis.",
        "open_issues": 1,
        "cover_image_prompt": "A locksmith carefully examining a set of intricate locks, each representing a different web application. The locksmith uses specialized tools to probe the locks, searching for vulnerabilities. Some locks are easily bypassed, while others require more sophisticated techniques. A faint digital glow emanates from the tools, subtly displaying code snippets and security protocols. The scene is set in a workshop filled with various lockpicking tools and diagrams. The image should be in a detailed digital painting style with clear outlines and a focus on the intricate details of the locks and tools."
    }
]