[
    {
        "id": 237253402,
        "name": "docker2exe",
        "description": "Convert a Docker image to an executable",
        "url": "https://github.com/rzane/docker2exe",
        "language": "Go",
        "stars": 1418,
        "forks": 60,
        "created_at": "2020-01-30T16:21:43Z",
        "updated_at": "2025-05-13T10:01:15Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T19:40:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c1927702301dbc2adb409b13c5c7b701501c36dc619e705a9d79e3a15931d2dd/rzane/docker2exe"
        ],
        "homepage": "",
        "readme_summary": "docker2exe is a tool that converts Docker images into standalone executables, allowing users to distribute and run containerized applications without requiring Docker to be pre-installed. It supports embedding the image directly into the executable, creating a self-contained package for easy deployment across different platforms.",
        "key_features": [
            "Converts Docker images to standalone executables",
            "Supports embedding the Docker image within the executable",
            "Creates executables for multiple platforms (Darwin, Linux, Windows)"
        ],
        "primary_use_case": "Creating distributable executables from Docker images for easy deployment and sharing.",
        "open_issues": 12,
        "cover_image_prompt": "A skilled alchemist in a workshop, carefully pouring a Docker image (represented as a glowing liquid) into a magical mold. The mold transforms the liquid into a standalone executable file (represented as a solid, ornate key). The alchemist's workbench is cluttered with beakers, wires, and miniature screens displaying lines of code. A subtle glow emanates from the executable key, suggesting its self-contained nature. The scene is set in a dimly lit, steampunk-inspired laboratory with intricate details and warm lighting. The image should be in a 3D isometric illustration style with rich textures and vibrant colors."
    },
    {
        "id": 969308195,
        "name": "RealtimeVoiceChat",
        "description": "Have a natural, spoken conversation with AI!",
        "url": "https://github.com/KoljaB/RealtimeVoiceChat",
        "language": "Python",
        "stars": 2068,
        "forks": 155,
        "created_at": "2025-04-19T21:14:45Z",
        "updated_at": "2025-05-13T09:06:04Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T12:12:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1fb4fb3848f3d8e28b7f2bd4464ddfbe02faec13a58e82a7dd5bd44ce3bbfd0c/KoljaB/RealtimeVoiceChat"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a system for real-time voice interaction with AI models. It captures voice input, transcribes it, sends it to an LLM for processing, synthesizes the AI's response into speech, and streams the audio back to the user, all with low latency. The system supports flexible AI backends, customizable voices, and offers a web interface for easy interaction.",
        "key_features": [
            "Fluid Conversation",
            "Real-Time Feedback",
            "Low Latency Focus",
            "Smart Turn-Taking",
            "Flexible AI Brains",
            "Customizable Voices",
            "Web Interface",
            "Dockerized Deployment"
        ],
        "primary_use_case": "Real-time voice chat with an AI, enabling natural, spoken conversations.",
        "open_issues": 15,
        "cover_image_prompt": "A skilled interpreter sits at a high-tech console, wearing headphones and speaking into a microphone. The interpreter's voice is visualized as sound waves flowing into the console. The console instantly translates the spoken words into text, which is then converted into a synthesized voice emanating from speakers. The console displays a user interface with controls for language selection, voice customization, and real-time transcription. Subtle code snippets and data visualizations float around the console, representing the underlying AI processes. The scene is set in a modern, soundproof studio with soft, ambient lighting. The image should be in a digital painting style with clean lines and vibrant colors, emphasizing clarity and ease of understanding."
    },
    {
        "id": 17689377,
        "name": "pre-commit",
        "description": "A framework for managing and maintaining multi-language pre-commit hooks.",
        "url": "https://github.com/pre-commit/pre-commit",
        "language": "Python",
        "stars": 13749,
        "forks": 876,
        "created_at": "2014-03-13T00:39:38Z",
        "updated_at": "2025-05-13T09:20:21Z",
        "topics": [
            "git",
            "linter",
            "pre-commit",
            "python",
            "refactoring"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T19:55:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d8feba0f71934e04acd76173f13e53a20cc44b0450a1d4bea1922481466a09dc/pre-commit/pre-commit"
        ],
        "homepage": "https://pre-commit.com",
        "readme_summary": "The pre-commit repository provides a framework for managing and maintaining multi-language pre-commit hooks. It helps developers automate code checks and enforce code quality standards before committing changes. This ensures consistency and reduces errors in software development projects.",
        "key_features": [
            "Manages multi-language pre-commit hooks",
            "Framework for maintaining pre-commit hooks"
        ],
        "primary_use_case": "Managing and maintaining multi-language pre-commit hooks in software development projects.",
        "open_issues": 20,
        "cover_image_prompt": "A meticulous gardener tending to a sprawling garden where each plant represents a software project. The gardener uses specialized tools (pre-commit hooks) to prune and shape the plants, ensuring they grow healthily and uniformly. Some plants have small screens displaying code snippets, and digital particles flow around them, representing automated checks. The garden is bathed in soft, natural light, creating a sense of order and care. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 792805133,
        "name": "tabiew",
        "description": "A lightweight TUI application to view and query tabular data files, such as CSV, TSV, and parquet.",
        "url": "https://github.com/shshemi/tabiew",
        "language": "Rust",
        "stars": 948,
        "forks": 25,
        "created_at": "2024-04-27T16:21:19Z",
        "updated_at": "2025-05-13T09:48:27Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-11T21:15:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/62facf3ae5ad7c73c1eedd5ae5dc1d8b8c821c3f029dfd9a6bd0db01031a77f4/shshemi/tabiew"
        ],
        "homepage": "",
        "readme_summary": "Tabiew is a lightweight TUI application designed for viewing and querying tabular data files. It supports various formats like CSV, Parquet, and JSON, and offers features like SQL support, fuzzy search, and Vim-style keybindings. It allows users to efficiently explore and analyze data directly from the terminal.",
        "key_features": [
            "Vim-style keybindings",
            "SQL support",
            "Support for CSV, Parquet, JSON, JSONL, Arrow, FWF, Sqlite, and Excel",
            "Fuzzy search",
            "Scripting support",
            "Multi-table functionality"
        ],
        "primary_use_case": "Viewing and querying tabular data files.",
        "open_issues": 10,
        "cover_image_prompt": "A skilled librarian meticulously organizing data streams into neatly arranged tables within a vast, digital library. The librarian uses a glowing stylus to interact with floating data panels, seamlessly sorting and querying information. Visual cues like CSV icons and SQL symbols subtly indicate the types of data being handled. Small UI elements display the 'Tabiew' interface, showing real-time data transformations. The scene is bathed in soft, ambient light, creating a sense of order and efficiency. The composition is clean and focused, using a pastel color scheme. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 15333471,
        "name": "OCRmyPDF",
        "description": "OCRmyPDF adds an OCR text layer to scanned PDF files, allowing them to be searched",
        "url": "https://github.com/ocrmypdf/OCRmyPDF",
        "language": "Python",
        "stars": 28797,
        "forks": 1962,
        "created_at": "2013-12-20T08:26:28Z",
        "updated_at": "2025-05-13T09:47:41Z",
        "topics": [
            "image-processing",
            "ocr",
            "pdf",
            "python",
            "tesseract"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-04-21T19:23:34Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/15333471/e04d2d80-a1ce-11e9-9a19-3c7090039f98"
        ],
        "homepage": "http://ocrmypdf.readthedocs.io/",
        "readme_summary": "OCRmyPDF adds a searchable text layer to scanned PDFs, making them searchable and copyable. It optimizes images, deskews when needed, and uses Tesseract OCR to support many languages. The tool produces PDF/A compliant files and distributes processing across multiple CPU cores.",
        "key_features": [
            "Generates searchable PDF/A files",
            "Accurately places OCR text below the image",
            "Optimizes PDF images for smaller file sizes",
            "Deskews and cleans images before OCR",
            "Uses Tesseract OCR engine for 100+ languages",
            "Distributes work across multiple CPU cores"
        ],
        "primary_use_case": "Adding a searchable OCR text layer to scanned PDF files.",
        "open_issues": 128,
        "cover_image_prompt": "An archivist in a grand library carefully scans ancient scrolls, feeding them into a magical device that transforms the faded text into perfectly clear, searchable digital documents. The device glows with soft light, emitting particles of digital text that arrange themselves neatly on a screen displaying a user interface. The library is filled with towering bookshelves and warm, inviting light. Small UI elements show the OCRmyPDF logo and a progress bar. The image should be in a 3D isometric illustration style with rich details and a warm color scheme."
    },
    {
        "id": 882401154,
        "name": "AirRemote-Frontend",
        "description": null,
        "url": "https://github.com/jugeekuz/AirRemote-Frontend",
        "language": "JavaScript",
        "stars": 36,
        "forks": 1,
        "created_at": "2024-11-02T18:15:15Z",
        "updated_at": "2025-05-13T08:57:03Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-04-25T19:48:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4794732ba88996a45c15b3a7d8e04aed049c44928859ac5fa9bf824bae7b2364/jugeekuz/AirRemote-Frontend"
        ],
        "homepage": null,
        "readme_summary": "AirRemote is a solution that transforms traditional IR-controlled devices into smart, remotely accessible appliances. It captures and stores IR signals from any remote, allowing users to replay these commands via a web interface or through automated routines. This enables users to control devices remotely, create automated actions, and manage all their remotes in one place.",
        "key_features": [
            "Record IR signals from existing remote controls.",
            "Replay stored signals via a web interface.",
            "Create automations to perform operations at specific times.",
            "Captive Portal interface for device initialization and credential provisioning.",
            "Manage, delete, and reorder devices through the web interface."
        ],
        "primary_use_case": "Modernizing legacy remote-controlled devices by making them smart and remotely accessible.",
        "open_issues": 1,
        "cover_image_prompt": "An elderly inventor in a cozy workshop, surrounded by vintage remote controls, magically transforming them into glowing smartphone apps. The inventor holds a universal remote-like device that emits beams of light, capturing the essence of each old remote and projecting it onto a nearby tablet displaying a modern app interface. Subtle UI elements and code snippets float in the air, connecting the analog world to the digital realm. The scene is warmly lit, with a nostalgic yet futuristic feel. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 920654893,
        "name": "hub",
        "description": "Securade.ai HUB - A generative AI based edge platform for computer vision that connects to existing CCTV cameras and makes them smart.",
        "url": "https://github.com/securade/hub",
        "language": "Python",
        "stars": 136,
        "forks": 16,
        "created_at": "2025-01-22T14:43:41Z",
        "updated_at": "2025-05-13T08:45:49Z",
        "topics": [
            "artificial-intelligence",
            "computer-vision",
            "edge-deployment",
            "face-detection",
            "fire-detection",
            "generative-ai",
            "grounding-dino",
            "industrial-safety",
            "jetson",
            "machine-learning",
            "model-zoo",
            "nvidia-gpu",
            "object-detection",
            "ppe-detection",
            "proximity-dete",
            "smoke-detection",
            "video-analytics",
            "worker-safety",
            "yolo7",
            "zone-mana"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-02-25T14:52:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8d790c3a73ff85dc2851d2b5cb434bd737ca6beb58d8db9478a30a2c52b55c28/securade/hub"
        ],
        "homepage": "https://securade.ai",
        "readme_summary": "Securade.ai HUB is an edge platform that leverages generative AI to enhance existing CCTV cameras with computer vision capabilities. It enables real-time detection of safety and security incidents, including PPE compliance, proximity alerts, and exclusion zone monitoring. The platform offers a zero-shot learning approach, eliminating the need for manual data labeling, and provides an analytics dashboard for real-time safety metrics.",
        "key_features": [
            "Zero-Shot Learning",
            "Real-Time Detection",
            "PPE Detection",
            "Proximity Alerts",
            "Exclusion Zones",
            "Analytics Dashboard",
            "Multi-Camera Support",
            "Instant Notifications",
            "Privacy Protection",
            "Edge Processing"
        ],
        "primary_use_case": "Generative AI based edge platform for computer vision that connects to existing CCTV cameras and makes them smart, primarily for industrial safety and security.",
        "open_issues": 0,
        "cover_image_prompt": "An industrial safety supervisor, equipped with advanced AI glasses, overseeing a construction site where AI-powered CCTV cameras monitor worker safety. The cameras detect potential hazards like missing PPE (hardhats, vests), unsafe proximity to machinery, and unauthorized access to restricted zones, displaying alerts on the supervisor's glasses. The scene is set in a bustling construction environment with a clear, focused composition. Small UI elements showing real-time analytics and violation tracking are subtly incorporated. The image should be in 3D isometric illustration style with clear iconography and vibrant colors."
    },
    {
        "id": 881979565,
        "name": "Bagels",
        "description": "Powerful expense tracker that lives in your terminal.",
        "url": "https://github.com/EnhancedJax/Bagels",
        "language": "Python",
        "stars": 1926,
        "forks": 58,
        "created_at": "2024-11-01T16:12:42Z",
        "updated_at": "2025-05-13T05:35:53Z",
        "topics": [
            "cli",
            "expense-tracker",
            "python",
            "python3",
            "ssh",
            "terminal",
            "textual",
            "tui",
            "uv"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-10T14:55:37Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/881979565/70cad97a-5b1a-4171-b8b5-211ce571d7d3"
        ],
        "homepage": "",
        "readme_summary": "Bagels is a terminal-based expense tracker that allows users to conveniently monitor and analyze their money flow. It offers a range of features including account management, transaction templates, customizable keybindings, and insightful spending visualizations, all within a user-friendly TUI.",
        "key_features": [
            "Accounts, (Sub)Categories, Splits, Transfers, Records",
            "Templates for Recurring Transactions",
            "Add Templated Record with Number Keys",
            "Clear Table Layout with Togglable Splits",
            "Transfer to and from Outside Tracked Accounts",
            "\"Jump Mode\" Navigation",
            "Less and Less Fields to Enter per Transaction, Powered by Transactions and Input Modes",
            "Insights",
            "Customizable Keybindings and Defaults",
            "Label, amount and category filtering",
            "Spending plottings / graphs with estimated spendings",
            "Budgetting tool"
        ],
        "primary_use_case": "Tracking and analyzing personal finances within the terminal.",
        "open_issues": 9,
        "cover_image_prompt": "Imagine a skilled accountant meticulously balancing a stack of digital coins on a beam scale, representing income and expenses. The scale is set against a backdrop of a sleek, minimalist terminal interface displaying financial data and colorful charts. Subtle digital particles float around the coins, symbolizing the flow of money. The repository name, 'Bagels,' is subtly etched onto the base of the scale. The scene is bathed in soft, focused lighting, creating a sense of precision and control. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity."
    }
]