[
    {
        "id": 958603506,
        "name": "mcp-telegram",
        "description": "MCP Server for Telegram",
        "url": "https://github.com/dryeab/mcp-telegram",
        "language": "Python",
        "stars": 83,
        "forks": 9,
        "created_at": "2025-04-01T13:18:18Z",
        "updated_at": "2025-07-26T10:10:11Z",
        "topics": [
            "ai",
            "anthropic",
            "anthropic-claude",
            "bot",
            "claude",
            "cursor",
            "llm",
            "mcp",
            "model-context-protocol",
            "model-context-protocol-server",
            "mtproto",
            "telegram",
            "telegram-bot",
            "telethon"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-06-15T10:10:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7fcb083d7f9badd53b5d07cc6344d424536e488fc830afa58f9cba51434f1bb7/dryeab/mcp-telegram"
        ],
        "homepage": "https://x.com/dryeab/status/1912187620131487999",
        "readme_summary": "The mcp-telegram repository provides a server that connects Large Language Models to Telegram, allowing AI agents to interact with the platform. It leverages the Model Context Protocol (MCP) and Telethon library to enable features like sending messages, managing chats, and handling media, effectively giving LLMs control over Telegram accounts.",
        "key_features": [
            "Connects LLMs to Telegram",
            "Enables AI agents to interact with Telegram",
            "Supports sending, editing, and deleting messages",
            "Allows searching chats and managing drafts",
            "Facilitates downloading media",
            "Uses Model Context Protocol (MCP)",
            "Built with Telethon and MTProto"
        ],
        "primary_use_case": "Enabling Large Language Models (LLMs) to control and interact with Telegram accounts.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a skilled telegraph operator in a cozy, turn-of-the-century office, diligently relaying messages between a grand, ornate Telegram station and a futuristic AI server room. The operator expertly translates natural language requests from the AI, represented by glowing data streams, into precise Telegram commands, visualized as vintage Morse code signals. These signals then activate various Telegram functions, such as sending messages, managing contacts, and retrieving information, all displayed on antique telegraph equipment with subtle digital overlays. The scene is bathed in warm, inviting light, creating a sense of seamless communication between the past and the future. The image should be in a detailed digital painting style with a focus on clear visual storytelling."
    },
    {
        "id": 1022762966,
        "name": "YouTubeTLDR",
        "description": "âš¡ A lightweight, self-hosted YouTube video summarizer with Gemini AI",
        "url": "https://github.com/Milkshiift/YouTubeTLDR",
        "language": "Rust",
        "stars": 21,
        "forks": 0,
        "created_at": "2025-07-19T19:13:50Z",
        "updated_at": "2025-07-26T10:01:15Z",
        "topics": [
            "gemini",
            "gemini-ai",
            "youtube",
            "youtube-subtitles",
            "youtube-summarization",
            "youtube-summarizer",
            "youtube-summary"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T10:01:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/07aa0972f0ab0b44aeabb3f364a5c8cd08c441932c1907eea37145424a209cfb/Milkshiift/YouTubeTLDR"
        ],
        "homepage": "https://youtubetldr.onrender.com/",
        "readme_summary": "YouTubeTLDR is a lightweight, self-hosted tool for summarizing YouTube videos using the Gemini AI model. It offers customizable prompts, model selection, transcript viewing, and local storage of summaries. The application is designed for personal use, emphasizing privacy and minimal overhead, and is distributed as a single, small binary.",
        "key_features": [
            "Customizable Prompts",
            "Model Selection (Gemini)",
            "View Transcript",
            "History (local browser storage)",
            "Privacy-Focused (self-hosted)",
            "Modern UI"
        ],
        "primary_use_case": "Self-hosted YouTube video summarization using Gemini AI.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously crafting miniature YouTube video summaries from raw footage using a magical quill powered by Gemini AI. The artisan sits at a workbench adorned with glowing screens displaying video transcripts and AI algorithms. Finished summaries, resembling concise scrolls, are neatly stacked, ready for quick consumption. Subtle tech elements like floating data particles and UI icons enhance the scene. The workshop is bathed in soft, focused light, creating an atmosphere of precision and efficiency. The image should be in 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 1024582976,
        "name": "ramparts",
        "description": "mcp scan that scans any mcp server for indirect attack vectors and security or configuration vulnerabilities",
        "url": "https://github.com/getjavelin/ramparts",
        "language": "Rust",
        "stars": 14,
        "forks": 1,
        "created_at": "2025-07-23T00:03:49Z",
        "updated_at": "2025-07-25T23:40:53Z",
        "topics": [
            "agent",
            "ai",
            "llm",
            "mcp",
            "modelcontextprotocol",
            "security"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-07-25T03:51:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7c0777521a2ecf7f14a5a8ebb0df467c8e67794b67300b372b7ce8635a911542/getjavelin/ramparts"
        ],
        "homepage": "https://www.getjavelin.com",
        "readme_summary": "Ramparts is a security scanner designed for Model Context Protocol (MCP) servers. It discovers capabilities, performs static and LLM-powered analysis, and provides risk assessments to identify vulnerabilities in MCP server implementations, helping developers secure AI agent interactions with external resources.",
        "key_features": [
            "MCP endpoint discovery",
            "Static vulnerability analysis",
            "LLM-powered security analysis",
            "Risk assessment and reporting"
        ],
        "primary_use_case": "Security scanning of Model Context Protocol (MCP) servers for vulnerabilities.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled blacksmith meticulously forging a digital shield at a high-tech forge. The blacksmith uses advanced tools to strengthen the shield against incoming digital projectiles representing vulnerabilities. Sparks of code fly as the shield takes shape, displaying the repository name subtly etched into its surface. The forge is surrounded by holographic displays showing real-time security metrics and threat analysis. The scene is set in a futuristic workshop with dramatic lighting and a blue and orange color scheme. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 966235850,
        "name": "sokuji",
        "description": "Live speech translation application built with Electron 34 and React, using OpenAI's Realtime API.",
        "url": "https://github.com/kizuna-ai-lab/sokuji",
        "language": "TypeScript",
        "stars": 243,
        "forks": 9,
        "created_at": "2025-04-14T15:58:15Z",
        "updated_at": "2025-07-26T09:47:38Z",
        "topics": [
            "ai",
            "chrome-extension",
            "electron",
            "linux-app",
            "llm",
            "meeting",
            "openai",
            "react",
            "translation",
            "translator",
            "typescript"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-25T14:39:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ba338f748c2d1137d3e4c52d168a19e10906cd4d9009a69ab2ab3322594fab5e/kizuna-ai-lab/sokuji"
        ],
        "homepage": "https://kizuna-ai-lab.github.io/sokuji/",
        "readme_summary": "Sokuji is a live speech translation application that uses AI to bridge language barriers in real-time. It is available as a desktop application built with Electron and React, and as a browser extension for Chrome and Edge. Sokuji offers audio routing and virtual device management for seamless integration with other applications.",
        "key_features": [
            "Live speech translation using OpenAI, Google Gemini, and Palabra.ai APIs",
            "Desktop application built with Electron and React",
            "Browser extension for Chrome, Edge, and other Chromium-based browsers with special integration for Google Meet and Microsoft Teams",
            "Audio routing solution with virtual device management"
        ],
        "primary_use_case": "Live speech translation in meetings and conversations.",
        "open_issues": 17,
        "cover_image_prompt": "A skilled linguist stands at a high-tech console, seamlessly translating spoken words flowing from a microphone into written text appearing on a holographic display. The linguist wears a headset that picks up spoken English, while the holographic display shows the translated Japanese equivalent in real-time. Subtle UI elements on the console display waveforms and translation metrics. The scene is set in a modern, minimalist office with soft, ambient lighting. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 994292224,
        "name": "ExeRay",
        "description": "ExeShield AI detects malicious Windows executables using ML. Analyzes entropy, imports, and metadata for rapid classification, aiding incident response. Built with Python and scikit-learn.",
        "url": "https://github.com/MohamedMostafa010/ExeRay",
        "language": "Python",
        "stars": 39,
        "forks": 7,
        "created_at": "2025-06-01T16:24:20Z",
        "updated_at": "2025-07-26T09:48:01Z",
        "topics": [
            "ai",
            "aimodel",
            "artificial-intelligence",
            "benign",
            "detection",
            "exe",
            "executable",
            "machine-learning",
            "machine-learning-algorithms",
            "machinelearning",
            "malicious",
            "maliciouscode",
            "malware",
            "python",
            "python3",
            "random-forest",
            "random-forest-classifier",
            "scikit-learn",
            "xgboost",
            "xgboost-classifier"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-02T23:50:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9612525dc00a0e97a607ae2a7302d4fb48d8b72e8b2ba479e9f0fe76ff6fa163/MohamedMostafa010/ExeRay"
        ],
        "homepage": "",
        "readme_summary": "ExeRay is a tool for detecting malicious Windows executables using machine learning. It employs a hybrid detection approach combining Random Forest and XGBoost algorithms with rule-based checks. The tool extracts static features like entropy, imports, and metadata for real-time classification, offering an advantage over signature-based methods in handling obfuscated or novel malware.",
        "key_features": [
            "Hybrid detection (Random Forest/XGBoost + rule-based checks)",
            "Real-time predictions with confidence scores",
            "Handles obfuscated/novel malware better than signature-based tools",
            "Static feature extraction (entropy, imports, metadata)"
        ],
        "primary_use_case": "Detecting malicious Windows executables for incident response.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled radiologist examining a Windows executable file under a giant X-ray machine. The machine reveals hidden malicious code as dark shadows and anomalies within the file's structure. The radiologist, wearing protective gear, analyzes the data displayed on a nearby screen, which shows entropy graphs and import tables. Digital particles representing data flow around the X-ray machine, highlighting the analysis process. The scene is set in a high-tech lab with a blue and green color scheme, creating a sense of security and precision. The image should be in a technical illustration style with labeled parts and clear details."
    }
]