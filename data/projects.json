[
    {
        "id": 912499477,
        "name": "plexe",
        "description": "‚ú® Build a machine learning model from a prompt",
        "url": "https://github.com/plexe-ai/plexe",
        "language": "Python",
        "stars": 1609,
        "forks": 92,
        "created_at": "2025-01-05T18:34:25Z",
        "updated_at": "2025-05-12T09:28:28Z",
        "topics": [
            "agentic-ai",
            "agents",
            "machine-learning",
            "ml",
            "mlengineering",
            "mlops",
            "multiagent",
            "multiagent-systems"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T16:26:30Z",
        "media_urls": [
            "https://opengraph.githubassets.com/255716e0dafcb1ed4be2c2fc18584e46d85a2411c2a6688b62a089a65673247b/plexe-ai/plexe"
        ],
        "homepage": "https://plexe.ai",
        "readme_summary": "Plexe allows users to create machine learning models by describing them in plain language. It leverages a multi-agent architecture to automate model building, supporting features like distributed training with Ray, data generation, schema inference, and multi-provider LLM support. The primary use case is to simplify and accelerate the process of building ML models through natural language.",
        "key_features": [
            "Natural Language Model Definition",
            "Multi-Agent Architecture",
            "Automated Model Building",
            "Distributed Training with Ray",
            "Data Generation & Schema Inference",
            "Multi-Provider Support"
        ],
        "primary_use_case": "Building machine learning models from natural language prompts.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a team of skilled architects collaborating around a digital blueprint table. Each architect represents an AI agent, specializing in different aspects of model building: one analyzes requirements, another plans the model, a third generates code, and a fourth tests performance. The blueprint table displays a complex machine learning model taking shape, with data flowing in as natural language descriptions and emerging as a fully functional model. Subtle UI elements and code snippets float around the table, connecting the metaphor to software. The scene is brightly lit, conveying collaboration and innovation. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 916747943,
        "name": "rybbit",
        "description": "üê∏ Rybbit - open-source and privacy-friendly alternative to Google Analytics that is 10x more intuitive.",
        "url": "https://github.com/rybbit-io/rybbit",
        "language": "TypeScript",
        "stars": 4745,
        "forks": 145,
        "created_at": "2025-01-14T17:31:13Z",
        "updated_at": "2025-05-12T10:03:42Z",
        "topics": [
            "analytics",
            "google-analytics",
            "product-analytics",
            "web-analytics"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-05-12T02:40:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/166cb8712db16012be5d9bf620b1a39da616ce738fbd9cf38ad40f2e3d218c36/rybbit-io/rybbit"
        ],
        "homepage": "https://rybbit.io",
        "readme_summary": "Rybbit is an open-source analytics tool designed as a privacy-focused alternative to Google Analytics. It offers comprehensive web analytics metrics, customizable dashboards, and advanced filtering, all while ensuring GDPR and CCPA compliance through cookie-less tracking. Rybbit can be self-hosted or used as a hosted service.",
        "key_features": [
            "Web analytics metrics (sessions, users, pageviews, bounce rate, session duration)",
            "Privacy-friendly (no cookies or user tracking, GDPR & CCPA compliant)",
            "Customizable goals, retention, user journeys, and funnels dashboards",
            "Advanced filtering across 15+ dimensions",
            "Custom events with JSON properties",
            "Live sessions dashboard",
            "Location tracking (country, region, city) + map visualizations",
            "Real-time dashboard",
            "Support for organizations and unlimited sites"
        ],
        "primary_use_case": "Open-source, privacy-friendly web and product analytics",
        "open_issues": 28,
        "cover_image_prompt": "Imagine a cartographer meticulously charting a vast, unexplored island. The cartographer uses a special lens that reveals hidden patterns and insights from the island's landscape, transforming raw data into a comprehensive map. Small UI elements float around the cartographer, displaying real-time analytics dashboards and user session recordings. The island represents website traffic, and the map symbolizes the intuitive analytics provided by Rybbit. The scene is set in a bright, airy studio with a minimalist design. The image should be in a flat design style with clear iconography and a pastel color scheme."
    },
    {
        "id": 861790708,
        "name": "newsnow",
        "description": "Elegant reading of real-time and hottest news",
        "url": "https://github.com/ourongxing/newsnow",
        "language": "TypeScript",
        "stars": 9767,
        "forks": 2795,
        "created_at": "2024-09-23T14:16:12Z",
        "updated_at": "2025-05-12T10:01:03Z",
        "topics": [
            "elegant",
            "news"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-10T16:55:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/905b5561544650ccd89e69de297389af190e85dbd5858c41505389c4e3c1b3dc/ourongxing/newsnow"
        ],
        "homepage": "https://newsnow.busiyi.world",
        "readme_summary": "NewsNow provides an elegant and real-time news reading experience. It features a clean UI, GitHub OAuth login for data synchronization, caching mechanisms, and adaptive scraping intervals to optimize resource usage. The project also supports MCP server integration for enhanced functionality.",
        "key_features": [
            "Clean and elegant UI design",
            "Real-time updates on trending news",
            "GitHub OAuth login with data synchronization",
            "Caching with configurable duration",
            "Adaptive scraping interval",
            "MCP server support"
        ],
        "primary_use_case": "Elegant reading of real-time and hottest news.",
        "open_issues": 60,
        "cover_image_prompt": "A news vendor meticulously curating a digital newsstand, arranging glowing tablets displaying headlines from various sources. The vendor, dressed in modern attire, carefully selects and positions each tablet to present a balanced and engaging view of current events. Subtle UI elements float around the newsstand, showing real-time updates and trending topics. The scene is set in a clean, minimalist cityscape with soft, ambient lighting. The composition is focused and inviting, with a vibrant color scheme. The image should be in a flat design style with clear iconography and a focus on readability."
    },
    {
        "id": 153899105,
        "name": "excalibur",
        "description": "A web interface to extract tabular data from PDFs",
        "url": "https://github.com/camelot-dev/excalibur",
        "language": "Python",
        "stars": 1663,
        "forks": 238,
        "created_at": "2018-10-20T11:34:49Z",
        "updated_at": "2025-05-12T08:44:52Z",
        "topics": [
            "extract",
            "for-humans",
            "pdf",
            "table"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-01-03T15:50:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f00186bdc781d65ba5b53ce1977694f3436100c632ff677d3876466d877c6fbe/camelot-dev/excalibur"
        ],
        "homepage": "https://excalibur-py.readthedocs.io",
        "readme_summary": "Excalibur is a web interface built with Python that simplifies the extraction of tabular data from PDF files. It leverages the Camelot library to provide advanced table detection and extraction capabilities, supporting both line-based (Lattice) and whitespace-based (Stream) tables. Excalibur allows users to save extraction settings for consistent results across similar PDF documents and offers various output formats, ensuring a streamlined workflow for converting PDF tables into usable data.",
        "key_features": [
            "Web interface for PDF table extraction",
            "Powered by Camelot library",
            "Supports Lattice and Stream table styles",
            "Saves extraction settings for reuse",
            "Local file processing for data control",
            "Configurable with MySQL and Celery for scalability"
        ],
        "primary_use_case": "Extracting tabular data from PDFs and saving it in various formats (CSV, Excel, JSON, HTML).",
        "open_issues": 94,
        "cover_image_prompt": "A librarian meticulously organizing scattered documents into a neatly structured digital table using a magical lens. The lens projects a UI screen showing PDF data transforming into a clean spreadsheet. Glowing data particles float around the librarian, connecting the original documents to the organized table. The scene is set in a bright, modern library with subtle tech elements like a server rack in the background and the 'Excalibur' logo subtly etched on the lens. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 834082440,
        "name": "camoufox",
        "description": "ü¶ä Anti-detect browser",
        "url": "https://github.com/daijro/camoufox",
        "language": "C++",
        "stars": 1961,
        "forks": 164,
        "created_at": "2024-07-26T11:31:27Z",
        "updated_at": "2025-05-12T10:09:53Z",
        "topics": [
            "antidetect",
            "antidetect-browser",
            "fingerprint",
            "firefox",
            "networking",
            "playwright",
            "scraping",
            "webscraping"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-15T10:50:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/571cb9cf036cfbcdf07506c65fe6332127bcc6aecc050c0c0772b0e138b0a724/daijro/camoufox"
        ],
        "homepage": "https://camoufox.com",
        "readme_summary": "Camoufox is an anti-detect browser based on Firefox, designed for robust fingerprint injection and anti-bot evasion. It modifies browser characteristics at the C++ level, making detection difficult. The browser includes features like fingerprint rotation, human-like mouse movements, and ad blocking, and it can be controlled via a Python interface.",
        "key_features": [
            "Fingerprint injection & rotation (without JS injection)",
            "Human-like mouse movement",
            "Ad blocking",
            "Memory efficiency",
            "Automatic fingerprint injection via PyPi package",
            "Up-to-date with the latest Firefox version"
        ],
        "primary_use_case": "Anti-bot evasion and web scraping",
        "open_issues": 106,
        "cover_image_prompt": "A skilled illusionist standing on a stage, seamlessly altering their appearance with a wave of their hand. The illusionist is surrounded by glowing code snippets and digital masks that represent browser fingerprints. A spotlight shines on the illusionist, highlighting the transformation. In the background, silhouettes of web servers try to detect the illusionist but fail. Small UI elements showing browser settings and fingerprint data are subtly incorporated into the scene. The composition is clean and focused with a dark blue and purple color scheme. The image should be in digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 661850205,
        "name": "docuseal",
        "description": "Open source DocuSign alternative. Create, fill, and sign digital documents ‚úçÔ∏è",
        "url": "https://github.com/docusealco/docuseal",
        "language": "Ruby",
        "stars": 9122,
        "forks": 656,
        "created_at": "2023-07-03T19:54:54Z",
        "updated_at": "2025-05-12T09:55:46Z",
        "topics": [
            "daisyui",
            "document-signing",
            "documents",
            "e-signature",
            "github-catalyst",
            "hotwired-turbo",
            "legaltech",
            "open-source",
            "pdf",
            "pdf-sign",
            "pdf-signature",
            "ruby-on-rails",
            "self-hosted",
            "tailwindcss",
            "vuejs",
            "webpack"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-12T09:31:27Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/661850205/377ad724-388b-487b-a27a-a3c5373b4d65"
        ],
        "homepage": "https://www.docuseal.com",
        "readme_summary": "DocuSeal is an open-source platform for creating, filling, and signing digital documents. It offers a PDF form builder with various field types, supports multiple submitters, and provides automated email notifications. The platform also features flexible file storage options, automatic e-signatures, user management, and API/Webhook integrations for easy deployment and customization.",
        "key_features": [
            "PDF form fields builder (WYSIWYG)",
            "12 field types available",
            "Multiple submitters per document",
            "Automated emails via SMTP",
            "Files storage on disk or cloud (AWS S3, Google Storage, Azure Cloud)",
            "Automatic PDF eSignature and verification",
            "Users management",
            "Mobile-optimized",
            "API and Webhooks for integrations"
        ],
        "primary_use_case": "Creating, filling, and signing digital documents.",
        "open_issues": 62,
        "cover_image_prompt": "A skilled craftsman meticulously shaping a digital document on a high-tech workbench, transforming it into a legally binding contract with a flourish of his digital pen. The document glows with a secure aura, displaying subtle UI elements and data visualizations. The craftsman's workshop is filled with tools representing various document fields (signature, date, checkbox), all seamlessly integrated. The scene is set in a bright, modern studio with warm lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the DocuSeal logo."
    },
    {
        "id": 771897622,
        "name": "quickapiclient",
        "description": "Create fully typed declarative API clients quickly and easily.",
        "url": "https://github.com/martinn/quickapiclient",
        "language": "Python",
        "stars": 45,
        "forks": 1,
        "created_at": "2024-03-14T06:42:12Z",
        "updated_at": "2025-05-12T08:33:23Z",
        "topics": [
            "api-client",
            "attrs",
            "dataclasses",
            "deserialization",
            "http-client",
            "httpx",
            "library",
            "pydantic-v2",
            "python",
            "requests",
            "rest-api",
            "serialization"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-12-26T03:55:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/00d5b5a7cd8896c462d4f344e3d8dd3859763ac3f935c9baf79fbff61c63e386/martinn/quickapiclient"
        ],
        "homepage": "https://martinn.github.io/quickapiclient/",
        "readme_summary": "Quick Api Client is a Python library designed to simplify the creation of fully typed API clients. It offers features such as automatic serialization/deserialization, support for various HTTP client libraries (httpx, requests), and integration with popular data modeling libraries like attrs, dataclasses, pydantic, and msgspec. The library aims to provide a declarative and type-safe approach to API client development.",
        "key_features": [
            "Fully typed request params/body",
            "Fully typed response body",
            "Serialization/deserialization support",
            "Basic error and serialization handling",
            "Fully typed HTTP status error codes handling",
            "Support for httpx and requests",
            "Authentication mechanisms (Basic Auth, Token/JWT, Digest, NetRC)",
            "Support for attrs, dataclasses, pydantic, msgspec",
            "REST API support"
        ],
        "primary_use_case": "Creating fully typed declarative API clients quickly and easily.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a skilled architect effortlessly assembling intricate building blocks to construct a magnificent, fully-formed skyscraper. Each block represents an API component, seamlessly fitting together to create a functional and robust structure. The architect, representing the library, stands confidently, overseeing the construction with a tablet displaying a simplified blueprint. Subtle digital particles float around the building, symbolizing data flow. The scene is bathed in warm, inviting light, conveying ease and efficiency. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, emphasizing clarity and precision."
    },
    {
        "id": 624994625,
        "name": "bark",
        "description": "üîä Text-Prompted Generative Audio Model",
        "url": "https://github.com/suno-ai/bark",
        "language": "Jupyter Notebook",
        "stars": 37770,
        "forks": 4472,
        "created_at": "2023-04-07T19:34:48Z",
        "updated_at": "2025-05-12T10:12:55Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2024-04-05T13:14:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d1f7f32ab8aad39e9cbae45c24488518b227e552c171a77301989ca4eb052b36/suno-ai/bark"
        ],
        "homepage": "",
        "readme_summary": "Bark is a transformer-based text-to-audio model developed by Suno, capable of generating highly realistic, multilingual speech, music, background noise, and sound effects. It also supports nonverbal communications like laughing and crying. The model is available for commercial use under the MIT License and is intended for research and application development in the audio generation space.",
        "key_features": [
            "Text-to-audio generation",
            "Multilingual speech synthesis",
            "Music generation",
            "Background noise and sound effects generation",
            "Nonverbal communication (laughing, sighing, crying) generation",
            "Commercial use availability (MIT License)"
        ],
        "primary_use_case": "Generating realistic, multilingual speech and diverse audio from text prompts for research and commercial applications.",
        "open_issues": 226,
        "cover_image_prompt": "A skilled voice actor in a soundproof booth, effortlessly transforming written text into a symphony of realistic speech and diverse audio effects. The booth is adorned with soundproofing panels that subtly display waveforms and spectrograms. The actor holds a script that glows with digital particles, representing the text input. The output is a vibrant sound wave emanating from the booth, showcasing music notes, laughter, and speech bubbles. Small UI elements on a nearby screen display the Bark logo and real-time audio processing. The scene is set in a modern recording studio with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 632815797,
        "name": "UnpromptedControl",
        "description": "Remove unwanted objects and restore images without prompts, powered by ControlNet.",
        "url": "https://github.com/vijishmadhavan/UnpromptedControl",
        "language": "Jupyter Notebook",
        "stars": 482,
        "forks": 48,
        "created_at": "2023-04-26T07:32:28Z",
        "updated_at": "2025-05-12T06:38:16Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2023-06-20T18:35:57Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/632815797/61298f94-51d6-4935-a381-deb3fbaffefd"
        ],
        "homepage": null,
        "readme_summary": "The UnpromptedControl repository provides a way to restore images and remove objects from images without user prompts. It leverages ControlNet and Stable Diffusion models for image inpainting and restoration, using techniques like controlnet-canny and OpenCV inpainting. The primary use case is to streamline image editing workflows by automating object removal and image restoration processes.",
        "key_features": [
            "No-prompt image restoration using controlnet-canny and stable-diffusion-2-inpainting techniques.",
            "Automatic object removal from images using OpenCV inpainting, deep learning-based image restoration, and blending techniques.",
            "Leverages ControlNetModel and StableDiffusionInpaintPipeline models."
        ],
        "primary_use_case": "Removing unwanted objects and restoring images without requiring user prompts.",
        "open_issues": 4,
        "cover_image_prompt": "An artist meticulously restoring a damaged painting using advanced digital tools. The artist uses a specialized brush that emits glowing particles, seamlessly filling in missing sections of the artwork. A UI element displays the 'UnpromptedControl' logo, subtly integrated into the canvas. The restored painting shines with vibrant colors, contrasting with the faded, damaged original. The scene is set in a modern digital art studio with soft, diffused lighting. The image should be in a digital painting style with clean lines and clear details, emphasizing the transformative power of the technology."
    }
]