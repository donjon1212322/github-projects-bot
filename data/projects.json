[
    {
        "id": 735441880,
        "name": "OpenTune",
        "description": "Un cliente de YouTube Music con Material Design 3, para Android",
        "url": "https://github.com/Arturo254/OpenTune",
        "language": "Kotlin",
        "stars": 485,
        "forks": 30,
        "created_at": "2023-12-25T00:23:00Z",
        "updated_at": "2025-05-28T09:47:22Z",
        "topics": [
            "client",
            "material-design-3",
            "open-source",
            "opspec",
            "youtube-api",
            "youtube-music-api",
            "youtubemusic"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-26T00:59:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/77fc9bcdc113adc7a6eadc50bcf0138f519076ceb467fccfdb1d72241734d940/Arturo254/OpenTune"
        ],
        "homepage": "https://opentune.netlify.app/",
        "readme_summary": "OpenTune is an open-source YouTube Music client for Android designed with Material Design 3. It provides an ad-free listening experience, background playback, and advanced search capabilities. Users can log in to their accounts, manage their library, download content for offline use, and enjoy features like synchronized lyrics and smart silence skipping.",
        "key_features": [
            "Ad-free playback",
            "Background playback",
            "Advanced search",
            "Account login and library management",
            "Offline mode",
            "Synchronized lyrics",
            "Smart silence skipping",
            "Volume normalization",
            "Tempo and pitch control",
            "Dynamic theming"
        ],
        "primary_use_case": "OpenTune is an open-source YouTube Music client for Android that provides an enhanced user experience with Material Design 3, offering advanced features for exploring, playing, and managing music content without the limitations of the official app.",
        "open_issues": 103,
        "cover_image_prompt": "A skilled musician meticulously crafting a song on a digital audio workstation that resembles a futuristic music studio. The musician is surrounded by floating musical notes and waveforms, representing the vast library of YouTube Music. The workstation's interface is sleek and modern, reflecting Material Design 3, with subtle UI elements showing playback controls and playlist management. Glowing particles of sound emanate from the speakers, filling the room with vibrant energy. The repository name, \"OpenTune,\" is subtly displayed on a screen in the background. The scene is bathed in soft, ambient light with a color scheme of deep blues and purples. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 930540725,
        "name": "exif-viewer",
        "description": "A browser extension to display EXIF data of images directly on web pages.",
        "url": "https://github.com/ternera/exif-viewer",
        "language": "JavaScript",
        "stars": 40,
        "forks": 1,
        "created_at": "2025-02-10T19:53:38Z",
        "updated_at": "2025-05-28T09:11:37Z",
        "topics": [
            "exif",
            "exif-data",
            "exif-data-extraction",
            "exif-metadata",
            "exiftool",
            "metadata",
            "metadata-extraction"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-17T22:33:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2307914d5402c5fee2a6a2036c8916ccc585f2c8eb9a101da157af4c390d86f0/ternera/exif-viewer"
        ],
        "homepage": "https://ternera.org/exif",
        "readme_summary": "The EXIF Metadata Viewer is a browser extension that allows users to view the hidden metadata embedded within images directly from their browser. By right-clicking on an image, users can access information such as camera settings, location data, and the date and time the image was captured.",
        "key_features": [
            "Displays camera settings (make, model, aperture, shutter speed, ISO)",
            "Shows location data (if GPS data is available)",
            "Reveals date and time of image capture",
            "Extracts software used and artist information"
        ],
        "primary_use_case": "Displaying EXIF data of images directly on web pages.",
        "open_issues": 1,
        "cover_image_prompt": "An archaeologist carefully brushing away sand to reveal a photograph buried in ancient ruins. The photograph glows faintly, and as the sand clears, EXIF data like camera settings and location appear as holographic projections around the image. The archaeologist holds a magnifying glass with UI elements overlaid on the lens, displaying the repository name 'EXIF Viewer'. The scene is set in a sunlit excavation site with a sense of discovery. Small code snippets and metadata visualizations float as particles in the air. The composition is focused and clean with warm, earthy tones. The image should be in digital painting style with clear outlines and rich details."
    },
    {
        "id": 879320294,
        "name": "pydoll",
        "description": "Pydoll is a library for automating chromium-based browsers without a WebDriver, offering realistic interactions. ",
        "url": "https://github.com/autoscrape-labs/pydoll",
        "language": "Python",
        "stars": 3593,
        "forks": 207,
        "created_at": "2024-10-27T15:46:43Z",
        "updated_at": "2025-05-28T08:46:47Z",
        "topics": [
            "anti-detection",
            "asynchronous",
            "bot-detection",
            "browser-automation",
            "bypasscaptcha",
            "captcha-breaking",
            "cdp",
            "chromium",
            "playwright",
            "puppeteer",
            "python",
            "recaptcha-v3",
            "selenium",
            "selenium-python",
            "turnstile-bypass",
            "webdriver",
            "webscraping"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T01:56:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/df2187fac1c31ef2d9730005066de07b9595d0545160e5aff1d5cf6dce82a6a9/autoscrape-labs/pydoll"
        ],
        "homepage": "https://autoscrape-labs.github.io/pydoll/",
        "readme_summary": "Pydoll is a Python library designed for asynchronous browser automation, eliminating the need for webdrivers. It provides features like native captcha bypass, human-like interactions, and multi-browser support, making it suitable for tasks such as web scraping and automating interactions with websites that employ bot detection mechanisms.",
        "key_features": [
            "Zero Webdrivers",
            "Native Captcha Bypass",
            "Async Performance",
            "Human-like Interactions",
            "Powerful Event System",
            "Multi-browser Support"
        ],
        "primary_use_case": "Automating chromium-based browsers without a WebDriver, offering realistic interactions for web scraping and bot creation.",
        "open_issues": 16,
        "cover_image_prompt": "A skilled artisan meticulously crafting intricate clockwork automatons that flawlessly navigate a complex maze representing the modern web. The automatons, powered by glowing code fragments, bypass various obstacles like captcha walls and bot detection systems with ease. One automaton smoothly interacts with a website displayed on a nearby holographic screen. The artisan's workshop is filled with tools and blueprints, subtly incorporating the 'Pydoll' logo. The scene is bathed in soft, diffused light, creating a sense of precision and ingenuity. The image should be in a detailed 3D isometric illustration style with vibrant colors and a focus on clarity."
    },
    {
        "id": 683837120,
        "name": "presenterm",
        "description": "A markdown terminal slideshow tool",
        "url": "https://github.com/mfontanini/presenterm",
        "language": "Rust",
        "stars": 6225,
        "forks": 124,
        "created_at": "2023-08-27T21:15:15Z",
        "updated_at": "2025-05-28T09:58:44Z",
        "topics": [
            "cli",
            "markdown",
            "markdown-slides",
            "presentation",
            "rust",
            "slides",
            "slideshow",
            "terminal"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-28T02:54:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/137b6d6ad19c50c2da9f6d4ce50737aaa0da5eac692dd68abfc811d79b2a1342/mfontanini/presenterm"
        ],
        "homepage": "https://mfontanini.github.io/presenterm/",
        "readme_summary": "Presenterm is a Rust-based tool that enables users to create and present slideshows directly from the terminal using markdown files. It supports a variety of features including image and animated GIF integration, customizable themes, code highlighting, and export options to PDF and HTML. The tool aims to provide a flexible and efficient way to deliver presentations in a terminal environment.",
        "key_features": [
            "Markdown-based presentations",
            "Image and animated GIF support",
            "Customizable themes",
            "Code highlighting",
            "PDF and HTML export",
            "Slide transitions",
            "Speaker notes",
            "Automatic reloading"
        ],
        "primary_use_case": "Creating and delivering terminal-based slideshow presentations from markdown files.",
        "open_issues": 19,
        "cover_image_prompt": "A skilled orator standing on a digital stage, transforming a plain markdown document into a captivating slideshow projected onto a large screen behind them. The orator gestures dynamically, highlighting key points that appear as vibrant visuals on the screen. The markdown document is represented as a simple scroll, while the slideshow is a dynamic display of images, code snippets, and stylized text. Subtle UI elements and glowing particles enhance the scene, connecting the presentation to software. The stage is set in a modern auditorium with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 935680941,
        "name": "wallendar",
        "description": "Wallendar: Turn your wallpaper into a beautiful calendar.",
        "url": "https://github.com/felixZmn/wallendar",
        "language": "Python",
        "stars": 33,
        "forks": 2,
        "created_at": "2025-02-19T20:57:04Z",
        "updated_at": "2025-05-28T04:48:10Z",
        "topics": [
            "calendar",
            "pillow",
            "python",
            "wallpaper"
        ],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-02-19T21:14:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bb217d60ed6d7f87b2ec443f8956c18b2c5433f10d3affaacde30c87ce0a49c3/felixZmn/wallendar"
        ],
        "homepage": "",
        "readme_summary": "Wallendar transforms your desktop wallpaper into a visually appealing calendar. It offers easy-to-use functionality, smart layout adjustments to fit your wallpaper, and extensive customization options for fonts, colors, and positioning to match your preferences.",
        "key_features": [
            "Easy to use",
            "Smart layout",
            "Customizable"
        ],
        "primary_use_case": "Turns a wallpaper into a calendar.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously crafting a wall calendar from a blank digital canvas. The artisan uses brushes that paint dates and days onto the canvas, seamlessly blending the calendar into a beautiful landscape wallpaper. A small UI element displays customization options for fonts and colors. The scene is set in a bright, modern studio with natural light streaming in. Subtle digital particles float around the canvas, representing the code transforming the wallpaper. The repository name, 'Wallendar,' is subtly etched into the artisan's workbench. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 47440536,
        "name": "cocos-engine",
        "description": "Cocos simplifies game creation and distribution with Cocos Creator, a free, open-source, cross-platform game engine. Empowering millions of developers to create high-performance, engaging 2D/3D games and instant web entertainment.",
        "url": "https://github.com/cocos/cocos-engine",
        "language": "C++",
        "stars": 8704,
        "forks": 2004,
        "created_at": "2015-12-05T03:28:59Z",
        "updated_at": "2025-05-28T06:51:10Z",
        "topics": [
            "3d",
            "cocos",
            "cocoscreator",
            "engine",
            "game-development",
            "game-engine",
            "gamedev",
            "metal",
            "mit-license",
            "open-source",
            "vulkan",
            "webgl",
            "webgl2",
            "webgpu"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-05-22T16:40:18Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/47440536/e87583ed-cf41-409d-a70b-d6da9a3d3079"
        ],
        "homepage": "https://www.cocos.com/en/creator",
        "readme_summary": "Cocos Engine is the runtime framework for the Cocos Creator editor, designed to provide high performance and cross-platform support for 2D and 3D games. It features modern graphics APIs, a customizable render pipeline, physically based rendering, and an easy-to-use TypeScript API. The engine is intended to be integrated within Cocos Creator and not used independently.",
        "key_features": [
            "Modern Graphics (Vulkan, Metal, WebGL)",
            "High Performance (C++ and TypeScript)",
            "Customizable Render Pipeline",
            "Extensible Surface Shader (GLSL 300)",
            "Physically Based Rendering (PBR)",
            "Easy TypeScript API"
        ],
        "primary_use_case": "Runtime engine for Cocos Creator, a game development tool.",
        "open_issues": 758,
        "cover_image_prompt": "A skilled architect meticulously constructing a grand cathedral using individual game development blocks. The architect carefully places blocks representing 3D models, UI elements, physics systems, and animation sequences, fitting them perfectly into the cathedral's structure. A holographic screen displays the Cocos Creator interface, subtly showcasing the engine's capabilities. The cathedral stands on a foundation labeled \"Cocos Engine,\" symbolizing its essential runtime nature. The scene is bathed in soft, diffused lighting, creating a sense of collaboration and precision. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 204164353,
        "name": "kestra",
        "description": ":zap: Workflow Automation Platform. Orchestrate & Schedule code in any language, run anywhere, 600+ plugins. Alternative to Airflow, n8n, Rundeck, VMware vRA, Zapier ...",
        "url": "https://github.com/kestra-io/kestra",
        "language": "Java",
        "stars": 18189,
        "forks": 1517,
        "created_at": "2019-08-24T13:56:15Z",
        "updated_at": "2025-05-28T10:03:53Z",
        "topics": [
            "automation",
            "data-orchestration",
            "devops",
            "high-availability",
            "infrastructure-as-code",
            "java",
            "low-code",
            "lowcode",
            "orchestration",
            "pipeline",
            "pipeline-as-code",
            "workflow"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-05-28T10:03:48Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/204164353/3f02eda2-04a4-47da-a0a5-76617a8617b3"
        ],
        "homepage": "https://kestra.io",
        "readme_summary": "Kestra is an open-source, event-driven orchestration platform that allows users to automate both scheduled and event-driven workflows. It provides a declarative YAML interface and a rich plugin ecosystem, enabling users to define workflows as code and integrate with various databases, cloud storage, and APIs. Kestra is designed to be scalable, version control friendly, and accessible through an intuitive UI.",
        "key_features": [
            "Everything as Code and from the UI",
            "Event-Driven & Scheduled Workflows",
            "Declarative YAML Interface",
            "Rich Plugin Ecosystem",
            "Intuitive UI & Code Editor",
            "Scalable",
            "Version Control Friendly"
        ],
        "primary_use_case": "Workflow automation and orchestration",
        "open_issues": 359,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra where each instrument represents a different software task. The conductor, representing Kestra, uses a glowing baton to trigger each instrument (task) in perfect sequence, creating a harmonious symphony of automated workflows. Visual cues like flowing data streams and subtle UI elements are integrated into the instruments. The scene is set in a modern, minimalist concert hall with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and sharp details, emphasizing clarity and precision."
    }
]