[
    {
        "id": 957959030,
        "name": "ghostmark",
        "description": null,
        "url": "https://github.com/adrian-kong/ghostmark",
        "language": "TypeScript",
        "stars": 11,
        "forks": 0,
        "created_at": "2025-03-31T12:13:34Z",
        "updated_at": "2025-04-06T07:17:11Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-04-01T09:43:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ad1a5b711ae3bc7c670582754a724654923e12a74bfdbe671dfd5ad730cceab5/adrian-kong/ghostmark"
        ],
        "homepage": null,
        "readme_summary": "Ghostmark is a tool for detecting leaks in confidential messages. It generates unique language variants of a message for each recipient, embedding subtle watermarks powered by Gemini. By comparing leaked text to the generated variants, the source of the leak can be identified.",
        "key_features": [
            "Generates unique language variants of text for each recipient.",
            "Embeds watermarks into text using subtle wording changes powered by Gemini.",
            "Enables tracing leaks back to the source by comparing leaked text to generated variants."
        ],
        "primary_use_case": "Leak detection in confidential messages by embedding subtle watermarks using language variations.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled calligrapher meticulously crafting identical letters, each subtly different, on a stack of parchment. A shadowy figure attempts to copy one of the letters, but a faint, glowing watermark reveals the original author. The calligrapher's desk is adorned with glowing screens displaying code snippets and data visualizations of text variations. The scene is set in a dimly lit study with a single spotlight illuminating the parchment. The image should be in a digital painting style with clear outlines and a focus on detail, emphasizing the subtle differences and the revealing watermark."
    },
    {
        "id": 873617127,
        "name": "igatha",
        "description": "Offline SOS signaling and recovery app for wars and disasters (iOS & Android).",
        "url": "https://github.com/nizarmah/igatha",
        "language": "Kotlin",
        "stars": 220,
        "forks": 4,
        "created_at": "2024-10-16T13:17:30Z",
        "updated_at": "2025-04-06T06:46:39Z",
        "topics": [
            "android",
            "bluetooth-le",
            "disaster-recovery",
            "disaster-response",
            "distress-detection",
            "distress-signal",
            "ios",
            "offline",
            "sos"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T01:05:56Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/873617127/2a869e32-2e16-488a-9d69-ca799e7a2491"
        ],
        "homepage": "",
        "readme_summary": "Igatha is an open-source SOS signaling and recovery app designed for offline emergency communication. It utilizes Bluetooth Low Energy and device sensors for distress detection and signaling, enabling users to send SOS signals and assist others in war zones and disaster areas without relying on traditional networks.",
        "key_features": [
            "Offline SOS signaling using Bluetooth Low Energy (BLE)",
            "Disaster detection using device sensors (accelerometer, gyroscope, barometer)",
            "Manual and automatic SOS signal sending",
            "Recovery mode for helping others",
            "Audible siren generation",
            "Pseudonymized identifier broadcasting"
        ],
        "primary_use_case": "Offline emergency communication in war zones and disaster areas where traditional networks are unavailable.",
        "open_issues": 6,
        "cover_image_prompt": "A lone figure in a war-torn landscape uses a handheld device to send a distress signal represented by a beam of light piercing through the smoke and debris. The signal connects with other figures in the distance, symbolizing rescue and aid. The device displays a simple UI with an SOS button and Bluetooth icon. Subtle tech elements include glowing digital particles forming a network around the figures and the word 'Igatha' subtly integrated into the device's design. The scene is set in a desaturated environment with a hopeful, warm light emanating from the signal. The image should be in a digital painting style with clear outlines and a focus on conveying hope and resilience."
    },
    {
        "id": 872380225,
        "name": "aya",
        "description": "Android ADB desktop app",
        "url": "https://github.com/liriliri/aya",
        "language": "TypeScript",
        "stars": 1701,
        "forks": 71,
        "created_at": "2024-10-14T10:39:33Z",
        "updated_at": "2025-04-06T09:53:15Z",
        "topics": [
            "adb",
            "android",
            "electron",
            "electron-app"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T09:11:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/defe064c2318a4dfb0d78e2ee8874f56d823c25f67ab055db8feb7819f7493b8/liriliri/aya"
        ],
        "homepage": "https://aya.liriliri.io",
        "readme_summary": "AYA is a desktop application that provides a GUI wrapper for ADB, allowing users to easily control Android devices. It offers features such as screen mirroring, file exploration, application management, and performance monitoring. The application supports Windows, macOS, and Linux.",
        "key_features": [
            "Screen mirror",
            "File explorer",
            "Application manager",
            "Process monitor",
            "Layout inspector",
            "CPU, memory and FPS monitor",
            "Logcat viewer",
            "Interactive shell"
        ],
        "primary_use_case": "Controlling Android devices from a desktop environment",
        "open_issues": 17,
        "cover_image_prompt": "A skilled mechanic in a high-tech garage, tuning an Android robot with a digital wrench. The robot's chest displays a screen mirroring an Android phone's interface, showing apps and system settings. Cables connect the robot to a desktop computer displaying ADB commands and logs. The garage is filled with glowing digital particles and UI elements, subtly connecting the scene to software. The repository name, 'AYA,' is subtly displayed on a tool cabinet. The scene is brightly lit and energetic. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 906490557,
        "name": "telegram-files",
        "description": "A self-hosted Telegram file downloader for continuous, stable, and unattended downloads.",
        "url": "https://github.com/jarvis2f/telegram-files",
        "language": "Java",
        "stars": 1274,
        "forks": 75,
        "created_at": "2024-12-21T03:49:33Z",
        "updated_at": "2025-04-06T10:01:06Z",
        "topics": [
            "docker",
            "downloader",
            "nextjs",
            "self-hosted",
            "shadcn-ui",
            "tdlib",
            "telegram",
            "unraid",
            "vertx"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T03:33:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ab0740633050711cdf7d2ec33756e46f741fa4577e81c0691cebdd72693c2688/jarvis2f/telegram-files"
        ],
        "homepage": "",
        "readme_summary": "The telegram-files repository provides a self-hosted solution for automatically downloading files from Telegram channels and groups. It supports multiple accounts, allows pausing and resuming downloads, and can automatically transfer files to other locations. The application also offers a responsive design with preview capabilities for downloaded media.",
        "key_features": [
            "Downloads files from Telegram channels and groups",
            "Supports multiple Telegram accounts",
            "Supports suspending and resuming downloads",
            "Auto-transfers files to other destinations",
            "Provides preview of downloaded videos and pictures",
            "Responsive design for mobile and PWA support"
        ],
        "primary_use_case": "Automated and unattended downloading of files from Telegram channels and groups.",
        "open_issues": 12,
        "cover_image_prompt": "A diligent librarian meticulously organizing telegram messages into labeled file cabinets. The librarian is surrounded by glowing streams of data representing telegram messages flowing into the cabinets. Each cabinet is clearly labeled with file types like 'videos', 'pictures', and 'documents'. A small UI screen hovers nearby, displaying a file download progress bar. The scene is set in a bright, modern library with a clean and organized aesthetic. The image should be in 3D isometric illustration style with soft lighting and pastel colors."
    },
    {
        "id": 626145619,
        "name": "textual-paint",
        "description": ":art: MS Paint in your terminal.",
        "url": "https://github.com/1j01/textual-paint",
        "language": "Python",
        "stars": 1009,
        "forks": 15,
        "created_at": "2023-04-10T22:26:49Z",
        "updated_at": "2025-04-06T06:33:50Z",
        "topics": [
            "ansi-art",
            "ansi-editor",
            "artscene",
            "ascii-art",
            "bbs",
            "drawing",
            "image",
            "image-editor",
            "irc",
            "mirc",
            "mspaint",
            "paint",
            "pixel-art",
            "pixel-editor",
            "terminal",
            "text-art",
            "textual",
            "tui"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2024-11-11T04:37:52Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/626145619/c71d0c14-c3e4-42ec-9ed5-512d8babc664"
        ],
        "homepage": "https://pypi.org/project/textual-paint/",
        "readme_summary": "Textual Paint is a terminal-based image editor that brings the classic MS Paint experience to the command line. It offers a comprehensive set of tools, file format support, and features like undo/redo, localization, and dark mode, enabling users to create and edit images directly within their terminal.",
        "key_features": [
            "Open and save images",
            "MS Paint toolset",
            "Color palette",
            "Efficient screen updates and undo/redo history",
            "SSH compatibility",
            "Brush previews",
            "Status bar",
            "Menu bar",
            "Keyboard shortcuts",
            "Flip/Rotate, Stretch/Skew, Edit Colors, Set As Wallpaper",
            "Localization into 26 languages",
            "Dark mode",
            "Zooming"
        ],
        "primary_use_case": "Terminal-based image editing inspired by MS Paint.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine an artist sitting at a vintage computer terminal, using it as a digital easel. Instead of traditional paint tools, the artist wields a keyboard and mouse, creating pixel art directly within the terminal window. The screen displays a vibrant, detailed image reminiscent of classic MS Paint creations, showcasing the terminal's ability to function as a canvas. The artist's face is illuminated by the glow of the screen, reflecting their creative passion. Small code snippets and UI elements float subtly around the scene, connecting the art to the underlying software. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 924856571,
        "name": "deepseek-r1-chat",
        "description": "chatbot made with gradio using opensource deepseek-r1 running locally",
        "url": "https://github.com/Rizwankaka/deepseek-r1-chat",
        "language": "Python",
        "stars": 282,
        "forks": 44,
        "created_at": "2025-01-30T19:14:20Z",
        "updated_at": "2025-04-06T09:01:16Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-01-30T19:33:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1c658ed6c0769da4b87a84176528e7665a8415a4e2ebcb38457f59776bb9e87f/Rizwankaka/deepseek-r1-chat"
        ],
        "homepage": null,
        "readme_summary": "DeepSeek Code Companion is an AI-powered coding assistant that runs completely locally. It leverages the DeepSeek-r1 language model through Ollama and provides features such as Python expertise, debugging assistance, code documentation, and solution design, all while ensuring privacy.",
        "key_features": [
            "Python Expert",
            "Debugging Assistant",
            "Code Documentation",
            "Solution Design",
            "Runs 100% locally",
            "Privacy-focused"
        ],
        "primary_use_case": "AI-powered coding assistance, debugging help, and programming guidance running locally.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled Python programmer, depicted as a modern-day alchemist, sits at a glowing workstation, surrounded by bubbling beakers filled with code. The programmer is using a magical interface (Gradio) to query a wise, ancient AI oracle (DeepSeek-r1) residing within a crystal ball. The oracle provides insightful answers and debugging solutions, which the programmer carefully transcribes onto digital scrolls. The scene is set in a futuristic workshop filled with subtle tech elements like glowing data streams and holographic code snippets. The composition is clean and focused with a vibrant, yet calming color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 598667202,
        "name": "browser",
        "description": "Lightpanda: the headless browser designed for AI and automation",
        "url": "https://github.com/lightpanda-io/browser",
        "language": "Zig",
        "stars": 7930,
        "forks": 178,
        "created_at": "2023-02-07T15:19:34Z",
        "updated_at": "2025-04-06T07:22:39Z",
        "topics": [
            "browser",
            "browser-automation",
            "cdp",
            "headless",
            "playwright",
            "puppeteer",
            "zig"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-04-04T08:06:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3fa3a38f7639e411a9c58008ac14857a586df0ff4c37cf48f9ab1ec5464b1b72/lightpanda-io/browser"
        ],
        "homepage": "https://lightpanda.io",
        "readme_summary": "Lightpanda Browser is an open-source, headless browser designed for AI and automation tasks. It emphasizes fast execution, low memory footprint, and compatibility with tools like Playwright and Puppeteer through the Chrome DevTools Protocol (CDP). It's intended for use cases such as AI agent development, LLM training, web scraping, and testing.",
        "key_features": [
            "Javascript execution",
            "Support of Web APIs (partial, WIP)",
            "Compatible with Playwright, Puppeteer through CDP (WIP)",
            "Ultra-low memory footprint",
            "Exceptionally fast execution",
            "Instant startup"
        ],
        "primary_use_case": "Fast web automation for AI agents, LLM training, scraping and testing.",
        "open_issues": 62,
        "cover_image_prompt": "A skilled clockmaker meticulously assembling intricate gears within a giant, transparent browser window. Each gear represents a different web technology (JavaScript, HTML, Web APIs) fitting perfectly together to drive the browser. The clockmaker wears a futuristic headset displaying performance metrics like memory usage and execution speed. Digital particles flow around the gears, visualizing data processing. The repository name, 'Lightpanda Browser,' is subtly etched onto the largest gear. The scene is set in a clean, brightly lit workshop with a focus on precision and efficiency. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 646480766,
        "name": "roop",
        "description": "one-click face swap",
        "url": "https://github.com/s0md3v/roop",
        "language": "Python",
        "stars": 29578,
        "forks": 6701,
        "created_at": "2023-05-28T14:37:54Z",
        "updated_at": "2025-04-06T07:03:48Z",
        "topics": [
            "ai",
            "face-swap"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-03-25T04:01:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d55690fce8a75edb3c4342df17e65745e55dfae6784454f98842bccdcd2f6986/s0md3v/roop"
        ],
        "homepage": "",
        "readme_summary": "Roop is a one-click face-swapping tool that allows users to replace faces in videos with a single image, eliminating the need for datasets or training. It supports various frame processors and offers options to control output video quality and encoding. The tool can be used in headless mode for automated processing.",
        "key_features": [
            "One-click face swapping",
            "No dataset or training required",
            "Headless mode support",
            "Various frame processors (face_swapper, face_enhancer)",
            "Options for controlling output video quality and encoding"
        ],
        "primary_use_case": "Replacing faces in videos with a face of the user's choice.",
        "open_issues": 0,
        "cover_image_prompt": "An artist in a digital studio, seamlessly swapping faces on a film reel using a high-tech brush. The original film shows a generic actor, while the artist's tablet displays a portrait of a new face. The transformed film reel emerges with the new face perfectly integrated. Subtle UI elements on the tablet show face detection and swapping algorithms. The studio is bathed in soft, cinematic lighting with a focus on the artist's focused expression. The image should be in a digital painting style with clean lines and realistic textures."
    }
]