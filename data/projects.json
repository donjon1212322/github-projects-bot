[
    {
        "id": 1041039196,
        "name": "wifi-3d-fusion",
        "description": "WiFi-3D-Fusion is an open-source research project that leverages WiFi CSI signals and deep learning to estimate 3D human pose, fusing wireless sensing with computer vision techniques for next-generation spatial awareness.",
        "url": "https://github.com/MaliosDark/wifi-3d-fusion",
        "language": "Python",
        "stars": 408,
        "forks": 18,
        "created_at": "2025-08-19T22:22:13Z",
        "updated_at": "2025-08-30T10:03:22Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-26T21:22:36Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1041039196/ac401968-2dc8-417c-8738-899d5f5b9e03"
        ],
        "homepage": "",
        "readme_summary": "The WiFi-3D-Fusion repository focuses on estimating 3D human pose using WiFi Channel State Information (CSI) signals and deep learning techniques. It aims to fuse wireless sensing with computer vision to achieve advanced spatial awareness, enabling applications like activity recognition and human-computer interaction.",
        "key_features": [
            "3D human pose estimation",
            "WiFi CSI signal processing",
            "Deep learning-based pose estimation",
            "Fusion of wireless sensing and computer vision"
        ],
        "primary_use_case": "Research and development of advanced spatial awareness systems using WiFi and deep learning.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled sculptor shaping a human figure out of shimmering WiFi waves in a bright, modern studio. The sculptor carefully molds the waves, guided by a holographic display showing the underlying code and data visualizations. The finished sculpture is a clear, recognizable human form, radiating a soft, blue glow. Small UI elements float around the scene, displaying real-time pose estimation data. The repository name, 'WiFi-3D-Fusion,' is subtly etched into the base of the sculpture. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and a sense of technological artistry."
    },
    {
        "id": 1045681332,
        "name": "vimmaster",
        "description": "VIM Master: in-browser game that teaches core Vim motions and editing commands through short, focused levels. No installs requiredâ€”just open `index.html` and start practicing.",
        "url": "https://github.com/renzorlive/vimmaster",
        "language": "HTML",
        "stars": 981,
        "forks": 43,
        "created_at": "2025-08-27T14:53:51Z",
        "updated_at": "2025-08-30T09:57:47Z",
        "topics": [
            "coding",
            "education",
            "game",
            "indie-game",
            "vim"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-29T17:32:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2286e0c35108ce25140f3f626eb0d9695f8fc08a80304f76e463a19dccba99f1/renzorlive/vimmaster"
        ],
        "homepage": "https://renzorlive.github.io/vimmaster/",
        "readme_summary": "VIM Master is an in-browser game designed to teach users core Vim motions and editing commands through a series of short, focused levels. It requires no installation, allowing users to practice Vim skills directly in their browser.",
        "key_features": [
            "Normal/Insert modes with status bar",
            "Command log",
            "Action outcome validation",
            "Support for basic Vim commands (h, j, k, l, w, b, e, gg, G, 0, $, x, dd, dw, yy, p, i, a, o/O, cw, D, r, :q, :wq)",
            "Numeric counts for motions/operators",
            "Undo/redo support (u, Ctrl+r)",
            "Completion modal",
            "Ctrl-[ mapped to Escape",
            "Vim-style search (/, ?)",
            "Finish celebration",
            "Badge system",
            "Cheat Mode",
            "Challenge Mode"
        ],
        "primary_use_case": "Learning and practicing Vim motions and editing commands in an interactive game environment.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a grandmaster chess player, but instead of chess pieces, they are moving lines of code on a holographic board. Each move corresponds to a Vim command, and successful sequences light up the board with vibrant colors. The player is focused, with subtle UI elements displaying the current Vim mode and command log. The background features a stylized representation of a text editor. The repository name, 'VIM Master,' is subtly etched onto the base of the holographic board. The scene is set in a futuristic training room with soft, diffused lighting. The image should be in a 3D isometric illustration style with clean lines and a vibrant color palette."
    },
    {
        "id": 105698144,
        "name": "popsicle",
        "description": "Multiple USB File Flasher",
        "url": "https://github.com/pop-os/popsicle",
        "language": "Rust",
        "stars": 734,
        "forks": 86,
        "created_at": "2017-10-03T20:12:37Z",
        "updated_at": "2025-08-29T18:21:15Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-05-16T17:31:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/90a87459f5854aba5864a36f5a1fe9245786878c3b02b9114187a2dc533d3389/pop-os/popsicle"
        ],
        "homepage": "",
        "readme_summary": "Popsicle is a Linux utility, written in Rust, designed for flashing multiple USB devices in parallel. It provides both a command-line interface (CLI) and a GTK-based graphical user interface for selecting images and devices, monitoring the flashing process, and viewing a summary upon completion.",
        "key_features": [
            "Parallel USB device flashing",
            "CLI and GTK front ends",
            "Dynamic device list refresh",
            "Image selection",
            "Device selection",
            "Flashing progress monitoring",
            "Summary of flashing process",
            "Internationalization support using Project Fluent"
        ],
        "primary_use_case": "Flashing multiple USB devices simultaneously on Linux systems.",
        "open_issues": 26,
        "cover_image_prompt": "A baker standing in front of a large oven, simultaneously loading multiple USB-shaped loaves of bread into it. The oven has a digital display showing progress bars for each loaf. Once baked, the loaves are ejected, each stamped with a different operating system logo. Small screens around the oven show flashing logs and device status. The scene is set in a clean, modern bakery with bright, inviting lighting. The image should be in 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1001009739,
        "name": "NewVideoFormatConverter",
        "description": null,
        "url": "https://github.com/JialiLiang/NewVideoFormatConverter",
        "language": "Python",
        "stars": 26,
        "forks": 4,
        "created_at": "2025-06-12T17:04:07Z",
        "updated_at": "2025-08-30T08:26:35Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-19T07:59:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0d60bc1f9420e0dd9805912d5ae3d1b807fb63ea518e45576e6fba74ad8e4d6b/JialiLiang/NewVideoFormatConverter"
        ],
        "homepage": null,
        "readme_summary": "The NewVideoFormatConverter is a Python-based toolkit for video processing, offering features like video format conversion, AI-powered localization (AdLocalizer), and additional tools for static generation, hook remixing, and montage creation. It allows users to convert videos to different formats, translate and generate voiceovers for videos in multiple languages using AI, and provides a modular file structure for better organization and maintainability.",
        "key_features": [
            "Video format conversion (square, landscape, vertical)",
            "AI-powered video localization (AdLocalizer)",
            "Multi-language translation with OpenAI GPT-4",
            "Voice generation with ElevenLabs",
            "Background processing with real-time progress",
            "Modular file structure"
        ],
        "primary_use_case": "Converting video formats and localizing video content for different audiences and platforms using AI-powered tools.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan in a vibrant workshop meticulously reshaping a large, amorphous clay sculpture into various distinct forms: a perfect square, a wide landscape, and a tall vertical. AI assistants float around, translating spoken words into different languages, which then materialize as subtitles on the sculptures. Small screens display video editing interfaces and language translation settings. The workshop is filled with digital particles and glowing elements, subtly connecting the artistic process to software. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 68485692,
        "name": "mapscii",
        "description": "ðŸ—º  MapSCII is a Braille & ASCII world map renderer for your console - enter => telnet mapscii.me <= on Mac (brew install telnet) and Linux, connect with PuTTY on Windows",
        "url": "https://github.com/rastapasta/mapscii",
        "language": "JavaScript",
        "stars": 8366,
        "forks": 271,
        "created_at": "2016-09-18T00:40:43Z",
        "updated_at": "2025-08-30T09:26:58Z",
        "topics": [
            "ascii-art",
            "braille",
            "console",
            "console-application",
            "map",
            "openstreetmap",
            "vector-tiles"
        ],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2023-01-10T15:14:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a9add72d3cfe71e592f5ad7ad541fa32492d7c9bb568803714f8c7c6c9d28da2/rastapasta/mapscii"
        ],
        "homepage": "",
        "readme_summary": "MapSCII is a console-based application that renders a world map using Braille and ASCII characters. It allows users to explore map data, discover points of interest, and customize the map's appearance, all within a terminal environment.",
        "key_features": [
            "Mouse-based drag and zoom",
            "Point-of-Interest discovery",
            "Mapbox Styles support for customization",
            "Vector tile server compatibility",
            "Offline VectorTile/MBTiles support",
            "Terminal compatibility (Linux, OSX)",
            "Optimized algorithms for performance"
        ],
        "primary_use_case": "Interactive exploration of map data within a terminal.",
        "open_issues": 39,
        "cover_image_prompt": "A cartographer sitting at a vintage computer, transforming complex vector map data into a beautiful, detailed world map rendered entirely in Braille and ASCII characters on the screen. The cartographer uses a magnifying glass to examine the intricate details of the map. Small UI elements on the screen show the map data being processed. The scene is set in a cozy, dimly lit study filled with maps and globes. Digital particles flow from the computer, forming the ASCII map. The composition is focused and clean, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details."
    },
    {
        "id": 32572504,
        "name": "commix",
        "description": "Automated All-in-One OS Command Injection Exploitation Tool.",
        "url": "https://github.com/commixproject/commix",
        "language": "Python",
        "stars": 5414,
        "forks": 888,
        "created_at": "2015-03-20T08:38:26Z",
        "updated_at": "2025-08-30T09:25:25Z",
        "topics": [
            "bugbounty",
            "command-injection",
            "commix",
            "detection",
            "exploitation",
            "open-source",
            "pentesting",
            "python",
            "takeover",
            "vulnerability-scanner"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-29T03:52:30Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/32572504/08c0a000-a9d2-11eb-9822-19a56056c6d4"
        ],
        "homepage": "https://commixproject.com",
        "readme_summary": "Commix is an open-source penetration testing tool written in Python that automates the detection and exploitation of command injection vulnerabilities. It allows security professionals and researchers to identify and exploit command injection flaws in web applications and other systems.",
        "key_features": [
            "Automated detection of command injection vulnerabilities",
            "Exploitation of command injection vulnerabilities",
            "Support for various operating systems",
            "Extensive options and switches for customization",
            "Filters bypasses techniques"
        ],
        "primary_use_case": "Penetration testing and vulnerability assessment for command injection flaws.",
        "open_issues": 5,
        "cover_image_prompt": "A detective meticulously examining a network of pipes and wires, tracing a malicious command injected into the system. The detective uses a magnifying glass to find the injected command, which appears as a glowing, corrupted data stream flowing through the network. Small UI elements display code snippets and server logs, subtly connecting the scene to software. The setting is a dimly lit server room with flickering lights, creating a sense of urgency. The image should be in a 3D isometric illustration style with clear outlines and a dark blue and green color scheme."
    }
]