[
    {
        "id": 512188824,
        "name": "cdimage",
        "description": "A tool for burning visible pictures on a compact disc surfase",
        "url": "https://github.com/arduinocelentano/cdimage",
        "language": "C++",
        "stars": 402,
        "forks": 15,
        "created_at": "2022-07-09T13:10:08Z",
        "updated_at": "2025-06-09T10:01:55Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2022-07-23T16:15:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1bc4d19c2de38b52b28bf9862a9db4ddc747e5bc6e68eb7f9f204c3800b727f5/arduinocelentano/cdimage"
        ],
        "homepage": null,
        "readme_summary": "CDImage is a C++ tool that allows users to burn visible pictures onto the surface of a compact disc. It provides a GUI with a visual preview mode and utilizes coordinate conversion code based on previous implementations. The project has been ported to Qt6 and offers a Windows binary build for ease of use.",
        "key_features": [
            "Burns visible pictures onto CD surfaces",
            "GUI with visual preview mode",
            "Coordinate conversion code based on unDEFER's implementation",
            "Ported to Qt6"
        ],
        "primary_use_case": "Burning visible images onto compact disc surfaces.",
        "open_issues": 15,
        "cover_image_prompt": "A skilled artisan meticulously etching a complex image onto the surface of a compact disc using a beam of light, transforming the disc into a visible work of art. The artisan's workshop is filled with various CDs, each displaying unique images. Subtle UI elements float around the artisan, showing the software interface and image processing parameters. The scene is bathed in soft, focused lighting, highlighting the intricate details of the etching process. The composition is clean and focused, with a warm color scheme. The image should be in a digital painting style with clear outlines and rich details."
    },
    {
        "id": 33242423,
        "name": "flowblade",
        "description": "Video Editor for Linux",
        "url": "https://github.com/jliljebl/flowblade",
        "language": "Python",
        "stars": 2833,
        "forks": 189,
        "created_at": "2015-04-01T10:49:55Z",
        "updated_at": "2025-06-09T09:19:11Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-06T09:47:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f2a5a45f2f9e953979366e8031d7d656a426e1ff6574449107674b9bf8f9ff92/jliljebl/flowblade"
        ],
        "homepage": "",
        "readme_summary": "Flowblade is a multitrack non-linear video editor for Linux that allows users to create movies from various media types. It offers a range of features including advanced editing tools, image compositing, a wide array of filters, media generators, and support for batch encoding and USB shuttle control, making it suitable for both basic and advanced video editing tasks.",
        "key_features": [
            "Multitrack non-linear video editing",
            "Image compositing with blend modes and wipes",
            "Extensive image and audio filters",
            "Media generators for animated texts and backgrounds",
            "Batch encoding and media re-linking",
            "USB Shuttle playback control"
        ],
        "primary_use_case": "Composing movies from video, audio, and graphics files, with tools for cutting, filtering, and compositing.",
        "open_issues": 52,
        "cover_image_prompt": "Imagine a film director meticulously editing a movie on a digital timeline, splicing together scenes of nature, cityscapes, and human interactions. The director uses a digital scalpel to precisely cut and arrange clips, adding layers of sound and visual effects. Glowing waveforms represent audio tracks, while shimmering particles symbolize video filters. The Flowblade logo is subtly integrated into the director's monitor. The scene is set in a modern, minimalist editing suite with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 454812611,
        "name": "Librum",
        "description": "The Librum client application",
        "url": "https://github.com/Librum-Reader/Librum",
        "language": "C++",
        "stars": 4545,
        "forks": 146,
        "created_at": "2022-02-02T14:43:19Z",
        "updated_at": "2025-06-09T09:52:27Z",
        "topics": [
            "cmake",
            "cpp",
            "ebook-reader",
            "ebooks",
            "library-management",
            "linux",
            "qml",
            "qt",
            "qt6",
            "reader"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-07-01T14:46:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bf8259cabe5b73b29863ce3a3b8eeb6c5daab0a58ff5fd23671f5e9eb06d792c/Librum-Reader/Librum"
        ],
        "homepage": "https://librumreader.com",
        "readme_summary": "Librum is a C++ based application designed for reading and managing e-book libraries. It offers features such as note-taking, AI tooling, and highlighting, along with the ability to manage an online library accessible from any device. The application also provides free access to over 70,000 books and personal reading statistics.",
        "key_features": [
            "E-book reader",
            "Online library management",
            "Note-taking",
            "AI tooling",
            "Highlighting",
            "Customization",
            "Free access to books",
            "Reading statistics"
        ],
        "primary_use_case": "Reading and managing e-book libraries with advanced features like note-taking and AI tooling.",
        "open_issues": 27,
        "cover_image_prompt": "A librarian meticulously organizing a vast, digital library within a futuristic, glowing treehouse. The treehouse is filled with interconnected screens displaying ebook covers and reading statistics. The librarian, wearing a high-tech headset, uses AI tools to categorize and enhance the books. Beams of light connect the treehouse to various devices, symbolizing access from anywhere. The scene is set against a backdrop of a serene, starry night. Small UI elements and code snippets are subtly integrated into the treehouse's design. The image should be in 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 531307134,
        "name": "UEVR",
        "description": "Universal Unreal Engine VR Mod (4.8 - 5.4)",
        "url": "https://github.com/praydog/UEVR",
        "language": "C++",
        "stars": 3619,
        "forks": 187,
        "created_at": "2022-09-01T00:34:53Z",
        "updated_at": "2025-06-09T03:11:40Z",
        "topics": [
            "cmkr",
            "cpp",
            "modding",
            "pcvr",
            "unreal",
            "unreal-engine",
            "virtual-reality",
            "vr"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-03T22:19:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7d7288928eb8ef806ea61ab65c3adf98f23d713d3135381699732b5908fc4a7d/praydog/UEVR"
        ],
        "homepage": "http://uevr.io",
        "readme_summary": "UEVR is a universal VR mod for Unreal Engine 4 and 5 games, providing full 6DOF, stereoscopic 3D, and motion control support. It features a frontend GUI for easy injection, supports OpenVR and OpenXR runtimes, and offers multiple rendering modes to maximize compatibility. The mod also includes a plugin system that allows users to add motion controls and other features.",
        "key_features": [
            "Full 6DOF and stereoscopic 3D support",
            "Native Unreal Engine stereo rendering",
            "Frontend GUI for process injection",
            "OpenVR and OpenXR runtime support",
            "Multiple rendering modes (Native Stereo, Synchronized Sequential, AFR)",
            "Automatic UI projection in 3D space",
            "Optional motion controls and roomscale movement",
            "User-authored UI for adding motion controls",
            "In-game menu for settings adjustments",
            "CVar access for fixing shaders and performance",
            "Per-game configurations",
            "C++ Plugin system and Blueprint support for modders"
        ],
        "primary_use_case": "Enabling VR support for Unreal Engine games that lack native VR integration.",
        "open_issues": 151,
        "cover_image_prompt": "A skilled artisan meticulously crafting a pair of virtual reality goggles, seamlessly merging them with the fragmented pieces of various video game worlds. The artisan carefully aligns floating shards of game environments, UI elements, and character models, integrating them into the VR headset's lenses. Subtle code snippets and Unreal Engine icons subtly float around the artisan, representing the underlying technology. The scene is set in a bright, futuristic workshop with holographic displays showcasing compatible games. The image should be in a vibrant, 3D isometric illustration style with a focus on clarity and detail."
    },
    {
        "id": 3884981,
        "name": "JUCE",
        "description": "JUCE is an open-source cross-platform C++ application framework for desktop and mobile applications, including VST, VST3, AU, AUv3, LV2 and AAX audio plug-ins.",
        "url": "https://github.com/juce-framework/JUCE",
        "language": "C++",
        "stars": 7262,
        "forks": 1840,
        "created_at": "2012-03-31T11:19:43Z",
        "updated_at": "2025-06-09T10:12:42Z",
        "topics": [
            "aax",
            "au",
            "audio",
            "audiounit",
            "auv3",
            "c-plus-plus",
            "cpp",
            "framework",
            "juce",
            "plugin",
            "vst",
            "vst3"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-06-02T08:27:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8591570d3a433422836cd9027fb15739988922edfdac6a96b8c27dbf60e7630d/juce-framework/JUCE"
        ],
        "homepage": "https://juce.com",
        "readme_summary": "JUCE is a comprehensive C++ framework designed for developing cross-platform applications. It simplifies the creation of desktop and mobile applications, with a strong focus on audio plug-ins supporting various formats like VST, AU, and AAX. Projects can be managed using either the Projucer tool or CMake, and exported to multiple IDEs and build systems.",
        "key_features": [
            "Cross-platform C++ application framework",
            "Support for VST, VST3, AU, AUv3, AAX, and LV2 audio plug-ins",
            "Project management with Projucer or CMake",
            "Project export for Xcode, Visual Studio, Android Studio, and Linux Makefiles"
        ],
        "primary_use_case": "Creating cross-platform desktop and mobile applications, especially audio plug-ins and plug-in hosts.",
        "open_issues": 245,
        "cover_image_prompt": "A skilled architect standing before a grand, adaptable building framework, seamlessly integrating various architectural styles (representing different platforms and plugin formats). The architect carefully fits together modules labeled 'VST', 'AU', 'AAX', and 'Mobile' into the framework, creating a unified structure. Digital blueprints float nearby, displaying code snippets and UI elements. The scene is set in a bright, modern design studio with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and clear details, subtly incorporating the JUCE logo."
    },
    {
        "id": 98831796,
        "name": "FlyingCarpet",
        "description": "Cross-platform AirDrop. File transfer between Android, iOS, Linux, macOS, and Windows over ad hoc WiFi. No network infrastructure required, just two devices with WiFi chips (and optionally Bluetooth) in close range.",
        "url": "https://github.com/spieglt/FlyingCarpet",
        "language": "Rust",
        "stars": 4004,
        "forks": 164,
        "created_at": "2017-07-30T23:59:30Z",
        "updated_at": "2025-06-09T08:37:01Z",
        "topics": [
            "android",
            "bluetooth",
            "bluetooth-low-energy",
            "cross-platform",
            "f-droid",
            "fdroid",
            "file-transfer",
            "ios",
            "kotlin",
            "linux",
            "macos",
            "rust",
            "tauri",
            "windows",
            "wireless"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-06T01:02:43Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/98831796/e7156988-0ec5-4a22-96c5-ed0bfa5543a7"
        ],
        "homepage": "",
        "readme_summary": "Flying Carpet is a cross-platform file transfer tool that enables users to send and receive files between Android, iOS, Linux, macOS, and Windows devices using ad hoc WiFi or Bluetooth. It eliminates the need for a shared network or internet connection, making it ideal for situations where network infrastructure is unavailable or inconvenient. The application is available as standalone executables and installers for various platforms.",
        "key_features": [
            "Cross-platform file transfer (Android, iOS, Linux, macOS, Windows)",
            "Ad hoc WiFi transfer (no network infrastructure required)",
            "Bluetooth for transfer negotiation",
            "Standalone executable versions available",
            "F-Droid availability"
        ],
        "primary_use_case": "File transfer between devices on different operating systems without requiring a shared network or internet connection.",
        "open_issues": 10,
        "cover_image_prompt": "Imagine a skilled artisan at a bustling global marketplace, effortlessly transferring precious artifacts between diverse stalls representing Android, iOS, Linux, macOS, and Windows. The artisan uses glowing, ethereal threads of WiFi and Bluetooth to connect devices, bypassing tangled cables and complex networks. Each stall displays a small screen showcasing the FlyingCarpet interface. Digital particles swirl around the transferred artifacts, symbolizing data packets. The scene is set in a vibrant, sunlit plaza. The image should be in a 3D isometric illustration style with rich details and a warm, inviting color scheme."
    }
]