[
    {
        "id": 997779702,
        "name": "yin",
        "description": null,
        "url": "https://github.com/SaverinOnRails/yin",
        "language": "Zig",
        "stars": 82,
        "forks": 0,
        "created_at": "2025-06-07T06:55:20Z",
        "updated_at": "2025-09-10T10:02:29Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T11:39:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d2dea00440b20b9024cbf5219a8b74160f4d8149f135419cf0e2b0942ecf1579/SaverinOnRails/yin"
        ],
        "homepage": null,
        "readme_summary": "Yin is an efficient animated wallpaper daemon, inspired by swww, that allows users to switch between wallpapers without restarting the daemon. It supports various image formats (png, jpeg, gif) and mp4 videos, aiming for CPU efficiency, especially for short videos and live wallpapers.",
        "key_features": [
            "Animated wallpaper support",
            "Runtime control (switch wallpapers without restarting)",
            "Support for png, jpeg, gif, and mp4 formats",
            "CPU efficient video playback (optimized for short videos)",
            "IPC for pausing/resuming animated wallpapers"
        ],
        "primary_use_case": "Displaying animated wallpapers on a Wayland desktop environment.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled animator sitting at a digital easel, bringing a static desktop wallpaper to life with a wave of their hand. The easel displays a vibrant, animated scene flowing seamlessly onto a stylized computer screen behind them. Small UI elements on the easel show controls for pausing, resuming, and switching between different animated wallpapers. Digital particles swirl around the animator's hand, representing the dynamic nature of the wallpaper. The scene is set in a bright, modern studio with soft, diffused lighting. The image should be in a flat design style with clear iconography and a pastel color scheme."
    },
    {
        "id": 1048965829,
        "name": "pose-nudge",
        "description": "üê¢ AI-powered desktop app for real-time posture correction - detects forward head posture via webcam and sends smart notifications to improve your sitting habits",
        "url": "https://github.com/DDULDDUCK/pose-nudge",
        "language": "TypeScript",
        "stars": 51,
        "forks": 3,
        "created_at": "2025-09-02T09:37:51Z",
        "updated_at": "2025-09-10T08:54:04Z",
        "topics": [],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-09-06T06:05:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4efde83c6da018cfa204ae5cbe622afdb50978b2a65184af97c4a26dc75b54a6/DDULDDUCK/pose-nudge"
        ],
        "homepage": null,
        "readme_summary": "Pose Nudge is a TypeScript-based desktop application that uses a webcam to analyze a user's posture in real-time. It detects forward head posture and provides smart notifications and recommendations to help users improve their sitting habits and maintain proper posture.",
        "key_features": [
            "Real-time Posture Analysis",
            "Forward Head Posture Detection",
            "Smart Notifications",
            "Posture Score",
            "Statistics Dashboard",
            "Personalized Settings"
        ],
        "primary_use_case": "Real-time posture correction and improvement through webcam-based analysis and personalized feedback.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a sculptor meticulously chiseling a human figure, but instead of stone, they're shaping a person's posture with beams of light. The light originates from a webcam above, analyzing the figure's alignment. A small screen displays posture scores and subtle UI elements. The sculptor gently nudges the figure's head and shoulders into perfect alignment. Digital particles flow around the figure, visualizing the posture correction process. The repository name, 'Pose Nudge,' is subtly etched onto the sculptor's workbench. The scene is set in a bright, modern studio. The image should be in a 3D isometric illustration style with soft, diffused lighting and a pastel color scheme."
    },
    {
        "id": 994252890,
        "name": "jaaz",
        "description": "The world's first open-source multimodal creative assistant  This is a substitute for Canva and Manus that prioritizes privacy and is usable locally.",
        "url": "https://github.com/11cafe/jaaz",
        "language": "TypeScript",
        "stars": 3709,
        "forks": 323,
        "created_at": "2025-06-01T14:53:08Z",
        "updated_at": "2025-09-10T10:09:19Z",
        "topics": [
            "agent",
            "ai",
            "aiagent",
            "aiimage",
            "aiimagegenerator",
            "aitool",
            "aitools",
            "canva",
            "comfyui",
            "flux",
            "stable-diffusion"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-10T01:49:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/994252890/6ccfae03-a7a8-4f43-8698-7e8aa684291d"
        ],
        "homepage": "https://jaaz.app",
        "readme_summary": "Jaaz is an open-source multimodal creative assistant that serves as a privacy-focused, locally usable alternative to tools like Canva and Manus. It allows users to generate images and videos from prompts, create visual storyboards, and utilize a smart AI agent system for object insertion, style transfer, and logic control.",
        "key_features": [
            "One-Prompt Image & Video Generation",
            "Magic Canvas & Magic Video (Prompt-free creation)",
            "Infinite Canvas & Visual Storyboarding",
            "Smart AI Agent System"
        ],
        "primary_use_case": "Creative content generation (images and videos) and visual storyboarding using AI.",
        "open_issues": 29,
        "cover_image_prompt": "Imagine a skilled architect using a magical canvas to effortlessly design and construct buildings. The architect sketches ideas with simple lines and arrows, which the canvas instantly interprets and transforms into detailed blueprints and 3D models. UI elements representing Jaaz subtly appear on the canvas, showcasing its capabilities. The scene is set in a bright, airy studio filled with creative tools and digital interfaces. Glowing particles of data flow from the architect's stylus to the canvas, bringing the designs to life. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 857274678,
        "name": "digler",
        "description": "Digler is a tool for forensic disk analysis and file recovery. It's designed to help you unearth lost or deleted data from various disk images and raw devices.",
        "url": "https://github.com/ostafen/digler",
        "language": "Go",
        "stars": 89,
        "forks": 6,
        "created_at": "2024-09-14T08:05:16Z",
        "updated_at": "2025-09-10T09:23:33Z",
        "topics": [
            "cli-tool",
            "data-recovery",
            "deleted-file-recovery",
            "dfxml",
            "digital-forensics",
            "disk-analysis",
            "disk-image",
            "file-carving",
            "filesystem-analysis",
            "golang",
            "photo-recovery",
            "plugin-architecture"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-06-28T11:06:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c7de3f8b0186bc96e5c875ed2265fe83e6cd1092c364939b0298a4af9ad0c78d/ostafen/digler"
        ],
        "homepage": "",
        "readme_summary": "Digler is a command-line tool written in Go for forensic disk analysis and file recovery. It allows users to scan disk images and raw devices to recover deleted files, even when metadata is lost, and generate DFXML reports for post-scan data recovery.",
        "key_features": [
            "Broad Disk Image and Raw Device Support",
            "File System Agnostic Analysis",
            "Plugin-Based Extensibility",
            "Reporting Capabilities (DFXML)",
            "Post-Scan Data Recovery",
            "Intuitive Command-Line Interface"
        ],
        "primary_use_case": "Recovering deleted files from disk images and raw devices for digital forensics investigations.",
        "open_issues": 1,
        "cover_image_prompt": "A lone archaeologist carefully brushing away sand from an ancient hard drive buried deep within a digital excavation site. The archaeologist uses specialized tools to extract fragments of data, represented as glowing digital shards, from the damaged drive. A holographic display shows a reconstructed image of a recovered file. The scene is set in a dimly lit, futuristic laboratory with advanced forensic equipment. Small UI elements display file system details and recovery progress. The repository name, 'Digler', is subtly etched onto one of the tools. The image should be in a detailed digital painting style with a focus on texture and lighting."
    },
    {
        "id": 99576820,
        "name": "kotlinx-atomicfu",
        "description": "The idiomatic way to use atomic operations in Kotlin",
        "url": "https://github.com/Kotlin/kotlinx-atomicfu",
        "language": "Kotlin",
        "stars": 1045,
        "forks": 69,
        "created_at": "2017-08-07T12:41:58Z",
        "updated_at": "2025-09-07T16:22:08Z",
        "topics": [
            "atomic",
            "kotlin",
            "kotlinx"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-06-25T21:29:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/19de3f92d7113a8cb5e57cb37c352cb1b2ca7efb0a168ebd55e133f0b631afa5/Kotlin/kotlinx-atomicfu"
        ],
        "homepage": null,
        "readme_summary": "AtomicFU is a multiplatform library for Kotlin that provides an idiomatic and efficient way to use atomic operations. It supports JVM, Native, JS, and Wasm, and offers Kotlin-specific extensions for atomic value manipulation, atomic arrays, user-defined extensions, locks, and tracing operations.",
        "key_features": [
            "Multiplatform support (JVM, Native, JS, Wasm)",
            "Efficient atomic value representation for each platform",
            "Kotlin-specific extensions (loop, update, updateAndGet)",
            "Atomic arrays",
            "User-defined extensions on atomics",
            "Locks",
            "Tracing operations for debugging"
        ],
        "primary_use_case": "Providing a convenient and efficient way to perform atomic operations in Kotlin across multiple platforms, simplifying concurrent programming.",
        "open_issues": 51,
        "cover_image_prompt": "A skilled blacksmith meticulously forging tiny, glowing gears with a magical hammer. Each strike imbues the gears with resilience and synchronization. These gears are then carefully placed into a complex, multi-platform machine, representing JVM, JS, Native, and Wasm. The machine hums with perfect harmony as the atomic gears ensure smooth operation. Small UI elements display real-time data flow and atomic operation logs. The repository name, 'AtomicFU,' is subtly etched onto the blacksmith's anvil. The scene is set in a futuristic workshop with warm, inviting lighting. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 23439463,
        "name": "btrace",
        "description": "BTrace - a safe, dynamic tracing tool for the Java platform",
        "url": "https://github.com/btraceio/btrace",
        "language": "Java",
        "stars": 5954,
        "forks": 965,
        "created_at": "2014-08-28T18:58:24Z",
        "updated_at": "2025-09-09T21:56:16Z",
        "topics": [
            "btrace",
            "java",
            "java-application",
            "java-platform"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-13T08:18:57Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/23439463/ca970400-3a63-11eb-9cea-60ad1a9c1678"
        ],
        "homepage": null,
        "readme_summary": "BTrace is a dynamic tracing tool for the Java platform. It allows you to instrument running Java applications to inject tracing code, enabling you to monitor and diagnose issues without restarting the application. It supports compiling trace scripts and attaching them to Java processes, or running Java applications with the BTrace agent.",
        "key_features": [
            "Dynamic tracing of running Java programs",
            "Safe bytecode injection",
            "On-the-fly script compilation",
            "Maven integration for script compilation",
            "Command-line tools for attaching to processes and compiling scripts"
        ],
        "primary_use_case": "Dynamically tracing and monitoring Java applications for debugging and performance analysis.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled surgeon, clad in futuristic scrubs, carefully examining a complex, glowing circuit board representing a Java application's runtime. The surgeon uses a specialized tool emitting beams of light (representing BTrace probes) to analyze specific components of the circuit board. Data streams flow from the probes to a nearby holographic display, showing real-time performance metrics. The scene is set in a sterile, high-tech operating room with subtle UI elements and code snippets visible in the background. The image should be in a detailed 3D isometric illustration style with a cool, analytical color scheme."
    }
]