[
    {
        "id": 964194851,
        "name": "cyberdesk",
        "description": "Open source virtual desktops for AI agents",
        "url": "https://github.com/cyberdesk-hq/cyberdesk",
        "language": "JavaScript",
        "stars": 53,
        "forks": 11,
        "created_at": "2025-04-10T20:46:29Z",
        "updated_at": "2025-05-20T10:11:37Z",
        "topics": [
            "ai-agents",
            "computer-use",
            "fastapi",
            "hono",
            "kubernetes",
            "nextjs",
            "terraform",
            "virtual-machine"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-19T18:38:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7063dca4e519b2696e90919c31f0449747134788d677cb5fecab55bfa54e2ed8/cyberdesk-hq/cyberdesk"
        ],
        "homepage": "https://cyberdesk.io",
        "readme_summary": "Cyberdesk is an open-source infrastructure for orchestrating virtual desktops, specifically designed for AI agents. It provides features like fast desktop launch, full automation capabilities, and cloud-native deployment options. The project offers type-safe SDKs in Python and TypeScript for easy integration.",
        "key_features": [
            "Fast Launch of Virtual Desktops",
            "Full Automation (Mouse, Keyboard Control)",
            "Cloud Native (AKS, Self-Hosted)",
            "Secure & Auditable",
            "Type-Safe SDKs (Python & TypeScript)"
        ],
        "primary_use_case": "Orchestration of virtual desktops for AI agents.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a futuristic air traffic control center, but instead of airplanes, it's managing numerous virtual desktops displayed on large screens. A central AI 'conductor' orchestrates these desktops, automating tasks and responding to user prompts that appear as glowing text bubbles. The scene is bathed in cool blue light, with subtle digital particles flowing between the AI conductor and the virtual desktops, representing data transfer. Small UI elements on the screens show code snippets and task progress. The repository name, 'Cyberdesk,' is subtly displayed on the central console. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 971650361,
        "name": "browserbee",
        "description": "üêù AI-powered browser assistant (\"Cline for web browsing\")",
        "url": "https://github.com/parsaghaffari/browserbee",
        "language": "TypeScript",
        "stars": 530,
        "forks": 27,
        "created_at": "2025-04-23T21:07:13Z",
        "updated_at": "2025-05-20T10:08:54Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-18T11:15:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fb5f54bf05701dbe6ea71fc1221a10be9394779937ad79791e7229c4ee2b1f6d/parsaghaffari/browserbee"
        ],
        "homepage": "",
        "readme_summary": "BrowserBee is an AI-powered browser assistant that allows users to control their browser using natural language. It leverages LLMs for instruction parsing and Playwright for browser automation, offering a privacy-first solution that runs entirely within the browser. This enables convenient and secure interaction with logged-in websites without requiring backend infrastructure.",
        "key_features": [
            "Supports multiple LLM providers (Anthropic, OpenAI, Gemini, Ollama)",
            "Tracks token usage and cost",
            "Provides a wide range of browser tools for interaction and understanding",
            "Uses Playwright for browser automation",
            "Implements a memory feature for efficient task repetition",
            "Requires user approval for sensitive actions"
        ],
        "primary_use_case": "Control web browsing using natural language commands within a privacy-focused environment.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra of browser windows. Each instrument represents a different website or web application, and the conductor uses a glowing baton (representing BrowserBee) to orchestrate their actions with precise, natural language commands. The conductor stands on a stage filled with subtle UI elements and glowing data streams, subtly connecting the scene to software. The backdrop features a stylized cityscape representing the vastness of the internet. The image should be in a 3D isometric illustration style with vibrant colors and clean, modern design."
    },
    {
        "id": 985046164,
        "name": "telepipe",
        "description": "A simple command-line utility to send messages to Telegram",
        "url": "https://github.com/Linuxmaster14/telepipe",
        "language": "Shell",
        "stars": 21,
        "forks": 3,
        "created_at": "2025-05-17T01:01:21Z",
        "updated_at": "2025-05-20T07:39:52Z",
        "topics": [
            "alerts",
            "bash",
            "bot",
            "cli",
            "command-line",
            "messaging",
            "monitoring",
            "notification",
            "shell",
            "telegram",
            "terminal",
            "utility"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-17T01:15:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/254d42192739786541d1f7359598e37fb2fd8b73d54a9fb723319279dec6b3d9/Linuxmaster14/telepipe"
        ],
        "homepage": "",
        "readme_summary": "Telepipe is a command-line utility that allows users to send messages and files to Telegram directly from their terminal. It simplifies sending notifications and alerts from scripts and monitoring systems, offering features like automatic file/message mode switching and easy configuration.",
        "key_features": [
            "Send messages to Telegram from the command line",
            "Send files to Telegram from the command line",
            "Generate shareable Telegram links",
            "Easy installation",
            "Simple configuration"
        ],
        "primary_use_case": "Sending messages and files to Telegram channels/chats/groups directly from the command line, often used for alerts and notifications in scripts and monitoring systems.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled messenger bird, equipped with a tiny satchel labeled 'Telepipe,' perched atop a server rack, delivering urgent messages directly to a glowing Telegram chat window floating in the air. The bird carries scrolls representing command-line outputs, swiftly bypassing traditional mail routes. Digital particles emanate from the server, forming the Telegram logo. The scene is set in a stylized server room with soft, ambient lighting. Small UI elements display command-line code snippets. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 962528913,
        "name": "reTermAI",
        "description": null,
        "url": "https://github.com/pie0902/reTermAI",
        "language": "Python",
        "stars": 36,
        "forks": 7,
        "created_at": "2025-04-08T09:39:20Z",
        "updated_at": "2025-05-20T09:35:15Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T08:41:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/814f54b2204ddd8f86ab8e3d65364a6bd486caaeb12a8d5757bb314eec3bdc4d/pie0902/reTermAI"
        ],
        "homepage": null,
        "readme_summary": "reTermAI is a terminal command assistant that leverages AI to suggest relevant commands based on your shell history. It supports intelligent matching by keyword or partial input, is easy to install via pip, and supports both `zsh` and `bash`. API keys for OpenAI or Gemini are managed via a `.env` file.",
        "key_features": [
            "Recommends relevant terminal commands based on past history using OpenAI or Gemini",
            "Supports intelligent matching by keyword or partial input",
            "Easy to install via pip",
            "Supports `zsh` and `bash` shell history",
            "API keys managed via `.env`"
        ],
        "primary_use_case": "Providing AI-powered command suggestions and matching past commands by keyword in the terminal.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned librarian, illuminated by the soft glow of a monitor, meticulously sifts through towering stacks of dusty tomes, each representing a command from shell history. With a gentle wave of their hand, powered by subtle digital particles, the librarian conjures the perfect command, glowing with relevance, onto a floating screen. The scene is set in a cozy, anachronistic library filled with subtle UI elements and glowing code snippets subtly embedded in the bookshelves. The composition is focused and warm, with a color scheme of deep blues and golds. The image should be in a detailed digital painting style with clear outlines and a touch of magic."
    },
    {
        "id": 727830934,
        "name": "Snake_Apple",
        "description": "Articles and tools related to research in the Apple environment (mainly macOS).",
        "url": "https://github.com/Karmaz95/Snake_Apple",
        "language": "Python",
        "stars": 185,
        "forks": 18,
        "created_at": "2023-12-05T16:59:40Z",
        "updated_at": "2025-05-20T06:57:23Z",
        "topics": [
            "apple",
            "binary-analysis",
            "binary-exploitation",
            "exploitation",
            "ios",
            "macho",
            "macho-parser",
            "macos",
            "parser",
            "programming",
            "python",
            "reverse-engineering",
            "sandbox",
            "vulnerability-detection",
            "vulnerability-research"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-22T09:05:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b8aef269412c51f757a0a57d4dc2813605a5b8446346de4993f3a4305e5f9066/Karmaz95/Snake_Apple"
        ],
        "homepage": "https://karol-mazurek.medium.com/",
        "readme_summary": "The Snake_Apple repository provides articles and tools for macOS security research. It includes source code examples, custom programs, and Python scripts (including CrimsonUroboros) used in the research. The repository serves as a companion to a series of articles documenting the author's findings on macOS security vulnerabilities and reverse engineering techniques.",
        "key_features": [
            "Articles documenting macOS security research",
            "Source code examples for macOS",
            "Custom tools and programs related to the articles",
            "Python scripts for reverse engineering and vulnerability research (CrimsonUroboros)"
        ],
        "primary_use_case": "Researching macOS security, reverse engineering, and vulnerability detection.",
        "open_issues": 0,
        "cover_image_prompt": "A researcher, depicted as a detective wearing a trench coat and magnifying glass, meticulously examines a glowing Apple (representing macOS) for vulnerabilities and hidden flaws. The Apple sits on a table littered with disassembled code snippets and disassembled Mach-O binaries. A coiled snake (representing the 'Snake' part of the project name and reverse engineering) is subtly wrapped around the Apple, symbolizing the in-depth analysis. Digital particles representing data flow around the scene, with small UI elements showing disassembled code on nearby screens. The scene is set in a dimly lit, high-tech lab with a focused composition and a color scheme of greens, blues, and grays. The image should be in a digital painting style with clear outlines and detailed textures."
    },
    {
        "id": 825470378,
        "name": "beszel",
        "description": "Lightweight server monitoring hub with historical data, docker stats, and alerts.",
        "url": "https://github.com/henrygd/beszel",
        "language": "Go",
        "stars": 11501,
        "forks": 355,
        "created_at": "2024-07-07T21:36:28Z",
        "updated_at": "2025-05-20T10:05:26Z",
        "topics": [
            "homelab",
            "monitoring",
            "self-hosted"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-10T02:31:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/825470378/2710c6db-f934-4a8b-a2c4-7a0abbcd2ad6"
        ],
        "homepage": "https://beszel.dev",
        "readme_summary": "Beszel is a lightweight server monitoring platform designed for ease of use and minimal resource consumption. It provides Docker statistics, historical data, and configurable alerts, making it suitable for homelabs and self-hosted environments. Key features include a user-friendly web interface, multi-user support, OAuth authentication, automatic backups, and a REST API.",
        "key_features": [
            "Lightweight server monitoring",
            "Docker stats tracking",
            "Configurable alerts",
            "Multi-user support",
            "OAuth/OIDC authentication",
            "Automatic backups",
            "REST API access"
        ],
        "primary_use_case": "Lightweight server monitoring with Docker statistics, historical data, and alerts for homelabs and self-hosted environments.",
        "open_issues": 177,
        "cover_image_prompt": "Imagine a diligent gardener tending to a vibrant server rack, each server represented as a thriving plant. The gardener uses a watering can labeled 'Beszel' to nourish the plants, monitoring their health with a tablet displaying real-time metrics like CPU usage and memory consumption. Healthy plants bloom with digital flowers, while struggling plants trigger subtle alerts on the tablet. The scene is set in a greenhouse filled with soft, natural light, creating a sense of calm and control. Small UI elements and data visualizations float around the plants, subtly connecting the metaphor to software monitoring. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 744932994,
        "name": "seabird",
        "description": "Native Kubernetes desktop IDE designed for seamless cluster exploration",
        "url": "https://github.com/getseabird/seabird",
        "language": "Go",
        "stars": 1272,
        "forks": 31,
        "created_at": "2024-01-18T09:53:42Z",
        "updated_at": "2025-05-20T01:19:04Z",
        "topics": [
            "gui",
            "ide",
            "kubernetes"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-01-13T15:36:13Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8cce33a94bbdee0f808b521deedd967e3f7dcdc506725313b862ddc48e2978e8/getseabird/seabird"
        ],
        "homepage": "https://getseabird.github.io/",
        "readme_summary": "Seabird is a Kubernetes IDE designed for the GNOME desktop, providing a simple and intuitive interface for exploring and managing clusters. It offers essential features such as a terminal, monitoring tools, and a resource editor with integrated API reference, streamlining Kubernetes management.",
        "key_features": [
            "Kubernetes cluster exploration",
            "Simple and intuitive interface",
            "Terminal for executing commands",
            "Monitoring through logs and metrics",
            "Resource editor with API reference"
        ],
        "primary_use_case": "Explore and manage Kubernetes clusters",
        "open_issues": 14,
        "cover_image_prompt": "A ship captain (representing the user) at the helm of a sophisticated vessel named \"Seabird,\" navigating a sea of Kubernetes clusters (represented by floating islands with server racks and glowing data streams). The captain uses an intuitive control panel displaying cluster resources and logs, transforming complex data into easily understandable charts and graphs. A clear horizon shows successful deployments, while stormy areas indicate potential issues. Small screens display kubectl commands and API references. The scene is set during a bright, clear day with a slightly stylized, 3D isometric illustration style, emphasizing clarity and ease of use with vibrant colors."
    },
    {
        "id": 438384984,
        "name": "hono",
        "description": "Web framework built on Web Standards",
        "url": "https://github.com/honojs/hono",
        "language": "TypeScript",
        "stars": 24261,
        "forks": 710,
        "created_at": "2021-12-14T20:05:30Z",
        "updated_at": "2025-05-20T09:44:54Z",
        "topics": [
            "aws-lambda",
            "bun",
            "cloudflare",
            "cloudflare-workers",
            "deno",
            "npm",
            "router",
            "typescript",
            "web-framework"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-19T10:14:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/13daa0832ee6f174fd33e3a7a466aad7a69adb8f8437c54f64135285e77b04a9/honojs/hono"
        ],
        "homepage": "https://hono.dev",
        "readme_summary": "Hono is a small, ultrafast web framework built on Web Standards, designed for building web applications and APIs. It boasts a lightweight footprint, ultrafast routing, and multi-runtime support, allowing the same code to run on various platforms like Cloudflare Workers, Deno, and Node.js. It includes built-in middleware and excellent TypeScript support for a delightful developer experience.",
        "key_features": [
            "Ultrafast routing",
            "Lightweight (under 12kB)",
            "Multi-runtime support (Cloudflare Workers, Fastly Compute, Deno, Bun, AWS Lambda, Lambda@Edge, Node.js)",
            "Batteries Included (built-in middleware)",
            "Delightful DX (TypeScript support)"
        ],
        "primary_use_case": "Building web applications and APIs that can run on various JavaScript runtimes.",
        "open_issues": 237,
        "cover_image_prompt": "Imagine a skilled chef, representing Hono, expertly juggling flaming woks, each wok symbolizing a different JavaScript runtime environment like Cloudflare Workers, Deno, and Node.js. The chef effortlessly tosses ingredients (requests) into the woks, which are instantly transformed into delicious meals (responses) served on elegant plates. Subtle UI elements float around the chef, displaying code snippets and server status. The scene is set in a modern, minimalist kitchen with bright, dynamic lighting. The illustration should be in a vibrant, 3D isometric style with clean lines and a focus on clarity and visual appeal."
    },
    {
        "id": 37259508,
        "name": "dnstwist",
        "description": "Domain name permutation engine for detecting homograph phishing attacks, typo squatting, and brand impersonation",
        "url": "https://github.com/elceef/dnstwist",
        "language": "Python",
        "stars": 5159,
        "forks": 804,
        "created_at": "2015-06-11T12:24:17Z",
        "updated_at": "2025-05-19T22:44:37Z",
        "topics": [
            "dns",
            "domains",
            "fuzzing",
            "homoglyph",
            "homograph-attack",
            "idn",
            "osint",
            "phishing",
            "scanner",
            "threat-hunting",
            "threat-intelligence",
            "typosquatting"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-15T18:41:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ec31ec048f48835c3c2ddabf8cc6e8edf699327ad034ec4c4c51bae282240e31/elceef/dnstwist"
        ],
        "homepage": "https://dnstwist.it",
        "readme_summary": "dnstwist is a domain name permutation engine used to identify potential phishing attacks, typo squatting, and brand impersonation. It generates a comprehensive list of domain variations based on fuzzing algorithms and provides features like phishing detection, rogue MX host detection, and GeoIP location to assess the risk associated with each domain.",
        "key_features": [
            "Variety of domain fuzzing algorithms",
            "Unicode domain names (IDN) support",
            "Dictionary-based domain permutations",
            "Multithreaded task distribution",
            "Live phishing webpage detection (fuzzy hashes, perceptual hashes)",
            "Rogue MX host detection",
            "GeoIP location",
            "CSV and JSON export"
        ],
        "primary_use_case": "Detecting homograph phishing attacks, typo squatting, and brand impersonation through domain name permutation and analysis.",
        "open_issues": 7,
        "cover_image_prompt": "A detective meticulously examining a collection of domain names with a magnifying glass, searching for subtle differences and suspicious similarities. The detective's office is filled with screens displaying website screenshots and DNS records. A network of interconnected domain names glows faintly in the background, highlighting potential phishing threats. Small code snippets related to domain permutation algorithms appear as subtle details on the detective's desk. The scene is set in a dimly lit, film noir-style office with a focus on detail and clarity. The image should be in a digital painting style with clean lines and a slightly gritty texture."
    }
]