[
    {
        "id": 987670088,
        "name": "crush",
        "description": "The glamourous AI coding agent for your favourite terminal ðŸ’˜",
        "url": "https://github.com/charmbracelet/crush",
        "language": "Go",
        "stars": 7580,
        "forks": 316,
        "created_at": "2025-05-21T12:14:57Z",
        "updated_at": "2025-08-06T10:09:56Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-06T10:04:53Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/987670088/9247ccb4-650d-4811-ba21-a1b5b47b4e70"
        ],
        "homepage": "",
        "readme_summary": "Crush is an AI coding agent designed to enhance the developer experience within the terminal. It offers features such as multi-model LLM support, session-based context management, and LSP integration to provide intelligent code suggestions and assistance. Crush aims to streamline coding workflows and improve developer productivity across various operating systems.",
        "key_features": [
            "Multi-Model LLM support",
            "Flexible LLM switching",
            "Session-based context management",
            "LSP-enhanced context",
            "Extensible capabilities via MCPs",
            "Cross-platform compatibility"
        ],
        "primary_use_case": "AI-assisted coding in the terminal",
        "open_issues": 140,
        "cover_image_prompt": "Imagine a skilled artisan in a workshop, meticulously crafting code with the help of a magical, glowing assistant. The artisan, representing the developer, is shaping lines of code on a digital canvas, while the assistant, embodying Crush, whispers suggestions and insights. The workshop is filled with subtle tech elements: floating code snippets, holographic documentation, and glowing particles of data. The artisan's tools are seamlessly integrated with the assistant, creating a harmonious workflow. The scene is bathed in soft, ethereal light, creating a sense of collaboration and innovation. The image should be in a 3D isometric illustration style with vibrant colors and rich details, subtly incorporating the Crush logo."
    },
    {
        "id": 1010007564,
        "name": "erys",
        "description": "erys: Terminal Interface for Jupyter Notebooks.",
        "url": "https://github.com/natibek/erys",
        "language": "Python",
        "stars": 64,
        "forks": 1,
        "created_at": "2025-06-28T06:30:49Z",
        "updated_at": "2025-08-06T04:23:01Z",
        "topics": [
            "jupyter-notebook",
            "terminal",
            "textual",
            "tui"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-07-28T23:53:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/62b29fdf7a3cd412bed92b51d30c033b9fd22c0eab9a15a172d17fa8c7c7904b/natibek/erys"
        ],
        "homepage": "https://pypi.org/project/erys/",
        "readme_summary": "Erys is a terminal interface for Jupyter Notebooks, enabling users to open, create, edit, run, and save notebooks and other text files directly from the terminal. It leverages Textual for the interface and jupyter_client for code execution, providing a streamlined workflow for developers who prefer a terminal-based environment.",
        "key_features": [
            "Opening existing Jupyter Notebooks",
            "Creating, editing, and saving Jupyter Notebooks",
            "Executing Python code within code cells in the terminal",
            "Directory tree navigation for file management",
            "Saving notebooks in format version 4.5"
        ],
        "primary_use_case": "Interacting with Jupyter Notebooks directly from the terminal.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra, but instead of musicians, the orchestra is composed of glowing Jupyter Notebook cells. The conductor, representing Erys, stands at a terminal, using it as a baton to orchestrate the execution of code within each cell. Each cell glows brighter as it's activated, and the terminal screen displays the output in a visually appealing way. The scene is set in a modern, minimalist studio with soft, ambient lighting. Subtle UI elements and code snippets float around the conductor, connecting the metaphor to software. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 995113401,
        "name": "unregistry",
        "description": "Push docker images directly to remote servers without an external registry",
        "url": "https://github.com/psviderski/unregistry",
        "language": "Go",
        "stars": 3600,
        "forks": 51,
        "created_at": "2025-06-03T01:48:51Z",
        "updated_at": "2025-08-06T09:46:05Z",
        "topics": [
            "containerd",
            "docker",
            "golang",
            "kubernetes",
            "oci",
            "registry"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-22T06:57:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e159cdf2fbd2ae68cd04a908fae262e890348d8b111400cbad5546f5c97b04c1/psviderski/unregistry"
        ],
        "homepage": "https://uncloud.run",
        "readme_summary": "Unregistry allows users to push Docker images directly to remote servers over SSH, bypassing the need for a container registry. It efficiently transfers only the missing layers, making the process faster and more resource-friendly than traditional methods like save/load or rebuilding remotely. This tool simplifies image deployment for scenarios where a full-fledged registry is unnecessary.",
        "key_features": [
            "Directly pushes Docker images to remote servers",
            "Eliminates the need for an external registry",
            "Transfers only missing layers for efficiency",
            "Uses SSH for secure transfer"
        ],
        "primary_use_case": "Deploying Docker images to remote servers without the overhead of managing a container registry.",
        "open_issues": 12,
        "cover_image_prompt": "Imagine a skilled archer effortlessly firing arrows (representing Docker images) directly from their quiver (local Docker daemon) to a distant target (remote server) without needing a middleman or intermediary (external registry). The archer stands confidently, with a subtle digital interface on their arm displaying transfer progress. The target glows faintly, indicating successful image delivery. The scene is set in a minimalist, clean environment with soft, diffused lighting. The illustration should be in a 3D isometric style with a focus on clarity and ease of understanding."
    },
    {
        "id": 948904124,
        "name": "Skywork-R1V",
        "description": "Skywork-R1V is an advanced multimodal AI model series developed by Skywork AI (Kunlun Inc.), specializing in vision-language reasoning.",
        "url": "https://github.com/SkyworkAI/Skywork-R1V",
        "language": "Python",
        "stars": 2923,
        "forks": 267,
        "created_at": "2025-03-15T08:11:44Z",
        "updated_at": "2025-08-06T06:15:09Z",
        "topics": [
            "deepseek-r1",
            "grpo",
            "llm",
            "multimodal-r1",
            "multimodal-understanding",
            "r1v",
            "reasoning",
            "reinforcement-learning",
            "skywork-r1v",
            "vlm",
            "vlm-r1"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T12:41:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/50dae545e87a81517fd6a9a8c53d55865e19e5bc49c73597cd19c41ce83c684b/SkyworkAI/Skywork-R1V"
        ],
        "homepage": "https://arxiv.org/abs/2507.06167",
        "readme_summary": "Skywork-R1V is a multimodal AI model series specializing in vision-language reasoning. It leverages reinforcement learning for fine-tuning and achieves state-of-the-art performance on various multimodal reasoning benchmarks. Quantized versions are available for efficient inference on different hardware configurations.",
        "key_features": [
            "Multimodal reasoning",
            "Vision-language understanding",
            "Reinforcement learning fine-tuning",
            "Quantized versions for efficient inference (AWQ, GGUF)",
            "State-of-the-art performance on multimodal reasoning benchmarks"
        ],
        "primary_use_case": "Multimodal reasoning and understanding, particularly for vision-language tasks.",
        "open_issues": 26,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, uncharted territory using a magical lens. The lens transforms fragmented images and scattered data points into a cohesive, detailed map, revealing hidden pathways and connections. The cartographer works in a futuristic library filled with glowing screens displaying multimodal data streams and intricate reasoning algorithms. Small UI elements show the Skywork-R1V logo and data visualization interfaces. The scene is bathed in soft, ethereal light, creating a sense of discovery and understanding. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 924722083,
        "name": "ui-experiments",
        "description": "Beautifully designed open-source layouts and UI experiments built with Origin UI and shadcn/ui.",
        "url": "https://github.com/origin-space/ui-experiments",
        "language": "TypeScript",
        "stars": 1165,
        "forks": 137,
        "created_at": "2025-01-30T14:42:26Z",
        "updated_at": "2025-08-06T09:53:22Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-05-16T17:45:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1852fcc6ca32fb65bbf3f68c4bbdf08e504bee321b64a98ab330f344d104e5ec/origin-space/ui-experiments"
        ],
        "homepage": "https://originui.com/layouts",
        "readme_summary": "The ui-experiments repository offers a collection of beautifully designed, open-source UI layouts and experiments. It leverages Origin UI and shadcn/ui components, providing developers with practical examples and starting points for their projects. The repository also includes a shadcn/ui monorepo template for streamlined development.",
        "key_features": [
            "Pre-designed layouts",
            "UI experiments",
            "shadcn/ui monorepo template",
            "Origin UI components"
        ],
        "primary_use_case": "Providing developers with ready-to-use UI layouts and experiments built with Origin UI and shadcn/ui to accelerate development and inspire design.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled architect meticulously arranging pre-designed building blocks (UI components) to construct diverse and visually appealing layouts on a digital blueprint. The blueprint displays various UI elements like dashboards, calendars, and charts. Subtle digital particles flow around the blocks, representing code and data. A small screen in the background displays the repository name 'ui-experiments'. The scene is set in a bright, modern design studio with isometric perspective. The image should be in 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity."
    },
    {
        "id": 994310603,
        "name": "gmail-tui",
        "description": "gmail but in your terminal using go",
        "url": "https://github.com/rdx40/gmail-tui",
        "language": "Go",
        "stars": 32,
        "forks": 2,
        "created_at": "2025-06-01T17:07:10Z",
        "updated_at": "2025-08-06T07:47:09Z",
        "topics": [
            "gmail",
            "go",
            "go-application",
            "golang-application"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-07T17:42:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cb4fcbbe16d7fd3adef16eb171c69c29113e783b911701f29f7716a96f069ebb/rdx40/gmail-tui"
        ],
        "homepage": "",
        "readme_summary": "Gmail TUI is a terminal-based Gmail client that allows users to manage their email directly from the command line. It offers features like composing emails, managing labels, searching, and handling attachments, all with a focus on keyboard navigation and efficiency. The application uses OAuth2 for secure authentication and provides a lightweight alternative to the web-based Gmail interface.",
        "key_features": [
            "Full email management in the terminal",
            "Secure OAuth2 authentication",
            "Keyboard-driven navigation",
            "Rich text composition with attachments",
            "Gmail label integration",
            "Advanced search with Gmail operators",
            "Offline cache",
            "Customizable themes"
        ],
        "primary_use_case": "Managing Gmail within a terminal interface for increased efficiency and keyboard-centric workflow.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a bustling post office where tiny robots, each representing a line of code, are diligently sorting and delivering digital letters (emails). The main robot, labeled 'Gmail-TUI', stands at a central console, efficiently managing the flow of messages with a keyboard. Some robots are composing letters with miniature styluses, while others are attaching digital files. The post office is filled with glowing screens displaying email labels and search queries. The scene is rendered in a clean, 3D isometric illustration style with bright, cheerful colors and subtle tech details."
    }
]