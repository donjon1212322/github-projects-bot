[
    {
        "id": 958273723,
        "name": "every-pdf",
        "description": "every-pdf",
        "url": "https://github.com/DDULDDUCK/every-pdf",
        "language": "HTML",
        "stars": 302,
        "forks": 25,
        "created_at": "2025-03-31T23:42:15Z",
        "updated_at": "2025-08-09T10:08:51Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T01:15:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d5667d91420ebcb5fdb93e17b2857f9f1829541d0985a40415804aa2f97ef632/DDULDDUCK/every-pdf"
        ],
        "homepage": "",
        "readme_summary": "Every PDF is a desktop application designed for comprehensive PDF management. It offers features such as editing, splitting, merging, watermarking, rotating, and reordering PDF documents. The application aims to provide a one-stop solution for both basic and advanced PDF-related tasks.",
        "key_features": [
            "PDF Editor (Add Text, Signature, Image, Checkbox)",
            "Split PDF files",
            "Merge PDF documents",
            "Add Watermark",
            "Rotate & Reorder pages"
        ],
        "primary_use_case": "Comprehensive desktop application for everyday document tasks and professional-level PDF editing.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled artisan meticulously crafting a stained-glass window, where each pane represents a PDF document. The artisan uses various tools to cut, shape, merge, watermark, rotate, and reorder the glass pieces, creating a harmonious and complete design. Light shines through the finished window, projecting vibrant colors and patterns. Subtle UI elements overlay the glass, showing editing options and file management tools. The scene is set in a bright, modern workshop with a clean and organized layout. The image should be in a detailed digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 1032006359,
        "name": "ranni",
        "description": "small img to ascii tool",
        "url": "https://github.com/Krak9n/ranni",
        "language": "Rust",
        "stars": 12,
        "forks": 0,
        "created_at": "2025-08-04T16:54:59Z",
        "updated_at": "2025-08-09T09:55:45Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-06T15:18:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c32f615bf1ae53016482342916b771db51612df9a0248e3b8cfe61bd40ea46d1/Krak9n/ranni"
        ],
        "homepage": null,
        "readme_summary": "The 'ranni' repository is a Rust-based tool for converting images into ASCII art. It allows users to specify the scale of the output and supports various image formats through the 'image' crate. The primary use case is generating ASCII representations of images for display in environments where graphical interfaces are limited or unavailable.",
        "key_features": [
            "Image to ASCII conversion",
            "Scalable ASCII art output",
            "Supports image formats provided by the 'image' crate"
        ],
        "primary_use_case": "Converting images to ASCII art for terminal display or other text-based applications.",
        "open_issues": 0,
        "cover_image_prompt": "An artist chiseling away at a large stone block, revealing a detailed portrait within, pixel by pixel. The artist uses a set of specialized tools that resemble code editors and image processing software. The stone block is subtly textured with a grid pattern, representing the digital image. The revealed portrait is rendered in a classic ASCII art style. Small screens in the background display the original image and the corresponding ASCII output. The scene is set in a bright, modern studio with natural lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 60667730,
        "name": "lvgl",
        "description": "Embedded graphics library to create beautiful UIs for any MCU, MPU and display type. ",
        "url": "https://github.com/lvgl/lvgl",
        "language": "C",
        "stars": 20769,
        "forks": 3766,
        "created_at": "2016-06-08T04:14:34Z",
        "updated_at": "2025-08-09T10:07:39Z",
        "topics": [
            "c",
            "embedded",
            "graphics",
            "gui",
            "mcu",
            "microcontroller",
            "tft"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-07T09:09:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ba60747545e13d41f6e7b91787195de490674e618c19e274eac39fc471a00be/lvgl/lvgl"
        ],
        "homepage": "https://lvgl.io",
        "readme_summary": "LVGL is a free and open-source embedded graphics library written in C, designed for creating user interfaces on resource-constrained devices. It offers a wide range of features including widgets, styling, layouts, and text rendering, making it suitable for various display types and input methods. LVGL aims to provide a comprehensive solution for developing modern and visually appealing GUIs on embedded systems.",
        "key_features": [
            "Free and portable C library",
            "30+ built-in widgets",
            "Flexible style system",
            "Flexbox and Grid layouts",
            "UTF-8 text rendering with CJK support",
            "Animation and special effects support",
            "Multiple display support"
        ],
        "primary_use_case": "Creating embedded graphical user interfaces (GUIs) for microcontrollers (MCUs) and microprocessors (MPUs).",
        "open_issues": 64,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate clockwork gears within a miniature city. Each gear represents a UI element (buttons, sliders, charts), fitting perfectly into the city's design, powering vibrant displays and interactive systems. The artisan uses a palette of customizable styles, adjusting colors and shapes with precision. Small screens embedded in the city walls display code snippets and UI previews. The scene is bathed in soft, diffused light, highlighting the intricate details. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 998699154,
        "name": "Self-Forcing",
        "description": null,
        "url": "https://github.com/guandeh17/Self-Forcing",
        "language": "Python",
        "stars": 2353,
        "forks": 157,
        "created_at": "2025-06-09T05:33:40Z",
        "updated_at": "2025-08-09T08:28:52Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-11T18:20:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/22566198bdbb03bac4367148c0d91bb2497ec627645ff4e92917e19bc1a481d3/guandeh17/Self-Forcing"
        ],
        "homepage": null,
        "readme_summary": "The Self-Forcing repository trains autoregressive video diffusion models by simulating the inference process during training, using autoregressive rollout with KV caching. This approach addresses the train-test distribution mismatch, enabling real-time, streaming video generation. It achieves performance comparable to state-of-the-art diffusion models, even on a single RTX 4090.",
        "key_features": [
            "Simulates inference during training",
            "Autoregressive rollout with KV caching",
            "Real-time, streaming video generation",
            "Matches quality of state-of-the-art diffusion models"
        ],
        "primary_use_case": "Real-time, streaming video generation using autoregressive video diffusion models.",
        "open_issues": 22,
        "cover_image_prompt": "Imagine an artist sculpting a video stream in real-time. The artist uses a special brush that anticipates future frames, ensuring a smooth, continuous flow. Digital particles swirl around the sculpture, representing the autoregressive process. A screen in the background displays the repository name, 'Self-Forcing,' and subtle code snippets. The scene is set in a bright, modern studio with a focus on the artist and the evolving video sculpture. The artwork should be in a 3D isometric illustration style with vibrant colors and crisp details, emphasizing the real-time and predictive nature of the video generation."
    },
    {
        "id": 426848256,
        "name": "quadratic",
        "description": "Spreadsheet with AI, Code, Connections",
        "url": "https://github.com/quadratichq/quadratic",
        "language": "Rust",
        "stars": 3788,
        "forks": 244,
        "created_at": "2021-11-11T02:41:07Z",
        "updated_at": "2025-08-09T08:09:42Z",
        "topics": [
            "ai",
            "data",
            "data-analysis",
            "data-engineering",
            "data-science",
            "etl",
            "python",
            "quadratic",
            "spreadsheet",
            "sql",
            "wasm",
            "webgl"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-09T01:39:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/de07d0b3a943d0c9d116b36ccf81ab09432a4ceade5ed4bdfaa486ddf842b110/quadratichq/quadratic"
        ],
        "homepage": "https://QuadraticHQ.com",
        "readme_summary": "Quadratic is a spreadsheet application that integrates AI and code execution directly into cells, enabling users to perform advanced data analysis and manipulation. It supports data connections and facilitates collaborative work, making it suitable for data science, data engineering, and general data analysis tasks.",
        "key_features": [
            "Spreadsheet functionality",
            "AI integration",
            "Code execution within cells",
            "Data connections (SQL, ETL)",
            "Collaboration"
        ],
        "primary_use_case": "Data analysis and manipulation with AI and code integration within a spreadsheet environment.",
        "open_issues": 202,
        "cover_image_prompt": "A skilled architect meticulously drafting blueprints on a digital drafting table, seamlessly integrating data streams represented by glowing threads into the design. The blueprints transform into a vibrant, interconnected cityscape where buildings represent different data sources and AI algorithms orchestrate the flow of information. The drafting table displays a simplified spreadsheet interface with code snippets integrated into the cells. The scene is set in a brightly lit, modern studio with a focus on precision and innovation. The image should be in a 3D isometric illustration style with clean lines and a futuristic color scheme."
    },
    {
        "id": 571613891,
        "name": "supervision",
        "description": "We write your reusable computer vision tools. 💜",
        "url": "https://github.com/roboflow/supervision",
        "language": "Python",
        "stars": 33468,
        "forks": 2699,
        "created_at": "2022-11-28T14:08:44Z",
        "updated_at": "2025-08-09T09:12:37Z",
        "topics": [
            "classification",
            "coco",
            "computer-vision",
            "deep-learning",
            "hacktoberfest",
            "image-processing",
            "instance-segmentation",
            "low-code",
            "machine-learning",
            "metrics",
            "object-detection",
            "oriented-bounding-box",
            "pascal-voc",
            "python",
            "pytorch",
            "tensorflow",
            "tracking",
            "video-processing",
            "yolo"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-07T14:49:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8c7a6d56c9f60ebd6b09b00d77b0c79ba8a6e3eab98d0bc0a9ec793fe896e3f6/roboflow/supervision"
        ],
        "homepage": "https://supervision.roboflow.com",
        "readme_summary": "Supervision is a Python package providing reusable computer vision tools. It offers model-agnostic connectors for popular libraries and customizable annotators, simplifying tasks such as loading datasets, visualizing detections, and counting objects in images and videos. It aims to streamline computer vision workflows.",
        "key_features": [
            "Model agnostic design",
            "Connectors for popular libraries (Ultralytics, Transformers, MMDetection)",
            "Customizable annotators",
            "Tools for loading datasets, drawing detections, and counting objects"
        ],
        "primary_use_case": "Reusable computer vision tools for tasks like object detection, instance segmentation, and tracking.",
        "open_issues": 72,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting lenses in a sunlit workshop. Each lens, when held up, reveals a clearer, more insightful view of the world – one highlights bounding boxes around objects, another segments specific areas, and yet another tracks movement seamlessly. Digital blueprints and code snippets subtly adorn the walls, hinting at the software foundation of these lenses. The artisan smiles, knowing these tools empower others to see and understand the world with greater precision. The image should be in a detailed digital painting style with warm, inviting colors."
    }
]