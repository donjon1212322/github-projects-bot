[
    {
        "id": 947481827,
        "name": "marmot",
        "description": "Marmot helps teams discover, understand, and leverage their data with powerful search and lineage visualization tools. It's designed to make data accessible for everyone.",
        "url": "https://github.com/marmotdata/marmot",
        "language": "Go",
        "stars": 28,
        "forks": 1,
        "created_at": "2025-03-12T18:55:03Z",
        "updated_at": "2025-08-10T09:49:28Z",
        "topics": [],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-08-05T10:39:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/df305c531260c8f6270d0924f09a86bacb58fa9b13409e0b00fe1d90de378806/marmotdata/marmot"
        ],
        "homepage": "https://marmotdata.io",
        "readme_summary": "Marmot is an open-source data catalog designed to help teams discover, understand, and govern their data assets. It offers features like flexible search, multiple ingestion methods, and interactive data lineage visualization. Marmot aims to make data accessible and manageable within modern data ecosystems.",
        "key_features": [
            "Flexible search capabilities",
            "Multiple ingestion methods (CLI, API, Terraform, Pulumi)",
            "Interactive data lineage visualization",
            "Documentation and governance support"
        ],
        "primary_use_case": "Data cataloging and governance",
        "open_issues": 22,
        "cover_image_prompt": "A librarian meticulously organizing and connecting books in a vast, glowing digital library. Each book represents a data asset, and the librarian uses a special lens to trace the connections and lineage between them, visualized as glowing threads. UI elements showing search queries and data lineage graphs float subtly in the background. The scene is set in a futuristic library with soft, ethereal lighting. The repository name, 'Marmot,' is subtly etched on the librarian's desk. The image should be in 3D isometric illustration style with rich details and a calming color scheme."
    },
    {
        "id": 575677618,
        "name": "Awake-AlarmApp",
        "description": "Awake is a customizable alarm application built with Flutter. Set repeating alarms, choose fun ways to dismiss them and fineâ€‘tune every aspect of how they ring.",
        "url": "https://github.com/adeeteya/Awake-AlarmApp",
        "language": "Dart",
        "stars": 25,
        "forks": 2,
        "created_at": "2022-12-08T03:41:47Z",
        "updated_at": "2025-08-10T02:50:44Z",
        "topics": [
            "alarm",
            "alarm-clock",
            "alarm-manager",
            "dart",
            "flutter",
            "flutter-apps",
            "flutter-examples"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-19T19:32:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e1ae45d9d35b6e66fbb2e776b0e89e7f402335eda12253f51eb34c5970d27350/adeeteya/Awake-AlarmApp"
        ],
        "homepage": "",
        "readme_summary": "Awake is a Flutter-based alarm application that allows users to create highly customizable alarms. It offers a range of features, including repeating alarms, adjustable volume, custom sounds, and multiple dismissal challenges like math problems, shaking, tapping, and QR code scanning. The app also supports light and dark themes, making it a versatile and user-friendly alarm solution.",
        "key_features": [
            "Customizable alarm settings",
            "Multiple dismissal challenges (Math, Shake, Tap, QR code)",
            "Repeating alarms",
            "Light/dark/system themes",
            "12/24 hour time format",
            "Vibration control",
            "Adjustable volume with fade-in",
            "Custom alarm sounds",
            "Alarm titles",
            "Snooze functionality"
        ],
        "primary_use_case": "A customizable alarm application for setting repeating alarms with various dismissal challenges.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled clockmaker meticulously crafting a complex alarm clock with gears representing customizable settings and challenges. The clockmaker uses a variety of tools, including a tiny math textbook, a miniature shaker, and a QR code scanner, to assemble the alarm's unique dismissal methods. The finished clock emits a gentle, pulsing light, indicating its readiness to wake users effectively. UI elements showing alarm settings and challenge options subtly float around the clock. The scene is set in a cozy workshop with warm lighting. The image should be in a detailed 3D isometric illustration style with vibrant colors and clear labels."
    },
    {
        "id": 302624246,
        "name": "python-hdwallet",
        "description": "Python-based library implementing a Hierarchical Deterministic (HD) Wallet generator for 200+ cryptocurrencies.",
        "url": "https://github.com/hdwallet-io/python-hdwallet",
        "language": "Python",
        "stars": 549,
        "forks": 165,
        "created_at": "2020-10-09T11:42:07Z",
        "updated_at": "2025-08-09T18:33:39Z",
        "topics": [
            "bip32",
            "bip44",
            "bitcoin",
            "btc",
            "cryptocurrencies",
            "cryptography",
            "eth",
            "ethereum",
            "hd",
            "hdwallet",
            "wallet",
            "wallet-generator"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-08-04T09:17:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5b00503e88994f2c59f29b4e46400ae414ca7587265a2a0ce9601e220081e83a/hdwallet-io/python-hdwallet"
        ],
        "homepage": "https://hdwallet.readthedocs.io",
        "readme_summary": "The python-hdwallet library is a Python-based tool for generating Hierarchical Deterministic (HD) wallets, supporting over 200 cryptocurrencies. It offers a flexible solution for developers integrating multi-currency wallet functionality, adhering to standard protocols for compatibility and providing secure seed generation and key management.",
        "key_features": [
            "Hierarchical Deterministic (HD) Wallet generation",
            "Support for 200+ cryptocurrencies",
            "Multiple entropy sources (Algorand, BIP39, Electrum-V1, Electrum-V2, Monero)",
            "Multiple mnemonic standards (Algorand, BIP39, Electrum-V1, Electrum-V2, Monero)",
            "Multiple seed generation standards (Algorand, BIP39, Cardano, Electrum-V1, Electrum-V2, Monero)",
            "Elliptic Curve Cryptography support (Kholaw-Ed25519, SLIP10-Ed25519, SLIP10-Ed25519-Blake2b, SLIP10-Ed25519-Monero, SLIP10-Nist256p1)"
        ],
        "primary_use_case": "Generating HD wallets for multiple cryptocurrencies.",
        "open_issues": 15,
        "cover_image_prompt": "A master locksmith meticulously crafting a universal key that unlocks a vault filled with diverse cryptocurrency coins. The locksmith uses a complex set of tools and blueprints, representing the HD wallet generation process. Small screens display cryptographic algorithms and wallet addresses. Digital particles flow from the key, illuminating each coin with a unique glow. The scene is set in a futuristic workshop with warm, focused lighting. The composition is clean and organized, emphasizing the precision and security of the process. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 85894461,
        "name": "InvenTree",
        "description": "Open Source Inventory Management System",
        "url": "https://github.com/inventree/InvenTree",
        "language": "Python",
        "stars": 5271,
        "forks": 1008,
        "created_at": "2017-03-23T01:44:10Z",
        "updated_at": "2025-08-10T09:51:47Z",
        "topics": [
            "django",
            "hacktoberfest",
            "python"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T01:48:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/de782f091df323c244c383f8bea3b7f7cedf49d80a1e9a25bb688d528e7b0d39/inventree/InvenTree"
        ],
        "homepage": "https://docs.inventree.org",
        "readme_summary": "InvenTree is an open-source inventory management system that provides powerful stock control and part tracking. It features a Python/Django backend with a web-based admin interface and a REST API for external integrations. A plugin system allows for custom applications and extensions, making it a versatile solution for managing inventory.",
        "key_features": [
            "Inventory Management",
            "Stock Control",
            "Part Tracking",
            "Web-based admin interface",
            "REST API",
            "Plugin System"
        ],
        "primary_use_case": "Inventory management and part tracking for businesses and individuals.",
        "open_issues": 190,
        "cover_image_prompt": "A meticulous librarian managing a vast inventory of parts, each neatly organized and labeled on digital shelves. The librarian uses a tablet to track stock levels and locations, ensuring every item is accounted for. Glowing digital threads connect the physical parts to their digital representations, showing real-time inventory data. The scene is set in a modern, well-lit warehouse with a clean and efficient layout. Small UI elements on the tablet display inventory management software. The image should be in a 3D isometric illustration style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 531412781,
        "name": "deptry",
        "description": "Find unused, missing and transitive dependencies in a Python project.",
        "url": "https://github.com/fpgmaas/deptry",
        "language": "Python",
        "stars": 1130,
        "forks": 27,
        "created_at": "2022-09-01T07:35:36Z",
        "updated_at": "2025-08-10T09:35:08Z",
        "topics": [
            "cicd",
            "dependencies",
            "pep621",
            "poetry",
            "python",
            "rust"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-09T23:47:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/208ccb38430c216900a996c7de9aafaa5806094b1132e7d7d3a497deace3fdb4/fpgmaas/deptry"
        ],
        "homepage": "https://deptry.com/",
        "readme_summary": "Deptry is a command-line tool designed to identify issues with dependencies in Python projects. It detects unused, missing, and transitive dependencies by scanning Python files and comparing imported modules to the project's dependency definitions. Deptry supports projects using Poetry, pip, PDM, uv, and any project supporting PEP 621.",
        "key_features": [
            "Finds unused dependencies",
            "Finds missing dependencies",
            "Finds transitive dependencies",
            "Supports Poetry, pip, PDM, uv, and PEP 621 projects"
        ],
        "primary_use_case": "Checking for dependency issues in Python projects.",
        "open_issues": 39,
        "cover_image_prompt": "A meticulous librarian meticulously examines books on a towering shelf, each representing a Python project. The librarian uses a magnifying glass to identify unused or misplaced books (dependencies). Some books glow faintly, indicating unnecessary bloat, while others are clearly out of place. Digital particles representing code snippets float around the librarian, subtly connecting the scene to software. The library is bathed in soft, focused lighting, creating a sense of order and precision. The image should be in a detailed 3D isometric illustration style with a muted color palette."
    },
    {
        "id": 991716573,
        "name": "TurboDRF",
        "description": "The dead simple Django REST Framework API generator with role-based permissions",
        "url": "https://github.com/AlexanderCollins/TurboDRF",
        "language": "Python",
        "stars": 129,
        "forks": 4,
        "created_at": "2025-05-28T03:48:20Z",
        "updated_at": "2025-08-10T09:08:13Z",
        "topics": [],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-15T22:47:13Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/991716573/289a18e7-c4c1-4b4d-a1d1-a02817598111"
        ],
        "homepage": "",
        "readme_summary": "TurboDRF is a Django REST Framework API generator that simplifies API development by automatically creating REST APIs from Django models. It eliminates boilerplate code, providing features like role-based permissions, pagination, filtering, and search with minimal configuration. The primary goal is to accelerate API development and reduce the amount of manual coding required.",
        "key_features": [
            "Automatic REST API generation from Django models",
            "Role-based permissions",
            "Smart pagination",
            "Advanced filtering",
            "Full-text search",
            "Multi-field ordering",
            "Nested relationships",
            "API documentation",
            "Field-level security"
        ],
        "primary_use_case": "Rapidly generating REST APIs from Django models with minimal configuration and automatic role-based permissions.",
        "open_issues": 10,
        "cover_image_prompt": "A skilled architect standing before a blueprint-covered table, effortlessly transforming complex Django models into sleek, modern skyscrapers with a single wave of their hand. The blueprints represent Django models, and the skyscrapers symbolize fully-featured REST APIs. Digital particles flow from the architect's hand, shaping the buildings with features like pagination, filtering, and role-based permissions. Small screens display API documentation and code snippets. The scene is set in a bright, airy studio with a futuristic design. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 235468657,
        "name": "pipedream",
        "description": "Connect APIs, remarkably fast.  Free for developers.",
        "url": "https://github.com/PipedreamHQ/pipedream",
        "language": "JavaScript",
        "stars": 10385,
        "forks": 5444,
        "created_at": "2020-01-22T00:28:31Z",
        "updated_at": "2025-08-10T09:07:28Z",
        "topics": [
            "apis",
            "automation",
            "bash",
            "cli",
            "data-flow",
            "event-sourcing",
            "eventsourcing",
            "golang",
            "integration-flow",
            "integrations",
            "ipaas",
            "low-code",
            "low-code-development-platform",
            "nodejs",
            "python",
            "serverless",
            "typescript",
            "workflow",
            "workflows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-09T02:32:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/aee03dea0bccd3fa38daf8de49573cbfa1bebf3d6f67d63645ea5d316fbff338/PipedreamHQ/pipedream"
        ],
        "homepage": "https://pipedream.com",
        "readme_summary": "Pipedream is an integration platform for developers that allows them to connect APIs and develop event-driven automations. It offers pre-built components for common integrations, supports custom code in Node.js, Python, Golang, and Bash, and provides a free, hosted platform for building workflows triggered by various event sources.",
        "key_features": [
            "Workflows (automation sequences triggered by events)",
            "Event Sources (triggers from services like GitHub, Slack, Airtable)",
            "Actions (pre-built code steps for common operations)",
            "Custom code (Node.js, Python, Golang, Bash support)"
        ],
        "primary_use_case": "Connecting APIs and developing event-driven automations.",
        "open_issues": 3887,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of interconnected instruments, each representing a different API or application. The conductor, with a tablet displaying a workflow diagram, seamlessly directs the flow of data between a vibrant trumpet (representing Slack), a melodic piano (representing Google Sheets), and a powerful drum set (representing custom code). Glowing data streams visually connect the instruments, creating a harmonious integration. The scene is set on a modern, minimalist stage with soft, focused lighting. Small UI elements and code snippets subtly float around the conductor. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]