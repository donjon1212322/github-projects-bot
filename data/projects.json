[
    {
        "id": 1075431749,
        "name": "nanochat",
        "description": "The best ChatGPT that $100 can buy.",
        "url": "https://github.com/karpathy/nanochat",
        "language": "Python",
        "stars": 25311,
        "forks": 2530,
        "created_at": "2025-10-13T13:46:35Z",
        "updated_at": "2025-10-18T10:09:49Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-16T22:03:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ddbcc921be0a4f4c48b4c96c22ace4a21bed309e2a562a70c8db14d97121d7d3/karpathy/nanochat"
        ],
        "homepage": "",
        "readme_summary": "nanochat is a full-stack implementation of an LLM similar to ChatGPT, designed to be minimal, hackable, and run on a single 8XH100 node. It covers the entire pipeline from tokenization to web serving, allowing users to train and interact with their own LLM. The repository provides scripts for pretraining, finetuning, evaluation, and inference, with a focus on accessibility and customization.",
        "key_features": [
            "Full-stack LLM implementation",
            "Single-node operation (8XH100)",
            "Complete pipeline: tokenization, pretraining, finetuning, evaluation, inference, web serving",
            "Minimal and hackable codebase",
            "Training and inference scripts (e.g., speedrun.sh)",
            "ChatGPT-like web UI for interaction",
            "Report generation with evaluation metrics"
        ],
        "primary_use_case": "Training and deploying a customizable LLM on a single machine for experimentation and learning.",
        "open_issues": 23,
        "cover_image_prompt": "A young apprentice wizard stands before a glowing, miniature server rack, carefully feeding it lines of code from a scroll. The server rack transforms the code into a playful, talking AI assistant projected as a holographic child. The child is naive and makes silly mistakes, reflecting the model's limitations. Small UI elements display training metrics and configuration options. The scene is set in a cozy, cluttered workshop filled with wires and glowing components. The image should be in a 3D isometric illustration style with vibrant colors and clear details, subtly incorporating the 'nanochat' logo."
    },
    {
        "id": 1065936302,
        "name": "OpenStock",
        "description": "OpenStock is an open-source alternative to expensive market platforms. Track real-time prices, set personalized alerts, and explore detailed company insights ‚Äî built openly, for everyone, forever free.",
        "url": "https://github.com/Open-Dev-Society/OpenStock",
        "language": "TypeScript",
        "stars": 3335,
        "forks": 370,
        "created_at": "2025-09-28T18:16:32Z",
        "updated_at": "2025-10-18T10:07:00Z",
        "topics": [
            "coderabbit",
            "inngest",
            "nextjs",
            "shadcn-ui",
            "stock-market",
            "tailwindcss"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-10-17T19:09:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4dc0232c01f69bf9da67c01284b8abf16f49ef6e441eb92d9fdb3abbd4b70f7a/Open-Dev-Society/OpenStock"
        ],
        "homepage": "https://openstock-ods.vercel.app",
        "readme_summary": "OpenStock is an open-source platform for tracking real-time stock prices, setting personalized alerts, and exploring company insights. It aims to provide a free alternative to expensive market platforms, built with technologies like Next.js, TypeScript, and MongoDB.",
        "key_features": [
            "Real-time price tracking",
            "Personalized alerts",
            "Detailed company insights",
            "Open-source and free"
        ],
        "primary_use_case": "Providing an open-source alternative to commercial stock market platforms for tracking and analysis.",
        "open_issues": 4,
        "cover_image_prompt": "A cartographer meticulously charting a vast, mountainous landscape representing the stock market. The cartographer uses a telescope to observe distant peaks (representing companies) and valleys (representing market trends). The map is overlaid with subtle digital grid lines and glowing data streams. Small UI elements showing stock charts and alert settings are subtly integrated into the cartographer's tools. The scene is set in a sunlit observatory with a warm, inviting atmosphere. The composition is wide and detailed, emphasizing the scale of the market. The image should be in a detailed digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 1019139384,
        "name": "VisualStoryWriting",
        "description": "üßô‚Äç‚ôÇÔ∏è Writing by manipulating visual representations of stories",
        "url": "https://github.com/m-damien/VisualStoryWriting",
        "language": "TypeScript",
        "stars": 878,
        "forks": 114,
        "created_at": "2025-07-13T20:29:29Z",
        "updated_at": "2025-10-18T06:26:32Z",
        "topics": [],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2025-07-13T20:51:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/08a2eeaed3b3556fc33ecb8f1de37ee5a33ba1f689121847b972cb49a7b40c88/m-damien/VisualStoryWriting"
        ],
        "homepage": "http://damienmasson.com/VisualStoryWriting/",
        "readme_summary": "The Visual Story-Writing repository provides a system that automatically visualizes a story based on its chronological events, characters, actions, and movements. It allows users to edit the story by manipulating these visual representations, with GPT-4o suggesting edits to the text based on the visual changes.",
        "key_features": [
            "Visualizing story events on a timeline",
            "Editing story text by manipulating visual representations",
            "Suggesting text edits based on character interactions",
            "Suggesting text edits based on character positions",
            "Suggesting text edits based on event reordering",
            "Utilizing GPT-4o for information extraction and edit suggestions"
        ],
        "primary_use_case": "Editing and refining stories through visual manipulation and AI-powered suggestions.",
        "open_issues": 7,
        "cover_image_prompt": "A writer sitting at a digital canvas, manipulating a vibrant, interconnected web of characters and events representing a story. The writer uses a stylus to drag and connect characters, causing the text on a nearby screen to dynamically update and reflect the new relationships. Digital particles flow between the characters, visualizing the flow of the narrative. Small UI elements show a timeline and character interactions. The scene is set in a bright, modern studio with natural lighting. The image should be in a flat design style with clear iconography and a focus on usability. The repository name is subtly displayed on the canvas."
    },
    {
        "id": 660325330,
        "name": "humanify",
        "description": "Deobfuscate Javascript code using ChatGPT",
        "url": "https://github.com/jehna/humanify",
        "language": "TypeScript",
        "stars": 2977,
        "forks": 173,
        "created_at": "2023-06-29T18:52:47Z",
        "updated_at": "2025-10-18T08:12:15Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-28T02:59:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2cb36f599b6ea4f81743280a37d62f3751b09c86d0e4fe42602d774a3f0afec6/jehna/humanify"
        ],
        "homepage": "",
        "readme_summary": "HumanifyJS is a tool designed to deobfuscate, unminify, transpile, decompile, and unpack JavaScript code using large language models (LLMs) like ChatGPT and Llama, combined with AST-level transformations via Babel. It offers both cloud-based (OpenAI, Gemini) and local modes for deobfuscation, providing users with flexibility based on their needs and resources.",
        "key_features": [
            "Deobfuscation of JavaScript code",
            "Unminification of JavaScript code",
            "Transpilation of JavaScript code",
            "Decompilation of JavaScript code",
            "Unpacking of JavaScript code",
            "Uses LLMs (ChatGPT, Llama) for variable and function renaming hints",
            "AST-level transformations using Babel for code equivalence",
            "CLI tool installable via npm",
            "OpenAI mode (cloud-based)",
            "Gemini mode (cloud-based)",
            "Local mode (uses pre-trained language model)",
            "Supports API key authentication for OpenAI and Gemini",
            "Downloadable pre-trained language model for local mode"
        ],
        "primary_use_case": "Deobfuscating and making human-readable obfuscated or minified JavaScript code.",
        "open_issues": 61,
        "cover_image_prompt": "Imagine a skilled sculptor meticulously chiseling away at a block of tangled code, revealing a beautiful, elegant statue of clean JavaScript beneath. The sculptor uses a magical hammer powered by glowing AI energy, gently reshaping the code. Small screens display snippets of the original obfuscated code and the refined, human-readable output. The scene is set in a bright, airy workshop filled with digital tools and glowing particles representing data flow. The repository name, 'HumanifyJS,' is subtly etched into the sculptor's workbench. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1060019776,
        "name": "core-sdk",
        "description": "Flowscape Core SDK is a framework-agnostic 2D canvas engine built on Konva.js",
        "url": "https://github.com/Flowscape-UI/core-sdk",
        "language": "TypeScript",
        "stars": 4,
        "forks": 0,
        "created_at": "2025-09-19T09:15:23Z",
        "updated_at": "2025-10-18T07:25:49Z",
        "topics": [
            "canvas",
            "canvas2d",
            "drag-and-drop",
            "flowscape",
            "flowscape-ui",
            "whiteboard"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-04T03:24:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9f379fddcfc3e9c75bb8822e650748567d2089f0db180e17560e8b1700e0721c/Flowscape-UI/core-sdk"
        ],
        "homepage": "https://flowscape-ui.github.io/core-sdk-doc/",
        "readme_summary": "The Flowscape Core SDK is a framework-agnostic 2D canvas engine built on Konva.js. It provides a set of tools and plugins for creating interactive 2D applications, including features like grid, rulers, hotkeys, and rich shapes. It's designed to be extensible and easy to integrate with different JavaScript frameworks.",
        "key_features": [
            "Framework-agnostic",
            "Plugin system",
            "Complete toolset (grid, rulers, guides, area selection)",
            "Hotkeys",
            "Rich shapes",
            "Transformations",
            "TypeScript-first",
            "Optimized"
        ],
        "primary_use_case": "Creating interactive 2D canvas-based applications with features like drag-and-drop, shape manipulation, and plugin-based extensibility.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a master architect at a digital drafting table, designing a blueprint for a sprawling city. The architect uses modular building blocks (representing plugins) to construct different districts on the canvas. Each district showcases unique interactive elements and tools ‚Äì grids, rulers, and selectable shapes. A holographic display shows snippets of TypeScript code seamlessly integrating these elements. The scene is bathed in soft, focused lighting, highlighting the precision and flexibility of the design process. The style is a clean, 3D isometric illustration with a vibrant color palette."
    }
]