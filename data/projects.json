[
    {
        "id": 519859998,
        "name": "AFFiNE",
        "description": "There can be more than Notion and Miro. AFFiNE(pronounced [ə‘fain]) is a next-gen knowledge base that brings planning, sorting and creating all together. Privacy first, open-source, customizable and ready to use. ",
        "url": "https://github.com/toeverything/AFFiNE",
        "language": "TypeScript",
        "stars": 51659,
        "forks": 3448,
        "created_at": "2022-07-31T18:45:21Z",
        "updated_at": "2025-06-12T09:41:19Z",
        "topics": [
            "app",
            "crdt",
            "editor",
            "electron",
            "knowledge-base",
            "markdown",
            "miro",
            "notes",
            "notion",
            "notion-alternative",
            "rust",
            "rust-lang",
            "rust-language",
            "table",
            "tableview",
            "whiteboard",
            "wiki",
            "workspace"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-06-12T08:02:37Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/519859998/81557da6-35e0-421d-8ad7-ec0c7a4725d2"
        ],
        "homepage": "https://affine.pro",
        "readme_summary": "AFFiNE is an open-source workspace that merges documents, whiteboards, and databases into a single, unified canvas. It offers local-first data storage, real-time collaboration, and AI-powered assistance for various tasks. It aims to provide a more flexible and integrated alternative to tools like Notion and Miro.",
        "key_features": [
            "Unified canvas for various block types (text, notes, embedded pages, databases, shapes, slides)",
            "AI-powered assistance for tasks like report writing, slide creation, summarization, and task management",
            "Local-first architecture with real-time collaboration capabilities"
        ],
        "primary_use_case": "All-in-one workspace for knowledge management, planning, and content creation, serving as an alternative to Notion and Miro.",
        "open_issues": 130,
        "cover_image_prompt": "Imagine a grand architect at a central drafting table, seamlessly merging blueprints, sketches, and notes into a single, dynamic workspace. The architect gestures towards a holographic display showcasing interconnected documents, mind maps, and tables, all flowing together effortlessly. Subtle UI elements float around the workspace, hinting at the digital nature of the platform. The scene is bathed in soft, ambient light, creating a sense of innovation and collaboration. The AFFiNE logo is subtly integrated into the drafting table. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 980972336,
        "name": "partydeck-rs",
        "description": "A split-screen game launcher for Linux/SteamOS",
        "url": "https://github.com/wunnr/partydeck-rs",
        "language": "Rust",
        "stars": 199,
        "forks": 4,
        "created_at": "2025-05-10T04:07:11Z",
        "updated_at": "2025-06-12T03:57:27Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-03T23:09:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2b232ce15e1776a0f44a9a0b3de2efc04b5ea2a0f63ad432057ae2e0f50b01d2/wunnr/partydeck-rs"
        ],
        "homepage": null,
        "readme_summary": "PartyDeck is a split-screen game launcher for Linux and SteamOS that allows up to four players to play games simultaneously on a single screen. It supports both native Linux games and Windows games through Proton, and features automatic window fitting, controller sandboxing, and profile support for individual player save data. The launcher also emulates the Steam multiplayer API, enabling multiple instances of Steam games.",
        "key_features": [
            "Runs up to 4 game instances simultaneously",
            "Supports native Linux and Windows games (via Proton)",
            "Automatic game window fitting",
            "Handler system for easy game setup",
            "Steam multiplayer API emulation",
            "Controller support without additional setup",
            "Controller sandboxing to prevent input interference",
            "Profile support for individual player save data",
            "Works out of the box on SteamOS"
        ],
        "primary_use_case": "Split-screen gaming on Linux/SteamOS.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a group of friends playing different games on a single, shared screen, each in their own quadrant. The screen is divided into four sections, each displaying a different game environment – a racing track, a fantasy forest, a space station, and a sports arena. Each player controls their game with a separate controller, subtly connected to their respective screen quadrant by glowing lines. The shared screen is displayed on a futuristic console, subtly labeled \"PartyDeck\". Digital particles flow between the controllers and the screen, representing the seamless input management. The scene is set in a cozy living room with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 964152252,
        "name": "tariff",
        "description": "The official repository for tariff",
        "url": "https://github.com/hxu296/tariff",
        "language": "Python",
        "stars": 3077,
        "forks": 43,
        "created_at": "2025-04-10T19:10:35Z",
        "updated_at": "2025-06-12T09:40:26Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T07:55:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/454a7fa7ae31af8af2feeece636750fd264ef5be4ecc78bb27f58e3a5b51f6f2/hxu296/tariff"
        ],
        "homepage": "https://pypi.org/project/tariff/",
        "readme_summary": "The 'tariff' repository is a Python package that allows users to impose artificial tariffs on imported packages. This is achieved by slowing down the import process based on a user-defined percentage. The package is primarily intended as a parody, simulating the impact of tariffs on software dependencies.",
        "key_features": [
            "Imposes tariffs on Python package imports",
            "Allows setting custom tariff rates for different packages",
            "Slows down imports based on the specified tariff percentage",
            "Displays a message indicating the tariff imposed and the resulting slowdown"
        ],
        "primary_use_case": "Introducing artificial delays to Python package imports to simulate the effect of tariffs, presumably for parody or demonstration purposes.",
        "open_issues": 60,
        "cover_image_prompt": "A customs officer, dressed in patriotic colors, meticulously inspects Python packages arriving at a port labeled 'Imports'. The officer uses an oversized magnifying glass that displays percentage values, indicating tariff rates, on packages like 'numpy', 'pandas', and 'requests'. Some packages are delayed by stopwatches, visually representing the imposed slowdown. A digital screen in the background shows a simplified Python code snippet with import statements. The scene is set in a bustling, stylized port with a clear sky and dramatic lighting. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 354640201,
        "name": "drawdata",
        "description": "Draw datasets from within Python notebooks.",
        "url": "https://github.com/koaning/drawdata",
        "language": "JavaScript",
        "stars": 1412,
        "forks": 128,
        "created_at": "2021-04-04T20:28:10Z",
        "updated_at": "2025-06-12T06:49:52Z",
        "topics": [
            "anywidget",
            "data",
            "drawdata",
            "marimo"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-05-12T09:04:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3a3cf726ee430f5c93431520bccba4d1148968b0375497ac86b8c52537ba9703/koaning/drawdata"
        ],
        "homepage": "https://koaning.github.io/drawdata/",
        "readme_summary": "The drawdata repository provides Jupyter widgets that allow users to draw datasets directly within their notebooks. It leverages anywidget for broad compatibility and supports exporting data in various formats, including pandas, polars, and X, y arrays, making it ideal for teaching and experimenting with machine learning algorithms. The library offers both ScatterWidget and BarWidget for diverse data drawing scenarios.",
        "key_features": [
            "Jupyter widgets for drawing datasets",
            "Integration with anywidget for compatibility with Jupyter, VSCode, and Colab",
            "Data export as pandas, polars dataframes, or X, y arrays for scikit-learn",
            "ScatterWidget and BarWidget for different data drawing needs"
        ],
        "primary_use_case": "Drawing datasets within Python notebooks for machine learning education and experimentation.",
        "open_issues": 7,
        "cover_image_prompt": "An artist sketching data points onto a digital canvas, transforming abstract ideas into tangible datasets. The artist uses a stylus that emits glowing data particles, forming scatter plots and bar charts on the canvas. Small UI elements on the canvas show the 'drawdata' library name and code snippets for data retrieval. The scene is set in a bright, modern studio with a focus on creativity and data exploration. The composition is clean and focused, with a vibrant color scheme. The image should be in flat design style with clear iconography and subtle tech elements."
    },
    {
        "id": 602389947,
        "name": "pygwalker",
        "description": "PyGWalker: Turn your dataframe into an interactive UI for visual analysis",
        "url": "https://github.com/Kanaries/pygwalker",
        "language": "Python",
        "stars": 14925,
        "forks": 796,
        "created_at": "2023-02-16T05:17:24Z",
        "updated_at": "2025-06-12T06:53:02Z",
        "topics": [
            "data-analysis",
            "data-exploration",
            "dataframe",
            "matplotlib",
            "pandas",
            "plotly",
            "tableau",
            "tableau-alternative",
            "visualization"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-11T12:19:25Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/602389947/f12f5f75-9f5e-4306-a443-f19104de881e"
        ],
        "homepage": "https://kanaries.net/pygwalker",
        "readme_summary": "PyGWalker is a Python library that simplifies data analysis and visualization workflows by turning pandas DataFrames into interactive visual interfaces. It offers a drag-and-drop interface for easy visualization creation with real-time updates. The primary use case is to simplify data analysis and visualization within Jupyter Notebook environments.",
        "key_features": [
            "Interactive Data Exploration",
            "Drag-and-drop interface for easy visualization creation",
            "Real-time updates as you make changes to the visualization",
            "Turns pandas DataFrames into interactive visual interfaces"
        ],
        "primary_use_case": "Simplifying Jupyter Notebook data analysis and data visualization workflow.",
        "open_issues": 65,
        "cover_image_prompt": "Imagine a skilled cartographer standing over a vast, blank map. They are surrounded by stacks of raw data represented as scrolls and ledgers. With a wave of their hand, the cartographer transforms the data into a vibrant, interactive map filled with colorful charts, graphs, and interactive elements. The map allows for easy exploration and analysis of the underlying data. Subtle UI elements and code snippets float around the scene, connecting the visual representation to the underlying Python code. The scene is bathed in soft, inviting light, creating a sense of discovery and understanding. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 915054134,
        "name": "kokoro",
        "description": "https://hf.co/hexgrad/Kokoro-82M",
        "url": "https://github.com/hexgrad/kokoro",
        "language": "JavaScript",
        "stars": 3183,
        "forks": 350,
        "created_at": "2025-01-10T21:37:05Z",
        "updated_at": "2025-06-12T08:19:58Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T16:31:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ba86c3da972de3e02998dd84ccd248ad258436068ca5b518f79c28c94b9f1edd/hexgrad/kokoro"
        ],
        "homepage": null,
        "readme_summary": "Kokoro is an open-weight TTS model designed for efficient and high-quality text-to-speech conversion. It offers a balance between model size and performance, making it suitable for various applications. The library uses Apache-licensed weights and the misaki G2P library.",
        "key_features": [
            "Open-weight TTS model (82 million parameters)",
            "Comparable quality to larger models with faster speed and cost-efficiency",
            "Apache-licensed weights for flexible deployment",
            "Uses misaki G2P library"
        ],
        "primary_use_case": "Text-to-speech conversion",
        "open_issues": 95,
        "cover_image_prompt": "A skilled artisan meticulously crafting a voice from raw sound waves, shaping them into a clear and expressive auditory experience. The artisan uses specialized tools that subtly resemble audio processing software interfaces. Digital particles representing phonemes and intonation patterns float around the artisan's hands, forming the spoken words. The backdrop features a stylized soundboard with glowing knobs and meters. The repository name, 'Kokoro,' is subtly etched onto the artisan's workbench. The scene is bathed in warm, inviting light. The image should be in a flat design style with clear iconography and a harmonious color scheme."
    },
    {
        "id": 592397559,
        "name": "pythontk",
        "description": "A collection of backend utilities for Python.",
        "url": "https://github.com/m3trik/pythontk",
        "language": "Python",
        "stars": 7,
        "forks": 1,
        "created_at": "2023-01-23T16:41:34Z",
        "updated_at": "2025-06-12T06:51:59Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T02:38:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b8a184e2db3d008ca21289f88ea25111efe2bcadcec84e6f67585a81bd0c5b4e/m3trik/pythontk"
        ],
        "homepage": null,
        "readme_summary": "Pythontk is a Python toolkit providing a variety of backend utilities. It includes modules for core functionalities, file handling, image manipulation, mathematical operations, iteration, and string manipulation. The repository aims to simplify common tasks in Python development by offering reusable utility functions.",
        "key_features": [
            "Core utilities",
            "File utilities",
            "Image utilities",
            "Math utilities",
            "Iteration utilities",
            "String utilities"
        ],
        "primary_use_case": "Providing a collection of backend utilities for Python development.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan in a workshop meticulously crafting intricate tools from raw materials. The artisan carefully shapes and refines each tool, ensuring its precision and utility. Bins of code snippets and data structures surround the artisan, representing the raw materials. Completed tools, glowing with a soft light, are neatly organized on shelves, ready for use. A blueprint on the wall subtly displays the pythontk logo. The scene is set in a brightly lit, organized workshop with a warm, inviting atmosphere. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]