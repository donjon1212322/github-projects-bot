[
    {
        "id": 1033999973,
        "name": "sourcerer-mcp",
        "description": "MCP for semantic code search & navigation that reduces token waste",
        "url": "https://github.com/st3v3nmw/sourcerer-mcp",
        "language": "Go",
        "stars": 31,
        "forks": 3,
        "created_at": "2025-08-07T17:17:00Z",
        "updated_at": "2025-09-05T08:44:25Z",
        "topics": [
            "claude-code",
            "code-analysis",
            "code-navigation",
            "code-search",
            "mcp",
            "mcp-server",
            "model-context-protocol",
            "semantic-search"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-30T13:38:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d3be0be15b7fb8755ec8d7eb59c5f93ee5f70676d570614b32af1ecf58a59a3c/st3v3nmw/sourcerer-mcp"
        ],
        "homepage": "",
        "readme_summary": "Sourcerer MCP is a tool for semantic code search and navigation, designed to reduce token usage for AI agents. It builds a semantic index of a codebase, allowing agents to search conceptually and jump directly to relevant code chunks instead of reading entire files.",
        "key_features": [
            "Semantic code search",
            "Code navigation",
            "Token usage reduction for AI agents",
            "Code parsing and chunking using Tree-sitter",
            "File system integration with `.gitignore` support",
            "Persistent vector database using chromem-go",
            "OpenAI embeddings for semantic similarity",
            "MCP tools for semantic search and code retrieval"
        ],
        "primary_use_case": "Enabling AI agents to efficiently search and navigate codebases by providing semantic understanding and reducing token consumption.",
        "open_issues": 0,
        "cover_image_prompt": "A librarian, surrounded by towering shelves of code books, uses a magical monocle to instantly locate specific code passages based on their meaning, not just keywords. The monocle emits a beam of light that highlights the relevant sections, while irrelevant pages fade into the background. Small UI elements float around the librarian, displaying code snippets and search queries. The scene is set in a grand, futuristic library with soft, warm lighting. The image should be in a 3D isometric illustration style with intricate details and a focus on clarity."
    },
    {
        "id": 496233655,
        "name": "MarkFlowy",
        "description": "A markdown editor, which is lighter, smarter and purer. 一个 Markdown 编辑器，但是更轻快、更智能、更纯粹。",
        "url": "https://github.com/drl990114/MarkFlowy",
        "language": "Rust",
        "stars": 1491,
        "forks": 49,
        "created_at": "2022-05-25T13:03:26Z",
        "updated_at": "2025-09-05T08:57:27Z",
        "topics": [
            "ai",
            "chatgpt",
            "deepseek",
            "editor",
            "linux-app",
            "macos-app",
            "markdown",
            "markdowneditor",
            "notes-app",
            "prosemirror",
            "reactjs",
            "rust-lang",
            "tauri",
            "typescript",
            "windows-app"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-01T13:55:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b564aad3e456931ab0d96df4c44420c10f47576f352fef05308c91bb03e02c86/drl990114/MarkFlowy"
        ],
        "homepage": "https://www.markflowy.cc",
        "readme_summary": "MarkFlowy is a lightweight and intelligent Markdown editor built with Rust and Tauri, offering features like AI assistance (DeepSeek, ChatGPT), custom themes, and multiple editing modes (source code, WYSIWYG). It aims to provide an efficient, beautiful, and data-safe Markdown editing experience across Linux, macOS, and Windows.",
        "key_features": [
            "Built-in AI (DeepSeek, ChatGPT)",
            "Lightweight (less than 10MB)",
            "High availability (remiirror editor)",
            "Multiple editing modes (source code, WYSIWYG)",
            "Custom Theme support"
        ],
        "primary_use_case": "Creating and editing Markdown documents with AI-powered features and customizability.",
        "open_issues": 32,
        "cover_image_prompt": "A skilled artisan meticulously crafting a digital scroll using a set of advanced tools. The scroll represents a Markdown document, and the tools symbolize MarkFlowy's features: an AI assistant (represented by a small, helpful robot), a lightweight hammer, and a theming palette. The artisan works in a clean, modern workshop filled with subtle tech elements like floating code snippets and glowing data particles. A small screen displays the MarkFlowy logo. The scene is brightly lit with a focus on clarity and precision. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 431446432,
        "name": "gravity_defied_cpp",
        "description": "Rewrite Gravity Defied mobile game from Java to C++ & SDL",
        "url": "https://github.com/rgimad/gravity_defied_cpp",
        "language": "C++",
        "stars": 71,
        "forks": 8,
        "created_at": "2021-11-24T10:47:49Z",
        "updated_at": "2025-09-05T05:23:37Z",
        "topics": [
            "cpp",
            "gamedev",
            "gravity-defied",
            "j2me",
            "sdl",
            "sdl2"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-12T20:13:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/34a9963808d0b21137ef214c33c5db32d064d706ac68d81bb6e3bc1c05a85aa8/rgimad/gravity_defied_cpp"
        ],
        "homepage": "",
        "readme_summary": "The repository is a C++ and SDL2 port of the mobile game Gravity Defied, originally developed for the J2ME platform. It aims to recreate all the features of the original game using C++ and the SDL2 library.",
        "key_features": [
            "C++ port of Gravity Defied",
            "SDL2 implementation",
            "Replicates original game features"
        ],
        "primary_use_case": "Recreating and playing Gravity Defied on modern systems using C++ and SDL2.",
        "open_issues": 5,
        "cover_image_prompt": "A determined cyclist navigates a treacherous, gravity-defying track suspended in the air, reminiscent of the original Gravity Defied game. The track is composed of fragmented mobile phone screens, subtly displaying J2ME code fading into clean C++ code. The cyclist's path is illuminated by a glowing SDL2 logo, guiding them forward. The background features a stylized cityscape with a retro-futuristic aesthetic. Small digital particles representing game physics float around the cyclist and track. The composition is dynamic and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and clear outlines."
    },
    {
        "id": 47767967,
        "name": "bootique",
        "description": "Bootique is a minimally opinionated platform for modern runnable Java apps.",
        "url": "https://github.com/bootique/bootique",
        "language": "Java",
        "stars": 1421,
        "forks": 283,
        "created_at": "2015-12-10T14:45:15Z",
        "updated_at": "2025-09-05T06:20:06Z",
        "topics": [
            "bootique",
            "dependency-injection",
            "java",
            "runnable-jar"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-30T19:10:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8b6466ef81864a98a773f02c5a09138e6636ea2f7d2c01521f0d3bbbced951e0/bootique/bootique"
        ],
        "homepage": "https://bootique.io",
        "readme_summary": "Bootique is a platform for building runnable Java applications without requiring a JavaEE container. It allows developers to create REST services, web apps, jobs, and DB migration tasks that can be run as simple commands, making it suitable for building microservices.",
        "key_features": [
            "Dependency Injection",
            "Module-based architecture",
            "Container-less execution",
            "Support for REST services, web apps, jobs, and DB migration tasks"
        ],
        "primary_use_case": "Building runnable Java applications and microservices.",
        "open_issues": 17,
        "cover_image_prompt": "A skilled architect meticulously assembling a miniature city from individual building blocks, each representing a Bootique module. The city is powered by a central, glowing core, symbolizing the Bootique framework. Small screens display code snippets and dependency graphs, subtly connecting the physical construction to software development. The scene is set in a bright, modern workshop with a focus on precision and modularity. The composition is clean and focused, with a balanced color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 2788710,
        "name": "jclasslib",
        "description": "jclasslib bytecode editor is a tool that visualizes all aspects of compiled Java class files and the contained bytecode.",
        "url": "https://github.com/ingokegel/jclasslib",
        "language": "Kotlin",
        "stars": 2926,
        "forks": 422,
        "created_at": "2011-11-16T15:29:25Z",
        "updated_at": "2025-09-04T20:52:31Z",
        "topics": [
            "bytecode",
            "gui",
            "java",
            "kotlin"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-05T09:46:41Z",
        "media_urls": [
            "https://opengraph.githubassets.com/77852238dc3ae383e72781304015ab3883f9f187fb30ebdb4f9225db82d86a98/ingokegel/jclasslib"
        ],
        "homepage": "",
        "readme_summary": "jclasslib bytecode editor is a tool for visualizing and editing compiled Java class files and bytecode. It also includes a Kotlin Multiplatform library for reading and writing Java class files, available on Maven Central.",
        "key_features": [
            "Visualizes Java class files and bytecode",
            "Edits class file aspects in the UI",
            "Provides a Kotlin Multiplatform library for reading and writing class files",
            "Supports editing constant pool entries and bytecode instructions",
            "Offers a dark mode",
            "Includes localizations",
            "Has an IntelliJ IDEA plugin"
        ],
        "primary_use_case": "Analyzing, editing, and understanding Java bytecode.",
        "open_issues": 10,
        "cover_image_prompt": "A watchmaker meticulously examining the inner gears of a complex clockwork mechanism representing a Java class file. The watchmaker uses specialized tools to adjust and refine the gears, each representing a bytecode instruction. A magnifying glass reveals intricate details and data flowing through the mechanism. Small screens display disassembled code snippets and data visualizations. The repository name, 'jclasslib,' is subtly engraved on the watchmaker's workbench. The scene is set in a brightly lit workshop with a clean, focused composition. The image should be in a detailed 3D isometric illustration style with vibrant colors."
    },
    {
        "id": 107745806,
        "name": "kotlin-result",
        "description": "A multiplatform Result monad for modelling success or failure operations.",
        "url": "https://github.com/michaelbull/kotlin-result",
        "language": "Kotlin",
        "stars": 1182,
        "forks": 75,
        "created_at": "2017-10-21T02:42:29Z",
        "updated_at": "2025-09-04T20:14:02Z",
        "topics": [
            "browser",
            "class",
            "either",
            "fp",
            "functional",
            "functional-programming",
            "ios",
            "js",
            "jvm",
            "kotlin",
            "kotlin-multiplatform",
            "monad",
            "result",
            "type"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-03T16:58:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ac0030758defbbdbadd36f42466631adeea390104e8ae475e6f6817c5c3a9ef7/michaelbull/kotlin-result"
        ],
        "homepage": "",
        "readme_summary": "The kotlin-result repository provides a multiplatform Result monad for Kotlin, enabling developers to model operations that can either succeed with a value or fail with an error. It promotes functional programming principles like Railway Oriented Programming by clearly separating success and failure paths, and it's designed to minimize overhead through inline value classes.",
        "key_features": [
            "Multiplatform support (JVM, JS, Native)",
            "Result monad for handling success/failure",
            "Railway Oriented Programming support",
            "Inline value class implementation for zero-overhead success path",
            "Exception handling with runCatching",
            "Mappings to Result types in other languages (Elm, Haskell, Rust, Scala)"
        ],
        "primary_use_case": "Modeling operations that can result in either a successful value or an error, providing a clear and type-safe way to handle potential failures in Kotlin applications across multiple platforms.",
        "open_issues": 3,
        "cover_image_prompt": "A seasoned explorer carefully navigating a treacherous mountain pass, representing a function call. The explorer carries a backpack labeled 'Input' and has two potential paths ahead: a sunny, clear path leading to a 'Success' destination, and a dark, rocky path leading to an 'Error' chasm. A small, glowing compass subtly displays 'kotlin-result'. The scene is set in a stylized, mountainous landscape with dramatic lighting. Small UI elements showing code snippets are subtly embedded in the rocks. The composition is a wide shot emphasizing the two distinct paths. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    }
]