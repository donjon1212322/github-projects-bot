[
    {
        "id": 734573996,
        "name": "InstantStyle",
        "description": "InstantStyle: Free Lunch towards Style-Preserving in Text-to-Image Generation ðŸ”¥",
        "url": "https://github.com/instantX-research/InstantStyle",
        "language": "Jupyter Notebook",
        "stars": 1845,
        "forks": 112,
        "created_at": "2023-12-22T03:21:58Z",
        "updated_at": "2025-03-09T09:42:33Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-09-18T09:33:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/aeea73c48c7b93c8050f1b9f46fe61396dfbbdd4180be861c06cb09cab8929b8/instantX-research/InstantStyle"
        ],
        "homepage": "https://instantstyle.github.io/",
        "readme_summary": "InstantStyle is a framework for style-preserving text-to-image generation. It achieves style-content disentanglement by subtracting content features from image features and injecting style into specific attention blocks of a deep network. The framework supports integration with diffusers and enables high-resolution image generation and distributed inference.",
        "key_features": [
            "Style-content disentanglement",
            "Style injection into specific attention blocks",
            "Support for diffusers",
            "High-resolution image generation support",
            "Distributed inference"
        ],
        "primary_use_case": "Style transfer in text-to-image generation",
        "open_issues": 34,
        "cover_image_prompt": "A skilled tailor meticulously fitting a vibrant, patterned fabric (style) onto a mannequin representing a generic figure (content). The tailor uses digital tools to precisely transfer the fabric's unique texture and color onto the mannequin, resulting in a perfectly styled figure. Subtle UI elements display style transfer parameters and before/after comparisons. The scene is set in a modern design studio with soft, diffused lighting. The image should be in a clean, 3D isometric illustration style with clear details and a focus on the style transfer process. The InstantStyle logo is subtly displayed on the tailor's workstation."
    },
    {
        "id": 245013110,
        "name": "myDrive",
        "description": "Node.js and mongoDB Google Drive Clone",
        "url": "https://github.com/subnub/myDrive",
        "language": "TypeScript",
        "stars": 3602,
        "forks": 430,
        "created_at": "2020-03-04T22:01:55Z",
        "updated_at": "2025-03-09T09:48:13Z",
        "topics": [],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T01:25:56Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/245013110/2e1e5191-ea32-471d-b997-fdb8bce98dee"
        ],
        "homepage": null,
        "readme_summary": "MyDrive is an open-source cloud file storage server built with Node.js and MongoDB. It offers features similar to Google Drive, including file and folder uploading/downloading, multiple database support (Amazon S3, Filesystem), media viewing, file sharing, and security features like AES256 encryption. It allows users to host their own cloud storage solution, providing control over their data.",
        "key_features": [
            "Upload Files",
            "Download Files",
            "Upload Folders",
            "Download Folders (Automatically converts to zip)",
            "Multiple DB Support (Amazon S3, Filesystem)",
            "Photo, Video Viewer and Media Gallery",
            "Generated Photo And Video Thumbnails",
            "File Sharing",
            "PWA Support",
            "AES256 Encryption",
            "Service Worker",
            "Mobile Support",
            "Docker",
            "Email Verification",
            "JWT (Access and Refresh Tokens)"
        ],
        "primary_use_case": "Open source cloud file storage server, similar to Google Drive, allowing users to host their own file storage solution.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled librarian meticulously organizing digital files into a vast, cloud-shaped library. The librarian uses a special interface to sort documents, photos, and videos, placing them into clearly labeled folders within the cloud. Beams of light connect the files to the cloud, symbolizing seamless storage and access. Small UI elements displaying file names and folder structures subtly integrate the software aspect. The scene is set in a bright, airy library with a futuristic design. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 62712899,
        "name": "AdGuardHome",
        "description": "Network-wide ads & trackers blocking DNS server",
        "url": "https://github.com/AdguardTeam/AdGuardHome",
        "language": "Go",
        "stars": 27348,
        "forks": 1953,
        "created_at": "2016-07-06T10:31:47Z",
        "updated_at": "2025-03-09T09:15:17Z",
        "topics": [
            "adblock",
            "adguard",
            "dns",
            "dns-over-https",
            "dns-over-quic",
            "dns-over-tls",
            "dnscrypt",
            "golang",
            "open-source",
            "privacy"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T15:51:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ede3db6d8eb7dd6e016f8c9bdb0e236f1192c9ac58c276bd16e961cc39387641/AdguardTeam/AdGuardHome"
        ],
        "homepage": "https://adguard.com/adguard-home/overview.html",
        "readme_summary": "AdGuard Home is a network-wide DNS server that blocks ads and trackers for all devices on your home network without requiring client-side software. It operates by re-routing tracking domains to a 'black hole', preventing devices from connecting to those servers, thus enhancing privacy and security.",
        "key_features": [
            "Network-wide ad and tracker blocking",
            "DNS server functionality",
            "Open-source and free",
            "No client-side software required"
        ],
        "primary_use_case": "Blocking ads and trackers for all devices on a home network.",
        "open_issues": 1033,
        "cover_image_prompt": "Imagine a vigilant gardener tending to a lush garden, representing a home network. The gardener, symbolizing AdGuard Home, carefully prunes away withered leaves (ads and trackers) from the plants (devices). A clear, protective dome surrounds the garden, deflecting dark clouds of unwanted content. Small screens embedded in the garden walls display real-time DNS filtering logs. The scene is bathed in soft, warm sunlight, creating a sense of security and privacy. The style is a 3D isometric illustration with vibrant colors and crisp details, subtly incorporating the AdGuard Home logo into the garden gate."
    },
    {
        "id": 742435425,
        "name": "first2apply",
        "description": null,
        "url": "https://github.com/beastx-ro/first2apply",
        "language": "TypeScript",
        "stars": 127,
        "forks": 15,
        "created_at": "2024-01-12T13:24:46Z",
        "updated_at": "2025-03-09T05:48:33Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T19:26:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5515a6c0c6a2dc24e526030178458fc849a9e441b392a2a74fb15233472fedd8/beastx-ro/first2apply"
        ],
        "homepage": "https://first2apply-blog.vercel.app",
        "readme_summary": "First 2 Apply is an open-source job board aggregator that consolidates listings from platforms like LinkedIn and Indeed. It consists of a Supabase backend and a desktop probe application. The project aims to streamline the job search process for users by providing a centralized view of available opportunities.",
        "key_features": [
            "Job board aggregation from multiple platforms (LinkedIn, Indeed, Dice, etc.)",
            "Supabase backend",
            "Desktop probe application",
            "Automated updates for MacOS, Windows, and Linux"
        ],
        "primary_use_case": "Centralizing job listings from various platforms to help job seekers find opportunities faster.",
        "open_issues": 10,
        "cover_image_prompt": "Imagine a bustling marketplace where job seekers are vendors displaying their skills and aspirations. A central 'First 2 Apply' stall acts as a powerful magnet, drawing in opportunities (represented by glowing orbs) from various sources (LinkedIn, Indeed, etc.). The stall operator efficiently sorts and presents these opportunities to the vendors, helping them quickly find the perfect match. Subtle UI elements and data visualizations float around the stall, connecting the scene to the digital world. The scene is set in a bright, inviting marketplace with a focus on efficiency and opportunity. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 21244505,
        "name": "qutebrowser",
        "description": "A keyboard-driven, vim-like browser based on Python and Qt.",
        "url": "https://github.com/qutebrowser/qutebrowser",
        "language": "Python",
        "stars": 10131,
        "forks": 1025,
        "created_at": "2014-06-26T14:59:34Z",
        "updated_at": "2025-03-09T06:02:59Z",
        "topics": [
            "browser",
            "pyqt5",
            "python",
            "qt",
            "qtwebengine",
            "qutebrowser",
            "vim",
            "web"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-03T19:56:43Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/21244505/05003600-fa48-11e9-8128-34e0a03b0734"
        ],
        "homepage": "https://www.qutebrowser.org/",
        "readme_summary": "qutebrowser is a keyboard-driven web browser with a minimal GUI, inspired by Vim. It's built using Python and Qt, offering a highly customizable and efficient browsing experience for users who prefer keyboard navigation. The browser focuses on speed and control, providing a unique alternative to traditional mouse-driven browsers.",
        "key_features": [
            "Keyboard-driven navigation",
            "Vim-like keybindings",
            "Minimal GUI",
            "Based on Python and Qt",
            "Customizable"
        ],
        "primary_use_case": "Keyboard-focused web browsing with a minimal GUI.",
        "open_issues": 1145,
        "cover_image_prompt": "A skilled navigator at the helm of a sleek, customizable ship, effortlessly maneuvering through a vast ocean of web pages. The ship's sails are shaped like keyboard keys, and its hull displays a subtle Python logo. The navigator uses a sophisticated control panel with Vim-like commands to chart the course, while helpful assistants (representing Qt modules) provide support. The scene is set during a vibrant sunrise, symbolizing a fresh and efficient browsing experience. Small screens on the ship's bridge display snippets of code and website layouts. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity."
    },
    {
        "id": 33614304,
        "name": "thefuck",
        "description": "Magnificent app which corrects your previous console command.",
        "url": "https://github.com/nvbn/thefuck",
        "language": "Python",
        "stars": 90571,
        "forks": 3634,
        "created_at": "2015-04-08T15:08:04Z",
        "updated_at": "2025-03-09T09:57:24Z",
        "topics": [
            "python",
            "shell"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2024-01-25T19:52:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/47357f37564199c2471ff1a9828877658482056387eceb19ae6b3a9f6e7c5560/nvbn/thefuck"
        ],
        "homepage": "",
        "readme_summary": "The Fuck is a command-line tool that corrects errors in previously executed commands. It analyzes the failed command and suggests corrections based on predefined rules and user input. This tool aims to improve command-line efficiency by reducing the need to retype commands after making mistakes.",
        "key_features": [
            "Corrects previous console commands",
            "Supports various shells (Bash, Zsh, Fish, Powershell, tcsh)",
            "Customizable rules for command correction",
            "Experimental instant mode for faster corrections"
        ],
        "primary_use_case": "Correcting errors in console commands to improve command-line efficiency.",
        "open_issues": 277,
        "cover_image_prompt": "A friendly mechanic in a brightly lit workshop is tuning up a command-line interface (CLI) represented as a complex engine. The mechanic, wearing a t-shirt with a Python logo, is using a wrench labeled 'The Fuck' to fix errors and optimize the engine's performance. Sparks of corrected code fly as the engine runs smoothly. Digital screens in the background display before-and-after command outputs. The scene is in a clean, 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 756058516,
        "name": "zane-ops",
        "description": "A self-hosted PaaS for your web services, web apps, databases and everything you need for your next startup.",
        "url": "https://github.com/zane-ops/zane-ops",
        "language": "Python",
        "stars": 374,
        "forks": 10,
        "created_at": "2024-02-11T21:12:43Z",
        "updated_at": "2025-03-09T06:27:51Z",
        "topics": [
            "netlify",
            "railway",
            "render",
            "self-hosted",
            "selfhosted",
            "selfhosting",
            "vercel"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T02:58:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a07920ae9655db32bd90e7db56d977e3253375730cc518668ede5fa8902dbacc/zane-ops/zane-ops"
        ],
        "homepage": "https://zaneops.dev",
        "readme_summary": "ZaneOps is a self-hosted PaaS that allows users to host static sites, web apps, databases, and CRON jobs. It leverages Docker Swarm for orchestration, providing a platform for managing various application components.",
        "key_features": [
            "Self-hosted PaaS",
            "Hosting static sites",
            "Hosting web apps",
            "Hosting databases",
            "CRON jobs",
            "Powered by Docker Swarm"
        ],
        "primary_use_case": "Self-hosting web services, web applications, databases, and CRON jobs.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled architect overseeing the construction of a miniature city where each building represents a web service, database, or application. The architect uses a central control panel with Docker Swarm icons to orchestrate the deployment and management of these structures. Some buildings are static sites with simple designs, while others are complex databases with glowing data streams. The city is powered by a network of interconnected pipes and wires, symbolizing the platform's infrastructure. Small screens display real-time metrics and logs. The scene is set in a bright, modern workshop with a clean, organized layout. The image should be in 3D isometric illustration style with vibrant colors and clear details."
    }
]