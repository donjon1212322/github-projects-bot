[
    {
        "id": 517736014,
        "name": "ytDownloader",
        "description": "Desktop App for downloading Videos and Audios from hundreds of sites",
        "url": "https://github.com/aandrew-me/ytDownloader",
        "language": "JavaScript",
        "stars": 2432,
        "forks": 201,
        "created_at": "2022-07-25T16:14:20Z",
        "updated_at": "2025-10-06T10:10:41Z",
        "topics": [
            "appimage",
            "compressor",
            "downloader",
            "electron",
            "electron-app",
            "ffmpeg",
            "flatpak",
            "javascript",
            "linux",
            "linux-app",
            "macos",
            "nodejs",
            "snap",
            "ubuntu",
            "video",
            "windows",
            "youtube",
            "youtube-dl",
            "youtube-downloader",
            "ytdownloader"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-05T07:10:03Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/517736014/bae9f85f-12bc-4452-b2d8-a4a1d62451e7"
        ],
        "homepage": "https://ytdn.netlify.app/",
        "readme_summary": "ytDownloader is a desktop application built with JavaScript that allows users to download videos and audio from various websites, including popular platforms like YouTube, Facebook, and Instagram. It offers a graphical user interface (GUI) for ease of use and supports multiple operating systems, including Linux, Windows, and macOS, with features like video compression, playlist downloading, and subtitle support.",
        "key_features": [
            "Supports hundreds of sites",
            "Multiple themes",
            "Video Compressor with Hardware Acceleration",
            "Advanced options like Range Selection, Subtitles",
            "Download playlists",
            "Available on Linux, Windows & macOS",
            "Fast download speeds",
            "No trackers or ads"
        ],
        "primary_use_case": "Downloading video and audio content from various online platforms for offline access.",
        "open_issues": 25,
        "cover_image_prompt": "A skilled artisan in a workshop carefully catching streams of digital data flowing from various online platforms (represented by stylized icons) into labeled jars. The artisan then uses a compressor tool to refine the contents, creating smaller, perfectly preserved versions. UI elements showing download progress and settings are subtly visible on the workbench. The scene is set in a bright, organized studio with a focus on precision and quality. The image should be in a 3D isometric illustration style with vibrant colors and clear details, emphasizing the ease and efficiency of downloading and compressing online media."
    },
    {
        "id": 960899579,
        "name": "glide",
        "description": "An extensible and keyboard-focused web browser",
        "url": "https://github.com/glide-browser/glide",
        "language": "TypeScript",
        "stars": 799,
        "forks": 19,
        "created_at": "2025-04-05T10:03:29Z",
        "updated_at": "2025-10-06T10:12:02Z",
        "topics": [
            "browser",
            "firefox",
            "firefox-browser"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-05T22:58:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3baeecafd17a46f60ab326a2eba92050584f0adfb493ced86f53f5c6a1596bf3/glide-browser/glide"
        ],
        "homepage": "https://glide-browser.app",
        "readme_summary": "Glide is an extensible and keyboard-focused web browser built on Firefox. It allows users to navigate the web efficiently using only a keyboard, offering features like modal-based keymaps, TypeScript configuration, and web extension API support. It also includes a fuzzy tab manager and site-specific settings/keymaps.",
        "key_features": [
            "Keyboard-based navigation",
            "Modal keymaps",
            "TypeScript configuration",
            "Web extensions API support",
            "Fuzzy tab manager",
            "Site-specific settings and keymaps"
        ],
        "primary_use_case": "Efficient web browsing using keyboard navigation and extensive customization.",
        "open_issues": 7,
        "cover_image_prompt": "A skilled pilot navigates a complex web of interconnected cityscapes using only a keyboard-like control panel. The pilot effortlessly glides between buildings representing different websites, with glowing pathways highlighting the active route. Small UI elements displaying keybindings and site-specific settings float around the cockpit. The scene is set inside a sleek, futuristic aircraft with a large panoramic view. Digital particles representing data flow across the screen. The composition is clean and focused with a blue and orange color scheme. The image should be in 3D isometric illustration style with rich details."
    },
    {
        "id": 136023747,
        "name": "stremio-web",
        "description": "Stremio - Freedom to Stream",
        "url": "https://github.com/Stremio/stremio-web",
        "language": "JavaScript",
        "stars": 2261,
        "forks": 431,
        "created_at": "2018-06-04T12:45:05Z",
        "updated_at": "2025-10-06T10:08:53Z",
        "topics": [
            "hacktoberfest",
            "stremio"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-09-29T08:55:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/586a8f4fdbaf4be96d2c007b9a5d6a64ecb3ecde1a84904e1da885dac49ccda5/Stremio/stremio-web"
        ],
        "homepage": "",
        "readme_summary": "The Stremio repository hosts the web component of the Stremio media center, a platform designed for discovering, watching, and organizing video content through addons. It provides a unified interface for accessing various streaming sources.",
        "key_features": [
            "Media center functionality",
            "Addon support for content discovery",
            "Video content organization",
            "Development build instructions",
            "Production build instructions"
        ],
        "primary_use_case": "Providing a web-based media center platform for streaming and organizing video content from various sources.",
        "open_issues": 77,
        "cover_image_prompt": "A lighthouse beaming a powerful stream of light onto a vast ocean representing the world of video content. Ships of various designs, each representing different streaming services, are drawn towards the light. The lighthouse itself has small screens displaying UI elements of Stremio. Digital particles flow from the lighthouse, illuminating the ships. The scene is set at twilight, creating a sense of discovery and guidance. The composition is wide and panoramic with a blue and orange color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 245013110,
        "name": "myDrive",
        "description": "Node.js and mongoDB Google Drive Clone",
        "url": "https://github.com/subnub/myDrive",
        "language": "TypeScript",
        "stars": 4031,
        "forks": 470,
        "created_at": "2020-03-04T22:01:55Z",
        "updated_at": "2025-10-06T09:30:39Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T01:25:56Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/245013110/2e1e5191-ea32-471d-b997-fdb8bce98dee"
        ],
        "homepage": null,
        "readme_summary": "MyDrive is an open-source cloud file storage server, similar to Google Drive, built with Node.js, TypeScript, and MongoDB. It allows users to host their own file storage solution, supporting features like file and folder uploads/downloads, multiple database support (Amazon S3, Filesystem), file sharing, and AES256 encryption.",
        "key_features": [
            "Upload Files",
            "Download Files",
            "Upload Folders",
            "Download Folders (Automatically converts to zip)",
            "Multiple DB Support (Amazon S3, Filesystem)",
            "Photo, Video Viewer and Media Gallery",
            "Generated Photo And Video Thumbnails",
            "File Sharing",
            "PWA Support",
            "AES256 Encryption",
            "Service Worker",
            "Mobile Support",
            "Docker",
            "Email Verification",
            "JWT (Access and Refresh Tokens)"
        ],
        "primary_use_case": "Self-hosted cloud file storage and sharing.",
        "open_issues": 24,
        "cover_image_prompt": "Imagine a digital tree with glowing branches representing folders and leaves representing files. A friendly squirrel, symbolizing the user, is carefully placing and retrieving acorns (files) from the tree. The tree's roots are connected to various storage containers labeled \"S3\" and \"Filesystem\". A small interface hovers nearby, displaying upload/download progress. The scene is set in a bright, inviting digital forest with soft, diffused lighting. Subtle code snippets and data visualizations float around the tree. The image should be in a 3D isometric illustration style with vibrant colors and smooth textures."
    },
    {
        "id": 970933782,
        "name": "swaptop",
        "description": "swap usage monitor written in rust",
        "url": "https://github.com/luis-ota/swaptop",
        "language": "Rust",
        "stars": 109,
        "forks": 5,
        "created_at": "2025-04-22T18:56:02Z",
        "updated_at": "2025-10-06T04:56:26Z",
        "topics": [
            "btop",
            "ratatui-rs",
            "rust",
            "swap"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-21T22:52:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4bd52d430bba9255f9dd18806ab41116ec7abea1001027f27842564c2b601e20/luis-ota/swaptop"
        ],
        "homepage": "",
        "readme_summary": "Swaptop is a real-time swap usage monitor for Linux and Windows systems with a TUI interface. It lists processes using swap, displays consumption per-process/per-software, and provides live-updating graphs, allowing users to quickly identify and address swap-related performance issues.",
        "key_features": [
            "Real-time animated swap usage graph",
            "Process-level swap consumption tracking",
            "Grouped view by software (aggregate mode)",
            "Multiple color themes",
            "Unit conversion (KB/MB/GB)",
            "Lightweight memory usage"
        ],
        "primary_use_case": "Monitoring swap usage on Linux and Windows systems to identify processes consuming swap and diagnose performance bottlenecks.",
        "open_issues": 0,
        "cover_image_prompt": "A doctor is examining a patient lying on an operating table. Instead of a human body, the table holds a server rack with glowing components. The doctor uses a stethoscope to listen to the server's 'swap' activity, represented by a swirling vortex of digital particles near the server's memory modules. A small screen displays a graph of swap usage. The scene is set in a clean, futuristic hospital room with bright, sterile lighting. Small UI elements show process names and memory consumption. The composition is focused and clear with a blue and white color scheme. The image should be in a 3D isometric illustration style with rich details."
    },
    {
        "id": 92162696,
        "name": "github-stars-by-topic",
        "description": ":star: Generate a list of your GitHub stars by topic - automatically!",
        "url": "https://github.com/lorey/github-stars-by-topic",
        "language": "Python",
        "stars": 91,
        "forks": 5,
        "created_at": "2017-05-23T10:58:20Z",
        "updated_at": "2025-10-06T04:55:12Z",
        "topics": [
            "awesome-list",
            "bookmarks",
            "bookmarks-manager",
            "github",
            "github-stars",
            "markdown"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2020-07-08T21:11:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4f65666633c9c985768462f555f237a7a40b6ee7c8e92f3f491cc3a91800a013/lorey/github-stars-by-topic"
        ],
        "homepage": null,
        "readme_summary": "This Python script automatically sorts a user's GitHub stars by topic using machine learning. It fetches starred repositories, extracts relevant text from their titles, descriptions, and READMEs, and then applies TF-IDF and NMF to identify topics and categorize the stars accordingly, generating a browsable folder structure in Markdown.",
        "key_features": [
            "Fetches GitHub stars using user credentials.",
            "Extracts text from repository titles, descriptions, and README files.",
            "Applies Term Frequency Inverse Document Frequency (TF-IDF) for keyword extraction.",
            "Uses Non-Negative Matrix Factorization (NMF) for topic modeling.",
            "Generates a folder structure with Markdown files for easy browsing of starred repositories by topic."
        ],
        "primary_use_case": "Automatically organizing and browsing GitHub stars by topic.",
        "open_issues": 2,
        "cover_image_prompt": "A librarian meticulously sorting stars collected in jars into labeled shelves representing different topics. The librarian uses a magnifying glass to read the labels on each star, then carefully places them on the appropriate shelf. Shelves are labeled with keywords like 'Python,' 'Web Development,' and 'Machine Learning.' A soft, glowing light emanates from the stars, illuminating the library. Small screens display code snippets and data visualizations related to topic modeling. The repository name is subtly etched on the librarian's desk. The image should be in 3D isometric illustration style with warm colors and rich details."
    },
    {
        "id": 850018473,
        "name": "smartcut",
        "description": "Cut video files with minimal recoding",
        "url": "https://github.com/skeskinen/smartcut",
        "language": "Python",
        "stars": 194,
        "forks": 16,
        "created_at": "2024-08-30T17:55:39Z",
        "updated_at": "2025-10-06T08:37:09Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-21T12:10:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c1d471c3d053b3d31819b4bbc3852c2307352589fdc3897f2cb8ef183dcd88f1/skeskinen/smartcut"
        ],
        "homepage": null,
        "readme_summary": "The `smartcut` repository provides a command-line tool for efficiently cutting video files with minimal re-encoding. It's designed as a companion to Smart Media Cutter, offering fast video editing capabilities for various formats and codecs, focusing on precise cut points while preserving original video quality.",
        "key_features": [
            "Efficient Cutting: Only recodes around cutpoints.",
            "Flexible Input: Supports a wide range of video/audio formats and codecs.",
            "Flexible cutting: Allows for both 'keep' and 'cut' operations.",
            "Audio Export: Includes all audio tracks by default with nearly lossless passthrough."
        ],
        "primary_use_case": "Cutting video files with minimal re-encoding to preserve quality and speed up the editing process.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled artisan carefully sculpting a long film reel with precise snips, using specialized digital scissors that glow with a soft light. The scissors only affect the exact points where they cut, leaving the rest of the reel untouched and pristine. Discarded snippets float away as digital particles. A small screen in the background displays the `smartcut` CLI with timecodes. The scene is set in a bright, modern workshop with a focus on precision and efficiency. The color scheme is clean and professional, with accents of blue and green. The image should be in a 3D isometric illustration style with sharp details."
    }
]