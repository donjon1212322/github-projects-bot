[
    {
        "id": 903167385,
        "name": "blue95",
        "description": "A desktop for your childhood home's computer room",
        "url": "https://github.com/winblues/blue95",
        "language": "Python",
        "stars": 577,
        "forks": 3,
        "created_at": "2024-12-13T22:42:15Z",
        "updated_at": "2025-03-31T10:04:26Z",
        "topics": [
            "atomic",
            "bluebuild",
            "bluebuild-image",
            "chicago95",
            "image-based",
            "immutable",
            "linux",
            "linux-custom-image",
            "ublue-os",
            "windows95",
            "xfce"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T03:29:59Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/903167385/baa29cc3-468a-43a2-9b38-bdd8ee8a9e88"
        ],
        "homepage": "https://blues.win/95",
        "readme_summary": "Blue95 is a Linux distribution based on Fedora Atomic Xfce, themed to resemble Windows 95. It offers an immutable, image-based system with automatic updates and pre-installed codecs, providing a nostalgic yet modern computing experience. Installation is primarily intended through rebasing from another Fedora Atomic desktop.",
        "key_features": [
            "Fedora Atomic Xfce base",
            "Chicago95 theme",
            "Image-based installation",
            "Immutable system",
            "Automatic updates",
            "Pre-installed codecs"
        ],
        "primary_use_case": "Provides a modern, lightweight desktop experience reminiscent of Windows 95.",
        "open_issues": 13,
        "cover_image_prompt": "A cozy computer room from the 90s, bathed in the soft glow of a CRT monitor displaying a modern desktop environment styled like Windows 95. A child sits in front of the computer, happily exploring the familiar interface. The room is filled with nostalgic details like floppy disks, old game boxes, and a dial-up modem. Subtle digital particles emanate from the monitor, blending the retro aesthetic with modern technology. Small UI elements and code snippets are subtly incorporated into the scene. The image should be in a digital painting style with warm colors and a slightly blurred, dreamlike quality."
    },
    {
        "id": 936511251,
        "name": "FileRise",
        "description": "üóÇÔ∏è Lightweight, self-hosted web-based file manager with multi-file upload, editing, and batch operations ‚Äì built with PHP & JavaScript for seamless file and folder management (Docker & Unraid ready).",
        "url": "https://github.com/error311/FileRise",
        "language": "JavaScript",
        "stars": 172,
        "forks": 4,
        "created_at": "2025-02-21T08:02:37Z",
        "updated_at": "2025-03-31T09:44:23Z",
        "topics": [
            "docker",
            "file-folder-management",
            "file-manager",
            "file-upload",
            "folder-management",
            "javascript",
            "multi-file-uploader",
            "php",
            "self-hosted-file-manager",
            "unraid",
            "uploader",
            "web-application",
            "web-based",
            "web-based-file-editor"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T09:44:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d3d9ad3abd01e9bcd070c98a53aaac705f600591ae50075e3efc3b004d87cab0/error311/FileRise"
        ],
        "homepage": "",
        "readme_summary": "FileRise is a lightweight, self-hosted web application designed for efficient file management. It offers features like multi-file uploads with progress tracking, built-in file editing with syntax highlighting, file previews, gallery view, and batch operations. It serves as an alternative to other file management solutions, providing an easy-to-set-up experience for document management, image galleries, and other file-intensive applications.",
        "key_features": [
            "Multiple File/Folder Uploads with Progress (Resumable.js Integration)",
            "Built-in File Editing & Renaming (CodeMirror)",
            "Built-in File Preview (Images, Videos, Audio, PDFs)",
            "Gallery (Grid) View",
            "Batch Operations (Delete/Copy/Move/Download/Extract Zip)",
            "Drag & Drop (File Movement)"
        ],
        "primary_use_case": "Web-based file management",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled librarian meticulously organizing a vast collection of digital documents within a luminous, futuristic library. The librarian effortlessly drags and drops files between glowing folders, each action accompanied by subtle digital particles. A large screen displays a simplified file directory with the title \"FileRise.\" Some files are highlighted with syntax, indicating easy editing. The library is bathed in soft, ambient light, creating a sense of order and efficiency. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details, emphasizing clarity and ease of use."
    },
    {
        "id": 91629816,
        "name": "freqtrade",
        "description": "Free, open source crypto trading bot",
        "url": "https://github.com/freqtrade/freqtrade",
        "language": "Python",
        "stars": 37637,
        "forks": 7424,
        "created_at": "2017-05-17T23:48:53Z",
        "updated_at": "2025-03-31T10:04:25Z",
        "topics": [
            "algorithmic-trading",
            "bitcoin",
            "cryptocurrencies",
            "cryptocurrency",
            "freqtrade",
            "python",
            "telegram-bot",
            "trade",
            "trading-bot"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T07:40:31Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/91629816/d6659780-a0e1-11eb-8a38-933cd666cdeb"
        ],
        "homepage": "https://www.freqtrade.io",
        "readme_summary": "Freqtrade is a free and open-source crypto trading bot written in Python. It allows users to automate their trading strategies across multiple exchanges, offering features like backtesting, strategy optimization via machine learning, and control through Telegram or a web UI. The bot supports dry-run mode for testing strategies without risking real funds.",
        "key_features": [
            "Supports multiple exchanges",
            "Telegram and webUI control",
            "Backtesting",
            "Plotting tools",
            "Money management tools",
            "Strategy optimization via machine learning",
            "Dry-run mode",
            "Persistence via SQLite"
        ],
        "primary_use_case": "Automated cryptocurrency trading",
        "open_issues": 31,
        "cover_image_prompt": "A skilled alchemist in a high-tech laboratory, meticulously managing bubbling beakers representing different cryptocurrencies. The alchemist uses a sophisticated control panel with glowing charts and data streams to adjust the mixture, aiming for the perfect formula for profit. One beaker overflows with golden coins, symbolizing successful trades. The lab is filled with subtle tech elements like floating code snippets and holographic displays showing market trends. The scene is brightly lit with a futuristic, clean aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 259053705,
        "name": "symbiote",
        "description": "Your target's phone's front and back camerasüì∏ can be accessed by sending a linküîó.",
        "url": "https://github.com/hasanfirnas/symbiote",
        "language": "Python",
        "stars": 894,
        "forks": 106,
        "created_at": "2020-04-26T14:40:42Z",
        "updated_at": "2025-03-31T08:32:26Z",
        "topics": [
            "androidcamera",
            "camera-hacking",
            "hacking-tools",
            "kali-linux",
            "localxpose",
            "ngrok",
            "phishing",
            "termux",
            "webcam-capture",
            "webcamhack"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T09:26:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e2bec454868b07ff893daccae66d45de1ce1da8c24eaf7ff5a53ea13aff705b5/hasanfirnas/symbiote"
        ],
        "homepage": "",
        "readme_summary": "The Symbiote repository is a social engineering tool designed for educational purposes. It creates a phishing page to request camera permissions and capture webcam images from a target's device. The tool offers various tunnelling options for remote access and is intended for use in a controlled environment to demonstrate security vulnerabilities.",
        "key_features": [
            "Phishing page creation",
            "Webcam image capture",
            "Tunnelling options (Ngrok, Localhost.run, LocalXpose)"
        ],
        "primary_use_case": "Social engineering for educational purposes (capturing webcam images via phishing)",
        "open_issues": 2,
        "cover_image_prompt": "A shadowy figure, representing a hacker, extending a digital hand (link) towards a smartphone displaying its front and back cameras. The phone is held by a silhouette of a person, unaware of the connection being made. The background is a blurred cityscape with subtle digital glitches and glowing data streams representing the flow of information. Small UI elements showing camera feeds are subtly overlaid. The scene is set in a dark, mysterious atmosphere with a blue and purple color scheme. The image should be in a digital painting style with clean lines and clear details."
    },
    {
        "id": 937782240,
        "name": "gochromecast",
        "description": "A simple tool to stream your media to android TV or chromecast device",
        "url": "https://github.com/vjerci/gochromecast",
        "language": "Go",
        "stars": 216,
        "forks": 6,
        "created_at": "2025-02-23T21:51:32Z",
        "updated_at": "2025-03-31T05:36:19Z",
        "topics": [
            "chromecast",
            "go",
            "media"
        ],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T21:55:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f6b046850bc8414022f6977451e444bc45ed8a7f5155a773b0dd7aab4e4de5b1/vjerci/gochromecast"
        ],
        "homepage": "https://vjerci.com/writings/chromecast/basics/",
        "readme_summary": "GoChromecast is a tool written in Go that allows users to stream videos to their Android TV or Google Chromecast devices. It discovers devices on the network and casts the specified video, including subtitles, to the selected device. The tool is designed for simple media streaming and does not currently support ffmpeg.",
        "key_features": [
            "Streams media to Android TV or Chromecast devices",
            "Discovers devices on the network",
            "Casts video with subtitles"
        ],
        "primary_use_case": "Streaming videos to Android TV or Google Chromecast devices.",
        "open_issues": 0,
        "cover_image_prompt": "A film director standing in a home theater, holding a smartphone that acts as a remote control, beaming a movie directly onto a large screen. The screen displays a vibrant scene from the 'spring_original' film. The director is surrounded by comfortable furniture and subtle tech elements, such as a Chromecast dongle plugged into the TV and a small UI element on the smartphone showing streaming controls. The scene is warmly lit, creating a cozy and inviting atmosphere. The image should be in a 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the 'GoChromecast' logo on the smartphone."
    },
    {
        "id": 908197385,
        "name": "nativewebp",
        "description": "Native webp encoder for Go",
        "url": "https://github.com/HugoSmits86/nativewebp",
        "language": "Go",
        "stars": 200,
        "forks": 7,
        "created_at": "2024-12-25T12:18:02Z",
        "updated_at": "2025-03-31T08:37:50Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-12T16:23:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2e3ab90a9d4c02bfbabd288fa221a0f6896c546419ac1e995faaa2ea157eb306/HugoSmits86/nativewebp"
        ],
        "homepage": null,
        "readme_summary": "The nativewebp repository provides a native Go WebP encoder, eliminating the need for libwebp. It focuses on performance and efficiency, producing smaller files and encoding faster than the standard Go PNG encoder. Currently, it supports WebP lossless images (VP8L) and offers decoding support via a wrapper around the golang.org/x/image/webp package.",
        "key_features": [
            "Native WebP encoding in Go",
            "No dependencies on libwebp",
            "WebP lossless (VP8L) support",
            "Decoding support via golang.org/x/image/webp wrapper",
            "Faster and smaller files compared to standard PNG encoder"
        ],
        "primary_use_case": "Encoding images to WebP format in Go applications without external dependencies.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously crafting a WebP image from a raw digital canvas, using only the finest, hand-forged Go tools. The artisan's workshop is bathed in the warm glow of efficiency, with discarded, bulky PNG tools scattered in a corner. A small UI element displays the nativewebp logo. The scene is set in a bright, modern studio with clean lines and a focus on precision. The composition is centered on the artisan's hands, highlighting the delicate process of WebP creation. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 19463625,
        "name": "nginx-proxy",
        "description": "Automated nginx proxy for Docker containers using docker-gen",
        "url": "https://github.com/nginx-proxy/nginx-proxy",
        "language": "Python",
        "stars": 19196,
        "forks": 3047,
        "created_at": "2014-05-05T17:01:40Z",
        "updated_at": "2025-03-31T10:04:51Z",
        "topics": [
            "docker",
            "docker-gen",
            "nginx",
            "reverse-proxy"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-23T17:09:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/57fa65ea5927060c8490eaebea3f7b223cbc03a25e82493def7889b9cb29772f/nginx-proxy/nginx-proxy"
        ],
        "homepage": null,
        "readme_summary": "The nginx-proxy repository provides an automated Nginx reverse proxy solution for Docker containers. It leverages docker-gen to dynamically generate Nginx configurations based on container start and stop events, routing traffic based on the VIRTUAL_HOST environment variable. The repository offers both Debian and Alpine-based images for flexibility.",
        "key_features": [
            "Automated reverse proxy configuration for Docker containers",
            "Dynamic configuration updates based on container start/stop events",
            "Uses docker-gen to generate nginx configurations",
            "Supports Debian and Alpine based images"
        ],
        "primary_use_case": "Automatically configure Nginx as a reverse proxy for Docker containers, simplifying the process of routing traffic to different containers based on their VIRTUAL_HOST environment variables.",
        "open_issues": 301,
        "cover_image_prompt": "A skilled traffic controller orchestrating a bustling highway of data flowing between various futuristic city buildings. Each building represents a Docker container, identifiable by unique icons on their facades. The traffic controller, positioned in a central tower labeled 'nginx-proxy', directs data streams (glowing lines) efficiently between containers based on their 'VIRTUAL_HOST' signs. The sky above is filled with subtle digital particles, and small UI elements display routing configurations. The scene is set at dusk with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and clear iconography."
    },
    {
        "id": 584240610,
        "name": "neo-server",
        "description": "machbase-neo = time series database + mqtt + http + data visualization",
        "url": "https://github.com/machbase/neo-server",
        "language": "Go",
        "stars": 159,
        "forks": 10,
        "created_at": "2023-01-02T00:40:00Z",
        "updated_at": "2025-03-31T09:48:11Z",
        "topics": [
            "database",
            "iot",
            "mqtt",
            "time-series",
            "time-series-database",
            "timeseries",
            "tsdb"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-03-24T04:18:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f47dcba980c9f9742b69c85dee4783c9190ce90bca9177f4818306c4f013df65/machbase/neo-server"
        ],
        "homepage": "https://docs.machbase.com/neo/",
        "readme_summary": "The machbase-neo repository provides an IoT database server that combines a time-series database with MQTT and HTTP APIs for data ingestion and a web UI for visualization. It's designed for building IoT platforms, enabling data collection from sensors, storage, and real-time analysis.",
        "key_features": [
            "Time-series database",
            "MQTT API",
            "HTTP API",
            "gRPC API",
            "SSH CLI",
            "Web UI",
            "UI API for custom UI"
        ],
        "primary_use_case": "IoT data management and analysis",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a central control tower, resembling a sleek, modern server room, acting as the brain of a vast smart city. Data streams flow into the tower like rivers, originating from diverse sources: tiny MQTT drones representing IoT sensors, HTTP delivery trucks symbolizing web applications, and GRPC pipelines as high-speed data conduits. Inside the tower, a powerful engine, visualized as a glowing Machbase core, processes and organizes the incoming data, transforming it into actionable insights displayed on interactive dashboards and charts. The city benefits from real-time monitoring and optimized operations thanks to this central data hub. The scene is bathed in a futuristic glow, with subtle code snippets and data visualizations subtly integrated into the control panels. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 933661622,
        "name": "monarch",
        "description": null,
        "url": "https://github.com/go-monarch/monarch",
        "language": "Go",
        "stars": 18,
        "forks": 0,
        "created_at": "2025-02-16T12:06:55Z",
        "updated_at": "2025-03-30T18:36:27Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-04T01:07:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ca729f71f1e096abe7a5a0a40cebc25028c8edb7cd70eb571480c249e2f3d12/go-monarch/monarch"
        ],
        "homepage": null,
        "readme_summary": "Monarch is a Go ORM designed to simplify MongoDB interactions. It offers a collection API for performing common database operations such as querying, updating, deleting, and saving data. Monarch aims to provide an easier and less repetitive way to interact with MongoDB compared to using the standard Go driver directly.",
        "key_features": [
            "ORM for MongoDB in Go",
            "Seamless data queries",
            "Collection API",
            "Find Many, Find One, Update One, Update Many, Delete One, Delete Many operations",
            "Save operation"
        ],
        "primary_use_case": "Simplifying MongoDB interactions in Go by providing an ORM-like interface for common database operations.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled sculptor meticulously crafting a MongoDB database from raw stone, using specialized tools that resemble Go code editors. The sculptor carefully chisels away at the stone, revealing perfectly formed collections and documents within. A holographic projection displays query commands and data structures, guiding the sculptor's work. The scene is set in a bright, modern workshop with subtle digital elements like glowing runes etched into the stone and floating data particles. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]