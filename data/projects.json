[
    {
        "id": 600475150,
        "name": "Cosmos-Server",
        "description": "☁️ The Most Secure and Easy Selfhosted Home Server. Take control of your data and privacy without sacrificing security and stability  (Authentication, anti-DDOS, anti-bot)",
        "url": "https://github.com/azukaar/Cosmos-Server",
        "language": "JavaScript",
        "stars": 4291,
        "forks": 153,
        "created_at": "2023-02-11T16:00:46Z",
        "updated_at": "2025-03-03T19:30:17Z",
        "topics": [
            "authentication",
            "cloud",
            "cosmos",
            "reverse-proxy",
            "security",
            "self-hosted",
            "self-hosting",
            "selfhosted",
            "selfhosting",
            "server",
            "sso"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-02-21T20:41:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ed0b2bae0ac48212c9d5b9f9c13f7601a4642401b9f5fea48cbc1093f92405c5/azukaar/Cosmos-Server"
        ],
        "homepage": "https://cosmos-cloud.io",
        "readme_summary": "Cosmos is a secure gateway and server manager designed to protect self-hosted applications.  It features an app store, storage management, network storage capabilities, a reverse proxy, and a robust authentication server.  This allows users to easily install, manage, and secure their applications from a centralized, customizable dashboard.",
        "key_features": [
            "App Store for easy application installation and management with automatic updates and security checks",
            "Storage Manager for managing disks, including Parity Disks and MergerFS",
            "Network Storages based on RClone for managing remote storages and sharing NFS/FTP",
            "Reverse-Proxy with automatic HTTPS and UI for containers, servers, and static folders/SPA",
            "Authentication Server with multi-factor authentication and multiple strategies (OpenID, forward headers, HTML)",
            "Customizable Homepage to access all applications from a single place"
        ],
        "primary_use_case": "Secure self-hosting of applications and personal servers",
        "open_issues": 101
    },
    {
        "id": 400920341,
        "name": "Shell",
        "description": "Powerful context menu manager for Windows File Explorer",
        "url": "https://github.com/moudey/Shell",
        "language": "C++",
        "stars": 4525,
        "forks": 155,
        "created_at": "2021-08-29T00:51:19Z",
        "updated_at": "2025-03-04T00:41:53Z",
        "topics": [
            "context-menu",
            "file-explorer",
            "nilesoft-shell",
            "right-click",
            "shell-extension"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-02-06T15:55:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d0179e6043262f2c88d97bc59b5a5a0fdcfa7e6f72e369a522684db9ed0d4c71/moudey/Shell"
        ],
        "homepage": "https://nilesoft.org",
        "readme_summary": "Shell is a Windows context menu extender that allows users to add, modify, or remove context menu items.  It supports custom commands, various icon types, and a simple configuration file.  This enables users to create a highly personalized and efficient file management experience.",
        "key_features": [
            "Lightweight and portable",
            "Customizable appearance",
            "Add custom context menu items (sub-menus, menu items, separators)",
            "Modify or remove existing context menu items",
            "Supports files, folders, desktop, taskbar",
            "Supports expression syntax with built-in functions and variables",
            "Supports colors, glyphs, SVG, icons (.ico, .png, .bmp)",
            "Supports search and filter",
            "Supports complex nested menus",
            "Supports multiple columns",
            "Easy configuration via plain text file",
            "Minimal resource usage"
        ],
        "primary_use_case": "Extend and customize the Windows File Explorer context menu",
        "open_issues": 161
    },
    {
        "id": 718379614,
        "name": "gpt-crawler",
        "description": "Crawl a site to generate knowledge files to create your own custom GPT from a URL",
        "url": "https://github.com/BuilderIO/gpt-crawler",
        "language": "TypeScript",
        "stars": 20958,
        "forks": 2230,
        "created_at": "2023-11-14T00:31:11Z",
        "updated_at": "2025-03-03T23:36:35Z",
        "topics": [
            "ai"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-23T00:18:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/384301a5d2d37be56f1d72fcdf20eb93d271d286e7f0842593cfe4536bbe88c1/BuilderIO/gpt-crawler"
        ],
        "homepage": "https://www.builder.io/blog/custom-gpt",
        "readme_summary": "This repository provides a crawler to extract data from websites, which can then be used to create custom GPTs or assistants on OpenAI.  It allows for configuration of the crawl parameters such as URL, selectors, and maximum pages. The extracted data is outputted as a JSON file.",
        "key_features": [
            "Crawl websites to generate knowledge files",
            "Supports configuration via a config.ts file",
            "Allows specifying selectors for content extraction",
            "Provides options for limiting the number of crawled pages",
            "Outputs data to a JSON file",
            "Can be run locally, via Docker, or as an API",
            "Supports uploading data to OpenAI to create custom GPTs or assistants"
        ],
        "primary_use_case": "Creating custom GPTs and assistants from website content",
        "open_issues": 90
    },
    {
        "id": 125883928,
        "name": "youtube_channel_archiver",
        "description": "Starting point for archiving entire YouTube channels using yt-dlp (originally youtube-dl)",
        "url": "https://github.com/dmn001/youtube_channel_archiver",
        "language": "Shell",
        "stars": 477,
        "forks": 71,
        "created_at": "2018-03-19T15:58:06Z",
        "updated_at": "2025-03-03T21:22:03Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2022-09-04T22:59:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6ddc407f8367fc75589bff71b76bf87044a3333afb21588037e4c78afd28b701/dmn001/youtube_channel_archiver"
        ],
        "homepage": "",
        "readme_summary": "This repository provides configuration files and scripts to download and update YouTube channels using yt-dlp.  It tracks downloaded videos to prevent duplicates and supports both Linux and Windows.  The primary use case is creating a local archive of YouTube channels.",
        "key_features": [
            "Download entire YouTube channels",
            "Update channel downloads without re-downloading existing videos",
            "Uses yt-dlp for video downloading",
            "Supports Linux and Windows",
            "Maintains a list of downloaded video IDs to avoid duplicates"
        ],
        "primary_use_case": "Archiving YouTube channels by downloading all videos",
        "open_issues": 5
    },
    {
        "id": 889646003,
        "name": "diagram-as-code",
        "description": "A tutorial on how to create a documentation project using the 'Doc as diagram' methodology",
        "url": "https://github.com/r0mymendez/diagram-as-code",
        "language": "Jupyter Notebook",
        "stars": 278,
        "forks": 12,
        "created_at": "2024-11-16T21:15:07Z",
        "updated_at": "2025-03-03T20:43:23Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2024-11-19T00:19:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5b4e8ddad3e1352b9e0af5a7bf3c12d3e437ca3633990bc26f7b197166aaf212/r0mymendez/diagram-as-code"
        ],
        "homepage": null,
        "readme_summary": "The Diagrams Python library implements a Diagram as Code approach, allowing users to generate various diagrams (including cloud infrastructure diagrams) from code.  This enables automated documentation, change control, and easy integration into software development workflows.  The library supports major cloud providers like AWS, Azure, and GCP.",
        "key_features": [
            "Diagram as Code approach",
            "Python library",
            "creation of architectural infrastructure diagrams",
            "support for AWS, Azure, and GCP components",
            "generation of graphical images from code",
            "automated documentation",
            "change control",
            "customizable visuals for cloud infrastructures, workflows, or data pipelines"
        ],
        "primary_use_case": "Creating and managing diagrams for software projects, particularly architectural and flow diagrams, programmatically.",
        "open_issues": 0
    },
    {
        "id": 242139417,
        "name": "slowapi",
        "description": "A rate limiter for Starlette and FastAPI",
        "url": "https://github.com/laurentS/slowapi",
        "language": "Python",
        "stars": 1369,
        "forks": 87,
        "created_at": "2020-02-21T12:56:20Z",
        "updated_at": "2025-03-03T19:07:20Z",
        "topics": [
            "asgi",
            "fastapi",
            "python",
            "rate-limiter",
            "starlette",
            "uvicorn"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2024-06-27T18:02:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b81ce7beebe309dbcfef06e3e19de2b53d327dcab8ebaebf8c4c5b9e15184f1f/laurentS/slowapi"
        ],
        "homepage": "https://pypi.org/project/slowapi/",
        "readme_summary": "SlowAPI is a rate-limiting library built for Starlette and FastAPI frameworks.  It supports various backends for tracking limits and allows applying limits to individual endpoints or groups of endpoints.  The library is designed to handle high request volumes and offers both synchronous and asynchronous support.",
        "key_features": [
            "Rate limiting for Starlette and FastAPI",
            "Support for sync and async HTTP endpoints",
            "Redis, memcached, and memory backends",
            "Single and multiple limit decorators",
            "Shared limits across routes"
        ],
        "primary_use_case": "Rate limiting for Starlette and FastAPI applications",
        "open_issues": 39
    },
    {
        "id": 610292163,
        "name": "mail-server",
        "description": "Secure & Modern All-in-One Mail Server (IMAP, JMAP, POP3, SMTP)",
        "url": "https://github.com/stalwartlabs/mail-server",
        "language": "Rust",
        "stars": 6493,
        "forks": 294,
        "created_at": "2023-03-06T13:37:23Z",
        "updated_at": "2025-03-03T23:29:30Z",
        "topics": [
            "imap",
            "jmap",
            "mail",
            "pop3",
            "rust",
            "server",
            "smtp"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T16:04:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7f6f5e4969f06b8d1808181b6ab81f62df95cd9e0dc73f8c866c42fd3b612b88/stalwartlabs/mail-server"
        ],
        "homepage": "https://stalw.art",
        "readme_summary": "This repository provides an open-source mail server solution supporting JMAP, IMAP4, POP3, and SMTP protocols.  It features robust security measures, spam filtering, and advanced functionalities like distributed queues and message modification, making it suitable for various email handling needs.",
        "key_features": [
            "JMAP server with Sieve scripts, WebSocket, Blob Management, and Quotas extensions",
            "IMAP4rev2 and IMAP4rev1 server with numerous extensions",
            "POP3 server with extensions, STLS, and SASL support",
            "ManageSieve server for managing Sieve scripts",
            "SMTP server with built-in DMARC, DKIM, SPF, and ARC support",
            "Strong transport security through DANE, MTA-STS, and SMTP TLS reporting",
            "Inbound throttling and filtering with granular configuration rules, sieve scripting, MTA hooks, and milter integration",
            "Distributed virtual queues with delayed delivery, priority delivery, quotas, routing rules, and throttling support",
            "Envelope rewriting and message modification",
            "Built-in Spam and Phishing filter with rules, LLM-driven filtering, statistical spam classifier, and DNS Blocklists checking"
        ],
        "primary_use_case": "Secure and modern all-in-one mail server",
        "open_issues": 146
    },
    {
        "id": 873824041,
        "name": "rustowl",
        "description": "Visualize Ownership and Lifetimes in Rust",
        "url": "https://github.com/cordx56/rustowl",
        "language": "Rust",
        "stars": 4012,
        "forks": 78,
        "created_at": "2024-10-16T19:28:48Z",
        "updated_at": "2025-03-04T01:02:48Z",
        "topics": [
            "lifetime",
            "ownership",
            "rust",
            "visualization"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-03T02:06:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/99e8a78231baa669287d8675963cde9800884cc67fd87a40cfec0e261c8a47b0/cordx56/rustowl"
        ],
        "homepage": "",
        "readme_summary": "RustOwl is a tool that visualizes ownership and lifetimes in Rust code to aid debugging and optimization.  It uses color-coded underlines to represent different states of variables and integrates with various editors via VSCode extension, Neovim plugin, Emacs package, or a custom LSP client.  The tool analyzes Rust source code and provides visualizations upon hovering over variables or function calls.",
        "key_features": [
            "Visualizes Rust ownership and lifetimes",
            "Provides underlines to represent variable lifetimes (green: actual, blue: immutable borrow, purple: mutable borrow, orange: moved/function call, red: lifetime error)",
            "Offers VSCode extension, Neovim plugin, and Emacs package",
            "Uses an LSP server (cargo owlsp) for integration with other editors"
        ],
        "primary_use_case": "Debugging and optimization of Rust code by visualizing ownership and lifetimes",
        "open_issues": 18
    }
]