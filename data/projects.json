[
    {
        "id": 867192625,
        "name": "microsandbox",
        "description": "Self-Hosted Plaform for Secure Execution of Untrusted User/AI Code",
        "url": "https://github.com/microsandbox/microsandbox",
        "language": "Rust",
        "stars": 113,
        "forks": 12,
        "created_at": "2024-10-03T15:57:38Z",
        "updated_at": "2025-05-25T10:07:21Z",
        "topics": [
            "agents",
            "ai",
            "ai-generated",
            "container",
            "docker",
            "fly",
            "linux",
            "macos",
            "mcp",
            "orchestration",
            "python",
            "sandbox",
            "sandboxing",
            "security",
            "self-hosted",
            "virtualization",
            "vm"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-24T21:35:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d18a97a8d4e3786412861a3687b42224704ae029242dee95a0fc5d1f552cb037/microsandbox/microsandbox"
        ],
        "homepage": "https://docs.microsandbox.dev",
        "readme_summary": "microsandbox is a self-hosted platform for securely executing untrusted code, such as AI-generated code or user submissions. It combines the security of traditional VMs with the speed of containers, offering bulletproof security, instant startup times, and complete control over your infrastructure. It is OCI compatible and includes a built-in MCP server for seamless AI integration.",
        "key_features": [
            "Bulletproof Security with true VM isolation",
            "Instant Startup with boot times under 200ms",
            "Self-hosted infrastructure with complete control",
            "OCI Compatible with standard container images",
            "AI-Ready with built-in MCP server"
        ],
        "primary_use_case": "Secure execution of untrusted user/AI code.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a blacksmith's forge where a master smith is carefully crafting a secure vault. Instead of metal, the smith works with glowing lines of code, shaping them into impenetrable walls. A user hands the smith a complex program represented as a swirling cloud of data. The smith places the program inside the vault, where it runs safely and securely. Digital sparks fly as the program executes, contained within the vault's robust defenses. The scene is set in a high-tech workshop with holographic displays showing security metrics and performance data. The image should be in a 3D isometric illustration style with vibrant colors and intricate details, subtly incorporating the 'microsandbox' logo on the vault's door."
    },
    {
        "id": 972735507,
        "name": "tablecruncher",
        "description": "A lightweight, powerful CSV editor for macOS, Windows and Linux â€” with built-in JavaScript macros.",
        "url": "https://github.com/Tablecruncher/tablecruncher",
        "language": "C++",
        "stars": 115,
        "forks": 3,
        "created_at": "2025-04-25T15:14:35Z",
        "updated_at": "2025-05-25T10:00:19Z",
        "topics": [
            "c-plus-plus",
            "cpp",
            "cross-platform",
            "csv",
            "csv-editor",
            "csv-reader",
            "csv-viewer",
            "fltk",
            "gpl",
            "gplv3",
            "linux",
            "macos",
            "opensource",
            "windows"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-21T14:26:20Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/972735507/cd4b9698-4eda-4a4c-b513-fddf76991d94"
        ],
        "homepage": "https://tablecruncher.com",
        "readme_summary": "Tablecruncher is a cross-platform CSV editor designed to handle massive files with ease. It features a built-in JavaScript macro language, supports multiple encodings, and offers a user-friendly interface with color themes. It is suitable for users who need to quickly open, view, and edit large CSV files on macOS, Windows, or Linux.",
        "key_features": [
            "Opens huge CSV files effortlessly",
            "Built-in JavaScript macro language",
            "Supports multiple encodings: UTF-8, UTF-16LE, UTF-16BE, Latin-1 (ISO-8859-1), and Windows 1252",
            "Four color themes"
        ],
        "primary_use_case": "Editing and viewing large CSV files",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, unexplored territory represented by a massive CSV file. The cartographer, equipped with advanced tools resembling software interfaces, effortlessly navigates through the data, identifying key landmarks and hidden patterns. A large magnifying glass reveals intricate details within the CSV landscape, while glowing digital lines connect related data points. The scene is set in a brightly lit, futuristic map room with holographic projections displaying data visualizations. Small code snippets and the Tablecruncher logo are subtly integrated into the cartographer's tools. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity."
    },
    {
        "id": 161323362,
        "name": "retrogram-plutosdr",
        "description": "Wideband Spectrum analyzer on your terminal/ssh console with ASCII art.",
        "url": "https://github.com/r4d10n/retrogram-plutosdr",
        "language": "C++",
        "stars": 95,
        "forks": 17,
        "created_at": "2018-12-11T11:23:55Z",
        "updated_at": "2025-05-25T09:41:24Z",
        "topics": [],
        "quality_score": 0.35,
        "contributors_count": 0,
        "last_commit_date": "2021-09-14T22:05:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/883536cbbed83564e41303d2fbaa0ea2a79f514730175fed288ddf3f4eb67bfd/r4d10n/retrogram-plutosdr"
        ],
        "homepage": null,
        "readme_summary": "The retrogram-plutosdr repository provides a wideband spectrum analyzer that visualizes radio frequency data as ASCII art in a terminal. It's designed for use with the ADALM PlutoSDR and allows users to monitor and analyze radio signals directly from their console, offering adjustable parameters like frequency, bandwidth, and gain through keyboard controls.",
        "key_features": [
            "Wideband spectrum analysis",
            "ASCII art visualization in terminal",
            "Keyboard controls for pan and zoom",
            "Adjustable center frequency, sampling rate, bandwidth, and gain",
            "Peak hold functionality",
            "Adjustable dynamic range and reference level"
        ],
        "primary_use_case": "Real-time spectrum analysis using a PlutoSDR and displaying the results in an ASCII art format on a terminal.",
        "open_issues": 5,
        "cover_image_prompt": "A radio enthusiast sitting at a vintage terminal, watching sound waves visualized as vibrant ASCII art rise from a PlutoSDR device connected to the terminal. The terminal screen displays a spectrum analyzer with colorful ASCII characters forming the waveform. The PlutoSDR is subtly glowing with digital particles, and small UI elements on the screen show frequency and bandwidth settings. The scene is set in a dimly lit room with a focused spotlight on the terminal. The image should be in a digital painting style with clear outlines and a retro aesthetic."
    },
    {
        "id": 904467755,
        "name": "purrcrypt",
        "description": "A fur-ociously secure encryption tool that encodes your secrets as adorable cat and dog sounds, using real elliptic curve cryptography with a playful disguise.",
        "url": "https://github.com/vxfemboy/purrcrypt",
        "language": "Rust",
        "stars": 456,
        "forks": 14,
        "created_at": "2024-12-17T00:22:51Z",
        "updated_at": "2025-05-25T09:15:19Z",
        "topics": [
            "cats",
            "command-line-tool",
            "cryptography",
            "dogs",
            "elliptic-curves",
            "encryption",
            "fun",
            "pets",
            "privacy",
            "secuirty",
            "steganography",
            "terminal-app"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T19:08:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7c14e2f2566f7498bad1a785d90f3b7e7fa1d0ce17f65e842f8a948084312d01/vxfemboy/purrcrypt"
        ],
        "homepage": "",
        "readme_summary": "PurrCrypt is a command-line tool that encrypts data using elliptic curve cryptography and encodes the encrypted data as cat and dog sounds. It provides a fun and unique way to protect sensitive information, while still utilizing robust cryptographic algorithms. The tool allows users to generate keys, encrypt files, and decrypt files, all with a playful and adorable interface.",
        "key_features": [
            "Encrypts data using elliptic curve cryptography",
            "Encodes encrypted data as cat and dog sounds",
            "Provides a command-line interface for key generation, encryption, and decryption",
            "Supports setting a cat or dog 'dialect' for the output sounds"
        ],
        "primary_use_case": "Encrypting files and messages with a playful disguise using real cryptography.",
        "open_issues": 2,
        "cover_image_prompt": "A friendly cryptographer, dressed in a lab coat with cat and dog paw prints, stands in a whimsical workshop filled with bubbling beakers labeled 'Encryption' and 'Decryption'. The cryptographer is feeding a complex mathematical equation into a machine that transforms it into adorable cat and dog sounds, visualized as speech bubbles with 'Meow!' and 'Woof!'. A small screen on the machine displays elliptic curve cryptography details. The workshop is brightly lit with a playful atmosphere. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 939559421,
        "name": "chirp",
        "description": "Send data with sound",
        "url": "https://github.com/solst-ice/chirp",
        "language": "TypeScript",
        "stars": 534,
        "forks": 49,
        "created_at": "2025-02-26T18:27:03Z",
        "updated_at": "2025-05-25T08:37:33Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T18:18:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ada4bbca895a392aae7b74ff6a7c70e8600b08ee62a0ebeccb8b663217d9d391/solst-ice/chirp"
        ],
        "homepage": "http://chirp.hex.dance/",
        "readme_summary": "Chirp enables data transfer using sound. It converts text into audio frequencies for transmission and decodes received audio back into text, using start and end signatures to define transmissions. The application also provides real-time frequency visualization of audio input.",
        "key_features": [
            "Real-time frequency visualization of audio input",
            "Send messages by converting text to sound",
            "Receive messages by listening to sound and decoding it back to text",
            "Distinctive start and end signatures to mark transmissions"
        ],
        "primary_use_case": "Transmit and receive data through sound.",
        "open_issues": 1,
        "cover_image_prompt": "A musician playing a saxophone, with sound waves visibly emanating from the instrument and morphing into text characters mid-air. The characters then travel across a digital landscape towards a microphone, where they are reassembled into a readable message on a screen. Subtle UI elements, like frequency visualizations, float around the musician. The repository name, \"Chirp,\" is subtly etched onto the saxophone. The scene is set in a vibrant recording studio with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and a playful color scheme."
    },
    {
        "id": 937556844,
        "name": "gibberlink",
        "description": "Two conversational AI agents switching from English to sound-level protocol after confirming they are both AI agents",
        "url": "https://github.com/PennyroyalTea/gibberlink",
        "language": "TypeScript",
        "stars": 4322,
        "forks": 350,
        "created_at": "2025-02-23T11:03:29Z",
        "updated_at": "2025-05-25T08:37:16Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-04-04T19:25:43Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/937556844/7ead418e-8ff1-4183-a440-6ca226061df8"
        ],
        "homepage": "https://www.gbrl.ai/",
        "readme_summary": "GibberLink provides an API for two conversational AI agents to switch from English to the ggwave data-over-sound protocol after confirming they are both AI. The agents are designed to initially converse in English and then transition to ggwave for communication. This repository facilitates this process by providing the necessary API for agents to use the protocol.",
        "key_features": [
            "Two conversational AI agents",
            "Agents switch from English to sound-level protocol (ggwave)",
            "API for agents to use the ggwave protocol"
        ],
        "primary_use_case": "Enabling AI agents to communicate using a data-over-sound protocol (ggwave) when they identify each other as AI.",
        "open_issues": 8,
        "cover_image_prompt": "Two AI robots, resembling friendly office workers, are sitting at desks facing each other, connected by a visible sound wave. One robot is speaking into a microphone, generating a sound wave that travels across the room to the other robot, who is listening with a speaker. The sound wave is visualized as a glowing, patterned waveform. Subtle UI elements on the desks show snippets of code related to sound encoding/decoding. The scene is set in a brightly lit, modern office with a clean, minimalist design. The robots are surrounded by floating digital particles representing data. The repository name, 'GibberLink,' is subtly displayed on a screen in the background. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 896363641,
        "name": "ByteSync",
        "description": "On-demand, secure file sync & backup for up to 5 remote machines. ByteSync transfers only file differences, compresses data, encrypts end-to-end, and gives you full control over what and when to sync. Runs on Windows, Linux, and macOS.",
        "url": "https://github.com/POW-Software/ByteSync",
        "language": "C#",
        "stars": 59,
        "forks": 2,
        "created_at": "2024-11-30T06:46:18Z",
        "updated_at": "2025-05-25T07:55:50Z",
        "topics": [
            "aes-encryption",
            "avalonia",
            "avaloniaui",
            "azure-functions",
            "backup",
            "backup-utility",
            "cloud",
            "cross-platform",
            "e2ee",
            "rsync",
            "sync-data",
            "syncronization"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-05-25T05:02:45Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/896363641/a118ff1f-7c0c-485a-9bcf-41695e703945"
        ],
        "homepage": "https://www.bytesyncapp.com/",
        "readme_summary": "ByteSync is an open-source file synchronization tool that prioritizes security and efficiency. It offers end-to-end encryption, delta transfers, and customizable rules for syncing files across up to five devices. The server component runs in the cloud, simplifying deployment and management, and clients are available for Windows, Linux, and macOS.",
        "key_features": [
            "End-to-end encryption",
            "Smart synchronization (delta transfers, compression)",
            "Multi-device sync (up to 5 machines)",
            "Customizable sync rules",
            "Cloud-based server",
            "Cross-platform compatibility",
            "Open-source and flexible"
        ],
        "primary_use_case": "On-demand, secure file synchronization and backup for multiple remote machines.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously synchronizing a series of intricate gears across five separate clock towers, each representing a remote machine. The clockmaker uses a special lens that highlights only the differences in the gears, ensuring perfect alignment. Data streams flow between the towers, glowing with encrypted light. A small UI panel displays sync rules and status. The scene is set in a bright, airy workshop with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and crisp details, subtly incorporating the ByteSync logo."
    },
    {
        "id": 925434317,
        "name": "kreuzberg",
        "description": "A text extraction library supporting PDFs, images, office documents and more",
        "url": "https://github.com/Goldziher/kreuzberg",
        "language": "Python",
        "stars": 1823,
        "forks": 64,
        "created_at": "2025-01-31T21:50:02Z",
        "updated_at": "2025-05-25T07:53:55Z",
        "topics": [
            "asyncio",
            "docx",
            "ocr",
            "pdf",
            "text-extraction"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-25T07:41:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/258691f81fa035b63f24157fd61b8e3eee0e2c82fc015ff5404b975db1d4368a/Goldziher/kreuzberg"
        ],
        "homepage": "",
        "readme_summary": "Kreuzberg is a Python library designed for extracting text from a variety of document formats, including PDFs, images, and office documents. It offers a unified interface and supports multiple OCR engines, providing both asynchronous and synchronous APIs for flexible integration. The library also supports metadata and table extraction.",
        "key_features": [
            "Text extraction from PDFs, images, and office documents",
            "Unified interface for various document formats",
            "Support for multiple OCR engines (Tesseract, EasyOCR, PaddleOCR)",
            "Async and sync APIs",
            "Metadata extraction",
            "Table extraction"
        ],
        "primary_use_case": "Extracting text from various document formats (PDFs, images, office documents) programmatically.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled librarian meticulously extracting text from various documents (PDFs, images, DOCX) using a specialized magnifying glass that transforms the text into neatly organized digital files. The librarian sits at a large wooden desk cluttered with books and documents, illuminated by a soft, warm light. Subtle UI elements float around the librarian, displaying snippets of code and data visualizations related to text extraction. The repository name, 'Kreuzberg,' is subtly etched into the desk. The image should be in a detailed digital painting style with a focus on clarity and vibrant colors."
    }
]