[
    {
        "id": 951534260,
        "name": "rf-detr",
        "description": "RF-DETR is a real-time object detection and segmentation model architecture developed by Roboflow, SOTA on COCO and designed for fine-tuning.",
        "url": "https://github.com/roboflow/rf-detr",
        "language": "Python",
        "stars": 3250,
        "forks": 375,
        "created_at": "2025-03-19T20:43:00Z",
        "updated_at": "2025-10-05T09:58:20Z",
        "topics": [
            "computer-vision",
            "detr",
            "instance-segmentation",
            "machine-learning",
            "object-detection",
            "rf-detr",
            "sota"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-10-02T23:48:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5b592392f92684ab9c78567c80da9b88502a889b88feb744124fb524f73c288e/roboflow/rf-detr"
        ],
        "homepage": "https://rfdetr.roboflow.com/1.3.0",
        "readme_summary": "RF-DETR is a real-time object detection and instance segmentation model architecture developed by Roboflow. It achieves state-of-the-art performance on the COCO benchmark and is designed for fine-tuning, offering a balance between speed and accuracy for real-time applications.",
        "key_features": [
            "Real-time object detection",
            "Instance segmentation",
            "Transformer-based architecture",
            "SOTA performance on COCO",
            "Fine-tuning capabilities",
            "RF100-VL benchmark performance",
            "Optimized for inference"
        ],
        "primary_use_case": "Object detection and instance segmentation in real-time applications, particularly where speed and accuracy are critical.",
        "open_issues": 105,
        "cover_image_prompt": "A skilled artisan meticulously crafting a mosaic where each tile represents an object detected and segmented in a real-world scene. The artisan uses advanced tools that project digital outlines onto the tiles, ensuring precise placement and recognition. The completed mosaic forms a vibrant, detailed image showcasing the power of real-time object detection. Subtle UI elements float around the artisan, displaying performance metrics and model parameters. The scene is set in a bright, modern workshop with natural lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 838253246,
        "name": "BitNet",
        "description": "Official inference framework for 1-bit LLMs",
        "url": "https://github.com/microsoft/BitNet",
        "language": "Python",
        "stars": 22612,
        "forks": 1770,
        "created_at": "2024-08-05T09:07:38Z",
        "updated_at": "2025-10-05T10:09:35Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-06-03T06:14:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c8dc999d8cc03e7d8f8d540333309db1b3af535903b2b52109287db470f7722b/microsoft/BitNet"
        ],
        "homepage": "",
        "readme_summary": "The repository `bitnet.cpp` is an inference framework optimized for 1-bit Large Language Models (LLMs) like BitNet b1.58. It provides optimized kernels for fast and lossless inference on CPUs and GPUs, achieving significant speedups and energy reductions compared to standard implementations, enabling the deployment of large language models on local devices.",
        "key_features": [
            "Optimized kernels for 1-bit LLM inference",
            "Support for CPU and GPU (NPU support coming)",
            "Significant speedups on ARM and x86 CPUs",
            "Reduced energy consumption",
            "Ability to run large models (e.g., 100B) on a single CPU",
            "Official GPU inference kernel"
        ],
        "primary_use_case": "Efficient inference of 1-bit LLMs on CPUs and GPUs.",
        "open_issues": 121,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a miniature world inside a single silicon chip. The artisan uses tiny hammers and chisels to shape data streams into intricate structures, representing the efficient compression and processing of 1-bit LLMs. Glowing particles of information flow through the chip, forming miniature language models. Small UI elements display performance metrics and energy consumption. The repository name, 'bitnet.cpp,' is subtly etched onto the chip's surface. The scene is set in a clean, futuristic laboratory with soft, diffused lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1067446359,
        "name": "youtube-to-blog",
        "description": "Simple YouTube url to MDX blog app",
        "url": "https://github.com/TheOrcDev/youtube-to-blog",
        "language": "TypeScript",
        "stars": 89,
        "forks": 11,
        "created_at": "2025-09-30T21:40:56Z",
        "updated_at": "2025-10-05T09:53:48Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-10-04T15:16:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1efe9beb4e9ed9f7d476276e32dfcc5594c520ee322645ce12c67aa6c88ffca2/TheOrcDev/youtube-to-blog"
        ],
        "homepage": "https://youtube-to-blog-brown.vercel.app",
        "readme_summary": "The YouTube to Blog application automatically converts YouTube videos into well-structured blog posts using AI. It extracts video metadata and transcripts, then uses Google's Gemini 2.5 Flash to transform the content into professional MDX blog posts, which are then saved to a database.",
        "key_features": [
            "One-Click Conversion",
            "AI-Powered (Gemini 2.5 Flash)",
            "Professional Formatting (MDX)",
            "Modern UI (Dark/Light Mode)",
            "Persistent Storage",
            "Smart Detection (Duplicate Check)",
            "Mobile Friendly",
            "Fast Performance (Next.js 15)"
        ],
        "primary_use_case": "Transforming YouTube video content into written blog posts.",
        "open_issues": 0,
        "cover_image_prompt": "A diligent scribe sits at a digital loom, weaving strands of video footage into a tapestry of text. The loom is fed by glowing YouTube icons, and the emerging tapestry displays a beautifully formatted blog post. Digital particles flow from the video icons to the loom, representing the AI transformation. Small UI elements float around the scribe, showing editing tools and formatting options. The scene is set in a bright, airy studio with a modern aesthetic. The composition is clean and focused, with a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1034478597,
        "name": "open-lovable",
        "description": "🔥 Clone and recreate any website as a modern React app in seconds",
        "url": "https://github.com/firecrawl/open-lovable",
        "language": "TypeScript",
        "stars": 20578,
        "forks": 3719,
        "created_at": "2025-08-08T13:04:02Z",
        "updated_at": "2025-10-05T09:54:24Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-09-27T13:18:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/71278b77900f563cd7a6ab1efc003deed3dfec1bd7a1db43d2a1e49266f1e23d/firecrawl/open-lovable"
        ],
        "homepage": "",
        "readme_summary": "Open Lovable allows users to clone and recreate websites as modern React applications using AI. It leverages AI to generate React code from existing websites, providing a quick way to modernize or replicate web applications. The project is associated with Firecrawl and Lovable.dev, suggesting a connection to a larger cloud-based solution.",
        "key_features": [
            "Website cloning to React app",
            "AI-powered code generation",
            "Uses Firecrawl API",
            "Support for multiple LLMs (Anthropic, OpenAI, Gemini, Groq)",
            "Optional fast apply using MorphLLM",
            "Sandbox environment options (Vercel, E2B)"
        ],
        "primary_use_case": "Rapidly creating React applications from existing websites using AI.",
        "open_issues": 64,
        "cover_image_prompt": "Imagine a skilled architect standing before a digital blueprint of a website, magically transforming it into a modern, vibrant React application represented by glowing building blocks. The architect uses an AI-powered tool, emitting digital particles that reconstruct the blueprint into the React app. Small screens display the original website and the generated React code side-by-side. The scene is set in a futuristic design studio with soft, ambient lighting. Subtle tech elements like code snippets and UI components are integrated into the scene. The composition is clean and focused with a blue and purple color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1016411413,
        "name": "omnara",
        "description": "Omnara (YC S25) - Talk to Your AI Agents from Anywhere!",
        "url": "https://github.com/omnara-ai/omnara",
        "language": "TypeScript",
        "stars": 2383,
        "forks": 161,
        "created_at": "2025-07-09T01:30:55Z",
        "updated_at": "2025-10-05T08:14:09Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-10-02T16:55:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0f2077f556784c747cd3d64b24b45f2b02e245947320c8914c83fbd9626cd82b/omnara-ai/omnara"
        ],
        "homepage": "https://omnara.com",
        "readme_summary": "Omnara is a platform that provides a unified interface to interact with AI agents like Claude Code and Codex CLI from various devices (terminal, web, and mobile). It allows users to monitor agent activity in real-time and respond to agent requests from a central dashboard, enhancing collaboration with AI agents.",
        "key_features": [
            "Real-time visibility into AI agent activity",
            "Unified dashboard for web and mobile",
            "CLI integration for Claude Code and Codex CLI",
            "n8n integration for human-in-the-loop workflows",
            "Headless mode for dashboard-only interaction",
            "Server mode for remote agent launching"
        ],
        "primary_use_case": "Providing a central command center to interact with and monitor AI agents, facilitating real-time collaboration and control.",
        "open_issues": 23,
        "cover_image_prompt": "A conductor standing before an orchestra of AI agents, each represented by a musical instrument. The conductor's baton controls the agents, translating human instructions into harmonious code. Screens display snippets of code and data visualizations, subtly connecting the metaphor to software development. The scene is set in a modern, brightly lit concert hall. The image should be in a 3D isometric illustration style with rich details and vibrant colors, conveying the idea of orchestrating AI agents for seamless collaboration."
    },
    {
        "id": 119336293,
        "name": "yn",
        "description": "A highly extensible Markdown editor. Version control, AI Copilot, mind map, documents encryption, code snippet running, integrated terminal, chart embedding, HTML applets, Reveal.js, plug-in, and macro replacement.",
        "url": "https://github.com/purocean/yn",
        "language": "TypeScript",
        "stars": 6364,
        "forks": 933,
        "created_at": "2018-01-29T05:30:00Z",
        "updated_at": "2025-10-05T08:34:36Z",
        "topics": [
            "chatgpt",
            "deepseek",
            "drawio",
            "editor",
            "electron",
            "gemini",
            "koa2",
            "markdown",
            "markdown-editor",
            "markdown-it",
            "mermaid",
            "monaco-editor",
            "notebook",
            "openai",
            "plantuml",
            "reveal-js",
            "revealjs",
            "vscode",
            "vue"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-21T11:51:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a8f516e36bcf165dc2fa3ab5148e3ac8de0428f62b5112cddf0d3ae157c4beab/purocean/yn"
        ],
        "homepage": "https://yank-note.com",
        "readme_summary": "Yank Note is a highly extensible Markdown editor designed for productivity. It offers features like version control, AI copilot integration, mind map support, document encryption, code snippet execution, an integrated terminal, chart embedding, HTML applets, Reveal.js presentations, plugin support, and macro replacement, aiming to provide a comprehensive Markdown editing experience.",
        "key_features": [
            "Monaco editor kernel for VSCode-like experience",
            "Version control",
            "Applet embedding",
            "Runnable code blocks",
            "PlantUML and Drawio support",
            "Macro replacements",
            "AI Copilot integration",
            "Plugin extension support",
            "Encryption for sensitive files",
            "Sync scrolling",
            "Outline navigation",
            "Auto-save",
            "Image pasting",
            "Attachment embedding",
            "Integrated terminal",
            "LaTeX support",
            "Multiple format export via Pandoc"
        ],
        "primary_use_case": "Creating, editing, and managing Markdown documents with advanced features and extensibility.",
        "open_issues": 45,
        "cover_image_prompt": "A meticulous librarian sitting at a grand oak desk, transforming scattered notes and ideas into a beautifully organized digital book. The librarian uses a magical quill that writes in Markdown, with code snippets and diagrams seamlessly appearing on the pages. Small screens display version control history and AI copilot suggestions. The scene is set in a warmly lit, high-ceilinged library with glowing digital particles floating around. The repository name is subtly embossed on the book's cover. The image should be in a detailed digital painting style with rich colors and clear outlines."
    },
    {
        "id": 924637527,
        "name": "zen",
        "description": "Selfhosted notes app. Single golang binary, notes stored as markdown within SQLite, full-text search, very low resource usage",
        "url": "https://github.com/sheshbabu/zen",
        "language": "JavaScript",
        "stars": 856,
        "forks": 41,
        "created_at": "2025-01-30T11:34:54Z",
        "updated_at": "2025-10-05T09:45:20Z",
        "topics": [
            "markdown",
            "mcp-server",
            "notes",
            "preact",
            "sqlite"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-10-05T09:45:13Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/924637527/b8017903-ecbc-4421-83f5-eb15e07f1f8e"
        ],
        "homepage": "https://www.sheshbabu.com/zen/",
        "readme_summary": "Zen is a self-hosted notes application built with Go, storing notes as Markdown files within a SQLite database. It offers full-text search, low resource usage, and features like tagging, templates, and experimental canvas-based organization.",
        "key_features": [
            "Single Go binary or Docker Compose deployment",
            "Low resource usage",
            "Markdown files with SQLite database",
            "Flexible tags for organization",
            "Full-text search with BM25 ranking",
            "Import and export data",
            "Templates",
            "Pinned notes",
            "Archive and soft delete notes",
            "Canvas for spatial organization (experimental)",
            "Semantic search (experimental)"
        ],
        "primary_use_case": "Personal note-taking and knowledge management",
        "open_issues": 0,
        "cover_image_prompt": "A serene librarian meticulously organizing thoughts represented as glowing orbs into labeled jars within a vast, minimalist library. Each jar represents a note, categorized by subtle, color-coded tags. The librarian uses a magnifying glass to examine the contents of each orb, representing full-text search. A faint UI overlay shows a search bar and note preview. The library is powered by a small, humming SQLite server depicted as a miniature engine. The scene is bathed in soft, diffused light, creating a sense of calm and focus. The image should be in a flat design style with clear iconography and a muted color palette."
    },
    {
        "id": 645330651,
        "name": "AdGuardian-Term",
        "description": "🛡️ Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance",
        "url": "https://github.com/Lissy93/AdGuardian-Term",
        "language": "Rust",
        "stars": 1338,
        "forks": 66,
        "created_at": "2023-05-25T12:17:23Z",
        "updated_at": "2025-10-05T06:26:45Z",
        "topics": [
            "adguard",
            "dns",
            "rust",
            "terminal",
            "tui"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-05T01:29:06Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/645330651/795e1d85-9d3d-44c7-a115-a385b4142944"
        ],
        "homepage": "https://adguardian.as93.net",
        "readme_summary": "AdGuardian-Term is a terminal-based application written in Rust for real-time monitoring and statistics of an AdGuard Home instance. It provides features such as real-time query monitoring, block/allow statistics, historical query counts, filter list information, and top domain statistics, offering a lightweight and safe way to keep an eye on network traffic.",
        "key_features": [
            "Real-time Query Monitoring",
            "Block and Allow Stats",
            "Historical Query Counts",
            "Filter Lists",
            "Top Domain Statistics",
            "Easy and Lightweight",
            "Good and Safe"
        ],
        "primary_use_case": "Monitoring and analyzing network traffic and DNS queries handled by an AdGuard Home instance.",
        "open_issues": 20,
        "cover_image_prompt": "A diligent librarian meticulously organizing incoming network traffic represented as glowing books, categorizing them into 'Allowed,' 'Blocked,' and 'Filtered' sections. The librarian uses a magnifying glass to examine each book's data, with a terminal displaying real-time statistics subtly overlaid on the scene. The library is filled with shelves representing filter lists, each glowing with activity. The scene is set in a cozy, well-lit study with a focus on clarity and organization. The image should be in a 3D isometric illustration style with clean lines and a warm color scheme."
    }
]