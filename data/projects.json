[
    {
        "id": 1024955521,
        "name": "neuralagent",
        "description": "The AI Agent That Lives On Your Desktop And Uses It Like You Do!",
        "url": "https://github.com/withneural/neuralagent",
        "language": "Python",
        "stars": 85,
        "forks": 11,
        "created_at": "2025-07-23T13:54:57Z",
        "updated_at": "2025-07-25T09:49:08Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T21:25:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e4aa4fbb07ea22370e6152710aec89c55fc61a49e8d5c9dcc3e757477b2b757a/withneural/neuralagent"
        ],
        "homepage": "https://www.getneuralagent.com",
        "readme_summary": "NeuralAgent is an AI personal assistant that automates desktop tasks. It uses large language models to perform actions like typing, clicking, navigating browsers, and filling out forms. The architecture consists of a FastAPI backend, an Electron-based desktop application with a React frontend, and supports multiple LLMs.",
        "key_features": [
            "Desktop automation with `pyautogui`",
            "Background automation (Windows Only) via WSL (browser-only)",
            "Supports Claude, GPT-4, Azure OpenAI, and Bedrock",
            "Modular agents (Planner, Classifier, Suggestor, Title)",
            "Multimodal (text + vision)",
            "FastAPI backend + Electron + React frontend"
        ],
        "primary_use_case": "Automating desktop tasks such as typing, clicking, browser navigation, form filling, and email sending.",
        "open_issues": 1,
        "cover_image_prompt": "A digital assistant, represented by a friendly robot, sitting at a modern desk overflowing with digital documents and browser windows. The robot is efficiently managing tasks, such as composing emails, filling out forms, and navigating websites, all displayed on holographic screens surrounding it. Subtle code snippets and data visualizations float in the background, connecting the metaphor to software. The scene is set in a brightly lit, minimalist office with a clean and focused composition. The image should be in a 3D isometric illustration style with rich details and vibrant colors, conveying the AI's ability to automate desktop tasks."
    },
    {
        "id": 835975784,
        "name": "SurfSense",
        "description": "Open Source Alternative to NotebookLM / Perplexity / Glean, connected to external sources such as search engines (Tavily, Linkup), Slack, Linear, Notion, YouTube, GitHub, Discord and more.",
        "url": "https://github.com/MODSetter/SurfSense",
        "language": "TypeScript",
        "stars": 6125,
        "forks": 459,
        "created_at": "2024-07-30T23:00:09Z",
        "updated_at": "2025-07-25T09:49:20Z",
        "topics": [
            "aceternity-ui",
            "agent",
            "agents",
            "ai",
            "chrome-extension",
            "extension",
            "fastapi",
            "glean",
            "langchain",
            "langgraph",
            "nextjs",
            "nextjs15",
            "notebooklm",
            "notion",
            "ollama",
            "perplexity",
            "python",
            "rag",
            "slack",
            "typescript"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T16:58:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ef41d48b6e0f31a22e5eca6376366cc7e4b1b26c2e8153359ef0576e4451bfd8/MODSetter/SurfSense"
        ],
        "homepage": "https://www.surfsense.net",
        "readme_summary": "SurfSense is an open-source alternative to NotebookLM and Perplexity, designed to integrate with personal knowledge bases and external sources. It offers features like multiple file format support, powerful search, natural language interaction, cited answers, local LLM support, and advanced RAG techniques. The primary use case is to create a customizable AI research agent that can synthesize information from various sources, including search engines, Slack, Notion, and GitHub.",
        "key_features": [
            "Customizable private NotebookLM and Perplexity integrated with external sources",
            "Multiple file format uploading support (50+ file extensions)",
            "Powerful search within saved content",
            "Chat with saved content using natural language",
            "Cited answers",
            "Privacy & Local LLM Support (Ollama)",
            "Self Hostable",
            "Blazingly fast podcast generation agent",
            "Advanced RAG Techniques (100+ LLMs, 6000+ Embedding Models, Major Rerankers, Hierarchical Indices, Hybrid Search, RAG as a Service API Backend)",
            "Integration with external sources (Search Engines, Slack, Linear, Notion, Youtube, GitHub, Discord)"
        ],
        "primary_use_case": "Creating a highly customizable AI research agent connected to personal knowledge bases and external sources for enhanced research and information synthesis.",
        "open_issues": 33,
        "cover_image_prompt": "A researcher, surrounded by a constellation of interconnected digital nodes representing various data sources like search engines, Slack, Notion, and GitHub, is synthesizing information into a glowing, personalized knowledge graph. The researcher uses a lens to focus on specific data points, which then transform into cited answers displayed on a holographic screen. The scene is set in a futuristic library with soft, ambient lighting. Small UI elements showing search queries and file uploads subtly connect the metaphor to the software. The composition is focused and clean with a blue and purple color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 979115477,
        "name": "deer-flow",
        "description": "DeerFlow is a community-driven Deep Research framework, combining language models with tools like web search, crawling, and Python execution, while contributing back to the open-source community.",
        "url": "https://github.com/bytedance/deer-flow",
        "language": "Python",
        "stars": 15645,
        "forks": 1954,
        "created_at": "2025-05-07T02:50:19Z",
        "updated_at": "2025-07-25T09:58:28Z",
        "topics": [
            "agent",
            "agentic",
            "agentic-framework",
            "agentic-workflow",
            "ai",
            "ai-agents",
            "bytedance",
            "deep-research",
            "langchain",
            "langgraph",
            "langmanus",
            "llm",
            "multi-agent",
            "nodejs",
            "podcast",
            "python",
            "typescript"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T08:53:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1b4353f8f4c7c997a163c0bfc236d391289d6208ecf12389e0ff025cc252c931/bytedance/deer-flow"
        ],
        "homepage": "https://deerflow.tech",
        "readme_summary": "DeerFlow is a community-driven Deep Research framework that combines language models with tools like web search, crawling, and Python execution. It aims to facilitate efficient research workflows by leveraging the power of language models and specialized tools. The framework supports one-click deployment on Volcengine for easy accessibility.",
        "key_features": [
            "Combines language models with web search",
            "Combines language models with web crawling",
            "Combines language models with Python code execution",
            "Community-driven Deep Research framework",
            "One-click deployment on Volcengine"
        ],
        "primary_use_case": "Deep Research using language models and specialized tools.",
        "open_issues": 170,
        "cover_image_prompt": "Imagine a diligent librarian in a vast, glowing digital library, meticulously researching and compiling information from countless sources. The librarian, representing DeerFlow, uses a magical magnifying glass to examine web pages, code snippets, and data streams, transforming them into a beautifully organized research report displayed on a holographic screen. The library is filled with floating books and glowing orbs of data, subtly hinting at the underlying technology. Small UI elements and code visualizations are subtly incorporated into the scene. The image should be in a 3D isometric illustration style with soft, warm lighting and a focus on clarity and detail."
    },
    {
        "id": 979060063,
        "name": "pyroki",
        "description": "A Modular Toolkit for Robot Kinematic Optimization",
        "url": "https://github.com/chungmin99/pyroki",
        "language": "Python",
        "stars": 891,
        "forks": 74,
        "created_at": "2025-05-06T23:58:22Z",
        "updated_at": "2025-07-25T09:20:21Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-19T08:21:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5429f685220dfeb2edc4903711bdf7dd9fd3426000f5ad39aee7a9a3f84e5799/chungmin99/pyroki"
        ],
        "homepage": "https://pyroki-toolkit.github.io/",
        "readme_summary": "PyRoki is a Python toolkit for robot kinematic optimization. It provides differentiable forward kinematics, automatic collision primitive generation, and various cost implementations. It supports cross-platform execution via JAX and integrates with a Levenberg-Marquardt solver for optimization on manifolds.",
        "key_features": [
            "Differentiable robot forward kinematics from URDF",
            "Automatic collision primitive generation",
            "Differentiable collision bodies with numpy broadcasting",
            "Common cost implementations (pose, collision, manipulability)",
            "Arbitrary costs with autodiff or analytical Jacobians",
            "Integration with Levenberg-Marquardt solver for manifold optimization",
            "Cross-platform support (CPU, GPU, TPU) via JAX"
        ],
        "primary_use_case": "Robot kinematic optimization",
        "open_issues": 13,
        "cover_image_prompt": "A skilled roboticist meticulously fine-tuning a humanoid robot using a holographic interface. The robot stands gracefully in a virtual workshop, surrounded by glowing lines representing kinematic chains and collision boundaries. The roboticist adjusts parameters on a floating screen displaying cost functions and optimization metrics. The scene is bathed in soft, diffused light, creating a sense of precision and control. Subtle UI elements show code snippets and real-time data visualizations. The repository name, 'PyRoki', is subtly integrated into the background. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 24774658,
        "name": "boto3",
        "description": "Boto3, an AWS SDK for Python",
        "url": "https://github.com/boto/boto3",
        "language": "Python",
        "stars": 9454,
        "forks": 1920,
        "created_at": "2014-10-03T21:38:03Z",
        "updated_at": "2025-07-25T05:19:33Z",
        "topics": [
            "aws",
            "aws-sdk",
            "cloud",
            "cloud-management",
            "python"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T18:05:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/82e66df1c58ee896fec98cd7160c11047e9ee229a9ba157a295ca270faf78d7f/boto/boto3"
        ],
        "homepage": "https://aws.amazon.com/sdk-for-python/",
        "readme_summary": "Boto3 is the Amazon Web Services (AWS) SDK for Python, allowing developers to easily integrate their Python applications with AWS services like S3 and EC2. It provides a comprehensive set of tools and resources for managing AWS infrastructure and building scalable, cloud-based applications. The SDK simplifies the process of interacting with AWS, enabling developers to focus on building their applications rather than managing low-level API interactions.",
        "key_features": [
            "Provides an SDK for interacting with AWS services using Python",
            "Supports a wide range of AWS services including S3 and EC2",
            "Offers documentation and resources for developers",
            "Provides tools for setting up credentials and configuring regions"
        ],
        "primary_use_case": "Enabling Python developers to build applications that interact with Amazon Web Services (AWS).",
        "open_issues": 166,
        "cover_image_prompt": "A skilled architect meticulously constructing a towering skyscraper using individual AWS service blocks as building materials. The architect carefully places each block (representing services like S3, EC2, etc.) onto the structure, ensuring seamless integration and stability. Blueprints with Python code snippets are subtly visible on a nearby table. The skyscraper is bathed in the warm glow of a sunrise, symbolizing the power and potential of cloud computing. The scene is set against a backdrop of a vibrant, futuristic city. The image should be in a 3D isometric illustration style with clean lines, bright colors, and a focus on clarity and functionality."
    },
    {
        "id": 1079822,
        "name": "pykka",
        "description": "🌀 Pykka makes it easier to build concurrent Python applications.",
        "url": "https://github.com/jodal/pykka",
        "language": "Python",
        "stars": 1277,
        "forks": 105,
        "created_at": "2010-11-14T23:45:50Z",
        "updated_at": "2025-07-25T09:53:26Z",
        "topics": [
            "actor-model",
            "concurrency",
            "python"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T08:18:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5e613d35a7ccd7f56db8c83def22b5d179e2aab13319370a031c02e682cc049e/jodal/pykka"
        ],
        "homepage": "https://pykka.readthedocs.io",
        "readme_summary": "Pykka is a Python library that simplifies the development of concurrent applications by providing an implementation of the actor model. It enables developers to build robust and scalable systems by managing state sharing and cooperation between execution units. Pykka requires Python 3.9 or newer and is available on PyPI.",
        "key_features": [
            "Concurrency",
            "Actor Model implementation",
            "Simplified concurrent application development"
        ],
        "primary_use_case": "Building concurrent Python applications using the actor model.",
        "open_issues": 18,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously assembling intricate gears within a grand clock tower. Each gear represents an actor, working in perfect synchronization to power the entire clock. The clock face displays a complex application running smoothly. Subtle digital interfaces are integrated into the clock's design, showing code snippets and data flows between the actors. The scene is bathed in warm, golden light, highlighting the precision and reliability of the system. The clock tower stands tall against a clear sky, symbolizing the stability and scalability provided by Pykka. The illustration is in a detailed 3D isometric style with vibrant colors and a focus on clarity."
    }
]