[
    {
        "id": 505401707,
        "name": "fooyin",
        "description": "A customisable music player",
        "url": "https://github.com/fooyin/fooyin",
        "language": "C++",
        "stars": 1345,
        "forks": 48,
        "created_at": "2022-06-20T10:52:24Z",
        "updated_at": "2025-10-24T08:50:55Z",
        "topics": [
            "alsa",
            "audio",
            "audio-player",
            "chiptune",
            "cpp20",
            "customizable",
            "ffmpeg",
            "fooyin",
            "linux",
            "music",
            "music-player",
            "pipewire",
            "plugins",
            "qt",
            "taglib",
            "vgm",
            "waveform",
            "windows"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-10-09T19:35:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ecfabc3106be5770b925a3cbb0a537f3ac1e4bb19c63a9125ec0b7832c64936/fooyin/fooyin"
        ],
        "homepage": "https://fooyin.org",
        "readme_summary": "fooyin is a customizable music player that supports a wide range of audio formats and provides extensive customization options. It features a plugin system, a scripting language for advanced configuration, and a layout editing mode for complete UI customization. Currently, only Linux is supported, with plans for future platform support.",
        "key_features": [
            "Playback of major audio formats (FLAC, MP3, MP4, Vorbis, Opus, WavPack, WAV, AIFF, MKA, Musepack, Monkeyâ€™s Audio)",
            "Native support for VGM and tracker module formats",
            "Gapless playback",
            "Play files directly from archives",
            "Full CUE sheet support",
            "ReplayGain support",
            "Waveform seekbar",
            "Powerful filtering on any field",
            "Playlist creation and management",
            "Dynamic autoplaylists based on scripts",
            "Import/export playlists (M3U/M3U8)",
            "Library tree with directory structure view",
            "Integrated directory browser",
            "Built-in tag editor",
            "Automatic artwork finder",
            "Synced lyrics with multi-source downloads",
            "Fully customizable interface",
            "Personalized keyboard shortcuts",
            "Extend functionality with a plugin system",
            "Flexible audio output and device configuration",
            "MPRIS support for system-wide control",
            "Scrobbling (Last.fm, MusicBrainz, Libre.fm)"
        ],
        "primary_use_case": "Playing and managing a local music collection with extensive customization options.",
        "open_issues": 209,
        "cover_image_prompt": "A skilled artisan meticulously crafting a complex music box with various dials, switches, and compartments. The music box emits melodic waves that visually transform into different musical genres, represented by floating icons (classical, jazz, electronic). Small UI elements displaying audio settings and waveforms are subtly integrated into the music box's design. The scene is set in a cozy workshop filled with tools and musical instruments, bathed in warm, inviting light. The image should be in 3D isometric illustration style with intricate details and a harmonious color palette."
    },
    {
        "id": 486721097,
        "name": "youtube-tui",
        "description": "An aesthetically pleasing YouTube TUI written in Rust",
        "url": "https://github.com/Siriusmart/youtube-tui",
        "language": "Rust",
        "stars": 665,
        "forks": 21,
        "created_at": "2022-04-28T19:19:51Z",
        "updated_at": "2025-10-24T07:04:48Z",
        "topics": [
            "cli",
            "rust",
            "rust-lang",
            "terminal",
            "terminal-based",
            "terminal-user-interface",
            "tui",
            "youtube",
            "youtube-dl"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-22T16:00:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d2d75c359c5089762fe822c31a942b5b68e1b0fafffb35746d0eeb12c87cfdcf/Siriusmart/youtube-tui"
        ],
        "homepage": "https://tui.siri.ws/youtube",
        "readme_summary": "YouTube TUI is a terminal-based user interface for browsing YouTube. It's written in Rust and allows users to browse YouTube content, view information about channels, playlists, and videos, use search filters, and save browsing history, all from the command line.",
        "key_features": [
            "Browse YouTube content from the terminal",
            "Customizable through config files (YAML format)",
            "Dependency-free (relies on external programs like mpv and yt-dlp)",
            "View channel, playlist, and video information",
            "Use search filters",
            "Save browsing history",
            "Embedded audio/music player",
            "Vim-like commands",
            "Mouse support",
            "Extensible keybindings system",
            "Offline library",
            "Subscriptions"
        ],
        "primary_use_case": "Browsing YouTube content and playing videos/audio from the terminal without a graphical user interface.",
        "open_issues": 10,
        "cover_image_prompt": "A librarian in a futuristic library, accessing YouTube videos through a terminal interface projected onto a large, holographic screen. The librarian uses vim-like commands on a glowing keyboard, while video thumbnails float around them like books. The screen displays search filters and channel information. Small UI elements and code snippets are subtly integrated into the holographic display. The scene is set in a clean, organized library with soft, blue lighting. The composition is focused on the librarian and the holographic screen. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 77419377,
        "name": "ctop",
        "description": "Top-like interface for container metrics",
        "url": "https://github.com/bcicen/ctop",
        "language": "Go",
        "stars": 17020,
        "forks": 572,
        "created_at": "2016-12-27T02:25:57Z",
        "updated_at": "2025-10-24T06:50:44Z",
        "topics": [
            "command-line",
            "commandline",
            "containers",
            "docker",
            "monitoring",
            "runc",
            "top"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2022-08-01T11:32:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3c33e00037f106b78d8d27fc188540e6d226fa1493487ec433010676bfdec4aa/bcicen/ctop"
        ],
        "homepage": "https://ctop.sh",
        "readme_summary": "ctop is a command-line tool that provides a real-time, top-like interface for monitoring container metrics. It offers a concise overview of multiple containers and a single container view for detailed inspection, supporting Docker and runC.",
        "key_features": [
            "Real-time container metrics",
            "Top-like interface",
            "Multiple container overview",
            "Single container view",
            "Docker support",
            "runC support",
            "Config file for saving/loading options",
            "Filtering and sorting options",
            "Container log viewing",
            "Shell execution within containers"
        ],
        "primary_use_case": "Monitoring container resource usage and performance in real-time.",
        "open_issues": 93,
        "cover_image_prompt": "A seasoned air traffic controller managing a bustling airport, but instead of planes, the screens show containers represented as stylized cargo ships. Each ship emits data streams visualized as glowing lines, flowing towards the controller's console. The console displays key metrics like CPU and memory usage. The airport control tower is sleek and modern, with subtle UI elements showing container names and resource allocation. Digital particles swirl around the ships, representing real-time activity. The scene is set at dusk with a vibrant, energetic atmosphere. The image should be in 3D isometric illustration style with rich details and a focus on clarity."
    },
    {
        "id": 441062625,
        "name": "NetAlertX",
        "description": "Network intruder and presence detector.  Scans for devices connected to your network and alerts you if new and unknown devices are found.",
        "url": "https://github.com/jokob-sk/NetAlertX",
        "language": "JavaScript",
        "stars": 4906,
        "forks": 285,
        "created_at": "2021-12-23T04:35:53Z",
        "updated_at": "2025-10-24T10:12:35Z",
        "topics": [
            "arp-scan",
            "docker",
            "intrusion-detection",
            "ipam",
            "network-analysis",
            "network-monitoring",
            "network-security",
            "networking",
            "pi-hole",
            "security",
            "selfhosted",
            "wifi-network",
            "wifi-security"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-10-21T20:48:50Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/441062625/3d4957be-0bb2-4617-bb58-7bb0cf0cbc08"
        ],
        "homepage": "https://netalertx.com",
        "readme_summary": "NetAlertX is a network monitoring and security tool that scans your network for connected devices and alerts you to new or unknown devices. It helps with presence detection, network analysis, and building a network source of truth (NSoT) through scheduled scans and customizable plugins.",
        "key_features": [
            "Network scanning for new devices",
            "Detection of new connections and disconnections",
            "IP change detection",
            "Internet IP address change detection",
            "Plugin system for custom functionality",
            "Alerting system for unknown devices and changes",
            "Integration with Pi-hole and UNIFI"
        ],
        "primary_use_case": "Network intrusion detection and presence detection on a local network.",
        "open_issues": 27,
        "cover_image_prompt": "A detective, magnifying glass in hand, examines a network cable that branches into various devices (laptop, phone, smart TV) represented as miniature houses in a futuristic cityscape. The detective spots a suspicious, unidentified device (a dark, cloaked figure) attempting to connect. A small UI overlay shows a network scan with highlighted anomalies. Glowing digital particles flow along the network cable, visualizing data packets. The repository name, 'NetAlertX', is subtly displayed on a building. The scene is set at twilight with a blue and orange color scheme. The image should be in 3D isometric illustration style with sharp details and vibrant colors."
    },
    {
        "id": 719438276,
        "name": "gramax",
        "description": "Embrace a docs-as-code approach to build, version, and publish Git-driven documentation sites using Markdown and a visual editor",
        "url": "https://github.com/Gram-ax/gramax",
        "language": "TypeScript",
        "stars": 340,
        "forks": 10,
        "created_at": "2023-11-16T06:57:38Z",
        "updated_at": "2025-10-24T09:15:55Z",
        "topics": [
            "docs-as-code",
            "documentation-tool",
            "editor",
            "git",
            "knowledge-base",
            "local-first",
            "markdown",
            "markdown-editor",
            "note-taking",
            "prosemirror",
            "rust",
            "tauri",
            "technical-writing",
            "tiptap",
            "typescript",
            "version-control",
            "wysiwyg"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-10-13T07:43:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ca6d7074909c5edf433fc6933e7b966d2ee27e7ea4341e31765fdbfdb1964921/Gram-ax/gramax"
        ],
        "homepage": "https://gram.ax",
        "readme_summary": "Gramax is an open-source, local-first documentation tool that uses a docs-as-code approach. It allows users to create, edit, and publish documentation using Markdown, with a visual editor and Git integration. It supports various features like multilingual support, advanced editing capabilities, and documentation portal generation.",
        "key_features": [
            "Visual Editor",
            "Cross-Platform availability",
            "Local Storage in Markdown",
            "Customizable Styles",
            "Multilingual Support",
            "Advanced Editing (tabs, tables, video, code blocks, diagrams, Swagger)",
            "Git Integration",
            "Documentation Portal",
            "Migration Support (Confluence, Notion)"
        ],
        "primary_use_case": "Creating and publishing documentation, knowledge bases, and notes using Markdown with Git integration.",
        "open_issues": 112,
        "cover_image_prompt": "A skilled cartographer meticulously drawing a map of a vast library, each book representing a document. The cartographer uses a quill that emits glowing digital particles, automatically organizing and linking the books on the map. A small screen displays a Git commit history, showing the map's evolution. The library is filled with light, and the map is projected onto a large screen, showcasing a well-structured documentation portal. The scene is in a 3D isometric illustration style with warm colors and intricate details, subtly incorporating the Gramax logo."
    },
    {
        "id": 996250059,
        "name": "depyler",
        "description": "Compiles Python to Rust, helping transition off of Python to Energy Efficient and Safe Rust Code",
        "url": "https://github.com/paiml/depyler",
        "language": "Rust",
        "stars": 225,
        "forks": 8,
        "created_at": "2025-06-04T17:13:41Z",
        "updated_at": "2025-10-24T08:53:47Z",
        "topics": [
            "conversion",
            "mcp",
            "port",
            "python",
            "pythontorust",
            "rust"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-22T07:44:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5512dda57385e4b08d98a6d5bf712d956c78bdfd556f4404211c0925c208a087/paiml/depyler"
        ],
        "homepage": "https://paiml.github.io/depyler/",
        "readme_summary": "Depyler is a Python-to-Rust transpiler that aims to facilitate the transition from Python to Rust by converting annotated Python code into idiomatic Rust. It focuses on semantic verification and memory safety analysis to ensure the generated Rust code preserves the original program's behavior while providing compile-time safety guarantees.",
        "key_features": [
            "Type-directed transpilation",
            "Memory safety analysis",
            "Semantic verification",
            "Support for basic Python types and collections",
            "Support for control flow, comprehensions, and exception handling",
            "Generator expressions and functions",
            "Assert statements",
            "Async/await support"
        ],
        "primary_use_case": "Converting Python code to Rust for improved performance, memory safety, and energy efficiency.",
        "open_issues": 12,
        "cover_image_prompt": "A skilled artisan meticulously chiseling a Python statue into a sleek, modern Rust sculpture. The artisan uses specialized tools that analyze the Python structure, ensuring a perfect, safe transformation. Digital particles representing data flow around the statue, highlighting the conversion process. A subtle UI element displays the Depyler logo and a progress bar. The scene is set in a bright, airy workshop with a focus on precision and craftsmanship. The composition is clean and focused, using a warm color palette. The image should be in a 3D isometric illustration style with detailed textures and clear lighting."
    }
]