[
    {
        "id": 953075264,
        "name": "de-pixelate_gaV-O6NPWrI",
        "description": "de-pixelate youtube video gaV-O6NPWrI",
        "url": "https://github.com/KoKuToru/de-pixelate_gaV-O6NPWrI",
        "language": "Jupyter Notebook",
        "stars": 1087,
        "forks": 116,
        "created_at": "2025-03-22T14:12:16Z",
        "updated_at": "2025-07-09T10:10:32Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-06-29T12:16:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fcacf4a8e3a90b10e2c1da053d737097db494e65a625e90d157593aa064c17cd/KoKuToru/de-pixelate_gaV-O6NPWrI"
        ],
        "homepage": null,
        "readme_summary": "This repository provides a proof-of-concept implementation for de-pixelating a specific YouTube video. It involves extracting frames, identifying a pixelated window, extracting individual pixels from that window across multiple frames, and then accumulating these pixels to reconstruct a higher-resolution image. The code includes scripts for frame extraction and pixel manipulation, demonstrating a method to recover obscured content.",
        "key_features": [
            "Extracting frames from a video using ffmpeg.",
            "Manually finding the window position in the frames.",
            "Extracting the window content.",
            "Extracting cells (pixels) from the window.",
            "Accumulating the pixels to reconstruct the original content.",
            "Applying a fill algorithm to remove transparent pixels."
        ],
        "primary_use_case": "De-pixelating a specific YouTube video by extracting and reassembling pixel data from multiple frames.",
        "open_issues": 3,
        "cover_image_prompt": "A detective meticulously piecing together a fragmented mosaic of a blurred image, revealing a clear picture underneath. The detective uses specialized tools that emit digital particles, reconstructing the image from pixelated data. The scene is set in a dimly lit laboratory filled with screens displaying code snippets and image processing algorithms. A subtle watermark of the repository name is embedded in the background. The composition is focused and dramatic with a blue and orange color scheme. The image should be in a digital painting style with clear outlines and detailed textures."
    },
    {
        "id": 402229935,
        "name": "vdu_controls",
        "description": "VDU controls - a control panel for monitor brightness/contrast/...",
        "url": "https://github.com/digitaltrails/vdu_controls",
        "language": "Python",
        "stars": 164,
        "forks": 5,
        "created_at": "2021-09-01T23:28:15Z",
        "updated_at": "2025-07-09T10:12:16Z",
        "topics": [
            "bh1750",
            "ddc",
            "ddcutil",
            "gui",
            "gy-30",
            "gy-302",
            "linux",
            "mccs",
            "python",
            "qt5"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-07T04:19:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d0076703078bb1b3da1b20a5aec12fe4f9a72e767cb4d75a913219ae540650a3/digitaltrails/vdu_controls"
        ],
        "homepage": "",
        "readme_summary": "vdu_controls is a Python-based application that acts as a DDC control panel for external monitors. It allows users to adjust brightness, contrast, and audio settings, and features an ambient light slider for simultaneous control of multiple displays. The application supports hardware light-meter integration, preset management, and system tray integration, adapting to different desktop environments and themes.",
        "key_features": [
            "DDC control panel for external monitors",
            "Brightness, contrast, and audio controls",
            "Ambient-light-level slider for simultaneous adjustment of multiple displays",
            "Hardware light-meter integration for automatic brightness control",
            "Semi-automatic brightness control based on solar-illumination estimation",
            "Presets for saving and automatically triggering favorite settings",
            "System tray integration",
            "Automatic adaptation to light and dark Qt desktop-themes"
        ],
        "primary_use_case": "Provides a virtual control panel for adjusting the brightness, contrast, and other settings of external monitors, with features for ambient light integration and preset management.",
        "open_issues": 12,
        "cover_image_prompt": "Imagine a skilled artist sitting at a digital easel, carefully adjusting the brightness and contrast knobs on a series of virtual monitors displayed on the easel's screen. Each monitor reflects a different scene, subtly altered by the artist's adjustments. The artist's hand hovers over a master slider labeled 'Ambient Light,' which controls the overall illumination of all the monitors simultaneously. Small, glowing data streams flow from a nearby light sensor, feeding information to the easel. The scene is set in a cozy, modern studio bathed in soft, adjustable light. The image should be in a clean, flat design style with clear iconography and vibrant colors, reminiscent of a user interface."
    },
    {
        "id": 971770699,
        "name": "CryptX",
        "description": null,
        "url": "https://github.com/PersonX-46/CryptX",
        "language": "Kotlin",
        "stars": 45,
        "forks": 1,
        "created_at": "2025-04-24T03:17:05Z",
        "updated_at": "2025-07-09T06:33:30Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-06T00:37:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c0b2cf5dfef4835b12825c391f7370f79d607d6de05b5c3cbe82b43d4193101d/PersonX-46/CryptX"
        ],
        "homepage": null,
        "readme_summary": "CryptX is an Android toolkit for experimenting with cryptography, steganography, and hashing techniques. It allows users to encrypt and decrypt files using various algorithms, generate and detect hash types, and hide files within images. The application is designed for educational purposes and personal use, with no internet permission or data collection.",
        "key_features": [
            "Encryption & Decryption (AES, DES, 3DES, Blowfish, ChaCha20)",
            "Hash Generator (MD5, SHA-1, SHA-256)",
            "Hash Detector",
            "File Steganography (hide/extract files in JPG/PNG)"
        ],
        "primary_use_case": "A personal Android toolkit for experimenting with cryptography, steganography, and hashing.",
        "open_issues": 1,
        "cover_image_prompt": "A locksmith meticulously crafting a unique key from raw digital materials, with the key glowing with encrypted symbols. The key is then used to unlock a digital vault filled with images, text, and code, representing the encryption, steganography, and hashing capabilities of CryptX. UI elements showing encryption algorithms and hash values subtly float around the scene. The setting is a futuristic workshop with holographic displays. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 78869430,
        "name": "nakama",
        "description": "Distributed server for social and realtime games and apps.",
        "url": "https://github.com/heroiclabs/nakama",
        "language": "Go",
        "stars": 11232,
        "forks": 1244,
        "created_at": "2017-01-13T17:15:12Z",
        "updated_at": "2025-07-09T10:00:22Z",
        "topics": [
            "backend",
            "backend-as-a-service",
            "chat-server",
            "game-backend",
            "game-framework",
            "game-server",
            "multiplayer",
            "nakama",
            "realtime",
            "realtime-games",
            "social",
            "unity-engine",
            "unreal-engine"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T11:03:54Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/78869430/07a50265-f18c-4590-b99a-063f42a1cfe8"
        ],
        "homepage": "https://heroiclabs.com",
        "readme_summary": "Nakama is a distributed server designed for building social and realtime games and applications. It provides a comprehensive suite of features including user authentication, data storage, social networking, realtime chat and multiplayer, leaderboards, tournaments, and in-app notifications. Nakama can be extended with custom logic written in Lua, TypeScript/JavaScript, or Go, and supports deployment to any cloud provider.",
        "key_features": [
            "User authentication (social, email, device ID)",
            "Data storage",
            "Social graph and friend connections",
            "Realtime chat (1-on-1, group, global)",
            "Realtime and turn-based multiplayer",
            "Leaderboards",
            "Tournaments",
            "Parties",
            "Purchase validation",
            "In-app notifications",
            "Runtime code execution (Lua, TypeScript/JavaScript, Go)",
            "Matchmaker",
            "Dashboard",
            "Metrics"
        ],
        "primary_use_case": "Building scalable social and realtime games and apps.",
        "open_issues": 83,
        "cover_image_prompt": "Imagine a bustling, fantastical game development studio. A master architect stands proudly before a grand, intricate castle made of glowing code blocks, each representing a feature like 'chat,' 'multiplayer,' and 'leaderboards.' Tiny game characters are happily interacting within the castle walls. The architect holds a blueprint labeled 'Nakama,' subtly glowing with digital particles. Around the castle, smaller structures representing individual games are being built, all connected to the central Nakama castle. The scene is bathed in warm, inviting light, creating a sense of collaboration and limitless possibilities. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 576223889,
        "name": "bracket",
        "description": "Selfhosted tournament system",
        "url": "https://github.com/evroon/bracket",
        "language": "Python",
        "stars": 1296,
        "forks": 102,
        "created_at": "2022-12-09T09:56:31Z",
        "updated_at": "2025-07-09T07:16:19Z",
        "topics": [
            "api",
            "bracket",
            "brackets",
            "docker",
            "docusaurus",
            "fastapi",
            "json",
            "mantine",
            "nextjs",
            "postgresql",
            "python",
            "react",
            "reactjs",
            "selfhosted",
            "sports",
            "tournament-bracket",
            "tournament-manager",
            "tournaments",
            "web",
            "yarn"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-09T04:35:07Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/576223889/bcb154da-2418-4a4b-9112-a0bddd34c325"
        ],
        "homepage": "https://docs.bracketapp.nl",
        "readme_summary": "Bracket is a self-hosted tournament system designed for ease of use. It supports various tournament formats, including single elimination, round-robin, and swiss. The system allows users to build complex tournament structures, manage teams and players, and present customizable dashboards.",
        "key_features": [
            "Supports single elimination, round-robin and swiss formats",
            "Build tournament structures with multiple stages and groups/brackets",
            "Drag-and-drop matches for rescheduling",
            "Customizable dashboard pages for public presentation",
            "Team and player management",
            "Multiple clubs with multiple tournaments per club",
            "Dynamic handling of Swiss tournaments with automatic scheduling"
        ],
        "primary_use_case": "Self-hosted tournament management system.",
        "open_issues": 30,
        "cover_image_prompt": "Imagine a grand sports arena where a master architect meticulously designs tournament brackets using glowing, holographic building blocks. Each block represents a team or match, and the architect seamlessly connects them to form single-elimination, round-robin, and swiss-style tournaments. Digital interfaces display real-time updates and scheduling adjustments, while spectators cheer from the stands. The scene is bathed in vibrant, dynamic lighting, with subtle code snippets and data visualizations projected onto the arena walls. The repository name, 'Bracket,' is subtly integrated into the arena's architecture. The image should be in a 3D isometric illustration style with rich details and a futuristic aesthetic."
    },
    {
        "id": 917868934,
        "name": "agents-course",
        "description": "This repository contains the Hugging Face Agents Course. ",
        "url": "https://github.com/huggingface/agents-course",
        "language": "MDX",
        "stars": 20617,
        "forks": 1418,
        "created_at": "2025-01-16T19:50:22Z",
        "updated_at": "2025-07-09T10:09:14Z",
        "topics": [
            "agentic-ai",
            "agents",
            "course",
            "huggingface",
            "langchain",
            "llamaindex",
            "smolagents"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T10:55:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ba3c2c61585994c75281508f61765d9294a501be6a02bc446ed30b71048e6c07/huggingface/agents-course"
        ],
        "homepage": "",
        "readme_summary": "The agents-course repository provides a comprehensive educational resource for learning about and building AI agents. It covers fundamental concepts, introduces popular frameworks like smolagents, LangGraph, and LlamaIndex, and culminates in a final project involving agent creation, testing, and evaluation. The course emphasizes practical application and includes a leaderboard to showcase student results.",
        "key_features": [
            "Comprehensive course on AI agents",
            "Covers basics to advanced topics with a final project",
            "Hands-on experience with frameworks like smolagents, LangGraph, and LlamaIndex",
            "Focus on Agentic RAG",
            "Automated agent evaluation and leaderboard"
        ],
        "primary_use_case": "Learning and building AI agents using various frameworks.",
        "open_issues": 61,
        "cover_image_prompt": "Imagine a classroom where a friendly robot teacher guides students through a series of interactive simulations projected onto a large screen. The simulations show various AI agents, represented as small, animated characters, navigating different challenges. One simulation shows an agent using tools from 'smolagents', another uses 'LlamaIndex' to access information from a digital library, and a third uses 'LangGraph' to coordinate its actions. The classroom is bright and inviting, with subtle digital elements like glowing code snippets and data visualizations floating in the air. The repository name, 'agents-course', is subtly displayed on the screen. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 29420377,
        "name": "Awesome-CV",
        "description": ":page_facing_up: Awesome CV is LaTeX template for your outstanding job application",
        "url": "https://github.com/posquit0/Awesome-CV",
        "language": "TeX",
        "stars": 24802,
        "forks": 5012,
        "created_at": "2015-01-18T08:42:23Z",
        "updated_at": "2025-07-09T10:09:31Z",
        "topics": [
            "awesome",
            "coverletter",
            "cv",
            "latex",
            "latex-template",
            "overleaf",
            "pdf",
            "resume",
            "sharelatex",
            "tex"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-06-25T23:16:34Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/29420377/828160ad-6e8d-457e-adad-f2b759e67e2e"
        ],
        "homepage": "",
        "readme_summary": "Awesome CV is a LaTeX template designed to help users create outstanding CVs, résumés, and cover letters. It provides a customizable and clean template, inspired by Fancy CV, that allows users to easily generate professional-looking documents. The template is designed with semantic markup, making it easy to modify and adapt to individual needs.",
        "key_features": [
            "LaTeX template for CV, Résumé, and Cover Letter",
            "Easy to customize",
            "Clean, semantic markup"
        ],
        "primary_use_case": "Creating professional-looking CVs, résumés, and cover letters using LaTeX.",
        "open_issues": 108,
        "cover_image_prompt": "Imagine a skilled calligrapher meticulously crafting a resume using an elegant quill pen that magically transforms into a LaTeX editor on a vintage desk. The desk is adorned with open books on typography and document design. As the calligrapher writes, the text seamlessly converts into beautifully formatted sections, headings, and bullet points on a glowing screen displaying a PDF preview of the resume. Subtle code snippets float in the background, hinting at the LaTeX code powering the transformation. The scene is bathed in soft, warm light, creating a sense of timeless elegance and modern technology. The image should be in a detailed digital painting style with a focus on clarity and visual appeal."
    },
    {
        "id": 720209383,
        "name": "Cap",
        "description": "Open source Loom alternative. Beautiful, shareable screen recordings.",
        "url": "https://github.com/CapSoftware/Cap",
        "language": "TypeScript",
        "stars": 10242,
        "forks": 623,
        "created_at": "2023-11-17T20:31:46Z",
        "updated_at": "2025-07-09T09:50:06Z",
        "topics": [
            "app",
            "cap",
            "coss",
            "loom",
            "mac",
            "nextjs",
            "nextjs14",
            "open-source",
            "oss",
            "react",
            "record",
            "screen-capture",
            "screen-recorder",
            "screenshot",
            "solidjs",
            "tauri",
            "tauri-app",
            "typescript",
            "vite"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-09T09:49:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c667f746083018bcc1ecaec2be7fc62df046f84f4856dbf287972c067f9b049a/CapSoftware/Cap"
        ],
        "homepage": "https://cap.so",
        "readme_summary": "Cap is an open-source alternative to Loom that allows users to record their screens, edit the recordings, and share them quickly. It offers self-hosting options and desktop applications built with Tauri and SolidStart, alongside a web application built with Next.js. The project utilizes a monorepo architecture with shared component and utility libraries.",
        "key_features": [
            "Screen recording",
            "Video editing",
            "Video sharing",
            "Self-hosting option"
        ],
        "primary_use_case": "Record, edit, and share screen recordings as an open-source alternative to Loom.",
        "open_issues": 154,
        "cover_image_prompt": "A film director on set, holding a clapperboard that displays a screen recording in progress. The director is giving instructions to actors who represent different applications being recorded. A large monitor shows the final edited video, ready for sharing. Subtle UI elements and video editing timelines float around the scene, connecting the metaphor to screen recording software. The set is brightly lit with a modern, minimalist design. The image should be in a flat design style with clear iconography and vibrant colors."
    }
]