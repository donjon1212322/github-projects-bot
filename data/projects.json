[
    {
        "id": 918932603,
        "name": "UI-TARS-desktop",
        "description": "The Open-Source Multimodal AI Agent Stack: Connecting Cutting-Edge AI Models and Agent Infra",
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "language": "TypeScript",
        "stars": 18565,
        "forks": 1763,
        "created_at": "2025-01-19T09:04:43Z",
        "updated_at": "2025-09-09T10:11:09Z",
        "topics": [
            "agent",
            "agent-tars",
            "browser-use",
            "computer-use",
            "gui-agent",
            "gui-operator",
            "mcp",
            "mcp-server",
            "multimodal",
            "tars",
            "ui-tars",
            "vision",
            "vlm"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-09T06:29:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a45c109d46862504419977c732c6a64a014ab5c0ba6ae4197d1fca100356e4fd/bytedance/UI-TARS-desktop"
        ],
        "homepage": "https://agent-tars.com",
        "readme_summary": "The UI-TARS-desktop repository is a desktop application that provides a native GUI agent based on the UI-TARS model. It allows users to interact with and control computers and browsers remotely through a graphical interface, leveraging multimodal AI capabilities. The application ships with local and remote computer as well as browser operators.",
        "key_features": [
            "Native GUI Agent",
            "Local computer operator",
            "Remote computer operator",
            "Browser operator",
            "Remote Browser Operator"
        ],
        "primary_use_case": "Remote control and automation of computer and browser tasks through a GUI agent.",
        "open_issues": 249,
        "cover_image_prompt": "Imagine a friendly robot butler standing in a modern living room, remotely operating a computer and a browser displayed on floating screens. The robot uses its hands to interact with holographic projections of the UI-TARS interface, which controls the devices. The computer screen shows a document being edited, while the browser screen displays a website being navigated. Subtle code snippets and UI elements float around the robot, connecting the scene to software. The room is brightly lit with a clean, minimalist design. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1039587768,
        "name": "osaurus",
        "description": "Native, Apple Silicon–only local LLM server. Similar to Ollama, but built on Apple's MLX for maximum performance on M‑series chips. SwiftUI app + SwiftNIO server with OpenAI‑compatible endpoints.",
        "url": "https://github.com/dinoki-ai/osaurus",
        "language": "Swift",
        "stars": 1108,
        "forks": 36,
        "created_at": "2025-08-17T15:05:39Z",
        "updated_at": "2025-09-09T08:30:54Z",
        "topics": [
            "llm",
            "swift"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T18:15:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/feb53f72ab3170256f5226badc7376f63d1bb77f07950342191eb225a0e4e0f6/dinoki-ai/osaurus"
        ],
        "homepage": "https://dinoki.ai",
        "readme_summary": "Osaurus is a native, Apple Silicon-only local LLM server, similar to Ollama. It leverages Apple's MLX framework for optimized performance on M-series chips. It features a SwiftUI app and a SwiftNIO server with OpenAI and Ollama-compatible endpoints, enabling local LLM inference and experimentation on macOS.",
        "key_features": [
            "Native MLX runtime optimized for Apple Silicon",
            "OpenAI API compatible (/v1/models, /v1/chat/completions)",
            "Ollama API compatible (/chat endpoint with NDJSON streaming)",
            "Function/Tool calling (OpenAI-style)",
            "Fast token streaming (Server-Sent Events)",
            "Model manager UI (browse, download, manage MLX models)",
            "System resource monitor (real-time CPU and RAM usage)",
            "Self-contained SwiftUI app with embedded SwiftNIO HTTP server"
        ],
        "primary_use_case": "Running LLMs locally on Apple Silicon Macs for development, experimentation, and privacy-focused AI applications.",
        "open_issues": 9,
        "cover_image_prompt": "A skilled artisan meticulously crafting a miniature LLM server from silicon wafers, using Apple's logo as a blueprint. The server glows with a soft, internal light, symbolizing its optimized performance. Cables resembling data streams connect the server to a holographic display showing chat completions and system resource monitoring. The artisan works in a clean, modern workshop filled with subtle tech elements like code snippets and data visualizations. The scene is set in a bright, futuristic environment. The image should be in 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 10126031,
        "name": "mixxx",
        "description": "Mixxx is Free DJ software that gives you everything you need to perform live mixes.",
        "url": "https://github.com/mixxxdj/mixxx",
        "language": "C++",
        "stars": 5840,
        "forks": 1469,
        "created_at": "2013-05-17T15:14:38Z",
        "updated_at": "2025-09-09T07:59:14Z",
        "topics": [
            "audio",
            "dj",
            "hid",
            "linux",
            "mac",
            "midi",
            "music",
            "qt",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-06T07:23:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4bf92c7abd3dd35f38e6a9558be95c2e9184ad6e4820c042f09f81e3d4becad1/mixxxdj/mixxx"
        ],
        "homepage": "http://mixxx.org",
        "readme_summary": "Mixxx is a free, open-source DJ software that provides all the necessary tools for live DJ mixing. It supports various operating systems including GNU/Linux, Windows, and macOS, and allows users to perform mixes using digital music files.",
        "key_features": [
            "Live DJ mixing",
            "Cross-platform support (GNU/Linux, Windows, macOS)",
            "Bug tracker using Github Issues",
            "Build instructions for multiple operating systems",
            "Translation support for multiple languages"
        ],
        "primary_use_case": "Performing live DJ mixes using digital music files.",
        "open_issues": 2322,
        "cover_image_prompt": "A skilled DJ stands behind a high-tech mixing console, seamlessly blending musical notes represented as colorful, flowing streams. The console features glowing waveforms and subtle UI elements. The DJ's hands manipulate virtual turntables, transforming the streams into a harmonious mix that radiates outwards as a vibrant sound wave. The Mixxx logo is subtly displayed on the console. The scene is set in a modern, minimalist studio with dynamic lighting. The composition is focused and clean, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 957859485,
        "name": "cai",
        "description": "Cybersecurity AI (CAI), the framework for AI Security",
        "url": "https://github.com/aliasrobotics/cai",
        "language": "Python",
        "stars": 3703,
        "forks": 507,
        "created_at": "2025-03-31T08:56:05Z",
        "updated_at": "2025-09-09T09:58:52Z",
        "topics": [
            "artificial-intelligence",
            "cybersecurity",
            "framework",
            "generative-ai",
            "llm",
            "pentesting"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-09-06T14:24:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e8a10a57061cf5a4a0cb8513e6fc5e6e9da16a7057e358d711ffb9ed7a637129/aliasrobotics/cai"
        ],
        "homepage": "https://aliasrobotics.github.io/cai/",
        "readme_summary": "Cybersecurity AI (CAI) is an open-source Python framework designed to empower security professionals in building and deploying AI-powered offensive and defensive automation. It provides building blocks for creating specialized AI agents that assist with mitigation, vulnerability discovery, exploitation, and security assessment. It supports various AI models and built-in security tools.",
        "key_features": [
            "300+ AI Models (OpenAI, Anthropic, DeepSeek, Ollama, and more)",
            "Built-in Security Tools (reconnaissance, exploitation, privilege escalation)",
            "Battle-tested (HackTheBox CTFs, bug bounties, real-world security case studies)",
            "Agent-based Architecture (modular framework for specialized security tasks)",
            "Guardrails Protection (prompt injection and dangerous command execution defenses)",
            "Research-oriented (democratizing cybersecurity AI)"
        ],
        "primary_use_case": "Building and deploying AI-powered offensive and defensive automation for cybersecurity tasks such as vulnerability discovery, exploitation, and security assessment.",
        "open_issues": 27,
        "cover_image_prompt": "Imagine a skilled blacksmith forging a glowing sword labeled 'Cybersecurity AI'. The blacksmith, representing a security professional, is using an AI-powered forge that analyzes and strengthens the metal, which symbolizes digital defenses. Sparks of code and data visualizations fly around the forge, subtly connecting the scene to software. The finished sword is then tested against a digital shield, representing threat mitigation. The scene is set in a high-tech workshop with dramatic lighting. The composition is focused and clear, with a blue and orange color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1575307,
        "name": "pyopencl",
        "description": "OpenCL integration for Python, plus shiny features",
        "url": "https://github.com/inducer/pyopencl",
        "language": "Python",
        "stars": 1113,
        "forks": 248,
        "created_at": "2011-04-06T02:51:33Z",
        "updated_at": "2025-09-09T07:17:04Z",
        "topics": [
            "amd",
            "array",
            "cuda",
            "gpu",
            "heterogeneous-parallel-programming",
            "multidimensional-arrays",
            "nvidia",
            "opencl",
            "opengl",
            "parallel-algorithm",
            "parallel-computing",
            "performance",
            "prefix-sum",
            "pyopencl",
            "python",
            "reduction",
            "scientific-computing",
            "shared-memory",
            "sorting"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T03:33:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ecad0f2a5270c2761cc2135127efc1b10cca8b6f2892976fed8112a2ae1040d3/inducer/pyopencl"
        ],
        "homepage": "http://mathema.tician.de/software/pyopencl",
        "readme_summary": "PyOpenCL provides Python bindings for the OpenCL parallel computing framework, enabling access to GPUs and other parallel compute devices from Python. It offers features like automatic error checking, object lifetime management (RAII), and comprehensive access to the OpenCL API, aiming for both ease of use and performance.",
        "key_features": [
            "Object cleanup tied to object lifetime (RAII)",
            "Completeness of OpenCL API access",
            "Automatic error checking with Python exceptions",
            "C++ base layer for speed",
            "Comprehensive documentation and Wiki",
            "MIT license for broad use",
            "Support for Apple, AMD, and Nvidia OpenCL implementations"
        ],
        "primary_use_case": "Accessing and utilizing GPUs and other massively parallel compute devices from Python for tasks like scientific computing, array manipulation, and parallel algorithm implementation.",
        "open_issues": 67,
        "cover_image_prompt": "A skilled artisan chiseling a complex mosaic from individual tiles, each representing a different computational task. The artisan uses a set of specialized tools, glowing with digital energy, to precisely place each tile. A large screen behind the artisan displays a real-time visualization of the mosaic forming, showing the parallel processing in action. The scene is set in a bright, modern workshop with subtle UI elements projected onto the walls. The composition is clean and focused, highlighting the artisan's work. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 780278376,
        "name": "premier",
        "description": "A Flexible, Lightweight API-Gateway written in python that can be used as an ASGI middleware, app, or decorators.",
        "url": "https://github.com/raceychan/premier",
        "language": "Python",
        "stars": 51,
        "forks": 3,
        "created_at": "2024-04-01T06:02:56Z",
        "updated_at": "2025-09-09T07:28:37Z",
        "topics": [
            "api",
            "api-gateway",
            "asgi",
            "lihil",
            "python",
            "retry",
            "throttling",
            "timeout"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-25T11:13:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7b0917720263af1b2ca8e0358ce9d73a111c6cd17bb60d76d3630981f1722241/raceychan/premier"
        ],
        "homepage": "https://lihil.cc/premier",
        "readme_summary": "Premier is a Python API gateway that can be used as a standalone service, ASGI middleware, or with decorators. It provides features like caching, rate limiting, retry logic, timeouts, and a web dashboard for monitoring and configuration, aiming for simplicity and ease of integration with existing Python applications.",
        "key_features": [
            "API Gateway Features (caching, rate limiting, retry logic, timeout)",
            "Path-Based Policies",
            "Load Balancing & Circuit Breaker",
            "WebSocket Support",
            "Web Dashboard",
            "YAML Configuration",
            "Zero Code Changes",
            "Simple Setup",
            "Dual Mode Operation",
            "Python Native",
            "Lightweight",
            "Hot Reloadable"
        ],
        "primary_use_case": "Transforming Python web applications into full-featured API gateways.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled traffic controller orchestrating the flow of data packets through a bustling city intersection. The controller, equipped with glowing batons representing Premier's features, directs packets representing API requests. Some packets are diverted to a 'cache' station for quick access, while others are carefully metered by a 'rate limit' device. A 'retry' mechanism ensures no packet is lost, and a 'timeout' clock prevents delays. The city skyline features subtle UI elements and data visualizations. The scene is set at dusk with warm, inviting lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1013542777,
        "name": "subarr",
        "description": "\"Sonarr for YouTube\" - a tool to periodically check various YouTube playlists and take actions when new videos are posted",
        "url": "https://github.com/derekantrican/subarr",
        "language": "JavaScript",
        "stars": 275,
        "forks": 7,
        "created_at": "2025-07-04T04:41:39Z",
        "updated_at": "2025-09-09T08:17:06Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-08-26T18:27:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/aa87389cc73ec7d8fff87ac9b0b1b5af29e5d760fa17f7c421fd60a61a665e4c/derekantrican/subarr"
        ],
        "homepage": "",
        "readme_summary": "Subarr is a lightweight JavaScript application designed to monitor YouTube channels, playlists, and subscriptions for new video uploads. It allows users to define actions, such as sending webhooks or executing processes like downloading videos via yt-dlp, when new content is detected, providing a Sonarr-like experience for YouTube.",
        "key_features": [
            "YouTube channel/playlist/subscription monitoring",
            "Webhook integration (e.g., Discord)",
            "Process execution on new uploads (e.g., yt-dlp)",
            "Lightweight resource usage (suitable for Raspberry Pi)",
            "RSS subscription based"
        ],
        "primary_use_case": "Automating actions based on new YouTube uploads from specified channels or playlists.",
        "open_issues": 2,
        "cover_image_prompt": "A librarian meticulously organizing newly arrived video scrolls onto shelves labeled with YouTube channel icons. The librarian uses a magnifying glass to examine each scroll, then stamps it with a digital seal before placing it on the shelf. A small screen displays a feed of new video uploads. The scene is set in a grand, futuristic library with glowing shelves and soft lighting. Digital particles float around the scrolls, representing data. The repository name, 'Subarr,' is subtly etched onto the librarian's desk. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 393235957,
        "name": "risinglight",
        "description": "An educational OLAP database system.",
        "url": "https://github.com/risinglightdb/risinglight",
        "language": "Rust",
        "stars": 1771,
        "forks": 221,
        "created_at": "2021-08-06T03:26:03Z",
        "updated_at": "2025-09-08T18:13:54Z",
        "topics": [
            "analytics",
            "database",
            "education",
            "embedded-database",
            "olap",
            "rust",
            "sql"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-10T04:10:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ad89c7b8b51ee0327871b28f41c651b7f5e2216a552bcd13179c3d80aa54c1ef/risinglightdb/risinglight"
        ],
        "homepage": "",
        "readme_summary": "RisingLight is an educational OLAP database system written in Rust. It's designed for learning and experimentation with OLAP database concepts and is not intended for production use. The repository provides a platform for understanding database internals and query processing.",
        "key_features": [
            "OLAP database system",
            "Educational purpose",
            "Written in Rust",
            "Supports SQL queries",
            "Includes documentation for development and usage",
            "TPC-H query examples"
        ],
        "primary_use_case": "Education and learning about OLAP database systems.",
        "open_issues": 54,
        "cover_image_prompt": "Imagine a diligent student meticulously crafting a complex clockwork mechanism representing a database. The student carefully places gears (representing data) and levers (representing SQL queries) into the mechanism. As the student turns a crank (representing a user request), the clockwork springs to life, producing a clear, insightful report displayed on a small screen embedded in the machine. The scene is set in a brightly lit workshop filled with tools and blueprints. Subtle digital particles flow around the clockwork, highlighting the flow of data. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    }
]