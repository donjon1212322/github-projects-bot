[
    {
        "id": 910418754,
        "name": "nanobrowser",
        "description": "Open-source Chrome extension for AI-powered web automation. Run multi-agent workflows using your own LLM API key. Alternative to OpenAI Operator.",
        "url": "https://github.com/nanobrowser/nanobrowser",
        "language": "TypeScript",
        "stars": 91,
        "forks": 11,
        "created_at": "2024-12-31T08:11:27Z",
        "updated_at": "2025-03-07T10:06:08Z",
        "topics": [
            "agent",
            "ai",
            "ai-agents",
            "ai-tools",
            "artificial-intelligence",
            "automation",
            "browser-extension",
            "browser-use",
            "chrome-extension",
            "langchain",
            "llm",
            "multi-agent",
            "open-source",
            "openai",
            "operator",
            "web-automation"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T07:20:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e6809ddbbb5fb2bfaf2f74c00dd14adbcdbdeb5137f366b8b7afdccba32022ed/nanobrowser/nanobrowser"
        ],
        "homepage": "",
        "readme_summary": "Nanobrowser is an open-source Chrome extension that enables AI-driven web automation using a multi-agent system. It allows users to automate tasks, interact with web content through an interactive side panel, and connect to various LLM providers, all while maintaining privacy by running locally in the browser.",
        "key_features": [
            "Multi-agent System",
            "Interactive Side Panel",
            "Task Automation",
            "Follow-up Questions",
            "Conversation History",
            "Multiple LLM Support"
        ],
        "primary_use_case": "AI-powered web automation within a browser environment.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a team of tiny robot assistants meticulously navigating a vast, interconnected web of information, represented by glowing nodes and pathways. One robot, the 'Planner,' analyzes a complex blueprint projected onto a holographic screen, while another, the 'Navigator,' deftly clicks and scrolls through a website displayed on a nearby monitor. A 'Validator' robot double-checks the Navigator's work, ensuring accuracy. The scene is set in a miniature control room filled with subtle UI elements and data visualizations. The repository's name, 'Nanobrowser,' is subtly displayed on a control panel. The illustration should be in a clean, 3D isometric style with vibrant colors and clear details, conveying the concept of AI-powered web automation."
    },
    {
        "id": 5152285,
        "name": "okhttp",
        "description": "Squareâ€™s meticulous HTTP client for the JVM, Android, and GraalVM.",
        "url": "https://github.com/square/okhttp",
        "language": "Kotlin",
        "stars": 46188,
        "forks": 9194,
        "created_at": "2012-07-23T13:42:55Z",
        "updated_at": "2025-03-07T08:32:52Z",
        "topics": [
            "android",
            "graalvm",
            "java",
            "kotlin"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-04T12:37:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9872d8577c00adb78e22406d3b562288eca5f92dfe6ba430251035174802b3a5/square/okhttp"
        ],
        "homepage": "https://square.github.io/okhttp/",
        "readme_summary": "OkHttp is an HTTP client designed for efficiency and reliability. It supports modern HTTP features like HTTP/2 and TLS 1.3, and automatically handles connection pooling, GZIP compression, and response caching. OkHttp is designed to improve application performance and resilience when interacting with networked services.",
        "key_features": [
            "HTTP/2 support for socket sharing",
            "Connection pooling for reduced latency",
            "Transparent GZIP for download size reduction",
            "Response caching to avoid network requests",
            "Automatic recovery from connection problems",
            "Support for modern TLS features (TLS 1.3, ALPN, certificate pinning)"
        ],
        "primary_use_case": "An efficient HTTP client for JVM, Android, and GraalVM applications.",
        "open_issues": 145,
        "cover_image_prompt": "A skilled architect meticulously inspecting the blueprints of a towering skyscraper, ensuring each connection is flawless and secure. The architect uses a magnifying glass that reveals intricate network pathways within the building's structure, highlighting efficient data flow. Digital particles representing data packets stream seamlessly through the building's network. Small UI elements displaying HTTP requests and responses float subtly in the background. The scene is set in a modern architectural studio with soft, diffused lighting. The image should be in a clean, 3D isometric illustration style with a focus on clarity and precision."
    },
    {
        "id": 774468912,
        "name": "superfile",
        "description": "Pretty fancy and modern terminal file manager",
        "url": "https://github.com/yorukot/superfile",
        "language": "Go",
        "stars": 12896,
        "forks": 310,
        "created_at": "2024-03-19T15:49:52Z",
        "updated_at": "2025-03-07T08:50:30Z",
        "topics": [
            "bubbletea",
            "cli",
            "file-manager",
            "filemanager",
            "filesystem",
            "golang",
            "linux-app",
            "terminal-app",
            "terminal-based",
            "terminal-file-manager",
            "tui"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T04:05:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/774468912/db3881a5-05bd-4493-93b3-4da939b858ed"
        ],
        "homepage": "https://superfile.netlify.app",
        "readme_summary": "Superfile is a terminal-based file manager written in Go, designed to provide a modern and efficient way to navigate and manipulate files. It offers cross-platform support, customizable themes and hotkeys, and plugin capabilities, enhancing the user's file management experience directly within the terminal.",
        "key_features": [
            "Terminal-based file management",
            "Cross-platform support (Linux, MacOS, Windows)",
            "Customizable themes and hotkeys",
            "Plugin support"
        ],
        "primary_use_case": "Efficiently manage files and directories within a terminal environment.",
        "open_issues": 76,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously assembling intricate gears within a grand clock tower. Each gear represents a file, and the clock tower symbolizes the file system. The clockmaker, with focused precision, arranges and connects these gears, ensuring the smooth and efficient operation of the entire system. Subtle UI elements are integrated into the clock face, displaying file paths and directory structures. The scene is bathed in warm, golden light, creating a sense of order and precision. The image should be in a detailed 3D isometric illustration style with vibrant colors and sharp focus."
    }
]