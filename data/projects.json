[
    {
        "id": 922154820,
        "name": "StreamGrid",
        "description": "Your Streams, Your Layout, Your Way. StreamGrid lets you customize multi-stream layouts with drag-and-drop ease. Perfect for streamers, esports, and multi-angle viewing. Cross-platform support for Windows, macOS, and Linux.",
        "url": "https://github.com/LordKnish/StreamGrid",
        "language": "TypeScript",
        "stars": 96,
        "forks": 6,
        "created_at": "2025-01-25T13:18:26Z",
        "updated_at": "2025-09-04T10:06:36Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-09-02T14:29:45Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/922154820/f9b1786b-7f9c-483a-b167-1096cf5dd89b"
        ],
        "homepage": "",
        "readme_summary": "StreamGrid is a cross-platform application built with Electron, React, and TypeScript that allows users to create custom multi-stream layouts with drag-and-drop functionality. It supports various streaming platforms like YouTube, Twitch, and local files, offering features like chat integration and grid management for different viewing scenarios.",
        "key_features": [
            "Ultimate Layout Flexibility",
            "Intuitive Drag & Drop Controls",
            "Stream Management (add, remove, save, export/import)",
            "Grid Management System (save and switch layouts)",
            "Responsive Design",
            "Stream Platform Support (YouTube, Twitch, Local Files, RTSP, HLS, MPEG-DASH)",
            "Chat Integration (YouTube, Twitch)",
            "Performance Optimized",
            "Cross-Platform (Windows, macOS, Linux)"
        ],
        "primary_use_case": "Customizable multi-stream viewing for streamers, esports enthusiasts, and multi-angle monitoring.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a skilled architect designing a building made of video streams. The architect stands at a digital drafting table, arranging glowing screens of various sizes into a custom layout. Some screens show live gameplay, others display chat windows, and one shows a local file playing. The architect uses drag-and-drop gestures on a holographic interface. The building of streams is set against a backdrop of interconnected servers and data flows. Small UI elements and code snippets float around the scene. The composition is clean and focused with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details."
    },
    {
        "id": 1037246832,
        "name": "lazyssh",
        "description": "A terminal-based SSH manager inspired by lazydocker and k9s - Written in go",
        "url": "https://github.com/Adembc/lazyssh",
        "language": "Go",
        "stars": 696,
        "forks": 15,
        "created_at": "2025-08-13T09:33:09Z",
        "updated_at": "2025-09-04T10:05:33Z",
        "topics": [
            "cli",
            "go",
            "golang",
            "lazyssh",
            "scp",
            "ssh",
            "ssh-client",
            "tui",
            "tui-go"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-03T07:22:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5cc6db7da44ed8af2c02e81916cc6b30a90ca6096982a9e5be086be9a11fb513/Adembc/lazyssh"
        ],
        "homepage": "",
        "readme_summary": "Lazyssh is a terminal-based SSH manager that simplifies the process of connecting to and managing servers. It reads server configurations from the `~/.ssh/config` file and provides a TUI for easy navigation, connection, and file transfer, inspired by tools like lazydocker and k9s.",
        "key_features": [
            "Server Management (add, edit, delete, pin, ping)",
            "Quick Server Navigation (fuzzy search, tagging, sorting)",
            "Upcoming: File transfer UI",
            "Upcoming: Port forwarding UI",
            "Upcoming: Enhanced Key Management"
        ],
        "primary_use_case": "Simplifying SSH server management and connections through a terminal-based user interface.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a skilled navigator at the helm of a sleek, futuristic ship, effortlessly steering through a vast ocean of servers represented by glowing islands. The navigator uses a holographic console displaying server details and connection statuses, swiftly connecting to each island with a single command. The ship's sails are subtly adorned with the 'lazyssh' logo. Digital streams of data flow between the ship and the islands, symbolizing file transfers and port forwarding. The scene is set at twilight, with a vibrant purple and blue sky. The image should be in a 3D isometric illustration style with crisp details and a sense of effortless control."
    },
    {
        "id": 926709003,
        "name": "bytebot",
        "description": "Bytebot is a self-hosted AI desktop agent that automates computer tasks through natural language commands, operating within a containerized Linux desktop environment.",
        "url": "https://github.com/bytebot-ai/bytebot",
        "language": "TypeScript",
        "stars": 4250,
        "forks": 417,
        "created_at": "2025-02-03T18:18:50Z",
        "updated_at": "2025-09-04T10:07:30Z",
        "topics": [
            "agent",
            "agentic-ai",
            "agents",
            "ai",
            "ai-agents",
            "ai-tools",
            "anthropic",
            "automation",
            "bytebot",
            "computer-use",
            "computer-use-agent",
            "cua",
            "desktop",
            "desktop-automation",
            "docker",
            "gemini",
            "llm",
            "mcp",
            "openai"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-01T15:38:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/57a666640703c51aeb8472a0c65f756c3fffcb4ca9a7c044fcef50fd0cee2f79/bytebot-ai/bytebot"
        ],
        "homepage": "https://www.bytebot.ai/",
        "readme_summary": "Bytebot is a self-hosted AI desktop agent that automates computer tasks through natural language commands. It operates within a containerized Linux desktop environment, allowing it to use any application, process documents, and complete complex workflows, mimicking a virtual employee with its own computer.",
        "key_features": [
            "Natural Language Tasks",
            "File Uploads",
            "Live Desktop View",
            "Complete Task Autonomy",
            "Process Documents",
            "Use Real Applications"
        ],
        "primary_use_case": "Automating computer tasks through natural language commands using a virtual desktop environment.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a friendly robot sitting at a virtual desktop, diligently working on various tasks. The robot is shown reading a PDF document on one screen, using a web browser on another, and organizing files in a folder. Digital particles flow from a user's voice command (represented by sound waves) into the robot, which then translates them into actions on the desktop. Small UI elements showing task progress and system logs are subtly displayed around the robot. The scene is set in a clean, modern office environment with soft, ambient lighting. The image should be in a 3D isometric illustration style with bright, cheerful colors and a focus on clarity and simplicity."
    },
    {
        "id": 372536760,
        "name": "oceanbase",
        "description": "The Fastest Distributed Database for Transactional, Analytical, and  AI Workloads. Welcome to our community: https://discord.gg/74cF8vbNEs",
        "url": "https://github.com/oceanbase/oceanbase",
        "language": "C++",
        "stars": 9448,
        "forks": 1773,
        "created_at": "2021-05-31T14:36:17Z",
        "updated_at": "2025-09-04T09:32:05Z",
        "topics": [
            "analytics",
            "bigquery",
            "cloud-native",
            "cpp",
            "database",
            "distributed-database",
            "distributed-transactions",
            "hacktoberfest",
            "htap",
            "mysql",
            "mysql-compatibility",
            "mysql-database",
            "oceanbase",
            "olap",
            "oltp",
            "paxos",
            "scalable",
            "sql",
            "vector-database"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-03T06:01:10Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/372536760/72092c96-c375-46f1-85b0-89dc9769ec59"
        ],
        "homepage": "https://en.oceanbase.com",
        "readme_summary": "OceanBase is a distributed relational database developed by Ant Group, designed for high availability and linear scalability. It supports transactional, analytical, and AI workloads, featuring vector database functionality for efficient vector search and HTAP capabilities without additional cost.",
        "key_features": [
            "Vector Search",
            "Transparent Scalability",
            "Ultra-fast Performance",
            "Cost Efficiency",
            "Real-time Analytics"
        ],
        "primary_use_case": "Distributed relational database for transactional, analytical, and AI workloads.",
        "open_issues": 440,
        "cover_image_prompt": "A skilled architect overseeing the construction of a vast, interconnected city built on a foundation of glowing data streams. The architect uses a holographic interface to seamlessly scale the city, adding new districts and infrastructure with ease. Some districts are dedicated to processing transactions (represented by flowing currency), others to analyzing data (represented by vibrant charts), and others to AI tasks (represented by neural networks). Small screens display database metrics and code snippets. The scene is set in a futuristic control room with bright, optimistic lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 777912773,
        "name": "slatedb",
        "description": "A cloud native embedded storage engine built on object storage.",
        "url": "https://github.com/slatedb/slatedb",
        "language": "Rust",
        "stars": 2246,
        "forks": 134,
        "created_at": "2024-03-26T18:28:31Z",
        "updated_at": "2025-09-04T08:43:17Z",
        "topics": [
            "database",
            "embedded-database",
            "lsm-tree",
            "object-storage",
            "rocksdb",
            "rust",
            "storage-engine"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-03T22:26:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e880b45188610b29c71d1b1c70d123733345cbca17b9b595125e3bd23d1fbf26/slatedb/slatedb"
        ],
        "homepage": "https://slatedb.io",
        "readme_summary": "SlateDB is an embedded storage engine built on a log-structured merge-tree (LSM-tree) architecture. It differentiates itself by writing data to object storage (like S3, GCS, etc.) instead of local disk, providing bottomless storage, high durability, and easy replication, trading off latency and API costs.",
        "key_features": [
            "Cloud-native embedded storage",
            "LSM-tree architecture",
            "Object storage backend (S3, GCS, ABS, MinIO, Tigris)",
            "Bottomless storage capacity",
            "High durability",
            "Easy replication",
            "Write batching to mitigate API costs",
            "Configurable flush interval",
            "Asynchronous put operations with durability options",
            "LSM-tree caching techniques (in-memory block caches, compression, bloom filters, local SST disk caches)"
        ],
        "primary_use_case": "Providing an embedded key-value store with the scalability and durability benefits of object storage.",
        "open_issues": 99,
        "cover_image_prompt": "A diligent librarian carefully archiving books (data) onto towering cloud-shaped shelves. The librarian uses a special cart that batches multiple books together before placing them on the shelves. A faint glow emanates from the shelves, indicating durability and accessibility. Small UI elements float nearby, displaying storage metrics and API costs. The repository name, 'SlateDB,' is subtly etched onto the librarian's cart. The scene is set in a bright, airy library with a modern design. The image should be in a 3D isometric illustration style with clean lines and a vibrant color scheme."
    },
    {
        "id": 535309783,
        "name": "speedtest-tracker",
        "description": "Speedtest Tracker is a self-hosted application that monitors the performance and uptime of your internet connection.",
        "url": "https://github.com/alexjustesen/speedtest-tracker",
        "language": "PHP",
        "stars": 4230,
        "forks": 153,
        "created_at": "2022-09-11T13:39:20Z",
        "updated_at": "2025-09-04T07:58:20Z",
        "topics": [
            "dashboard",
            "docker",
            "hacktoberfest",
            "laravel",
            "speedtest",
            "speedtest-cli",
            "tracker",
            "tracking"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-09-02T12:31:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1d496d340ab3aacf01a331bb0dcf4e08916b1fbd451d5128628b469d8bf252ca/alexjustesen/speedtest-tracker"
        ],
        "homepage": "https://speedtest-tracker.dev/",
        "readme_summary": "Speedtest Tracker is a self-hosted application designed to monitor the performance and uptime of your internet connection. It allows users to schedule regular speed tests, capture detailed metrics like download/upload speeds and ping, and track historical data to identify trends and issues.",
        "key_features": [
            "Automated Tests",
            "Detailed Metrics",
            "Historical Data",
            "Notifications"
        ],
        "primary_use_case": "Monitoring internet connection performance and uptime.",
        "open_issues": 41,
        "cover_image_prompt": "A diligent gardener tending to a network of fiber optic cables growing like vines in a lush garden. The gardener uses a tablet displaying speed test results to monitor the health of each vine, pruning slow connections and nurturing fast ones. Small UI elements showing download/upload speeds appear as glowing leaves on the vines. The repository name is subtly etched into a garden stone. The scene is set in a vibrant, futuristic garden with soft, diffused lighting. The image should be in a 3D isometric illustration style with rich details and a harmonious color scheme."
    }
]