[
    {
        "id": 937727966,
        "name": "VisualCrypto",
        "description": "A collection of Visual Cryptography and Random Grid schemes",
        "url": "https://github.com/coduri/VisualCrypto",
        "language": "Python",
        "stars": 43,
        "forks": 2,
        "created_at": "2025-02-23T18:55:53Z",
        "updated_at": "2025-03-11T08:39:47Z",
        "topics": [
            "image-encryption-algorithm",
            "random-grids",
            "secret-sharing",
            "secret-sharing-scheme",
            "visual-cryptographic-schemes",
            "visual-cryptography",
            "visual-secret-sharing",
            "visualcryptography"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-02-26T22:40:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b15b6e6cba8d1be95add326ed8852132fed14478ba09fb462bc0ed0bd855f34e/coduri/VisualCrypto"
        ],
        "homepage": "https://coduri.github.io/VisualCrypto/",
        "readme_summary": "VisualCrypto is a Python toolkit for image-based secret sharing using Visual Cryptography and Random Grid techniques. It allows splitting a secret image into multiple shares, which appear as random noise individually but reveal the original image when combined. The toolkit supports both web-based and script-based execution and is designed to be easily extensible with new cryptographic schemes.",
        "key_features": [
            "Support for Visual Cryptography (VC) & Random Grid (RG) techniques",
            "Web-based & script-based execution",
            "Easily extendable to incorporate new cryptographic schemes",
            "Reference-based implementation"
        ],
        "primary_use_case": "Image-based secret sharing using Visual Secret Sharing (VSS) schemes, primarily (2,2)-VSS, where a secret image is split into two shares.",
        "open_issues": 1,
        "cover_image_prompt": "An artist meticulously piecing together a shattered mosaic, revealing a hidden image beneath the fragments. The artist carefully aligns colorful shards, each seemingly random, onto a dark canvas. As the mosaic nears completion, a vibrant picture emerges, showcasing the power of collaboration and shared secrets. Subtle digital elements, like glowing code fragments and UI interfaces, float around the artist, connecting the artistic process to software. The scene is set in a brightly lit studio with a focus on the artist's hands and the emerging image. The image should be in a digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 935680941,
        "name": "wallendar",
        "description": "Wallendar: Turn your wallpaper into a beautiful calendar.",
        "url": "https://github.com/felixZmn/wallendar",
        "language": "Python",
        "stars": 23,
        "forks": 1,
        "created_at": "2025-02-19T20:57:04Z",
        "updated_at": "2025-03-10T13:54:54Z",
        "topics": [
            "calendar",
            "pillow",
            "python",
            "wallpaper"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-02-19T21:14:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cf7d20c2397c734feb9d5b4c2e552fe2e36ef59ba026da485deb234a7857b77e/felixZmn/wallendar"
        ],
        "homepage": "",
        "readme_summary": "Wallendar transforms your desktop wallpaper into a visually appealing and functional calendar. It offers easy setup, smart layout adjustments to fit your wallpaper, and extensive customization options for font, color, and positioning. Users can highlight specific dates and personalize the calendar to their preferences.",
        "key_features": [
            "Easy to use",
            "Smart layout",
            "Customizable"
        ],
        "primary_use_case": "Turn a wallpaper into a customizable calendar.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously crafting a wall calendar from a blank digital canvas. The artisan uses brushes that paint with code, transforming the canvas into a beautiful, personalized calendar wallpaper. A UI element displaying customization options like font and color floats nearby. The scene is set in a bright, modern studio filled with natural light. Subtle digital particles swirl around the canvas, representing the software's ability to adapt to different wallpaper sizes. The repository's name, 'Wallendar,' is subtly etched into the artisan's workbench. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 234739976,
        "name": "medusa",
        "description": "The world's most flexible commerce platform.",
        "url": "https://github.com/medusajs/medusa",
        "language": "TypeScript",
        "stars": 28010,
        "forks": 3011,
        "created_at": "2020-01-18T13:39:04Z",
        "updated_at": "2025-03-11T09:53:15Z",
        "topics": [
            "commerce",
            "e-commerce",
            "ecommerce",
            "framework",
            "javascript",
            "medusa",
            "nodejs",
            "react",
            "typescript"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T09:21:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/234739976/3c61a11d-3161-4a40-955a-c99e1b7a2094"
        ],
        "homepage": "https://medusajs.com",
        "readme_summary": "Medusa is a flexible commerce platform that provides building blocks for creating custom ecommerce applications. It offers a modular architecture and open-source commerce modules, allowing developers to build advanced B2B or DTC ecommerce stores, marketplaces, PoS systems, or any product that needs foundational commerce primitives.",
        "key_features": [
            "Customizable commerce applications",
            "Modular architecture",
            "Open-source commerce modules",
            "Building blocks for digital commerce"
        ],
        "primary_use_case": "Building custom commerce applications, including B2B, DTC ecommerce stores, marketplaces, and PoS systems.",
        "open_issues": 102,
        "cover_image_prompt": "Imagine a skilled architect meticulously assembling modular building blocks to construct a grand, adaptable marketplace. Each block represents a commerce module, seamlessly fitting together to form a robust and flexible e-commerce platform. Digital blueprints float around the architect, displaying subtle code snippets and UI elements. The marketplace bustles with activity, showcasing diverse products and happy customers. The scene is bathed in warm, inviting light, symbolizing ease of use and customization. The composition is clean and focused, emphasizing the modularity and scalability of the platform. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 438803890,
        "name": "Sunshine",
        "description": "Self-hosted game stream host for Moonlight.",
        "url": "https://github.com/LizardByte/Sunshine",
        "language": "C++",
        "stars": 23351,
        "forks": 1106,
        "created_at": "2021-12-15T23:38:57Z",
        "updated_at": "2025-03-11T08:09:53Z",
        "topics": [
            "cpp",
            "docker",
            "flathub-pkg",
            "game-stream",
            "game-streaming",
            "game-streaming-server",
            "geforce-experience",
            "homebrew-pkg",
            "maintainer-wanted",
            "moonlight",
            "pacman-pkg",
            "python",
            "remote-desktop",
            "replicator-custom-issues",
            "replicator-release-notifications",
            "rtd",
            "winget-pkg"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-10T12:32:50Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/438803890/cee99a24-0230-411e-b444-3e261c8b01d3"
        ],
        "homepage": "http://app.lizardbyte.dev/Sunshine/",
        "readme_summary": "Sunshine is a self-hosted game stream host designed for use with Moonlight. It allows users to stream games from their own machines to remote devices. The project supports various platforms, including Docker, Winget, Homebrew, and Flathub, making it accessible across different operating systems.",
        "key_features": [
            "Self-hosted game stream host",
            "Compatible with Moonlight",
            "Supports multiple platforms (Docker, Winget, Homebrew, Pacman, Flathub)"
        ],
        "primary_use_case": "Self-hosting game streams for remote access via Moonlight.",
        "open_issues": 91,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra, but instead of musicians, the orchestra is composed of various gaming consoles and PCs. The conductor, representing Sunshine, stands on a digital platform, seamlessly directing the flow of game streams to a large screen displaying Moonlight's interface. Each instrument (console/PC) glows with a unique color, indicating active streaming. Subtle UI elements float around the conductor, displaying connection status and stream quality. The scene is set in a futuristic concert hall with dynamic lighting. The image should be in a vibrant, 3D isometric illustration style with clear details and a focus on the conductor's control."
    },
    {
        "id": 423339082,
        "name": "nwinfo",
        "description": "Hardware information utility for Windows",
        "url": "https://github.com/a1ive/nwinfo",
        "language": "C",
        "stars": 254,
        "forks": 21,
        "created_at": "2021-11-01T04:39:45Z",
        "updated_at": "2025-03-11T07:00:05Z",
        "topics": [
            "acpi",
            "cpu",
            "hardware",
            "pci",
            "smbios",
            "usb",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T13:06:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/08f97fc4aeb21207a24b75419fe1651987a90b339377e2ecd56666507948c4ad/a1ive/nwinfo"
        ],
        "homepage": "https://a1ive.github.io/nwinfo/",
        "readme_summary": "NWinfo is a Win32 program designed to gather comprehensive system and hardware information. It provides detailed insights into components like SMBIOS, CPUID, S.M.A.R.T., PCI, and EDID, and supports exporting data in various formats such as JSON, YAML, and LUA. NWinfo directly accesses hardware information without relying on WMI and maintains compatibility with older Windows versions like XP.",
        "key_features": [
            "Obtain detailed information about SMBIOS, CPUID, S.M.A.R.T., PCI, EDID, and more.",
            "Support exporting in JSON, YAML, and LUA table formats.",
            "Gathers information directly without relying on WMI.",
            "Compatible with Windows XP."
        ],
        "primary_use_case": "Obtaining system and hardware information on Windows systems.",
        "open_issues": 2,
        "cover_image_prompt": "A detective in a dimly lit office, surrounded by stacks of files representing different hardware components. The detective uses a magnifying glass (representing NWinfo) to examine a complex motherboard, revealing hidden details and system information. Digital code snippets float around the detective, subtly connecting the scene to software. A screen in the background displays a simplified system overview. The scene is set in a film noir style with dramatic lighting and a blue and gray color scheme. The image should be in a digital painting style with clear outlines and detailed textures."
    },
    {
        "id": 33315835,
        "name": "pixiewps",
        "description": "An offline Wi-Fi Protected Setup brute-force utility",
        "url": "https://github.com/wiire-a/pixiewps",
        "language": "C",
        "stars": 1596,
        "forks": 314,
        "created_at": "2015-04-02T15:18:03Z",
        "updated_at": "2025-03-11T05:59:27Z",
        "topics": [
            "hacking-tool",
            "wifi-security"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2020-11-08T12:58:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dd9170e49088bded9433ce300fb514bcafb309cf8dc844fdaf28cae56989b25c/wiire-a/pixiewps"
        ],
        "homepage": "",
        "readme_summary": "Pixiewps is a C-based utility designed for offline brute-forcing WPS PINs, exploiting vulnerabilities like the Pixie-Dust attack. It aims to quickly recover WPS PINs and, in some cases, WPA-PSK keys from vulnerable devices, serving as an educational tool for understanding Wi-Fi security weaknesses.",
        "key_features": [
            "Offline WPS PIN brute-forcing",
            "Exploits low entropy in WPS implementations (Pixie-Dust attack)",
            "Fast PIN recovery (seconds or minutes if vulnerable)",
            "WPA-PSK recovery from passive captures (limited device support)",
            "Multi-threading support"
        ],
        "primary_use_case": "Educational tool for demonstrating and testing WPS vulnerabilities.",
        "open_issues": 9,
        "cover_image_prompt": "A locksmith, representing Pixiewps, effortlessly unlocks a Wi-Fi router secured with a weak, child-like lock, while a frustrated hacker struggles with a complex, modern lock on another router. The locksmith uses a simple, almost magical tool that bypasses the weak lock instantly. Digital particles representing data flow around the locksmith and the unlocked router. A small screen in the background displays the Pixiewps logo and a simplified command-line interface. The scene is brightly lit and set in a clean, minimalist workshop. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 888701643,
        "name": "testzeus-hercules",
        "description": "Hercules is the world’s first open-source testing agent, enabling UI, API, Security, Accessibility, and Visual validations – all without code or maintenance. Automate testing effortlessly and let Hercules handle the heavy lifting! ⚡",
        "url": "https://github.com/test-zeus-ai/testzeus-hercules",
        "language": "Python",
        "stars": 445,
        "forks": 58,
        "created_at": "2024-11-14T21:19:10Z",
        "updated_at": "2025-03-11T07:14:29Z",
        "topics": [
            "agent",
            "agentic-ai",
            "agents",
            "ai",
            "autogen",
            "automation",
            "browser",
            "end-to-end-testing",
            "hercules",
            "large-action-model",
            "playwright",
            "qa-automation",
            "rpa",
            "software-testing",
            "test-automation",
            "testing",
            "testing-tools",
            "testzeus"
        ],
        "quality_score": 1.2000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-03-10T15:42:45Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/888701643/6a207d9f-f373-4407-96a2-7e3155827066"
        ],
        "homepage": "https://testzeus.com/hercules",
        "readme_summary": "Hercules is an open-source testing agent that enables codeless automation of UI, API, Security, Accessibility, and Visual validations. It allows users to write tests in simple Gherkin steps, which are then automatically executed, making end-to-end testing more accessible and efficient. Hercules aims to democratize test automation and empower teams to deliver better software.",
        "key_features": [
            "Open-source testing agent",
            "UI testing",
            "API testing",
            "Security testing",
            "Accessibility testing",
            "Visual validations",
            "Codeless test automation",
            "End-to-end testing",
            "Gherkin support"
        ],
        "primary_use_case": "Automating software testing across various domains (UI, API, Security, Accessibility, Visual) without requiring coding skills.",
        "open_issues": 12,
        "cover_image_prompt": "A skilled architect overseeing a team of robot builders constructing a magnificent skyscraper. The architect holds a blueprint written in plain English, which the robots interpret to assemble the building's components (UI, API, security, accessibility, visual elements). The skyscraper represents a fully tested and functional software application. Digital particles flow from the blueprint to the robots, guiding their actions. Small screens display Gherkin feature files and automated test results. The scene is set in a bright, futuristic construction site with a blue and green color scheme. The image should be in a 3D isometric illustration style with clear details and vibrant colors, subtly incorporating the 'Hercules' logo on the skyscraper's facade."
    }
]