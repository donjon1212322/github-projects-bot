[
    {
        "id": 964281415,
        "name": "virtualbox-web-panel",
        "description": "VirtualBox Web Control Panel is a lightweight HTTP server script providing a simple web interface to list, control, and interact with VirtualBox virtual machines. Manage VMs easily by starting, stopping, saving state, sending keystrokes, and viewing live screenshots right from your browser.",
        "url": "https://github.com/nv1t/virtualbox-web-panel",
        "language": "Python",
        "stars": 5,
        "forks": 0,
        "created_at": "2025-04-11T01:06:09Z",
        "updated_at": "2025-05-02T08:49:55Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-04-15T08:52:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/603fc255a38d4b0d413ea61d534890b3d5c165b9835b9380a10d9112c3ef49fc/nv1t/virtualbox-web-panel"
        ],
        "homepage": null,
        "readme_summary": "The VirtualBox Web Control Panel provides a web interface to manage VirtualBox virtual machines. It allows users to list, control, and interact with VMs by starting, stopping, saving state, sending keystrokes, and viewing live screenshots. The panel is designed to be lightweight and easy to deploy, requiring only Python 3's standard libraries and `VBoxManage`.",
        "key_features": [
            "List VMs",
            "Control Actions (start, stop, save state)",
            "Keystroke Injection",
            "Screenshot Capture",
            "VM Status Indicator",
            "VM Details Sidebar",
            "Responsive Web Interface",
            "Notification System"
        ],
        "primary_use_case": "Managing VirtualBox virtual machines through a web browser.",
        "open_issues": 0,
        "cover_image_prompt": "A conductor stands before a complex orchestra of virtual machines, each represented by a musical instrument. The conductor uses a web-based control panel as their sheet music, directing the VMs to start, stop, and play specific sequences. A large screen behind the orchestra displays a live screenshot of one of the VMs, while notifications pop up on the conductor's tablet, showing the status of each machine. The scene is set in a modern, soundproofed studio with soft, ambient lighting. Small UI elements and code snippets float around the orchestra, subtly connecting the metaphor to software. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 908589694,
        "name": "meeting-minutes",
        "description": "A free and open source, self hosted Ai based live meeting note taker and minutes summary generator that can completely run in your Local device (Mac OS and windows OS Support added. Working on adding linux support soon) https://meetily.zackriya.com/",
        "url": "https://github.com/Zackriya-Solutions/meeting-minutes",
        "language": "C++",
        "stars": 5025,
        "forks": 347,
        "created_at": "2024-12-26T12:52:14Z",
        "updated_at": "2025-05-02T09:11:11Z",
        "topics": [
            "ai",
            "automation",
            "cross-platform",
            "linux",
            "live",
            "llm",
            "mac",
            "macos-app",
            "meeting-minutes",
            "meeting-notes",
            "recorder",
            "rust",
            "transcript",
            "transcription",
            "whisper",
            "whisper-cpp",
            "windows"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-05-01T16:48:29Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/908589694/61ad79d3-2d37-4b62-8cb6-f437785a0d17"
        ],
        "homepage": "https://meetily.zackriya.com",
        "readme_summary": "The meeting-minutes repository provides an AI-powered meeting assistant that captures live audio, transcribes it in real-time, and generates summaries. It's designed to run locally on user devices, ensuring privacy. The application supports macOS and Windows, with Linux support planned, and aims to automate meeting note-taking and summarization.",
        "key_features": [
            "Live meeting audio capture",
            "Real-time transcription",
            "AI-powered meeting summaries",
            "Local device processing for privacy",
            "Cross-platform support (macOS, Windows, Linux - in development)"
        ],
        "primary_use_case": "Automatically capturing, transcribing, and summarizing meeting content locally, ensuring user privacy and eliminating the need for external servers.",
        "open_issues": 28,
        "cover_image_prompt": "A skilled scribe in a bustling, modern office meticulously capturing spoken words from a holographic meeting table with a magical quill. The quill transforms the live audio into neatly organized notes and concise summaries that appear on a nearby digital display. Subtle UI elements float around the table, showing real-time transcription and sentiment analysis. The scene is bathed in soft, natural light, creating a productive and collaborative atmosphere. The repository name, 'Meetily,' is subtly etched onto the scribe's desk. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 481398639,
        "name": "caps-log",
        "description": "A small TUI journaling tool. ðŸ“–",
        "url": "https://github.com/NikolaDucak/caps-log",
        "language": "C++",
        "stars": 232,
        "forks": 7,
        "created_at": "2022-04-13T23:01:21Z",
        "updated_at": "2025-05-02T10:05:17Z",
        "topics": [
            "cmake",
            "cpp",
            "cpp17",
            "ftxui",
            "journaling",
            "terminal",
            "terminal-app",
            "terminal-based",
            "terminal-ui",
            "tui"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-03-28T14:39:43Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/481398639/83241f34-7d7d-4024-b922-2e4246aaa2e7"
        ],
        "homepage": "",
        "readme_summary": "Caps-Log is a terminal-based journaling tool that stores entries as Markdown files. It extracts sections and tags to create interactive menus, allowing users to visualize their activities on a calendar. The tool also supports integration with external editors, remote storage via Git, and AES encryption for logs.",
        "key_features": [
            "Terminal-based journaling",
            "Markdown log storage",
            "Section and tag extraction for menu display",
            "Calendar highlighting based on tag/section selection",
            "Integration with `$EDITOR` for log editing",
            "Remote storage via Git repository",
            "AES encryption for logs"
        ],
        "primary_use_case": "Personal journaling with a focus on tracking habits and activities through tag and section-based organization and visualization.",
        "open_issues": 11,
        "cover_image_prompt": "An organized captain meticulously writing in their logbook aboard a futuristic spaceship. The logbook glows subtly, displaying a calendar interface with highlighted dates corresponding to tagged entries. Around the captain, holographic projections show sections and tags extracted from the log, visualized as constellations. A terminal screen in the background displays a simplified TUI, mirroring the logbook's interface. The scene is set in a clean, well-lit bridge with a large viewport showing stars. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 925270205,
        "name": "cua",
        "description": "c/ua is the Docker Container for Computer-Use AI Agents.",
        "url": "https://github.com/trycua/cua",
        "language": "Python",
        "stars": 5350,
        "forks": 209,
        "created_at": "2025-01-31T15:02:49Z",
        "updated_at": "2025-05-02T10:00:32Z",
        "topics": [
            "agent",
            "ai-agent",
            "apple",
            "computer-use",
            "cua",
            "lume",
            "macos",
            "manus",
            "operator",
            "swift",
            "virtualization",
            "virtualization-framework"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-02T03:33:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/73cee08ceb87150a36317b775218793ec4cfd5052045ecbf399826811e60c063/trycua/cua"
        ],
        "homepage": "https://trycua.com",
        "readme_summary": "Cua is a framework that provides high-performance virtualization and a computer-use interface for AI agents. It allows AI systems to observe and control virtual macOS or Linux environments on Apple Silicon with near-native performance. This enables secure, reproducible, and flexible AI agent workflows with built-in LLM integration.",
        "key_features": [
            "High-performance virtualization using Apple's Virtualization.Framework",
            "Framework for AI agents to observe and control virtual environments",
            "Near-native performance on Apple Silicon (up to 97% of native speed)",
            "Support for macOS and Linux environments",
            "Built-in support for connecting to various LLM providers"
        ],
        "primary_use_case": "Enabling AI agents to control full operating systems within high-performance, lightweight virtual containers for tasks like interacting with applications, browsing the web, and writing code.",
        "open_issues": 39,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of computers within glowing, transparent containers. Each container represents a virtualized environment, humming with activity as AI agents learn and execute tasks. The conductor, with a baton emitting digital particles, directs the flow of information between these virtual worlds, creating a harmonious blend of AI and computing power. Subtle UI elements and code snippets float in the background, connecting the metaphor to software. The scene is bathed in soft, ethereal light, creating a sense of innovation and control. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 931420518,
        "name": "hector-rag",
        "description": "Hector RAG is a modular RAG framework built on PostgreSQL, offering advanced retrieval methods and fusion techniques for AI-driven applications.",
        "url": "https://github.com/P3-AI-Network/hector-rag",
        "language": "Python",
        "stars": 52,
        "forks": 3,
        "created_at": "2025-02-12T08:49:18Z",
        "updated_at": "2025-05-02T05:42:10Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-02-24T22:07:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bd688073f079988406a36d00f77fb91fecfa870118ced919c8d64622f391f5c7/P3-AI-Network/hector-rag"
        ],
        "homepage": "",
        "readme_summary": "Hector RAG is a modular RAG framework built on PostgreSQL, offering advanced retrieval methods and fusion techniques. It enables developers to create sophisticated RAG pipelines for AI applications, leveraging the efficiency of PostgreSQL for vector storage and retrieval. The framework supports multiple retrieval methods and Reciprocal Rank Fusion for enhanced accuracy.",
        "key_features": [
            "Multiple RAG retrieval methods (Similarity Search, Keyword Search, Graph Retrieval, KAG)",
            "Reciprocal Rank Fusion (RRF) for combining multiple retrieval methods",
            "Built on PostgreSQL vector database",
            "Modular architecture",
            "Advanced RAG pipeline creation capabilities"
        ],
        "primary_use_case": "Building Retrieval Augmented Generation (RAG) pipelines for AI-driven applications using PostgreSQL as a vector database.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a skilled librarian in a vast, glowing library, carefully selecting books (representing data sources) and combining their knowledge to answer a complex question presented on a holographic display. The librarian uses a special lens to analyze the books, revealing hidden connections and insights. The library shelves are lined with glowing data streams, and the air is filled with particles of knowledge. The repository's name, 'Hector RAG,' is subtly inscribed on the librarian's desk. The scene is bathed in soft, ethereal light, creating a sense of wisdom and discovery. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 254202848,
        "name": "florisboard",
        "description": "An open-source keyboard for Android which respects your privacy. Currently in early-beta.",
        "url": "https://github.com/florisboard/florisboard",
        "language": "Kotlin",
        "stars": 6837,
        "forks": 443,
        "created_at": "2020-04-08T21:18:23Z",
        "updated_at": "2025-05-02T09:32:56Z",
        "topics": [
            "android",
            "input-method",
            "keyboard",
            "kotlin",
            "kotlin-android"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T23:26:12Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/254202848/81799060-9b89-4aa6-b68b-54a12ab3b3ff"
        ],
        "homepage": "https://florisboard.org",
        "readme_summary": "FlorisBoard is an open-source keyboard for Android that prioritizes user privacy and customization. It offers features like a clipboard manager, advanced theming, extension support, and an emoji keyboard. The project is currently in early-beta and aims to be modern and user-friendly.",
        "key_features": [
            "Integrated clipboard manager / history",
            "Advanced theming support and customization",
            "Integrated extension support",
            "Emoji keyboard / history / suggestions"
        ],
        "primary_use_case": "A customizable, privacy-focused keyboard for Android devices.",
        "open_issues": 497,
        "cover_image_prompt": "A skilled artisan meticulously crafting a keyboard from raw materials, each key representing a different language and culture. The artisan carefully shapes and polishes each key, ensuring it fits perfectly into the keyboard's frame. Digital particles subtly flow around the artisan's hands, representing the open-source nature of the project. A blueprint on the workbench shows the FlorisBoard logo integrated into the keyboard design. The scene is set in a bright, modern workshop with natural lighting. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 932312618,
        "name": "faviconic",
        "description": "what if you could run games in your tab bar?",
        "url": "https://github.com/nolenroyalty/faviconic",
        "language": "JavaScript",
        "stars": 175,
        "forks": 7,
        "created_at": "2025-02-13T17:57:31Z",
        "updated_at": "2025-04-30T12:48:54Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-02-20T19:12:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a3b0fa9aad090eb21739743d014d9176c797091b9b2f6ec8e12e93ec432852ae/nolenroyalty/faviconic"
        ],
        "homepage": "",
        "readme_summary": "Faviconic is a JavaScript tool that allows users to run simple games or animations inside a browser tab's favicon. It leverages AppleScript to open multiple Chrome windows and requires a local Python HTTP server to serve the game content. The primary use case is to display simple, visually engaging content within the limited space of a favicon.",
        "key_features": [
            "Runs games inside browser tab favicons",
            "Uses JavaScript",
            "Requires a local Python HTTP server to run",
            "Uses AppleScript to open multiple Chrome windows"
        ],
        "primary_use_case": "Running simple games or animations within a browser tab's favicon.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a playful hamster running on a wheel inside a browser tab, its tiny paws blurring as it generates a simple animation in the tab's favicon. The hamster is surrounded by miniature UI elements and code snippets, subtly connecting its actions to software. The scene is set in a brightly lit, minimalist workspace with a clean, focused composition. The repository name, 'faviconic,' is subtly displayed on the hamster's wheel. The image should be in a flat design style with clear iconography and vibrant colors, creating a whimsical and easily understandable visual metaphor."
    }
]