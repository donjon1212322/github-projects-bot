[
    {
        "id": 996430110,
        "name": "blurr",
        "description": "AI agents can now use real Android, just like a human.",
        "url": "https://github.com/Ayush0Chaudhary/blurr",
        "language": "Kotlin",
        "stars": 88,
        "forks": 13,
        "created_at": "2025-06-05T00:10:27Z",
        "updated_at": "2025-08-23T10:08:24Z",
        "topics": [
            "accessibility",
            "agent",
            "ai-assistant",
            "ai-automation",
            "app",
            "automation",
            "browser-use",
            "mobile-use",
            "operator"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-08-23T05:08:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5190a5a6a34545466905a7f516bf4ad40f0c6639bf22f3104794c4e41434e116/Ayush0Chaudhary/blurr"
        ],
        "homepage": "https://panda-delta-lemon.vercel.app/",
        "readme_summary": "Panda is an on-device AI agent for Android that automates phone tasks through natural language commands. It utilizes intelligent UI automation, high-quality voice, and persistent local memory to provide a personalized assistant experience. The agent interacts with the Android Accessibility Service to control the device and leverages LLMs for reasoning and planning.",
        "key_features": [
            "Intelligent UI Automation",
            "High Quality Voice",
            "Persistent & Personalized local Memory"
        ],
        "primary_use_case": "Autonomous on-device AI agent for Android that understands natural language commands and operates the phone's UI to achieve them.",
        "open_issues": 23,
        "cover_image_prompt": "Imagine a friendly Android robot butler diligently managing a chaotic array of apps on a smartphone screen, effortlessly handling tasks like sending messages, setting reminders, and ordering groceries. The robot, with a helpful expression, navigates the phone's interface with precision, while the user relaxes in a hammock nearby, sipping a drink. Subtle UI elements and code snippets float around the robot, hinting at the underlying AI technology. The scene is set in a bright, sunny outdoor setting with a clear blue sky. The illustration should be in a 3D isometric style with vibrant colors and a focus on clarity and user-friendliness."
    },
    {
        "id": 1032912306,
        "name": "tododo",
        "description": "The todo manager that should be extinct",
        "url": "https://github.com/bmarse/tododo",
        "language": "Go",
        "stars": 11,
        "forks": 0,
        "created_at": "2025-08-06T02:59:10Z",
        "updated_at": "2025-08-23T10:06:16Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-22T02:31:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1efd519b3ac99625021964f8d54822b227b64e3a2df4853a80715713ab332f66/bmarse/tododo"
        ],
        "homepage": "",
        "readme_summary": "Tododo is a terminal-based todo manager that utilizes markdown files for data storage. It provides a keyboard-driven interface for creating, editing, completing, and deleting tasks, as well as hiding completed tasks. The primary goal is to offer a simple and account-free todo management solution.",
        "key_features": [
            "Keyboard based TUI",
            "Markdown file storage (.tododo.md)",
            "Create/Toggle Complete/Edit/Delete tasks",
            "Hide completed tasks"
        ],
        "primary_use_case": "Managing todo lists in a terminal-based user interface without requiring an account or database.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a meticulous gardener tending to a garden of tasks. The gardener, representing the user, carefully prunes (deletes), plants (creates), and nurtures (edits) each task, represented by vibrant, leafy plants. Some plants are marked with checkmarks (completed tasks), while others are still growing. The garden is neatly organized within a markdown file, subtly visible as the garden's blueprint. Digital particles float around the gardener, representing the software aspect. The scene is set in a sunlit, minimalist greenhouse. The image should be in a flat design style with clear iconography and a pastel color scheme."
    },
    {
        "id": 2304783,
        "name": "w3af",
        "description": "w3af: web application attack and audit framework, the open source web vulnerability scanner.",
        "url": "https://github.com/andresriancho/w3af",
        "language": "Python",
        "stars": 4757,
        "forks": 1229,
        "created_at": "2011-08-31T23:20:34Z",
        "updated_at": "2025-08-23T09:03:22Z",
        "topics": [
            "appsec",
            "cross-site-scripting",
            "scanner",
            "security",
            "sql-injection"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2020-06-16T11:27:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bacc4635aa0e8d28067cb51f905adc52dc724f4c09151a7f28495464236a1bd1/andresriancho/w3af"
        ],
        "homepage": "http://w3af.org/",
        "readme_summary": "The w3af repository provides a web application attack and audit framework, functioning as an open-source web vulnerability scanner. It helps developers and penetration testers identify and exploit vulnerabilities such as Cross-Site Scripting, SQL injection, and OS commanding in their web applications, with the capability to detect over 200 different types of vulnerabilities.",
        "key_features": [
            "Web application vulnerability scanning",
            "Identifies 200+ vulnerabilities",
            "Cross-Site Scripting (XSS) detection",
            "SQL injection detection",
            "OS commanding detection"
        ],
        "primary_use_case": "Identifying and exploiting vulnerabilities in web applications.",
        "open_issues": 1993,
        "cover_image_prompt": "A seasoned detective meticulously inspecting a towering skyscraper made of interconnected web pages. The detective uses a magnifying glass that emits digital code, revealing hidden vulnerabilities like cracks and weak points in the building's structure. Some vulnerabilities are highlighted with glowing red outlines, while secure sections shine with a green aura. Small screens display security logs and vulnerability reports. The scene is set at night with dramatic lighting. The repository name, 'w3af', is subtly displayed on the detective's badge. The image should be in a digital painting style with clean lines, clear details, and a focus on conveying security and thoroughness."
    },
    {
        "id": 225918779,
        "name": "Ghost",
        "description": "Ghost Framework is an Android post-exploitation framework that exploits the Android Debug Bridge to remotely access an Android device.",
        "url": "https://github.com/EntySec/Ghost",
        "language": "Python",
        "stars": 3118,
        "forks": 1006,
        "created_at": "2019-12-04T17:13:49Z",
        "updated_at": "2025-08-23T08:31:36Z",
        "topics": [
            "adb",
            "android",
            "android-debug-bridge",
            "android-device",
            "android-exploit",
            "android-hack",
            "android-hacking",
            "android-rat",
            "backdoor",
            "entysec",
            "exploit",
            "exploitation-framework",
            "hack",
            "hacking",
            "hacking-tools",
            "kali-linux",
            "post-exploitation",
            "rat",
            "remote-access",
            "remote-shell"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2024-09-20T14:08:09Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/225918779/02630e80-dec2-11eb-93fe-824af5790307"
        ],
        "homepage": "https://entysec.com",
        "readme_summary": "Ghost Framework is an Android post-exploitation framework that leverages the Android Debug Bridge (ADB) to enable remote access and control of Android devices. It provides a platform for executing post-exploitation tasks on compromised or targeted Android systems. The framework facilitates various hacking and penetration testing activities.",
        "key_features": [
            "Android post-exploitation",
            "Remote access via Android Debug Bridge (ADB)",
            "Exploitation framework"
        ],
        "primary_use_case": "Remotely accessing and controlling Android devices for post-exploitation activities using the Android Debug Bridge.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled locksmith remotely picking the lock of a complex, futuristic Android device using a set of digital tools. The device is displayed on a workbench, surrounded by holographic schematics and data streams representing the ADB connection. The locksmith wears a focused expression, with a UI element displaying the Ghost Framework logo subtly projected onto their glasses. The scene is set in a clean, modern workshop with cool, blue lighting. The composition is focused and clear, highlighting the remote access and control. The image should be in a 3D isometric illustration style with sharp details and a vibrant color scheme."
    },
    {
        "id": 937214641,
        "name": "matkap",
        "description": "Matkap - hunt down malicious Telegram bots",
        "url": "https://github.com/0x6rss/matkap",
        "language": "Python",
        "stars": 712,
        "forks": 130,
        "created_at": "2025-02-22T15:58:05Z",
        "updated_at": "2025-08-23T07:36:20Z",
        "topics": [
            "cti",
            "intelligence",
            "malware",
            "osint",
            "telegram"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-08-11T13:27:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/701de2bdedf89d00e7d7bbacea6310e97b8ed1d781bacd1c41a22efda4a180fe/0x6rss/matkap"
        ],
        "homepage": "",
        "readme_summary": "Matkap is a Python-based tool designed to hunt down malicious Telegram bots. It achieves this by integrating with FOFA and URLScan to search for leaked bot tokens and chat IDs. The tool also provides functionality to export hunt logs for further analysis.",
        "key_features": [
            "FOFA & URLScan Integration for Bot Token/Chat ID Hunting",
            "Export Logs of Hunt Results"
        ],
        "primary_use_case": "Hunting down malicious Telegram bots by identifying leaked bot tokens and chat IDs.",
        "open_issues": 1,
        "cover_image_prompt": "A detective, clad in a trench coat and fedora, peers through a magnifying glass at a digital telegram message pinned to a corkboard covered in interconnected strings representing the Telegram network. The telegram glows faintly with a malicious green aura, while the detective's magnifying glass highlights lines of code and suspicious URLs embedded within the message. Small UI elements displaying FOFA and URLScan logos are subtly integrated into the corkboard. The scene is set in a dimly lit, noir-style office with a single desk lamp illuminating the investigation. The image should be in a digital painting style with sharp focus and a dark, moody color scheme."
    }
]