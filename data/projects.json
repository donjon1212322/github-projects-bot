[
    {
        "id": 1014541989,
        "name": "pseudoc",
        "description": "Pseudocode compiler utilizing AI technology ðŸš€",
        "url": "https://github.com/vytskalt/pseudoc",
        "language": "Go",
        "stars": 6,
        "forks": 1,
        "created_at": "2025-07-05T23:41:12Z",
        "updated_at": "2025-07-10T08:23:10Z",
        "topics": [
            "ai",
            "compiler",
            "go",
            "pseudocode"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-07T10:54:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6ebc31c929f9d59608526a8a867923e7fc41a7bfa6ebe34e9b6623156455f8d1/vytskalt/pseudoc"
        ],
        "homepage": "",
        "readme_summary": "Pseudoc is a pseudocode compiler that leverages AI to translate pseudocode into Go, which is then compiled into native executables. It uniquely combines AI and compiler technologies, resulting in features like non-reproducible builds and mandatory internet access. The project also claims to be a universal compiler, capable of significantly speeding up code written in other languages like Python.",
        "key_features": [
            "Non-reproducible builds due to LLM unpredictability",
            "Requires internet access for compilation",
            "Claims to be a drop-in replacement compiler for any language"
        ],
        "primary_use_case": "Compiling pseudocode into native executables using AI.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled alchemist in a futuristic laboratory is transmuting a scroll filled with handwritten pseudocode into a gleaming, self-contained executable file. The alchemist carefully pours the pseudocode into a complex machine adorned with glowing digital displays showing snippets of Go code. The machine hums with energy as it processes the input, and from the other end emerges a polished, standalone executable, ready to run. The laboratory is filled with subtle tech elements, such as holographic projections of compiler processes and floating data visualizations. The scene is bathed in soft, ethereal lighting, creating a sense of wonder and innovation. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 765815503,
        "name": "Lumolight",
        "description": "Simple, modern & easy-to-use flashlight app that comes with a ton of features.",
        "url": "https://github.com/BitMavrick/Lumolight",
        "language": "Kotlin",
        "stars": 121,
        "forks": 11,
        "created_at": "2024-03-01T17:11:03Z",
        "updated_at": "2025-07-10T07:36:17Z",
        "topics": [
            "android",
            "android-flashlight",
            "flashlight",
            "flashlight-app",
            "jetpack-compose",
            "kotlin",
            "kotlin-android",
            "lumolight",
            "mvvm",
            "native-apps",
            "open-source"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-07T09:59:17Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/765815503/5b4026fd-b3cd-4a16-8c1f-57178c01485f"
        ],
        "homepage": "https://play.google.com/store/apps/details?id=com.bitmavrick.lumolight",
        "readme_summary": "Lumolight is an open-source Android flashlight application offering both front and back flash capabilities. It features a modern Material You design with theming support and extensive customization options, including color selection, brightness control, and blinking frequency. The app also provides convenient tile support and volume key brightness adjustment for enhanced usability.",
        "key_features": [
            "Front and back flash functionality",
            "Material You design with light and dark themes",
            "Customizable front flash colors, duration, and brightness",
            "Adjustable back flash duration, BPM, and flash strength",
            "Tile support for quick access",
            "Volume key brightness control"
        ],
        "primary_use_case": "Providing a simple and customizable flashlight app experience on Android devices.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a friendly firefly, its abdomen glowing brightly, acting as a miniature, portable lighthouse in a dark forest. The firefly is perched on a smartphone displaying a simple, clean UI with brightness controls. The forest floor is subtly illuminated by the firefly's light, revealing a safe path. Tiny digital particles emanate from the phone, swirling around the firefly, representing the app's code. The repository name, 'Lumolight,' is subtly etched into a nearby tree. The scene is rendered in a 3D isometric illustration style with soft, warm lighting and a focus on clarity and ease of understanding."
    },
    {
        "id": 875443471,
        "name": "NotelyVoice",
        "description": "A Notes + AI Voice to Text Audio Transcription App built with Compose Multiplatform Android & iOS using Whisper AI, MVVM and Clean architecture, Jetpack Compose, Material3, Dagger hilt, SQLDelight, Coroutines and Flow",
        "url": "https://github.com/tosinonikute/NotelyVoice",
        "language": "C++",
        "stars": 228,
        "forks": 4,
        "created_at": "2024-10-20T01:52:39Z",
        "updated_at": "2025-07-10T10:10:38Z",
        "topics": [
            "android",
            "audio-player",
            "compose-ios",
            "compose-multiplatform",
            "compose-multiplatform-sample",
            "dagger-hilt",
            "ios",
            "ios-app",
            "jetpack-compose",
            "kotlin-coroutines",
            "kotlin-multiplatform",
            "kotlin-multiplatform-sample",
            "notes-app",
            "speech-recognition",
            "speech-to-text",
            "sqldelight",
            "swift",
            "whisper-ai",
            "whisper-api"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-10T09:39:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/36fb0e359e5357808364b219e638b3efaf50bcec25ee81df728b24af20e59113/tosinonikute/NotelyVoice"
        ],
        "homepage": "https://tosinonikute.com/notelyvoice/",
        "readme_summary": "NotelyVoice is a cross-platform note-taking application that leverages Whisper AI for accurate speech-to-text conversion. It offers rich text editing, offline capabilities, and seamless integration between voice recording and note creation. The application is designed for students, professionals, and anyone needing hands-free note-taking across Android and iOS devices.",
        "key_features": [
            "Rich Text Editing with formatting options",
            "Simple Search and Smart Filtering of notes",
            "Offline Speech-to-Text conversion",
            "Audio Recording and Playback",
            "Cross-Platform support (Android & iOS)",
            "Theming (Dark/Light)"
        ],
        "primary_use_case": "Cross-platform note-taking with AI-powered voice-to-text transcription.",
        "open_issues": 8,
        "cover_image_prompt": "A skilled scribe sits at a grand desk, illuminated by a soft, warm light. The scribe listens intently to a flowing stream of spoken words visualized as sound waves, which are then magically transcribed onto a digital scroll using a glowing quill. The scroll displays neatly formatted text with various styling options. Subtle UI elements float around the scribe, showing a dark/light theme toggle and share icons. The scene is set in a cozy, modern study filled with books and notes. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 72767327,
        "name": "TheHive",
        "description": "TheHive: a Scalable, Open Source and Free Security Incident Response Platform",
        "url": "https://github.com/TheHive-Project/TheHive",
        "language": "Scala",
        "stars": 3727,
        "forks": 659,
        "created_at": "2016-11-03T16:58:39Z",
        "updated_at": "2025-07-10T08:35:49Z",
        "topics": [
            "agplv3",
            "analyzer",
            "api",
            "cortex",
            "dfir",
            "digital-forensics",
            "free",
            "incident-management",
            "incident-response",
            "incident-response-tooling",
            "investigations",
            "iocs",
            "misp",
            "open-source",
            "orchestration",
            "platform",
            "rest",
            "scala",
            "security-incidents",
            "thehive"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2022-09-13T07:45:38Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/72767327/ea84a680-1b35-11ea-8bf5-f4a5870ea2e4"
        ],
        "homepage": "https://thehive-project.org",
        "readme_summary": "TheHive is a scalable, open-source security incident response platform designed to streamline incident investigation and response. It facilitates collaboration among security analysts, enables case management from diverse sources, and supports observable analysis through integrations with tools like MISP and Cortex. The platform aims to improve the efficiency and effectiveness of security operations teams.",
        "key_features": [
            "Security Incident Response Platform",
            "Collaboration features for multiple analysts",
            "Case management from various sources (MISP, SIEM, etc.)",
            "Task management with templates and assignments",
            "Observable analysis and integration with MISP and Cortex"
        ],
        "primary_use_case": "Security incident investigation and response for SOCs, CSIRTs, and CERTs.",
        "open_issues": 820,
        "cover_image_prompt": "Imagine a bustling security operations center (SOC) depicted as a well-organized command center. A central holographic display shows a stylized beehive, representing TheHive, actively filtering and processing incoming data streams visualized as glowing insects. Analysts, represented as focused professionals, collaborate around the hive, each interacting with different data streams and responding to threats. Subtle UI elements on nearby screens display incident details and analysis tools. The scene is bathed in cool, focused lighting, creating a sense of urgency and efficiency. The image should be in a clean, modern digital illustration style with clear lines and vibrant colors."
    },
    {
        "id": 289516116,
        "name": "feroxbuster",
        "description": "A fast, simple, recursive content discovery tool written in Rust.",
        "url": "https://github.com/epi052/feroxbuster",
        "language": "Rust",
        "stars": 6757,
        "forks": 543,
        "created_at": "2020-08-22T15:36:19Z",
        "updated_at": "2025-07-10T08:53:44Z",
        "topics": [
            "content-discovery",
            "enumeration",
            "hacktoberfest",
            "pentest",
            "pentesting-tool",
            "rust",
            "url-bruteforcer",
            "web"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-04-05T18:44:53Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/289516116/e4e2cc00-0560-11eb-888b-42dbdfc1c72c"
        ],
        "homepage": "https://epi052.github.io/feroxbuster-docs/docs/",
        "readme_summary": "Feroxbuster is a fast and simple content discovery tool written in Rust. It performs forced browsing by recursively scanning directories using a wordlist to identify unlinked content and potential vulnerabilities in web applications. The tool is designed for penetration testing and security assessments.",
        "key_features": [
            "Fast content discovery",
            "Recursive directory scanning",
            "Forced browsing attack implementation",
            "Wordlist-based brute-force enumeration"
        ],
        "primary_use_case": "Content discovery and forced browsing on web applications to identify unlinked resources and potential vulnerabilities.",
        "open_issues": 24,
        "cover_image_prompt": "A detective meticulously searching a sprawling digital city for hidden pathways and secret entrances. The detective uses a magnifying glass that highlights obscured URLs and directories, revealing them on a holographic screen. The city's architecture is a mix of modern skyscrapers and hidden back alleys, representing the structure of a website. Glowing particles of data flow through the city, indicating the tool's active scanning process. Small UI elements display scan results and directory structures. The scene is set at night with neon lights illuminating the detective's work. The image should be in a digital painting style with sharp focus and vibrant colors."
    },
    {
        "id": 5365511,
        "name": "pwnat",
        "description": "The only tool/technique to punch holes through firewalls/NATs where multiple clients & server can be behind separate NATs without any 3rd party involvement. Pwnat is a newly developed technique, exploiting a property of NAT translation tables, with no 3rd party, port forwarding, DMZ, DNS, router admin requirements, STUN/TURN/UPnP/ICE, or spoofing.",
        "url": "https://github.com/samyk/pwnat",
        "language": "C",
        "stars": 3627,
        "forks": 495,
        "created_at": "2012-08-10T05:55:11Z",
        "updated_at": "2025-07-10T08:33:08Z",
        "topics": [],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-30T07:44:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e7a34b6b287f5492568de69b46e5a890dbffb786b6931a126456d634eee1b6ad/samyk/pwnat"
        ],
        "homepage": "https://samy.pl/pwnat/",
        "readme_summary": "`pwnat` is a tool that enables direct communication between clients and servers located behind separate NATs. It achieves this without requiring port forwarding, DMZ setup, or any third-party involvement. The tool leverages a unique technique involving ICMP packets to bypass NAT restrictions and establish a peer-to-peer connection.",
        "key_features": [
            "NAT traversal without port forwarding or DMZ",
            "No third-party involvement (no proxy, STUN/TURN/UPnP/ICE)",
            "Direct client-to-server communication",
            "Works even when both client and server are behind NATs",
            "Tunneling TCP over UDP"
        ],
        "primary_use_case": "Establishing direct communication between a client and a server, both behind separate NATs, without requiring any configuration changes to the NAT devices.",
        "open_issues": 22,
        "cover_image_prompt": "Imagine a skilled locksmith effortlessly unlocking a series of intricate, interconnected doors representing NAT firewalls. The locksmith, symbolizing `pwnat`, uses a unique, almost invisible key (ICMP packets) to bypass the locks without altering them. Behind the first door, a client device glows with activity, reaching out to a server glowing behind the final door. No visible wires or cables connect them directly, emphasizing the direct, peer-to-peer connection. Subtle digital particles float around the locksmith, hinting at the underlying technology. The scene is bathed in soft, ethereal light, creating a sense of wonder and ingenuity. The style is a clean, 3D isometric illustration with a focus on clarity and visual appeal."
    },
    {
        "id": 814684486,
        "name": "gpui-component",
        "description": "UI components for building fantastic desktop application by using GPUI.",
        "url": "https://github.com/longbridge/gpui-component",
        "language": "Rust",
        "stars": 3308,
        "forks": 158,
        "created_at": "2024-06-13T13:45:39Z",
        "updated_at": "2025-07-10T07:01:21Z",
        "topics": [
            "gpui",
            "macos",
            "shadcn",
            "ui",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T08:24:59Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/814684486/fe747a68-1d52-4cb3-94d5-ab0469bec121"
        ],
        "homepage": "",
        "readme_summary": "The gpui-component repository provides a collection of cross-platform UI components for building desktop applications using the GPUI framework. It offers a range of features, including customizable themes, flexible layouts, virtualized lists and tables for high performance, and support for Markdown, HTML, charting, and code highlighting. An experimental WebView component is also available.",
        "key_features": [
            "Cross-platform UI components",
            "Native macOS and Windows inspired design",
            "Customizable themes",
            "Flexible layouts (Dock, Tiles)",
            "Virtualized Table and List components",
            "Markdown and HTML content rendering",
            "Charting",
            "Code Highlighting",
            "Experimental WebView"
        ],
        "primary_use_case": "Building desktop applications with reusable UI components.",
        "open_issues": 12,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate UI components from raw digital materials in a bright, modern workshop. The artisan carefully shapes buttons, tables, and charts, each glowing with a subtle inner light. These components are then assembled onto a large, transparent screen, forming a sleek desktop application. Small code snippets float around the artisan, subtly hinting at the underlying technology. The workshop is filled with tools and materials labeled with terms like 'ThemeColor' and 'Virtualized Table'. The scene is rendered in a 3D isometric illustration style, with clean lines, vibrant colors, and a focus on clarity and detail."
    },
    {
        "id": 895253710,
        "name": "mlx-audio",
        "description": "A text-to-speech (TTS), speech-to-text (STT) and speech-to-speech (STS) library built on Apple's MLX framework, providing efficient speech analysis on Apple Silicon.",
        "url": "https://github.com/Blaizzy/mlx-audio",
        "language": "Python",
        "stars": 2465,
        "forks": 186,
        "created_at": "2024-11-27T21:14:34Z",
        "updated_at": "2025-07-10T06:55:00Z",
        "topics": [
            "apple-silicon",
            "audio-processing",
            "mlx",
            "multimodal",
            "speech-recognition",
            "speech-synthesis",
            "speech-to-text",
            "text-to-speech",
            "transformers"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T20:34:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e0e9683ca5760fb8b7189c471ddd2363e28e77126a38c38d653a0820670edfe8/Blaizzy/mlx-audio"
        ],
        "homepage": "",
        "readme_summary": "MLX-Audio is a library built on Apple's MLX framework that enables fast and efficient text-to-speech (TTS) and speech-to-speech (STS) generation, specifically optimized for Apple Silicon. It offers features like voice customization, adjustable speech speed, a web interface with 3D audio visualization, and a REST API for TTS generation.",
        "key_features": [
            "Fast inference on Apple Silicon",
            "Multiple language support",
            "Voice customization options",
            "Adjustable speech speed control",
            "Interactive web interface with 3D audio visualization",
            "REST API for TTS generation",
            "Quantization support"
        ],
        "primary_use_case": "Efficient text-to-speech (TTS) and speech-to-speech (STS) generation on Apple Silicon devices.",
        "open_issues": 48,
        "cover_image_prompt": "Imagine a skilled artisan shaping raw clay into a perfectly formed sculpture, representing text being molded into natural-sounding speech. The artisan's hands glow with digital energy, subtly incorporating UI elements that control voice style and speed. The studio is filled with acoustic panels displaying waveform visualizations. A small screen in the background shows the MLX-Audio logo. The scene is bathed in warm, inviting light, creating a sense of craftsmanship and technological innovation. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    }
]