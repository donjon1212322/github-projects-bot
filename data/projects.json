[
    {
        "id": 935422300,
        "name": "search-navigator",
        "description": null,
        "url": "https://github.com/nwatab/search-navigator",
        "language": "HTML",
        "stars": 8,
        "forks": 3,
        "created_at": "2025-02-19T12:21:44Z",
        "updated_at": "2025-06-28T06:29:01Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-28T06:28:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bac6b715202d168f26a0099c6aa08724e7bd25f53865dd98f80367c9f94793b8/nwatab/search-navigator"
        ],
        "homepage": "https://chromewebstore.google.com/detail/search-result-navigator/fpinaaaiplppifhmkjdfkimodkkdnoha",
        "readme_summary": "Search Navigator is a Chrome extension that improves Google search usability by enabling keyboard navigation of search results and providing shortcuts for switching between different search categories. It also offers quick access to Google Maps and YouTube, and allows for customization of keyboard shortcuts. The extension aims to provide a more efficient and intuitive search experience.",
        "key_features": [
            "Keyboard navigation of Google search results",
            "Quick switching between search categories (All, Images, Videos, News, Shopping)",
            "Quick access to Google Maps and YouTube",
            "Customizable keyboard shortcuts"
        ],
        "primary_use_case": "Enhancing Google search experience with keyboard navigation and quick category switching.",
        "open_issues": 3,
        "cover_image_prompt": "A skilled navigator charting a course through a vast sea of search results, using a sextant that projects glowing arrows onto the water, guiding the way to the desired destination. The navigator stands on a small boat adorned with the repository name, surrounded by floating icons representing different search categories (images, videos, news). Subtle UI elements and keyboard shortcut symbols are visible on the sextant's display. The scene is set under a clear, starry sky with a focused composition and a blue and white color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1012122505,
        "name": "br-cli",
        "description": "A browser automation command line tool for AI agent",
        "url": "https://github.com/browsemake/br-cli",
        "language": "JavaScript",
        "stars": 11,
        "forks": 0,
        "created_at": "2025-07-01T21:08:55Z",
        "updated_at": "2025-07-04T21:48:15Z",
        "topics": [
            "agents",
            "ai",
            "browser",
            "cli",
            "command-line",
            "command-line-tool",
            "llm",
            "playwright",
            "puppeteer",
            "selenium"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-04T21:48:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5a73161e4c3efbebac729e17d43c4b5943346612800c03393b5900a0beaf36e9/browsemake/br-cli"
        ],
        "homepage": "",
        "readme_summary": "br-cli is a command-line tool designed to facilitate browser automation for AI agents. It allows AI agents like Claude Code and Gemini CLI to control web browsers, manage sessions, and perform tasks such as login and data extraction. The tool features LLM-friendly output, daemon mode for persistent sessions, structured web page views, secret management, and history tracking for replay and scripting.",
        "key_features": [
            "Browser Action",
            "LLM friendly output",
            "Daemon mode",
            "Structured web page view",
            "Secrete management",
            "History tracking"
        ],
        "primary_use_case": "Browser automation for AI agents, enabling them to interact with web pages through a command-line interface.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra, where each instrument represents a different website or online service. The conductor's baton is a command-line interface, and with each precise movement, the orchestra seamlessly navigates and interacts with the digital world. The music stands display simplified web page layouts and accessibility trees, guiding the performance. Glowing particles of data flow between the conductor and the orchestra, representing the automated actions and data extraction. The repository name, 'br-cli,' is subtly etched onto the conductor's podium. The scene is set in a modern concert hall with soft, ambient lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 966243985,
        "name": "trackers",
        "description": "A unified library for object tracking featuring clean room re-implementations of leading multi-object tracking algorithms",
        "url": "https://github.com/roboflow/trackers",
        "language": "Python",
        "stars": 1788,
        "forks": 153,
        "created_at": "2025-04-14T16:12:26Z",
        "updated_at": "2025-07-05T09:34:33Z",
        "topics": [
            "deep-sort",
            "multi-object-tracking",
            "reidentification",
            "sort"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-06-30T17:23:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0457514051fc71d30c6c0e8264e0b687e0fdc785fb4f065bdb004a8431d4aebc/roboflow/trackers"
        ],
        "homepage": "https://trackers.roboflow.com/",
        "readme_summary": "The `trackers` repository offers a unified Python library for multi-object tracking. It provides clean-room re-implementations of leading tracking algorithms with a modular design, enabling easy integration with object detectors from popular libraries. This allows users to easily swap and compare different trackers for their specific use cases.",
        "key_features": [
            "Unified library for multi-object tracking",
            "Clean room re-implementations of tracking algorithms",
            "Modular design for easy tracker swapping",
            "Integration with object detectors from inference, ultralytics, and transformers libraries"
        ],
        "primary_use_case": "Providing a unified and modular library for multi-object tracking, allowing users to easily integrate and compare different tracking algorithms with various object detectors.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra of diverse robotic musicians, each representing a different object tracking algorithm. The conductor's baton seamlessly switches between musicians, creating a harmonious symphony of object tracking. Visual cues like glowing lines connecting objects to their tracked paths and subtle UI elements displaying tracking metrics are present. The scene is set in a futuristic concert hall with dynamic lighting and a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 607845880,
        "name": "maxtext",
        "description": "A simple, performant and scalable Jax LLM!",
        "url": "https://github.com/AI-Hypercomputer/maxtext",
        "language": "Python",
        "stars": 1811,
        "forks": 371,
        "created_at": "2023-02-28T19:47:29Z",
        "updated_at": "2025-07-05T08:21:15Z",
        "topics": [
            "deepseek",
            "fine-tuning",
            "gemma2",
            "gemma3",
            "gpt",
            "jax",
            "large-language-models",
            "llama2",
            "llama3",
            "llama4",
            "llm",
            "mistral",
            "mixtral",
            "sft"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-03T18:39:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/567849449221d2ee7cb96116411fa2d5902017d8a13c627b73b7f6a13cec346a/AI-Hypercomputer/maxtext"
        ],
        "homepage": "",
        "readme_summary": "MaxText is a high-performance, scalable, open-source LLM framework written in pure Python/Jax. It targets Google Cloud TPUs and GPUs for both training and inference. MaxText supports various open models, including Llama, Mistral, Gemma, and DeepSeek families, aiming to provide a launching point for ambitious LLM projects in research and production.",
        "key_features": [
            "High performance LLM framework",
            "Scalable training and inference on TPUs and GPUs",
            "Written in pure Python/Jax",
            "Supports Llama 2, Llama 3, Llama 4, Mistral and Mixtral family, Gemma, Gemma 2, Gemma 3, and DeepSeek family models"
        ],
        "primary_use_case": "Training and inference of large language models.",
        "open_issues": 54,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a towering skyscraper, each level representing a different layer of a large language model. The architect, representing MaxText, uses blueprints (Jax code) to guide robotic arms (TPUs/GPUs) that precisely assemble the building blocks (model parameters). The skyscraper is bathed in the glow of Google Cloud, symbolizing scalability. Holographic displays show performance metrics and model architectures. The scene is set in a futuristic construction yard with a clean, focused composition and a blue and orange color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 962528913,
        "name": "reTermAI",
        "description": null,
        "url": "https://github.com/pie0902/reTermAI",
        "language": "Python",
        "stars": 50,
        "forks": 8,
        "created_at": "2025-04-08T09:39:20Z",
        "updated_at": "2025-07-05T06:13:00Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T08:41:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/aba2b17e0253c76b2b04bb7bd56180595bfdb32622f9ed0e0c9e96908d4c5ad0/pie0902/reTermAI"
        ],
        "homepage": null,
        "readme_summary": "reTermAI is a smart command assistant that suggests relevant terminal commands based on your past shell history, leveraging AI models like OpenAI and Gemini. It supports intelligent matching by keyword or partial input and is easily installable via pip, supporting both zsh and bash shells. API keys are managed securely via a .env file.",
        "key_features": [
            "Recommends terminal commands based on history using OpenAI or Gemini",
            "Supports intelligent matching by keyword or partial input",
            "Easy installation via pip",
            "Supports zsh and bash shell history",
            "API keys managed via .env"
        ],
        "primary_use_case": "Suggesting relevant terminal commands based on user's shell history using AI.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned librarian in a futuristic library, using a glowing crystal ball to predict the exact book a researcher needs. The librarian gestures towards shelves filled with countless books, each representing a command from the researcher's past shell history. The crystal ball displays a faint, shimmering command suggestion. UI elements float subtly in the background, showing a terminal interface with command suggestions. The scene is bathed in soft, ethereal light. The image should be in a 3D isometric illustration style with rich details and a calming color scheme."
    },
    {
        "id": 654122609,
        "name": "lmdeploy",
        "description": "LMDeploy is a toolkit for compressing, deploying, and serving LLMs.",
        "url": "https://github.com/InternLM/lmdeploy",
        "language": "Python",
        "stars": 6647,
        "forks": 568,
        "created_at": "2023-06-15T12:38:06Z",
        "updated_at": "2025-07-05T07:10:16Z",
        "topics": [
            "codellama",
            "cuda-kernels",
            "deepspeed",
            "fastertransformer",
            "internlm",
            "llama",
            "llama2",
            "llama3",
            "llm",
            "llm-inference",
            "turbomind"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-07-04T10:04:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a1a0de223eaba705e92456a73b4a7cd656a53ad9c6417d31eda7ec4d825398bb/InternLM/lmdeploy"
        ],
        "homepage": "https://lmdeploy.readthedocs.io/en/latest/",
        "readme_summary": "LMDeploy is a toolkit designed to streamline the process of working with large language models. It focuses on compressing models for efficient storage, deploying them across various platforms, and serving them for inference. The toolkit includes features like quantization, a PyTorch inference engine, and support for VLMs.",
        "key_features": [
            "LLM Compression",
            "LLM Deployment",
            "LLM Serving",
            "PyTorch Inference Engine",
            "TurboMind Inference Engine",
            "VLM Support",
            "Quantization"
        ],
        "primary_use_case": "Compressing, deploying, and serving large language models (LLMs).",
        "open_issues": 464,
        "cover_image_prompt": "Imagine a skilled artisan carefully sculpting a large language model from raw data clay. The artisan uses specialized tools to compress and refine the model, making it smaller and more efficient. The finished model glows with a soft, internal light, ready to be deployed on a miniature server landscape. UI elements float nearby, displaying real-time performance metrics. The scene is set in a bright, modern workshop with a focus on precision and optimization. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    }
]