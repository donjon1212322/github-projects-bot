[
    {
        "id": 886745826,
        "name": "VERT",
        "description": "The next-generation file converter. Open source, fully local* and free forever.",
        "url": "https://github.com/VERT-sh/VERT",
        "language": "Svelte",
        "stars": 7119,
        "forks": 308,
        "created_at": "2024-11-11T14:27:14Z",
        "updated_at": "2025-10-14T10:04:32Z",
        "topics": [
            "conversion",
            "ffmpeg",
            "imagemagick",
            "magick",
            "pandoc",
            "svelte",
            "sveltekit",
            "wasm"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-12T18:57:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b87e32bd2d2e3b7545c44f903760fe99913e9dd12786236fe7fecd7438a030c4/VERT-sh/VERT"
        ],
        "homepage": "https://vert.sh",
        "readme_summary": "VERT is a file conversion utility that performs conversions locally using WebAssembly, offering privacy and eliminating file size limits. It supports a wide range of file formats (250+) including images, audio, documents, and video, with conversion settings and a user-friendly Svelte interface.",
        "key_features": [
            "Local file conversion using WebAssembly",
            "No file or file size limits",
            "Support for 250+ file formats",
            "Conversion settings",
            "User-friendly interface built with Svelte"
        ],
        "primary_use_case": "Converting files directly on a user's device without relying on cloud services.",
        "open_issues": 14,
        "cover_image_prompt": "A skilled alchemist in a workshop, transforming various objects (image, document, audio file icons) placed on a table into different forms. The alchemist uses a complex device powered by glowing WebAssembly cores. Small UI elements displaying conversion settings are subtly integrated into the device. The workshop is filled with beakers and tools, illuminated by soft, magical light. The composition is focused and clear, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 837825864,
        "name": "PyUIBuilder",
        "description": "Python GUI builder. GUI builder for Tkinter, CustomTkinter, Kivy and PySide (upcoming)",
        "url": "https://github.com/PaulleDemon/PyUIBuilder",
        "language": "JavaScript",
        "stars": 1710,
        "forks": 126,
        "created_at": "2024-08-04T06:32:44Z",
        "updated_at": "2025-10-14T07:06:38Z",
        "topics": [
            "customtkinter",
            "gui",
            "gui-builder",
            "kivy-framework",
            "pyqt",
            "pyside",
            "python",
            "python-gui-builder",
            "pythongui",
            "tkinter",
            "uibuilder"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-26T05:03:14Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/837825864/04592843-2789-4179-8e11-dec06fc45e55"
        ],
        "homepage": "https://pyuibuilder.com/",
        "readme_summary": "PyUIBuilder is a Python GUI builder that aims to simplify the process of creating graphical user interfaces. It supports multiple frameworks like Tkinter, CustomTkinter, and Kivy, with PySide support planned. The tool allows users to build GUIs with a drag-and-drop interface, similar to Canva.",
        "key_features": [
            "GUI builder for Tkinter",
            "GUI builder for CustomTkinter",
            "GUI builder for Kivy",
            "Upcoming support for PySide",
            "Drag-and-drop interface"
        ],
        "primary_use_case": "Building Python GUIs with a drag-and-drop interface, simplifying the GUI development process for multiple frameworks.",
        "open_issues": 9,
        "cover_image_prompt": "An architect at a digital drafting table, effortlessly assembling building blocks representing GUI elements (buttons, text fields, windows) into a complete blueprint for a user interface. The blocks snap together seamlessly, guided by the architect's hand. A holographic display shows the live, functional GUI taking shape. Small code snippets float around the scene, subtly connecting the visual elements to underlying code. The repository name, 'PyUIBuilder,' is subtly integrated into the drafting table's design. The scene is set in a bright, modern studio. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 975472483,
        "name": "MicroPythonOS",
        "description": "A complete operating system for microcontrollers like the ESP32, inspired by Android and iOS.",
        "url": "https://github.com/MicroPythonOS/MicroPythonOS",
        "language": "Python",
        "stars": 189,
        "forks": 7,
        "created_at": "2025-04-30T11:20:07Z",
        "updated_at": "2025-10-14T09:45:19Z",
        "topics": [
            "micropython",
            "micropython-esp32",
            "operating-system"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-10-13T17:39:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/abea8805ca651b51c01db283a94626a4f577488ec5af20bae3f0285504f586d1/MicroPythonOS/MicroPythonOS"
        ],
        "homepage": "https://MicroPythonOS.com",
        "readme_summary": "MicroPythonOS is a complete operating system designed for microcontrollers, particularly the ESP32. It aims to bring operating system-level functionalities, drawing inspiration from Android and iOS, to resource-constrained environments.",
        "key_features": [
            "Operating system for microcontrollers",
            "ESP32 support",
            "Inspired by Android and iOS"
        ],
        "primary_use_case": "Providing a comprehensive operating system environment for microcontrollers, enabling more complex applications and system-level functionalities.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously assembling intricate gears inside a tiny, transparent ESP32 chip, creating a miniature city that runs smoothly. The clockmaker represents MicroPythonOS, carefully orchestrating the microcontroller's resources. Small screens display simplified OS interfaces, and glowing data streams connect different parts of the city. The scene is set in a brightly lit workshop with a clean, organized aesthetic. The composition is focused and clear, highlighting the precision and efficiency of the OS. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 965313467,
        "name": "droidrun",
        "description": null,
        "url": "https://github.com/droidrun/droidrun",
        "language": "Python",
        "stars": 4720,
        "forks": 471,
        "created_at": "2025-04-12T22:03:47Z",
        "updated_at": "2025-10-14T09:33:08Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-08T16:37:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f3ee49002aee651eab0d0c9ddfdc995c7b21f7b3d7e17219732332f8f5b85865/droidrun/droidrun"
        ],
        "homepage": "https://droidrun.ai",
        "readme_summary": "DroidRun is a framework for controlling Android and iOS devices using LLM agents, enabling automation of device interactions through natural language commands. It supports multiple LLM providers and offers features like planning capabilities, a CLI with debugging, a Python API, screenshot analysis, and execution tracing.",
        "key_features": [
            "Control Android and iOS devices with natural language commands",
            "Supports multiple LLM providers (OpenAI, Anthropic, Gemini, Ollama, DeepSeek)",
            "Planning capabilities for complex multi-step tasks",
            "Easy to use CLI with enhanced debugging features",
            "Extendable Python API for custom automations",
            "Screenshot analysis for visual understanding of the device",
            "Execution tracing with Arize Phoenix"
        ],
        "primary_use_case": "Automating device interactions on Android and iOS devices using natural language commands through LLM agents.",
        "open_issues": 12,
        "cover_image_prompt": "A conductor standing before a complex orchestra of smartphones and tablets, directing them with a glowing baton that translates natural language commands into device actions. Each device performs a different task, such as booking accommodations or browsing social media, visualized as small projections above them. Subtle UI elements and code snippets float around the conductor, connecting the metaphor to software. The scene is set in a futuristic control room with dynamic lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1045863050,
        "name": "Telegram-Reporter-Tool",
        "description": "ðŸš€ A tool to automate the process of reporting and many more functions (+43 functions). No coding skills required and very easy to use.",
        "url": "https://github.com/Telegram-Reporter/Telegram-Reporter-Tool",
        "language": "Python",
        "stars": 15,
        "forks": 1,
        "created_at": "2025-08-27T20:30:12Z",
        "updated_at": "2025-10-14T06:26:08Z",
        "topics": [
            "adder",
            "reporter-telegram-2025",
            "telegram",
            "telegram-auto-banner",
            "telegram-ban-script",
            "telegram-ban-tool-2025",
            "telegram-ban-users",
            "telegram-mas-report-tools",
            "telegram-mass-auto-report",
            "telegram-mass-report-2025",
            "telegram-massive-reporting-bot",
            "telegram-massreport",
            "telegram-report-2025",
            "telegram-report-tool-2025",
            "telegram-report-users",
            "telegram-reporter-2025",
            "telegram-reporter-bot-2025",
            "telegram-reporter-botss",
            "telegram-reporter-tool-2025",
            "userbot-telegram"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-10-11T21:55:17Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1045863050/075f867c-ff2f-4994-8a5b-4fefc92dd239"
        ],
        "homepage": "",
        "readme_summary": "The Telegram-Reporter-Tool is a Python-based application designed to automate various Telegram-related tasks, primarily focusing on reporting, scraping, and managing Telegram users and content. It aims to simplify these processes for users without requiring coding skills, offering features like mass reporting, member adding, content scraping, and automated messaging.",
        "key_features": [
            "Scrape members, messages, media, and channels (including hidden members)",
            "Add members to groups/channels automatically (with optional premium member filtering)",
            "Automatically forward posts/messages/media to targets",
            "Mass DM users on Telegram",
            "Clone and copy channels/groups",
            "Automatically join targets with multiple accounts",
            "Automated view generation for posts",
            "Automated voting on polls",
            "Account unspamming and unfreezing",
            "Automated reaction to posts with emojis",
            "Backup creation",
            "Proxy support"
        ],
        "primary_use_case": "Automating Telegram reporting, user management, content scraping, and marketing tasks without requiring coding expertise.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a bustling city street where a diligent news reporter stands amidst the crowd, equipped with a high-tech camera that automatically captures and organizes information from various sources like billboards, conversations, and digital displays. The camera instantly filters out misinformation and highlights crucial details, sending verified reports to a central hub represented by a glowing Telegram icon atop a skyscraper. Small UI elements on the camera show data being processed. The scene is set in a vibrant, modern city with dynamic lighting. The image should be in a 3D isometric illustration style with rich details and a focus on clarity."
    },
    {
        "id": 1035028562,
        "name": "seedbox-lite",
        "description": "A light-weight torrent media center at one place.",
        "url": "https://github.com/hotheadhacker/seedbox-lite",
        "language": "JavaScript",
        "stars": 4017,
        "forks": 286,
        "created_at": "2025-08-09T14:00:22Z",
        "updated_at": "2025-10-14T08:48:44Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-08-20T15:08:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bd284fc4df00ecf46bc2cd115a367b36fc662eabf724f7f97e241a7611a86152/hotheadhacker/seedbox-lite"
        ],
        "homepage": "",
        "readme_summary": "SeedBox Lite is a lightweight torrent streaming application that allows users to instantly stream movies and TV shows without waiting for complete downloads. It provides a Netflix-like experience with features like password protection, mobile optimization, and a smart video player, making it easy to watch torrent content on various devices.",
        "key_features": [
            "Instant Streaming",
            "Password Protection",
            "Mobile Optimized",
            "Smart Video Player",
            "Fast Setup",
            "Cross-Platform",
            "Modern UI",
            "Torrent to Stream",
            "Progress Tracking",
            "Smart Caching",
            "Multiple Formats",
            "Subtitle Support",
            "Netflix-Style Interface",
            "Mobile-First Design",
            "Native Fullscreen",
            "Gesture Controls",
            "Responsive Layout",
            "CORS Enabled",
            "Health Monitoring",
            "Production Ready",
            "Docker Support",
            "PM2 Integration",
            "iOS Safari Support",
            "Android Chrome",
            "Range Requests",
            "Mobile Viewport",
            "Touch Optimized"
        ],
        "primary_use_case": "Streaming torrents instantly on various devices.",
        "open_issues": 25,
        "cover_image_prompt": "Imagine a chef in a modern kitchen, instantly preparing a gourmet meal from raw ingredients delivered via a torrent-shaped conveyor belt. The chef expertly uses digital tools to transform the torrent data into a beautifully plated dish, representing the streamed video. UI elements showing playback controls subtly float around the plate. The kitchen is clean and well-lit, with screens displaying download progress and video format information. The scene is in a 3D isometric illustration style with vibrant colors and clear details. The image should convey instant access and seamless transformation."
    }
]