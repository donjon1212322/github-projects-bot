[
    {
        "id": 956112390,
        "name": "ClockTemp",
        "description": "A TUI clock that displays time, date, temperature and more",
        "url": "https://github.com/arthur-dnts/ClockTemp",
        "language": "Python",
        "stars": 25,
        "forks": 2,
        "created_at": "2025-03-27T18:05:54Z",
        "updated_at": "2025-06-15T09:23:59Z",
        "topics": [
            "calendar",
            "clock",
            "stopwatch",
            "timer",
            "tui"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-02T22:15:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/026e916b8d4dd6f3e07016852a3f4ff8de3b1d97f6ff814a1917521dc0c45345/arthur-dnts/ClockTemp"
        ],
        "homepage": "",
        "readme_summary": "ClockTemp is a TUI clock application written in Python that displays the current time, date, and temperature in the terminal. It allows users to customize the display format, temperature units, and colors. The application also fetches weather data based on user-specified latitude and longitude using the Open-Meteo API.",
        "key_features": [
            "TUI clock",
            "Displays time and date",
            "Displays temperature",
            "Customizable time and date formats",
            "Customizable temperature units",
            "Show/hide seconds",
            "Location-based weather data (via Open-Meteo API)",
            "Customizable text and background colors"
        ],
        "primary_use_case": "Displaying time, date, and temperature information in a terminal-based user interface with customizable options.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously crafting a large, ornate clock. This clock isn't just telling time; it displays the date, current temperature, and even has a built-in calendar. The clockmaker is carefully adjusting tiny gears representing configuration options like time format (12/24 hour), date format (MM/DD or DD/MM), and temperature units (Celsius/Fahrenheit). A subtle UI overlay shows command-line options and interactive keys, connecting the craftsmanship to the software. The scene is set in a cozy workshop with warm lighting, rendered in a detailed 3D isometric illustration style with vibrant colors."
    },
    {
        "id": 994135102,
        "name": "trmt",
        "description": "2D Turing machine (turmite) for your terminal.",
        "url": "https://github.com/cenonym/trmt",
        "language": "Rust",
        "stars": 66,
        "forks": 3,
        "created_at": "2025-06-01T09:36:00Z",
        "updated_at": "2025-06-15T09:53:12Z",
        "topics": [
            "cellular-automata",
            "cli",
            "rust",
            "terminal",
            "turing-machine",
            "turmite"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-13T05:18:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/51606e2539bd5b41971d450a868ea5eeabb6d4c8543e39705177a9fd081ec8ab/cenonym/trmt"
        ],
        "homepage": "",
        "readme_summary": "The `trmt` repository provides a terminal-based 2D Turing machine (turmite) simulator. It allows users to simulate multiple turmites simultaneously with customizable rules, colors, and characters. The simulator offers features like Unicode support, configurable parameters, real-time interaction, and deterministic seed-based simulations.",
        "key_features": [
            "Full Unicode support",
            "Up to 256 simultaneous heads",
            "Full color support (16-color, 256-color, and RGB/hex)",
            "Randomized rule generator",
            "Deterministic seed-based simulation",
            "Highly configurable parameters",
            "Several rule formats",
            "Real-time interaction with configurable keybinds",
            "Toroidal grid with seamless wrapping"
        ],
        "primary_use_case": "Simulating 2D Turing machines (turmites) in the terminal.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a tiny robot ant meticulously traversing a vast, colorful circuit board, leaving a vibrant trail of light in its wake. The ant, representing the Turmite, follows complex, glowing pathways dictated by intricate rules etched onto the board. The circuit board is displayed on a retro terminal screen, subtly blending the digital and physical worlds. The scene is set in a dimly lit workshop, with scattered tools and components adding to the atmosphere. The image should be in a 3D isometric illustration style with a focus on vibrant colors and intricate details."
    },
    {
        "id": 901034542,
        "name": "gazelle",
        "description": "Gaze-LLE: Gaze Target Estimation via Large-Scale Learned Encoders (CVPR 2025, Highlight)",
        "url": "https://github.com/fkryan/gazelle",
        "language": "Python",
        "stars": 669,
        "forks": 73,
        "created_at": "2024-12-09T23:21:29Z",
        "updated_at": "2025-06-15T09:53:13Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T00:50:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/68d1d65c02fa85484115f9eaa31368225b25ae948d5d5da806714466888fd6f2/fkryan/gazelle"
        ],
        "homepage": "https://arxiv.org/abs/2412.09586",
        "readme_summary": "The Gaze-LLE repository provides an implementation for gaze target estimation using a transformer architecture. It leverages pretrained visual foundation models like DINOv2 and learns a lightweight gaze decoder. The repository offers pretrained models and a PyTorch Hub integration for easy use in multi-person gaze prediction scenarios.",
        "key_features": [
            "Gaze target estimation using a transformer architecture",
            "Leverages pretrained visual foundation models (DINOv2)",
            "Lightweight gaze decoder with frozen visual encoder",
            "Multi-person inference",
            "Pretrained models available for download and PyTorch Hub"
        ],
        "primary_use_case": "Estimating gaze targets in images using a transformer-based approach with pretrained visual encoders.",
        "open_issues": 4,
        "cover_image_prompt": "A detective wearing high-tech glasses is observing a crowded scene, with multiple people scattered around. The glasses highlight the person each individual is looking at with a glowing line, effectively predicting their gaze target. Small UI elements overlay the scene, showing gaze prediction heatmaps and in/out of frame scores. The scene is set in a bustling city square with soft, diffused lighting. The composition is wide-angle, capturing the entire scene with a focus on the detective and the highlighted gaze targets. The image should be in a digital painting style with realistic details and vibrant colors."
    },
    {
        "id": 850510466,
        "name": "Kraken",
        "description": "All-in-One Toolkit for BruteForce Attacks",
        "url": "https://github.com/jasonxtn/Kraken",
        "language": "Python",
        "stars": 773,
        "forks": 121,
        "created_at": "2024-09-01T01:30:17Z",
        "updated_at": "2025-06-15T09:50:12Z",
        "topics": [
            "adminpanel-finder",
            "brute-force",
            "bruteforce",
            "cms-bruteforce",
            "cms-cracker",
            "crack",
            "cracking",
            "dirbuster",
            "directory-finder",
            "ftp-bruteforce",
            "joomla-bruteforce",
            "ldap-bruteforce",
            "office365-bruteforce",
            "pentest-tools",
            "rdp-bruteforce",
            "redteam-tools",
            "shell-finder",
            "ssh-bruteforce",
            "wordpress-brute"
        ],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2024-09-28T12:30:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7b75ed23bc1c0db76d021f3103264adb091bd803601b0f887362229a7aa016bf/jasonxtn/Kraken"
        ],
        "homepage": "",
        "readme_summary": "Kraken is a Python-based tool designed to centralize and streamline various brute-forcing tasks. It provides a suite of tools for performing brute-force attacks across a range of network protocols, web applications, and directory/subdomain discovery.",
        "key_features": [
            "FTP Brute Force",
            "Kubernetes Brute Force",
            "LDAP Brute Force",
            "VOIP Brute Force",
            "SSH Brute Force",
            "Telnet Brute Force",
            "WiFi Brute Force",
            "WPA3 Brute Force",
            "CPanel Brute Force",
            "Drupal Brute Force",
            "Joomla Brute Force",
            "Magento Brute Force",
            "Office365 Brute Force",
            "Prestashop Brute Force",
            "OpenCart Brute Force",
            "WooCommerce Brute Force",
            "WordPress Brute Force",
            "Admin Panel Finder",
            "Directory Finder",
            "Subdomain Finder"
        ],
        "primary_use_case": "Centralized brute-force attack tool for cybersecurity professionals.",
        "open_issues": 4,
        "cover_image_prompt": "A kraken, a mythical sea monster, simultaneously attacking multiple fortified structures representing different network services and web applications. Each tentacle is labeled with the name of a service (e.g., FTP, SSH, WordPress, Office365). The kraken's eyes glow with digital code, and faint UI elements are visible on its skin. The scene is set in a stormy digital ocean with data streams swirling around. The composition is dramatic and dynamic, with a dark blue and purple color scheme. The image should be in a digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 749765499,
        "name": "gocheck",
        "description": "Because AV evasion should be easy.",
        "url": "https://github.com/gatariee/gocheck",
        "language": "Go",
        "stars": 744,
        "forks": 74,
        "created_at": "2024-01-29T10:57:34Z",
        "updated_at": "2025-06-15T10:10:13Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2024-11-28T08:10:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9759a90215620befed780a3df65c03ef7e21f850305a3445706a12e88a36146f/gatariee/gocheck"
        ],
        "homepage": "",
        "readme_summary": "Gocheck is a Go-based tool designed to assist red teams in identifying malicious bytes within their malware. It leverages various scanning engines, including Windows Defender, AMSI, and Kaspersky, to pinpoint the specific code segments that trigger security alerts. The tool supports concurrent scanning and offers a debug mode for detailed analysis, making it a valuable asset for malware development and evasion testing.",
        "key_features": [
            "Identifies malicious bytes in malware",
            "Uses Windows Defender for scanning",
            "Uses AMSI for scanning",
            "Supports Kaspersky's AV Engine for scanning",
            "Allows concurrent scanning using multiple AV engines",
            "Provides debug mode for detailed issue analysis"
        ],
        "primary_use_case": "Aiding red teams in malware development by identifying bytes flagged by security solutions.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a detective meticulously examining a digital file under a magnifying glass, revealing hidden malicious code snippets like glowing red viruses. The detective's desk is surrounded by holographic screens displaying code analysis and threat detection logs. The file itself is represented as a complex circuit board with glowing pathways. The scene is set in a dimly lit, high-tech lab with a focus on the detective's intense concentration. The repository name, 'gocheck,' is subtly displayed on a monitor in the background. The image should be in a digital painting style with sharp details and a dark, ominous color scheme."
    },
    {
        "id": 180380156,
        "name": "DefenderCheck",
        "description": "Identifies the bytes that Microsoft Defender flags on.",
        "url": "https://github.com/matterpreter/DefenderCheck",
        "language": "C#",
        "stars": 2459,
        "forks": 443,
        "created_at": "2019-04-09T14:03:46Z",
        "updated_at": "2025-06-15T05:08:21Z",
        "topics": [
            "csharp",
            "evasion",
            "research-tool"
        ],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2023-09-14T18:42:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9c24cb2c454ef97ee37415adf76ee469a0a77f0a74d7e183bcddafa4d76e5606/matterpreter/DefenderCheck"
        ],
        "homepage": null,
        "readme_summary": "DefenderCheck is a C# tool designed to identify the specific bytes within a binary that trigger Microsoft Defender's detection. It takes a binary as input, iteratively splits it, and isolates the exact byte sequences that are flagged, printing these bytes to the screen. This functionality assists in understanding and evading Defender's detection mechanisms during payload development and security research.",
        "key_features": [
            "Identifies specific bytes flagged by Microsoft Defender",
            "Splits a binary to pinpoint offending bytes",
            "Prints flagged bytes to the screen"
        ],
        "primary_use_case": "Identifying problematic code segments in a binary that are flagged by Microsoft Defender, aiding in evasion and payload development.",
        "open_issues": 1,
        "cover_image_prompt": "A detective meticulously examining a digital file with a magnifying glass, isolating a single, glowing red byte within the code. The file sits on a high-tech workbench surrounded by disassembled computer components. Small UI elements display code snippets and Defender scan results. The scene is set in a dimly lit, futuristic lab with a focused spotlight on the file. The repository name, 'DefenderCheck,' is subtly displayed on a monitor in the background. The image should be in a 3D isometric illustration style with sharp details and a dramatic color scheme."
    },
    {
        "id": 674306868,
        "name": "hawk-eye",
        "description": "A powerful scanner to scan your Filesystem, S3, MySQL, Redis, Google Cloud Storage and Firebase storage for PII and sensitive data.",
        "url": "https://github.com/rohitcoder/hawk-eye",
        "language": "Python",
        "stars": 374,
        "forks": 41,
        "created_at": "2023-08-03T16:09:29Z",
        "updated_at": "2025-06-15T06:10:41Z",
        "topics": [
            "audit",
            "auditing",
            "cybersecurity",
            "datasecurity",
            "grc",
            "infosec",
            "pii",
            "scanner",
            "secrets-management"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-14T19:16:17Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/674306868/d6ef7cae-fd1a-4800-b1c1-90e0808dba52"
        ],
        "homepage": "",
        "readme_summary": "Hawk-eye is a command-line tool that scans various data sources, including file systems, cloud storage (S3, GCS, Firebase), and databases (MySQL, Redis), for PII and secrets. It uses advanced text analysis and OCR to delve into various document formats, providing comprehensive data protection across platforms.",
        "key_features": [
            "Scans Filesystem for PII and sensitive data",
            "Scans S3 for PII and sensitive data",
            "Scans MySQL for PII and sensitive data",
            "Scans Redis for PII and sensitive data",
            "Scans Google Cloud Storage for PII and sensitive data",
            "Scans Firebase storage for PII and sensitive data",
            "Supports multiple data sources like PostgreSQL, MongoDB, CouchDB, Google Drive, Slack",
            "Uses advanced text analysis and OCR techniques",
            "Supports various document formats like docx, xlsx, pptx, pdf, images, compressed files, and video files"
        ],
        "primary_use_case": "Scanning various data sources for Personally Identifiable Information (PII) and secrets to prevent data breaches and cyber threats.",
        "open_issues": 0,
        "cover_image_prompt": "A hawk with glowing eyes soaring over a vast landscape, scanning various data storage locations (S3 buckets, databases, file systems) represented as miniature cities and forests. The hawk's gaze penetrates through these locations, highlighting sensitive data (PII, secrets) with a bright, distinct glow. Small UI elements showing scanning progress and data security metrics float around the hawk. The scene is set at twilight with dramatic lighting. The image should be in digital painting style with clean lines and clear details."
    }
]