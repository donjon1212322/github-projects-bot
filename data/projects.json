[
    {
        "id": 971123250,
        "name": "telert",
        "description": "Command‚Äëline and Python utility that alerts the moment a command finishes executing",
        "url": "https://github.com/navig-me/telert",
        "language": "Python",
        "stars": 27,
        "forks": 2,
        "created_at": "2025-04-23T03:50:04Z",
        "updated_at": "2025-05-04T08:34:34Z",
        "topics": [
            "alert",
            "cli",
            "command-line",
            "discord",
            "fly-io",
            "microsoft-teams",
            "notification",
            "pushover",
            "railway",
            "render",
            "replit",
            "rest-api",
            "slack",
            "slack-bot",
            "teams",
            "telegram"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T06:03:27Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/971123250/5433c8f1-bec3-4f76-b609-eb1373884b44"
        ],
        "homepage": "",
        "readme_summary": "Telert is a utility that sends notifications upon completion of terminal commands or Python code. It supports various notification channels, including messaging apps, mobile devices, and custom HTTP endpoints. It can be used as a CLI tool, Python library, or a notification API, making it suitable for monitoring long-running tasks, remote servers, and CI/CD pipelines.",
        "key_features": [
            "Sends notifications when terminal commands or Python code completes",
            "Supports multiple notification channels (Telegram, Microsoft Teams, Slack, Discord, Pushover, HTTP endpoints, desktop notifications, audio alerts)",
            "Can be used as a CLI tool, Python library, or a notification API",
            "Provides information on command execution time and status codes"
        ],
        "primary_use_case": "Alerting users when long-running terminal commands or Python code finish executing, enabling them to monitor processes remotely or in CI/CD pipelines.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a diligent messenger bird, wings adorned with tiny screens displaying command-line interfaces, perched atop a server rack. The bird carries a scroll containing a 'completed' message, delivering it to various devices: a smartphone displaying a Slack notification, a desktop showing a popup alert, and a Microsoft Teams window. Subtle digital particles emanate from the server rack, swirling around the bird as it completes its task. The scene is set in a brightly lit, futuristic server room. The image should be in a flat design style with clear iconography and a vibrant color scheme, emphasizing the speed and reliability of the notification process."
    },
    {
        "id": 925377865,
        "name": "PastebinSearch",
        "description": "This script allows you to quickly search for terms on Pastebin using various search engines. It supports multiple browsers and handles special characters in search terms by URL encoding them.",
        "url": "https://github.com/byfranke/PastebinSearch",
        "language": "Shell",
        "stars": 10,
        "forks": 1,
        "created_at": "2025-01-31T19:04:24Z",
        "updated_at": "2025-05-04T08:34:41Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-02-05T15:08:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ff8308a54978d918be1414524c6f3b419a2d189d626e17e5caa76f4cbc9e6090/byfranke/PastebinSearch"
        ],
        "homepage": null,
        "readme_summary": "PastebinSearch is a Bash script that automates searching for terms on Pastebin using popular search engines. It supports customizable browsers, URL encoding, and error handling, making it easier to find specific content or investigate leaked data on Pastebin.",
        "key_features": [
            "Multi-Search Engine Support (Google, Bing, DuckDuckGo, Yahoo)",
            "Customizable Browser (Firefox, Google Chrome)",
            "URL Encoding",
            "Error Handling",
            "Timeout Support"
        ],
        "primary_use_case": "Searching for terms on Pastebin using multiple search engines to investigate leaked data or specific content.",
        "open_issues": 0,
        "cover_image_prompt": "A detective in a dimly lit office, surrounded by multiple computer screens displaying Pastebin search results. The detective uses a magnifying glass to examine snippets of text highlighted on the screens, revealing hidden keywords and patterns. Digital threads connect the screens, symbolizing the interconnected nature of the searches across different search engines. A subtle UI element in the corner shows the repository name 'PastebinSearch'. The scene is set in a film noir style with dramatic lighting and a focus on detail. The image should be in a digital painting style with clear outlines and a muted color palette."
    },
    {
        "id": 245074037,
        "name": "galoisenne",
        "description": "üï∏Ô∏è Graphs, finite fields and discrete dynamical systems in Kotlin",
        "url": "https://github.com/breandan/galoisenne",
        "language": "Kotlin",
        "stars": 131,
        "forks": 11,
        "created_at": "2020-03-05T05:07:54Z",
        "updated_at": "2025-05-03T22:03:34Z",
        "topics": [
            "adjacency-matrix",
            "arithmetic-circuits",
            "automata",
            "finite-fields",
            "finite-state-machine",
            "functional-graphs",
            "graph",
            "graph-algorithms",
            "graph-grammars",
            "graph-matching",
            "graph-theory",
            "graph-transformation",
            "graph-visualizations",
            "graphs",
            "induction",
            "kotlin",
            "linear-algebra",
            "parsing"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T22:03:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c87b3b5331b461b59b8c74cf45fdd73f5ad7ea61b36e59c783faece84c5d3b47/breandan/galoisenne"
        ],
        "homepage": "",
        "readme_summary": "Kaliningraph is a Kotlin library implementing a graph computation model that can be translated to iterated matrix multiplication on GPUs. It supports backpropagation and aims to unify various message passing schemes. The library provides inductive definitions for graphs and circuits, enabling exploration of connections between different domains using algebraic graph theory.",
        "key_features": [
            "Graph computation model",
            "Iterated matrix multiplication on GPUs",
            "Backpropagation support via Kotlin‚àá",
            "Unification of message passing schemes",
            "Inductive graph and circuit definitions"
        ],
        "primary_use_case": "Implementing graph-based computational models and exploring connections between different domains like neural networks, automata theory, and programming languages using algebraic graph theory.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously connecting islands on a vast ocean with intricate bridges made of code. Each island represents a different domain like neural networks, programming languages, or automata theory. The cartographer uses a special compass that translates mathematical equations into sturdy bridge segments. Digital particles flow along the bridges, carrying messages and computations between the islands. Small holographic displays show snippets of Kotlin code and graph visualizations. The scene is set on a futuristic map table with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 675010928,
        "name": "extra-ktor-plugins",
        "description": "Feature-rich, efficient, and highly customizable plugins for your Multiplatform Ktor Server or Client",
        "url": "https://github.com/Flaxoos/extra-ktor-plugins",
        "language": "Kotlin",
        "stars": 80,
        "forks": 5,
        "created_at": "2023-08-05T13:32:21Z",
        "updated_at": "2025-05-04T05:49:53Z",
        "topics": [
            "kotlin",
            "kotlin-multiplatform",
            "ktor",
            "ktor-plugin"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-30T13:36:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b558749e811168822924392652b2a06cf5a721b0e176526f3fa069b640197577/Flaxoos/extra-ktor-plugins"
        ],
        "homepage": "https://flaxoos.github.io/extra-ktor-plugins/",
        "readme_summary": "This repository provides a collection of feature-rich plugins for Ktor, a Kotlin multiplatform framework. These plugins enhance Ktor servers and clients with functionalities such as Kafka integration, task scheduling, rate limiting, and circuit breaking. The plugins aim to simplify development and improve the reliability and scalability of Ktor applications.",
        "key_features": [
            "Kafka integration for Ktor servers",
            "Task scheduling for distributed Ktor servers",
            "Rate limiting for Ktor servers",
            "Circuit breaker for Ktor clients",
            "Multiplatform support (JVM, Native, JS)"
        ],
        "primary_use_case": "Extending Ktor server and client functionality with pre-built plugins for common tasks like Kafka integration, task scheduling, rate limiting, and circuit breaking.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a bustling train station where a central 'Ktor Control Panel' manages the flow of data trains. Each train represents a different type of data (Kafka messages, scheduled tasks, rate-limited requests, circuit-breaker protected services). The control panel, adorned with subtle UI elements and glowing Kotlin logos, ensures smooth operation, preventing crashes and delays. The station is clean and modern, with digital displays showing real-time data flow. The scene is set in a bright, optimistic future. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 492907371,
        "name": "cryptography-kotlin",
        "description": "Kotlin Multiplatform cryptography / crypto library",
        "url": "https://github.com/whyoleg/cryptography-kotlin",
        "language": "Kotlin",
        "stars": 401,
        "forks": 25,
        "created_at": "2022-05-16T16:04:55Z",
        "updated_at": "2025-05-02T08:49:54Z",
        "topics": [
            "aes",
            "crypto",
            "cryptography",
            "ecdsa",
            "encryption",
            "kmp",
            "kotlin",
            "kotlin-multiplatform",
            "multiplatform",
            "rsa",
            "signature"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-12-13T15:44:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/21059997cfedf1576fbd986448913154b892dbb57d425101adb42f1e13bb9c6a/whyoleg/cryptography-kotlin"
        ],
        "homepage": "https://whyoleg.github.io/cryptography-kotlin/",
        "readme_summary": "cryptography-kotlin is a Kotlin Multiplatform library that offers a unified API for various cryptographic operations. It supports multiple algorithms and providers, such as OpenSSL, WebCrypto, and JDK, allowing developers to easily integrate secure cryptographic functionalities into their Kotlin applications across different platforms. The library focuses on providing a type-safe and consistent experience while leveraging well-established cryptography solutions.",
        "key_features": [
            "Multiplatform cryptography API",
            "Secure random number generation",
            "Support for ciphers, digests, signatures, key derivation, and key agreement",
            "Algorithm definitions for AES, RSA, ECDSA, ECDH, SHA, HMAC, and PBKDF2",
            "Multiple cryptography providers: OpenSSL, WebCrypto, and JDK"
        ],
        "primary_use_case": "Providing a type-safe, multiplatform cryptography library for Kotlin developers.",
        "open_issues": 22,
        "cover_image_prompt": "A skilled locksmith, representing cryptography-kotlin, meticulously crafting a series of intricate, multi-layered locks, each glowing with a soft, secure light. These locks, symbolizing encryption algorithms, protect data represented by glowing digital streams flowing through them. Subtle UI elements float nearby, displaying code snippets and cryptographic parameters. The locksmith works in a clean, futuristic workshop with tools that subtly incorporate the repository's name. The scene is bathed in a cool, professional light, emphasizing security and precision. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 711113032,
        "name": "kopy",
        "description": "Nested copies made easy in Kotlin",
        "url": "https://github.com/JavierSegoviaCordoba/kopy",
        "language": "Kotlin",
        "stars": 251,
        "forks": 6,
        "created_at": "2023-10-28T08:53:54Z",
        "updated_at": "2025-05-03T21:15:56Z",
        "topics": [
            "codegen",
            "compiler",
            "copies",
            "copy",
            "deep",
            "deep-copies",
            "deep-copy",
            "gradle",
            "k2",
            "kotlin",
            "plugin",
            "runtime"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-25T19:36:05Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/711113032/f274a840-7f67-443a-a951-400ac2809691"
        ],
        "homepage": "https://kopy.javiersc.com",
        "readme_summary": "Kopy is a Kotlin compiler plugin that simplifies the creation of deep copies. It automates the generation of `copy` and `invoke` functions for data classes, ensuring that all nested objects are properly copied. The plugin integrates with Gradle and supports the K2 compiler, offering configuration options for debugging and function generation.",
        "key_features": [
            "Kotlin compiler plugin for generating deep copy functions",
            "K2 compiler support",
            "Gradle plugin integration",
            "Configurable copy function generation (copy, invoke, or both)",
            "Debug mode with performance reporting",
            "Atomicfu library integration for performance improvement"
        ],
        "primary_use_case": "Generating nested copies (deep copies) of Kotlin data classes and other objects, ensuring that all nested objects are also copied, not just referenced.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting identical glass bottles on a high-tech assembly line. The artisan carefully inspects an original bottle, then uses advanced tools to ensure each copy is a perfect replica, down to the smallest detail. Subtle UI elements display code snippets related to deep copying, while digital particles swirl around the bottles, representing data being transferred. The scene is set in a clean, modern workshop with bright, focused lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 580836813,
        "name": "comprehensive-rust",
        "description": "This is the Rust course used by the Android team at Google. It provides you the material to quickly teach Rust.",
        "url": "https://github.com/google/comprehensive-rust",
        "language": "Rust",
        "stars": 29919,
        "forks": 1783,
        "created_at": "2022-12-21T15:17:24Z",
        "updated_at": "2025-05-04T07:40:29Z",
        "topics": [
            "android",
            "classroom",
            "course",
            "google",
            "guide",
            "rust",
            "training",
            "training-materials"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-05-01T18:17:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4a82d70e1c3259f8e859305de5d63ba490b8008f018979e5cfbe70feb0ed2db6/google/comprehensive-rust"
        ],
        "homepage": "https://google.github.io/comprehensive-rust/",
        "readme_summary": "This repository provides comprehensive Rust course materials developed by the Android team at Google. It covers a wide range of Rust topics and includes specific modules for Android, Chromium, bare-metal systems, and concurrency. The course is designed for classroom instruction and aims to help experienced engineers quickly learn Rust.",
        "key_features": [
            "Comprehensive Rust course material",
            "Covers basic syntax to advanced topics like generics and error handling",
            "Includes deep dives on Android, Chromium, bare-metal, and concurrency",
            "Tools for building and testing the course (mdbook, mdbook-svgbob, etc.)"
        ],
        "primary_use_case": "Teaching Rust to experienced software engineers, particularly those with a background in C++ or Java.",
        "open_issues": 105,
        "cover_image_prompt": "A seasoned teacher stands before a diverse group of students in a modern classroom. The teacher is presenting a complex blueprint of a modern, sleek car engine, meticulously labeled and color-coded. Each student is actively engaged, taking notes and asking questions. Subtle holographic projections display snippets of Rust code and data structures around the engine blueprint. The scene is brightly lit, conveying a sense of learning and discovery. The composition is clean and focused, with a warm color scheme. The image should be in a detailed digital painting style, emphasizing clarity and understanding."
    },
    {
        "id": 483208253,
        "name": "subcat",
        "description": "Lightning-fast passive subdomain discovery tool for security professionals and bug bounty hunters.",
        "url": "https://github.com/duty1g/subcat",
        "language": "Python",
        "stars": 298,
        "forks": 47,
        "created_at": "2022-04-19T10:59:12Z",
        "updated_at": "2025-05-03T20:24:00Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-03-12T05:27:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1354852ed7f95f6c021e7a0a049a993393d45b8f62f6418a3b674ca8a89969bd/duty1g/subcat"
        ],
        "homepage": "",
        "readme_summary": "SubCat is a subdomain discovery tool designed for penetration testers, bug bounty hunters, and security researchers. It passively aggregates data from various online sources to identify valid subdomains, offering features like fast enumeration, curated passive sources, IP scope filtering, and detailed output. The tool is built to comply with licensing and usage restrictions, ensuring minimal impact on target systems.",
        "key_features": [
            "Fast Enumeration",
            "Curated Passive Sources",
            "Lightweight & Efficient",
            "STDIN/STDOUT Integration",
            "IP Scope Filtering",
            "Detailed Output",
            "Reverse Lookup Mode",
            "Custom Module Selection",
            "Enhanced Multi-threading"
        ],
        "primary_use_case": "Passive subdomain discovery for security professionals and bug bounty hunters.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, uncharted archipelago representing the internet. The cartographer, equipped with advanced surveying tools (representing SubCat), peers through a high-powered telescope, revealing hidden islands (subdomains) shrouded in mist. Data streams flow from the telescope, illuminating the map with newly discovered locations. Small screens display API keys and configuration settings, subtly connecting the scene to the software. The scene is set in a sunlit observatory overlooking the archipelago. The image should be in a detailed digital painting style with vibrant colors and clear outlines, emphasizing the sense of discovery and exploration."
    }
]