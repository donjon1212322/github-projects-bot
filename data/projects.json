[
    {
        "id": 997887280,
        "name": "lyricScribe",
        "description": "A live lyrics fetcher for MPRIS compatible players made with Go",
        "url": "https://github.com/user354015/lyricScribe",
        "language": "Go",
        "stars": 19,
        "forks": 1,
        "created_at": "2025-06-07T12:06:27Z",
        "updated_at": "2025-08-22T10:06:46Z",
        "topics": [
            "live-lyrics",
            "lyrics",
            "lyrics-fetcher",
            "music",
            "synced-lyrics"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-08-22T09:37:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fc56783b78a76d9a4f73434c76eee347ebd26b86334c047f5e33f6a2df4cb239/user354015/lyricScribe"
        ],
        "homepage": "",
        "readme_summary": "lyricScribe is a Go script designed to fetch, check, and display synchronized lyrics for songs played using MPRIS-compatible music players. It allows users to easily view lyrics in sync with their music, and offers configuration options, including specific support for floating lyrics on Hyprland.",
        "key_features": [
            "Downloads synced lyrics",
            "Checks lyrics",
            "Displays synced lyrics for MPRIS compatible players",
            "Configuration options",
            "Hyprland floating lyrics support"
        ],
        "primary_use_case": "Fetching and displaying synced lyrics for music played through MPRIS compatible players.",
        "open_issues": 1,
        "cover_image_prompt": "A diligent scribe meticulously transcribing musical notes flowing from a grand piano onto a digital screen displaying synchronized lyrics. The scribe's quill emits glowing particles that form the words on the screen, perfectly aligned with the musical notes. A small UI element in the corner shows the lyricScribe logo and real-time lyric synchronization. The scene is set in a cozy music room with warm lighting. The image should be in a digital painting style with clear outlines and vibrant colors, creating a harmonious blend of music and technology."
    },
    {
        "id": 1030855297,
        "name": "spill",
        "description": "transient clipboard server for windows",
        "url": "https://github.com/inversepolarity/spill",
        "language": "C++",
        "stars": 3,
        "forks": 0,
        "created_at": "2025-08-02T13:24:05Z",
        "updated_at": "2025-08-22T08:05:55Z",
        "topics": [
            "clipboard",
            "clipboard-server",
            "cpp17",
            "flask",
            "python",
            "win32"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T22:55:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/536209edd005003d3c191d01b50dc95c92eba4aaa18550dd3d5890fea7774e7b/inversepolarity/spill"
        ],
        "homepage": "http://ip.evenzero.in",
        "readme_summary": "Spill is a transient clipboard server for Windows that allows users to copy and paste data between different machines. It supports both local and remote access via HTTP or HTTPS, and ensures that no data is permanently stored. The application also offers Unicode support and the ability to minimize to the system tray.",
        "key_features": [
            "Runs locally or on an external host (HTTP or HTTPS)",
            "Fully transient data storage",
            "Unicode support",
            "Minimize to tray"
        ],
        "primary_use_case": "Transient clipboard server for Windows",
        "open_issues": 0,
        "cover_image_prompt": "A diligent scribe meticulously copying information from a fleeting, ethereal scroll onto a more permanent, sturdy tablet. The scroll represents the clipboard data, appearing translucent and temporary, while the tablet symbolizes the persistent storage. The scribe's quill glows with a soft, digital light, subtly hinting at the software aspect. Small UI elements float around the scene, displaying snippets of text being transferred. The setting is a minimalist, modern workspace with a focus on clarity and efficiency. The image should be in a flat design style with clear iconography and a pastel color scheme."
    },
    {
        "id": 1031499454,
        "name": "protector",
        "description": "Real-time privacy protection for smart glasses",
        "url": "https://github.com/PrivacyIsAllYouNeed/protector",
        "language": "Python",
        "stars": 69,
        "forks": 4,
        "created_at": "2025-08-03T21:44:07Z",
        "updated_at": "2025-08-22T07:57:50Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-13T18:53:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/42dc5a084618f1e7a7d9c309bbe841f69c2b8150fb5917c96fa3e65d7db5ec83/PrivacyIsAllYouNeed/protector"
        ],
        "homepage": "https://privacy.camera",
        "readme_summary": "The 'protector' repository provides real-time privacy protection for smart glasses by filtering camera feeds. It anonymizes faces, manages consent through voice detection, and operates offline. The system offers developer-friendly features like easy camera replacement and an HTTP API for control, making it suitable for AI assistants, social apps, and enterprise applications.",
        "key_features": [
            "Anonymizes faces (blur or ellipse masking)",
            "Manages consent (detects verbal consent)",
            "Real-time processing (720p 30fps)",
            "100% offline operation",
            "Recording",
            "Easy camera replacement",
            "RTMP input / multiple output formats",
            "HTTP API for control"
        ],
        "primary_use_case": "Real-time privacy protection for smart glasses applications.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan carefully crafting privacy filters onto a pair of smart glasses in a bright, modern workshop. The artisan uses delicate tools to apply layers of protection, represented by glowing, translucent shields, over the lenses. A stream of digital data flows into the glasses, while a clean, anonymized output emerges. Subtle UI elements and code snippets float in the background, reinforcing the software aspect. The workshop is filled with soft, diffused light, creating a sense of security and innovation. The image should be in 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 1034662181,
        "name": "wlgblock",
        "description": "Wayland Gameboy locker",
        "url": "https://github.com/AdoPi/wlgblock",
        "language": "C",
        "stars": 159,
        "forks": 2,
        "created_at": "2025-08-08T19:04:49Z",
        "updated_at": "2025-08-22T04:38:27Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-08-10T11:52:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2343b406ee4ceacb28aedcfb429c11d4ace08ed34e8e81856fa469c3597ba586/AdoPi/wlgblock"
        ],
        "homepage": "",
        "readme_summary": "The wlgblock repository provides a unique way to lock and unlock a Wayland session by using a Gameboy emulator as a locker. It replaces the traditional password screen with a custom Pokémon game, where the user must solve a puzzle to unlock their session. The project leverages the ext-session-lock-v1 protocol for secure locking and involves patching both a Gameboy emulator and a Pokémon game to achieve this functionality.",
        "key_features": [
            "Replaces password screen with a Gameboy emulator.",
            "Uses a patched Pokémon game as a session unlock mechanism.",
            "Implements a custom Wayland window using EGL and keyboard listeners.",
            "Utilizes the ext-session-lock-v1 protocol for secure session locking.",
            "Hacks a Gameboy emulator (GBCC) to integrate with the Wayland window.",
            "Patches a Pokémon game (pokecrystal) to implement custom password logic."
        ],
        "primary_use_case": "Replacing the standard Wayland password screen with a Gameboy emulator running a custom Pokémon game, requiring the user to solve a puzzle within the game to unlock their session.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a pixelated Game Boy screen displaying a locked door. A determined character inside the Game Boy is solving a Pokémon puzzle, manipulating sprites and navigating menus. Upon solving the puzzle, the locked door on the Game Boy screen swings open, revealing a modern desktop environment beyond. Subtle code snippets and Wayland logos float around the Game Boy, hinting at the underlying technology. The scene is lit with a soft, nostalgic glow, emphasizing the blend of retro gaming and modern OS security. The image should be in a vibrant, 3D isometric illustration style with clear details and a playful color scheme."
    },
    {
        "id": 289516116,
        "name": "feroxbuster",
        "description": "A fast, simple, recursive content discovery tool written in Rust.",
        "url": "https://github.com/epi052/feroxbuster",
        "language": "Rust",
        "stars": 6884,
        "forks": 548,
        "created_at": "2020-08-22T15:36:19Z",
        "updated_at": "2025-08-22T08:57:13Z",
        "topics": [
            "content-discovery",
            "enumeration",
            "hacktoberfest",
            "pentest",
            "pentesting-tool",
            "rust",
            "url-bruteforcer",
            "web"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-03T13:18:50Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/289516116/e4e2cc00-0560-11eb-888b-42dbdfc1c72c"
        ],
        "homepage": "https://epi052.github.io/feroxbuster-docs/docs/",
        "readme_summary": "Feroxbuster is a content discovery tool written in Rust that performs forced browsing to identify unlinked resources on web applications. It uses brute force combined with a wordlist to recursively search for hidden files and directories, helping to uncover sensitive information and potential vulnerabilities.",
        "key_features": [
            "Fast content discovery",
            "Recursive directory enumeration",
            "Forced browsing",
            "Wordlist-based scanning"
        ],
        "primary_use_case": "Content discovery and enumeration of hidden or unlinked resources on web servers.",
        "open_issues": 24,
        "cover_image_prompt": "A seasoned archaeologist carefully brushing away sand to reveal hidden doorways in an ancient temple representing a website. The archaeologist holds a magnifying glass, revealing subtle clues and paths not immediately visible. The temple is adorned with UI elements and glowing digital particles, subtly connecting the scene to software. Small code snippets are etched into the temple walls as secondary details. The scene is set in a sunlit jungle clearing with a sense of discovery. The image should be in a detailed digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 314763206,
        "name": "urlhunter",
        "description": "a recon tool that allows searching on URLs that are exposed via shortener services",
        "url": "https://github.com/utkusen/urlhunter",
        "language": "Go",
        "stars": 1639,
        "forks": 116,
        "created_at": "2020-11-21T08:05:57Z",
        "updated_at": "2025-08-22T08:37:52Z",
        "topics": [
            "bugbounty",
            "intelligence",
            "osint",
            "recon",
            "security"
        ],
        "quality_score": 0.35,
        "contributors_count": 0,
        "last_commit_date": "2025-01-23T15:47:00Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/314763206/b8466780-2cfa-11eb-874f-c28a74c678b0"
        ],
        "homepage": "",
        "readme_summary": "urlhunter is a Go-based reconnaissance tool designed to discover URLs exposed through shortener services. It leverages the URLTeam's archive of brute-forced URLs, allowing users to search for specific keywords or regular expressions within specified date ranges. The tool is useful for security researchers and bug bounty hunters seeking to uncover hidden or sensitive information.",
        "key_features": [
            "Searches for URLs exposed via shortener services.",
            "Analyzes URLTeam's collections of brute-forced URLs.",
            "Supports keyword-based searching with single, multiple (AND logic), and regex options.",
            "Allows specifying date ranges for archive analysis.",
            "Offers output to file and archive removal options.",
            "Provides a workaround for Archive.org throttling via local torrent downloads."
        ],
        "primary_use_case": "Reconnaissance and intelligence gathering, particularly for bug bounty hunting and cyber threat intelligence.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a detective meticulously sifting through a vast digital haystack, illuminated by the glow of a monitor displaying lines of code. The detective, representing urlhunter, uses a magnifying glass to examine tiny, scattered URLs, each a potential clue. These URLs, like shimmering threads, lead to a treasure chest overflowing with valuable intelligence. The background features stylized representations of URL shortener services, subtly integrated into the scene. The overall style is a clean, modern digital illustration with a focus on clarity and visual storytelling, employing a cool color palette to evoke a sense of focused investigation."
    },
    {
        "id": 4927517,
        "name": "arkime",
        "description": "Arkime is an open source, large scale, full packet capturing, indexing, and database system.",
        "url": "https://github.com/arkime/arkime",
        "language": "JavaScript",
        "stars": 6766,
        "forks": 1086,
        "created_at": "2012-07-06T16:10:55Z",
        "updated_at": "2025-08-22T08:19:44Z",
        "topics": [
            "big-data",
            "c",
            "javascript",
            "network-monitoring",
            "nsm",
            "packet-capture",
            "pcap",
            "security"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-15T14:48:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/404f6866c947f0315f4fe2391a1e4c896161b02abb7e01a834d407ca7fd68350/arkime/arkime"
        ],
        "homepage": "https://arkime.com",
        "readme_summary": "Arkime is an open-source network analysis tool that captures and indexes network traffic for security monitoring and analysis. It stores data in standard PCAP format, provides a web interface for browsing and searching, and offers APIs for programmatic access. Arkime is designed to scale to handle large network environments.",
        "key_features": [
            "Full packet capture and storage in PCAP format",
            "Indexed access to network traffic",
            "Web interface for browsing, searching, and exporting PCAPs",
            "APIs for downloading PCAP data and JSON session data",
            "Scalable architecture for handling high traffic volumes",
            "Metadata retention based on Elasticsearch cluster scale"
        ],
        "primary_use_case": "Network analysis and security monitoring through full packet capture and indexing.",
        "open_issues": 75,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, swirling ocean of network data. The cartographer uses specialized tools to capture individual packets, represented as glowing fish, and carefully logs them into detailed maps and indexes. A large magnifying glass hovers over the scene, highlighting specific data points and connections. Subtle UI elements float in the background, displaying real-time network traffic and search queries. The scene is bathed in a soft, ethereal light, creating a sense of discovery and control. The image should be in a detailed digital painting style with vibrant colors and clear outlines."
    },
    {
        "id": 303766501,
        "name": "tolgee-platform",
        "description": "Developer & translator friendly web-based localization platform",
        "url": "https://github.com/tolgee/tolgee-platform",
        "language": "TypeScript",
        "stars": 3411,
        "forks": 292,
        "created_at": "2020-10-13T16:36:39Z",
        "updated_at": "2025-08-22T07:44:58Z",
        "topics": [
            "angular",
            "hacktoberfest",
            "i18n",
            "i18next",
            "internationalization",
            "javascript",
            "l10n",
            "localization",
            "localization-tool",
            "react",
            "svelte",
            "translation",
            "translation-management",
            "translations",
            "translations-api",
            "vue"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-22T07:44:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0912d42d86463aaff7f7aba4c2e006fafa83c510b454c8bcb22eac762f867924/tolgee/tolgee-platform"
        ],
        "homepage": "https://tolgee.io",
        "readme_summary": "Tolgee is an open-source localization platform designed to streamline the translation process for developers and translators. It offers features like in-context translation, one-click screenshots, and production environment translation capabilities. Tolgee integrates seamlessly into applications through powerful SDKs, providing a truly embedded translation experience.",
        "key_features": [
            "In-context translation",
            "One-click screenshots for translation",
            "Translation directly on production environments",
            "True integrations via SDKs"
        ],
        "primary_use_case": "Web-based localization platform for developers and translators.",
        "open_issues": 165,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a vibrant tapestry, weaving together threads of different languages. Each thread represents a translated phrase, carefully chosen and placed to create a beautiful, cohesive design. The artisan uses a digital loom with a user-friendly interface, displaying real-time previews of the tapestry. Small screens show snippets of code and translation suggestions. The scene is set in a bright, modern workshop with natural light. The image should be in a 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the Tolgee logo."
    }
]