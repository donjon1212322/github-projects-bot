[
    {
        "id": 923474048,
        "name": "Catime",
        "description": "A very useful timer (Pomodoro Clock).[‰∏ÄÊ¨æÈùûÂ∏∏Â•ΩÁî®ÁöÑËÆ°Êó∂Âô®(üçÖÁï™ËåÑÊó∂Èíü)]",
        "url": "https://github.com/vladelaina/Catime",
        "language": "C",
        "stars": 233,
        "forks": 13,
        "created_at": "2025-01-28T10:07:53Z",
        "updated_at": "2025-03-10T09:56:49Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-10T09:56:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9200becbe83badba208b8435bf567e6d5ae9f0c0ee2d96854553640c0597458e/vladelaina/Catime"
        ],
        "homepage": "",
        "readme_summary": "Catime is a simple and customizable countdown timer tool for Windows, designed with a transparent interface and Pomodoro clock functionality. It offers flexible timing options, a variety of customization settings for fonts and colors, and configurable timeout actions such as notifications, screen locking, or system shutdown. It is intended to improve focus and productivity.",
        "key_features": [
            "Transparent interface",
            "Pomodoro clock functionality",
            "Customizable options (fonts, colors)",
            "Flexible timing (countdown, count up)",
            "Timeout actions (notification, lock screen, shutdown)"
        ],
        "primary_use_case": "A simple Windows countdown timer tool with Pomodoro clock functionality.",
        "open_issues": 11,
        "cover_image_prompt": "A focused student, represented by a cute cat character wearing glasses, sits at a desk with a stack of books titled 'Time Management' and 'Productivity Hacks'. The cat is diligently using a transparent, digital timer overlaid on a classic analog clock, which is emitting soft, glowing light. The timer displays a Pomodoro countdown, and small UI elements float around the cat, showing customizable settings like font choices and color palettes. The scene is set in a cozy, sunlit study with a window overlooking a peaceful garden. The composition is clean and focused, with a pastel color scheme. The image should be in a flat design style with clear iconography and vibrant colors."
    },
    {
        "id": 441756043,
        "name": "wolf",
        "description": "Stream virtual desktops and games running in Docker",
        "url": "https://github.com/games-on-whales/wolf",
        "language": "C++",
        "stars": 855,
        "forks": 55,
        "created_at": "2021-12-25T20:48:23Z",
        "updated_at": "2025-03-10T07:05:00Z",
        "topics": [
            "cpp",
            "docker",
            "games",
            "moonlight",
            "remote-desktop",
            "streaming"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T14:26:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b30e5bc7d04fe14319c9067f85e139dd5b49ec7d254e1bc8d514558ba163db03/games-on-whales/wolf"
        ],
        "homepage": "https://games-on-whales.github.io/wolf/stable/",
        "readme_summary": "Wolf is a streaming server designed for Moonlight that enables multiple users to stream different games or virtual desktops from a single server. It supports on-demand virtual desktop creation, multi-GPU utilization, and low-latency streaming, all within a Linux and Docker-centric environment. The project prioritizes configurability, allowing users to customize encoding pipelines and GPU settings.",
        "key_features": [
            "Multi-user streaming of different content from a single host",
            "On-demand creation of virtual desktops with custom resolution/FPS",
            "Simultaneous use of multiple GPUs for different tasks (e.g., encoding and gaming)",
            "Low latency video and audio streaming with gamepad support",
            "Linux and Docker-first approach with containerized games",
            "Hackable configuration for encoding pipelines, GPU settings, and Docker/Podman details"
        ],
        "primary_use_case": "Streaming virtual desktops and games running in Docker to multiple remote clients using Moonlight.",
        "open_issues": 29,
        "cover_image_prompt": "A skilled conductor orchestrating a symphony of screens, each displaying a different video game. The conductor, representing the Wolf server, stands on a platform labeled 'Docker,' directing streams of data (represented by musical notes) to individual gamers (represented by audience members) each immersed in their own virtual world. Subtle UI elements float around the conductor, showing encoding pipelines and GPU settings. The scene is set in a grand theater with dynamic lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 659450105,
        "name": "jetson-intro-to-distillation",
        "description": "A tutorial introducing knowledge distillation as an optimization technique for deployment on NVIDIA Jetson",
        "url": "https://github.com/NVIDIA-AI-IOT/jetson-intro-to-distillation",
        "language": "Python",
        "stars": 175,
        "forks": 9,
        "created_at": "2023-06-27T21:34:47Z",
        "updated_at": "2025-03-10T09:21:12Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2023-11-14T20:38:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/25323c2744bd56cfb6fa8f795c3740d809b28412ba0e2df7784c885c30f61354/NVIDIA-AI-IOT/jetson-intro-to-distillation"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a tutorial on knowledge distillation, demonstrating how to transfer knowledge from a large OpenCLIP model to a smaller ResNet18 model for image classification on the STL10 dataset. It explores the impact of various factors like data, distillation methods, and model architecture on the final accuracy. The tutorial also covers model optimization using TensorRT for deployment on NVIDIA Jetson devices.",
        "key_features": [
            "Knowledge distillation from OpenCLIP to ResNet18",
            "Classification on the STL10 dataset",
            "Model profiling and optimization for NVIDIA Jetson",
            "TensorRT optimization",
            "Analysis of data, methods, and architecture impact on accuracy"
        ],
        "primary_use_case": "Optimizing large models for deployment on NVIDIA Jetson devices using knowledge distillation.",
        "open_issues": 2,
        "cover_image_prompt": "A seasoned sculptor meticulously chiseling a miniature, detailed statue (ResNet18) from a large, rough block of marble (OpenCLIP). The sculptor uses specialized tools that glow with digital energy, transferring intricate details from a holographic projection of the original marble block onto the smaller statue. The workshop is filled with subtle tech elements, such as floating data visualizations and small screens displaying model performance metrics. The scene is set in a brightly lit, modern studio with a focus on precision and artistry. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 343078060,
        "name": "dashy",
        "description": "üöÄ A self-hostable personal dashboard built for you. Includes status-checking, widgets, themes, icon packs, a UI editor and tons more!",
        "url": "https://github.com/Lissy93/dashy",
        "language": "Vue",
        "stars": 19991,
        "forks": 1485,
        "created_at": "2021-02-28T10:35:44Z",
        "updated_at": "2025-03-10T09:21:26Z",
        "topics": [
            "awesome",
            "dashboard",
            "docker",
            "hacktoberfest",
            "homelab",
            "homepage",
            "mit",
            "nodejs",
            "organization",
            "productivity",
            "pwa",
            "self-hosted",
            "startpage",
            "vue"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-09T01:27:54Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/343078060/82f850a2-b1af-4e9f-9245-c92700d74856"
        ],
        "homepage": "https://dashy.to",
        "readme_summary": "Dashy is a self-hosted dashboard application that allows users to organize their self-hosted services and applications in one central location. It offers features such as real-time status monitoring, widgets for displaying dynamic content, customizable themes and layouts, and various authentication options. Dashy aims to provide a user-friendly and efficient way to manage and access various self-hosted services.",
        "key_features": [
            "Multiple page support",
            "Real-time status monitoring",
            "Widgets for dynamic content",
            "Instant search and customizable hotkeys",
            "Built-in color themes and UI editor",
            "Icon options (Font-Awesome, homelab icons, Favicon, images, emojis)",
            "Authentication with multi-user access and SSO",
            "Multi-language support",
            "Cloud backup and restore",
            "Workspace and minimal views",
            "Customizable layout and appearance",
            "Easy setup with Docker or bare metal",
            "YAML-based configuration or UI configuration"
        ],
        "primary_use_case": "A self-hosted personal dashboard for organizing and accessing self-hosted services.",
        "open_issues": 121,
        "cover_image_prompt": "Imagine a central control panel, like a conductor's podium, orchestrating various applications represented by musical instruments. The conductor, with a tablet displaying the Dashy interface, effortlessly manages and monitors each instrument's performance, ensuring harmonious operation. Status lights above each instrument indicate their health, while data streams from the instruments visualize real-time information on the tablet. The scene is set in a modern, minimalist studio with soft, ambient lighting. Subtle UI elements and code snippets float in the background, connecting the metaphor to software. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 11397939,
        "name": "goaccess",
        "description": "GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems or through your browser.",
        "url": "https://github.com/allinurl/goaccess",
        "language": "C",
        "stars": 19082,
        "forks": 1126,
        "created_at": "2013-07-14T03:42:08Z",
        "updated_at": "2025-03-10T10:07:09Z",
        "topics": [
            "analytics",
            "apache",
            "c",
            "caddy",
            "cli",
            "command-line",
            "dashboard",
            "data-analysis",
            "gdpr",
            "goaccess",
            "google-analytics",
            "monitoring",
            "ncurses",
            "nginx",
            "privacy",
            "real-time",
            "terminal",
            "tui",
            "web-analytics",
            "webserver"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-08T01:16:14Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/11397939/13256b00-8d79-11ea-80b0-e79990000a34"
        ],
        "homepage": "https://goaccess.io",
        "readme_summary": "GoAccess is a real-time web log analyzer that runs in a terminal or browser, providing fast and valuable HTTP statistics. It supports nearly all web log formats, offers incremental log processing, and requires minimal configuration. Its primary use case is to provide system administrators with a visual server report on the fly.",
        "key_features": [
            "Real-time web log analysis",
            "Terminal and browser-based interface",
            "Minimal configuration",
            "Application response time tracking",
            "Support for various web log formats",
            "Incremental log processing",
            "Low dependency (ncurses)",
            "Visitor tracking",
            "Virtual host metrics",
            "ASN mapping",
            "Customizable color schemes",
            "Large dataset support",
            "Docker support"
        ],
        "primary_use_case": "Real-time web log analysis and interactive viewing for system administrators.",
        "open_issues": 403,
        "cover_image_prompt": "A seasoned detective in a dimly lit, high-tech office, meticulously examining streams of data flowing across multiple monitors. The detective uses a magnifying glass to analyze web server logs represented as glowing code fragments, uncovering hidden patterns and insights. The office is filled with subtle tech elements like server racks and network diagrams. A large screen displays a real-time dashboard with key metrics. The scene is set in a noir style with dramatic lighting and a focus on detail. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 624156003,
        "name": "tenere",
        "description": "ü§ñ TUI interface for LLMs written in Rust",
        "url": "https://github.com/pythops/tenere",
        "language": "Rust",
        "stars": 478,
        "forks": 19,
        "created_at": "2023-04-05T21:35:03Z",
        "updated_at": "2025-03-10T07:59:54Z",
        "topics": [
            "chatgpt",
            "cli",
            "llamacpp",
            "llm",
            "ollama",
            "ratatui",
            "rust",
            "tui"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-08T08:11:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/63125fb97c1efd3d16e3199da62627dbce91bfeb9bae65aaa1746b066f29779b/pythops/tenere"
        ],
        "homepage": "https://crates.io/crates/tenere",
        "readme_summary": "Tenere is a Rust-based application that offers a terminal user interface (TUI) for interacting with Large Language Models (LLMs). It supports multiple backends like ChatGPT, llama.cpp, and ollama, and provides features like syntax highlighting, chat history, vim keybindings and configuration options for a streamlined command-line LLM experience.",
        "key_features": [
            "Syntax highlighting",
            "Chat history",
            "Save chats to files",
            "Vim keybindings",
            "Clipboard support",
            "Multiple backends (ChatGPT, llama.cpp, ollama)",
            "Automatic loading of last saved chat"
        ],
        "primary_use_case": "Providing a TUI interface for interacting with various LLMs (ChatGPT, llama.cpp, ollama) from the command line.",
        "open_issues": 9,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a user interface from raw clay, shaping windows, buttons, and text fields with their hands. This artisan is surrounded by glowing orbs representing different LLMs like ChatGPT, llama.cpp, and Ollama, each contributing unique properties to the clay. The artisan carefully integrates these orbs into the interface, creating a seamless and intuitive experience. Small screens display snippets of Rust code and TUI elements, subtly connecting the craft to the digital realm. The scene is set in a sunlit workshop with a warm, inviting atmosphere. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 496595154,
        "name": "sshclick",
        "description": "SSH Config terminal manager based on Python and Click framework with Rich and Textual UI",
        "url": "https://github.com/karlot/sshclick",
        "language": "Python",
        "stars": 86,
        "forks": 2,
        "created_at": "2022-05-26T11:35:13Z",
        "updated_at": "2025-03-10T06:03:59Z",
        "topics": [
            "cli-app",
            "python",
            "ssh-config",
            "ssh-tool"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-02-12T19:39:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/92e957bfd979c80b317fdf3d4f54001bd1ce1eaa8412fc86e86533ee3fc272b6/karlot/sshclick"
        ],
        "homepage": "",
        "readme_summary": "SSHClick is a terminal-based tool for managing SSH configuration files. It allows users to easily list, filter, modify, and view SSH host entries. The tool supports grouping and metadata through comments and provides a TUI for interactive management.",
        "key_features": [
            "Terminal-based SSH config management",
            "List, filter, modify, and view SSH host entries",
            "Supports grouping and metadata via comments",
            "Textual User Interface (TUI) via `ssht` command"
        ],
        "primary_use_case": "Managing and organizing SSH configuration files in a terminal environment.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled librarian meticulously organizing a vast collection of scrolls (SSH configurations) within a futuristic library. The librarian uses a special lens (sshclick) to quickly sort, group, and access specific scrolls. Digital interfaces embedded in the shelves display metadata and connections between the scrolls. The library is bathed in soft, glowing light, highlighting the order and efficiency. Small code snippets float as particles, subtly connecting the scene to software. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, emphasizing clarity and organization."
    },
    {
        "id": 436297812,
        "name": "memos",
        "description": "An open-source, lightweight note-taking solution. The pain-less way to create your meaningful notes. Your Notes, Your Way.",
        "url": "https://github.com/usememos/memos",
        "language": "Go",
        "stars": 37990,
        "forks": 2720,
        "created_at": "2021-12-08T15:30:18Z",
        "updated_at": "2025-03-10T09:41:34Z",
        "topics": [
            "docker",
            "go",
            "markdown",
            "memo",
            "microblog",
            "note-taking",
            "notecard",
            "react",
            "self-hosted",
            "social-network",
            "sqlite"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T14:53:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/436297812/02a4fe19-4a8b-4d8b-bd1f-be120b90737a"
        ],
        "homepage": "https://usememos.com",
        "readme_summary": "Memos is an open-source, self-hosted note-taking solution built with Go and React.js. It emphasizes privacy by storing data locally and offers a lightweight yet powerful experience with Markdown support, customization options, and a completely free-to-use model.",
        "key_features": [
            "Privacy First: Local data storage",
            "Create at Speed: Plain text with Markdown support",
            "Lightweight but Powerful: Go and React.js based",
            "Customizable: Server name, icon, theme customization",
            "Open Source: Fully open source",
            "Free to Use: No cost, no subscriptions"
        ],
        "primary_use_case": "Self-hosted note-taking",
        "open_issues": 17,
        "cover_image_prompt": "Imagine a diligent librarian meticulously organizing scattered notes into a beautifully structured digital library. The librarian, bathed in soft light, uses a magical quill that transforms handwritten memos into neatly arranged entries on glowing screens. Digital particles float around, representing the seamless flow of information. A subtle UI element in the background displays the Memos logo and a simplified note-taking interface. The scene is set in a cozy, futuristic library with warm lighting and a clean, focused composition. The image should be in a 3D isometric illustration style with rich details and vibrant, pastel colors."
    },
    {
        "id": 416278604,
        "name": "pwru",
        "description": "Packet, where are you? -- eBPF-based Linux kernel networking debugger",
        "url": "https://github.com/cilium/pwru",
        "language": "C",
        "stars": 3196,
        "forks": 184,
        "created_at": "2021-10-12T09:55:50Z",
        "updated_at": "2025-03-10T08:39:06Z",
        "topics": [
            "bpf",
            "ebpf",
            "kernel",
            "linux",
            "network",
            "tracing"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-02-28T10:15:06Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/416278604/c51a3364-fa02-4e56-b811-749293f72e9d"
        ],
        "homepage": "",
        "readme_summary": "pwru is an eBPF-based tool designed for tracing network packets within the Linux kernel. It provides advanced filtering options and allows for detailed inspection of kernel state, enabling users to effectively debug network connectivity problems. The tool supports various kernel versions and tracing backends, offering flexibility in how packets are tracked and analyzed.",
        "key_features": [
            "eBPF-based network packet tracing",
            "Advanced filtering capabilities",
            "Fine-grained introspection of kernel state",
            "Support for kprobe and kprobe-multi backends",
            "Filtering by function name, ifname, netns, mark",
            "Tracing of TC and XDP bpf progs",
            "Tracking packets even after NAT or tunnel decapsulation"
        ],
        "primary_use_case": "Debugging network connectivity issues in the Linux kernel.",
        "open_issues": 26,
        "cover_image_prompt": "Imagine a skilled detective, represented by a gopher wearing a magnifying glass and trench coat, meticulously tracing glowing packets of data as they flow through a complex network of pipes and valves within a futuristic server room. The detective is following the packets' journey, identifying bottlenecks and potential drop points. Small screens display kernel function names and data flow visualizations. The scene is illuminated by the soft glow of server lights and digital particles emanating from the packets. The image should be in a 3D isometric illustration style with clean lines and a focus on clarity."
    }
]