[
    {
        "id": 836460535,
        "name": "Alice",
        "description": "Alice is a smart desktop AI assistant application built with Vue.js, Vite, and Electron. Advanced memory system, function calling, MCP support and more.",
        "url": "https://github.com/pmbstyle/Alice",
        "language": "TypeScript",
        "stars": 124,
        "forks": 14,
        "created_at": "2024-07-31T22:45:54Z",
        "updated_at": "2025-07-19T09:39:36Z",
        "topics": [
            "ai",
            "ai-assistant",
            "chatgpt",
            "electron",
            "groq-api",
            "hnswlib",
            "javascript",
            "mcp-client",
            "openai",
            "openrouter-api",
            "pinia",
            "qbittorrent-api",
            "responses-api",
            "speach-to-text",
            "text-to-speech",
            "typescript",
            "vector-database",
            "vite",
            "voice-activity-detection",
            "vue"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-07-17T13:05:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5498517e4e9feaeaa62767c7a298030970b2f41aad51905717f963353338df87/pmbstyle/Alice"
        ],
        "homepage": "",
        "readme_summary": "Alice is an open-source AI desktop assistant that offers voice interaction, memory & context awareness, vision capabilities, and computer use tools. It allows users to interact with their computer through voice commands, leveraging function calling and customizable settings for a personalized AI experience. Alice is built with Vue.js, Vite, and Electron.",
        "key_features": [
            "Voice Interaction (VAD, OpenAI TTS)",
            "Memory & Context (Short-term, Long-term, Summarization, Emotion awareness)",
            "Vision & Visual Output (Screenshot interpretation, Image generation)",
            "Computer Use Tools (File system browsing, Shell command execution, Granular command approvals)",
            "Function Calling (Web search, Calendar/Gmail, Torrent, Time/Date, Clipboard, Task scheduler, Open apps/URLs, Image generation, MCP server support)",
            "Flexible Settings (LLM provider, Model choice, Prompt tuning, Audio/mic, Tools & MCP config, Google integrations)"
        ],
        "primary_use_case": "A smart desktop AI assistant application.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a friendly, helpful robot assistant sitting on a user's desktop, represented by a clean, modern desk with a glowing monitor. The robot is depicted as a friendly, expressive character, perhaps with a screen face displaying helpful information. The robot is interacting with various elements on the desk: it's organizing files (represented by miniature folders), summarizing documents (shown as glowing scrolls), and responding to voice commands (indicated by sound waves emanating from a microphone). Subtle UI elements float around the robot, showing snippets of code and data visualizations. The scene is brightly lit with a focus on clarity and approachability. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 817827211,
        "name": "vid2text",
        "description": null,
        "url": "https://github.com/kashw1n/vid2text",
        "language": "Python",
        "stars": 9,
        "forks": 0,
        "created_at": "2024-06-20T14:18:10Z",
        "updated_at": "2025-07-18T20:06:46Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-13T03:29:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/407f9ca622e37c3d47239833c6ab796b4ce50106c636553609c5f3392ba7fc84/kashw1n/vid2text"
        ],
        "homepage": null,
        "readme_summary": "The vid2text tool enables users to create searchable transcripts from various video and audio sources, including YouTube videos, local files, and M3U8 streams. It leverages local Whisper models for transcription and stores the results in an SQLite database, accessible through a Datasette web interface. Batch processing is supported via YAML configuration files.",
        "key_features": [
            "Multi-source support (YouTube, local videos, M3U8 streams)",
            "Local transcription using MLX Whisper or OpenAI Whisper",
            "SQLite storage with Datasette web interface",
            "Batch processing via YAML configuration"
        ],
        "primary_use_case": "Extracting searchable transcriptions from video and audio sources.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled scribe meticulously transcribing audio waves emanating from a vintage microphone into neatly organized text scrolls. The microphone sits atop a desk cluttered with various audio sources like vinyl records, cassette tapes, and a smartphone displaying a YouTube video. The text scrolls are then fed into a glowing SQLite database, visualized as a crystalline structure, which is accessible through a Datasette web interface displayed on a nearby monitor. Subtle code snippets and waveform visualizations float in the background, connecting the scene to software. The scene is bathed in warm, inviting light, creating a sense of focused productivity. The image should be in a detailed digital painting style with clear outlines and a vibrant color scheme."
    },
    {
        "id": 257787813,
        "name": "firezone",
        "description": "Enterprise-ready zero-trust access platform built on WireGuardÂ®.",
        "url": "https://github.com/firezone/firezone",
        "language": "Elixir",
        "stars": 7400,
        "forks": 324,
        "created_at": "2020-04-22T04:05:12Z",
        "updated_at": "2025-07-19T09:35:45Z",
        "topics": [
            "cloud",
            "devsecops",
            "elixir",
            "elixir-lang",
            "firewall",
            "liveview",
            "network",
            "network-security",
            "networking",
            "phoenix",
            "privacy",
            "rust-lang",
            "security",
            "self-hosted",
            "virtual-network",
            "vpn",
            "vpn-server",
            "wireguard",
            "wireguard-ui",
            "wireguard-vpn"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-19T05:26:41Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/257787813/7852ca28-8b51-4d6b-ab84-1da339831478"
        ],
        "homepage": "https://www.firezone.dev",
        "readme_summary": "Firezone is an open-source zero-trust access platform built on WireGuard. It provides a modern alternative to legacy VPNs, offering features like granular access control, multiple authentication options, and easy deployment. Firezone aims to provide secure and scalable remote access management for organizations of all sizes.",
        "key_features": [
            "Fast: Built on WireGuard",
            "Scalable: Deploy multiple gateways for load balancing and failover",
            "Private: Peer-to-peer, end-to-end encrypted tunnels",
            "Secure: Zero attack surface due to holepunching tech",
            "Open: Open-source codebase",
            "Flexible: Multiple authentication options",
            "Simple: Easy deployment and configuration"
        ],
        "primary_use_case": "Securely manage remote access for organizations of any size using a zero-trust approach.",
        "open_issues": 396,
        "cover_image_prompt": "A gatekeeper stands before a glowing portal, inspecting travelers seeking access to a vibrant city. The gatekeeper holds a device that scans each traveler, verifying their identity and access permissions. Approved travelers receive a green light and pass through the portal, while unauthorized individuals are denied entry. The city skyline in the background features subtle network diagrams and security icons. Small screens display authentication logs and access control policies. The scene is set in a futuristic control center with cool, blue lighting. The image should be in a flat design style with clear iconography and a focus on security."
    },
    {
        "id": 867701772,
        "name": "tewi",
        "description": "Text-based interface for the Transmission BitTorrent daemon",
        "url": "https://github.com/anlar/tewi",
        "language": "Python",
        "stars": 67,
        "forks": 0,
        "created_at": "2024-10-04T14:55:14Z",
        "updated_at": "2025-07-19T06:38:31Z",
        "topics": [
            "python",
            "textual",
            "torrent",
            "transmission",
            "tui"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-04T10:04:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f8b81cf0a1062ff3874b6d8e892b3e960dc0ff6c9e7cd929aaaa8262be2d9efc/anlar/tewi"
        ],
        "homepage": "",
        "readme_summary": "Tewi is a text-based user interface (TUI) for managing the Transmission BitTorrent daemon. It allows users to connect to a Transmission daemon, browse torrents, view details, add new torrents, and perform various actions like starting, pausing, removing, and verifying torrents, all from a terminal.",
        "key_features": [
            "Connect to Transmission daemon by its credentials",
            "Browse torrents list",
            "Different view modes: card, compact, oneline",
            "Display torrent details: overview, files, trackers, peers",
            "Add new torrents",
            "Torrent actions: start/pause, remove/trash, verify, reannounce",
            "View and toggle Turtle Mode",
            "View Transmission session statistics",
            "Dark and light color themes"
        ],
        "primary_use_case": "Text-based management of a Transmission BitTorrent daemon.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra, but instead of musicians, the orchestra is composed of torrent files, each represented by a unique instrument. The conductor, representing Tewi, uses a sleek, text-based interface projected onto a translucent screen to control the flow of data, visualized as musical notes rising and falling. The Transmission daemon, depicted as a powerful engine, hums quietly in the background, responding to the conductor's commands. Small UI elements showing torrent details subtly float around the conductor. The scene is set in a modern, minimalist concert hall with soft, ambient lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 190169745,
        "name": "ripe-atlas-software-probe",
        "description": "Probe codebase of RIPE Atlas, a global network measuring Internet connectivity and reachability",
        "url": "https://github.com/RIPE-NCC/ripe-atlas-software-probe",
        "language": "C",
        "stars": 294,
        "forks": 68,
        "created_at": "2019-06-04T09:23:46Z",
        "updated_at": "2025-07-19T08:19:10Z",
        "topics": [
            "internet",
            "internet-measurements",
            "linux",
            "measurements"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-04-02T15:31:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6d1f54c4dc9dca274003a83a4e9e85fd9070ce7d38b467e390bc364a7646d4d2/RIPE-NCC/ripe-atlas-software-probe"
        ],
        "homepage": "https://atlas.ripe.net/",
        "readme_summary": "The ripe-atlas-software-probe repository contains the codebase for the RIPE Atlas software probe, which is part of a global network that measures Internet connectivity and reachability. It allows users to deploy software probes on various platforms, including Debian, Raspberry Pi OS, and Enterprise Linux, to contribute to a real-time understanding of the Internet's state. The repository also supports building an OpenWRT package for embedded devices.",
        "key_features": [
            "Internet connectivity measurement",
            "Network reachability analysis",
            "Software probe implementation",
            "Support for Debian, Raspberry Pi OS, and Enterprise Linux",
            "OpenWRT package building"
        ],
        "primary_use_case": "Measuring Internet connectivity and reachability using a global network of software probes.",
        "open_issues": 12,
        "cover_image_prompt": "A cartographer meticulously charting the vast expanse of the Internet, represented as a sprawling, interconnected archipelago. The cartographer uses a specialized sextant that emits beams of light, probing the network's depths and revealing hidden islands (representing connected devices and networks). Data streams flow from these islands, converging on the cartographer's desk, where they are transformed into a detailed map. Small screens display real-time measurements and network statistics. The scene is set in a high-tech observatory overlooking the digital archipelago, bathed in the soft glow of data streams. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 772283421,
        "name": "unsend",
        "description": "Open source alternative to Resend,Sendgrid, Postmark etc.",
        "url": "https://github.com/unsend-dev/unsend",
        "language": "TypeScript",
        "stars": 1531,
        "forks": 136,
        "created_at": "2024-03-14T22:16:24Z",
        "updated_at": "2025-07-19T08:23:07Z",
        "topics": [
            "email",
            "postmark",
            "resend",
            "sendgrid",
            "ses",
            "ses-dashboard",
            "ses-monitoring"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-16T11:48:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f02b45241f20c7f4964cc3dd702bfc829222719f80a84a5bf2662d2c6a70b777/unsend-dev/unsend"
        ],
        "homepage": "https://unsend.dev",
        "readme_summary": "Unsend is an open-source email sending infrastructure that leverages Amazon SES to provide a reliable and cost-effective alternative to services like Resend and Sendgrid. It offers a comprehensive dashboard for monitoring email delivery metrics, managing contacts, and sending both transactional and marketing emails. Unsend also supports SMTP and a REST API, with plans to expand to other sending protocols like SMS and push notifications.",
        "key_features": [
            "Add domains",
            "Transactional Mails",
            "Rest API",
            "Dashboard (Delivered, opened, clicked, bounced)",
            "Marketing email",
            "SMTP support",
            "Schedule API"
        ],
        "primary_use_case": "Open source alternative to Resend, Sendgrid, Postmark etc. for sending emails reliably and cheaply with a dashboard for managing contacts and sending bulk emails.",
        "open_issues": 24,
        "cover_image_prompt": "Imagine a skilled postal worker meticulously sorting letters in a high-tech, futuristic post office. Each letter represents an email, and the worker ensures each one is delivered reliably and affordably. The post office is filled with glowing screens displaying delivery metrics and contact lists. The worker uses advanced tools to manage subscriptions and filter out spam. Small code snippets and UI elements float in the air, subtly connecting the scene to software. The repository name, 'Unsend,' is subtly displayed on the main sorting machine. The scene is brightly lit with a clean, modern aesthetic. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]