[
    {
        "id": 1027789393,
        "name": "rewindtty",
        "description": "A terminal session recorder and replayer written in C that allows you to capture and replay terminal sessions with precise timing.",
        "url": "https://github.com/debba/rewindtty",
        "language": "C",
        "stars": 16,
        "forks": 0,
        "created_at": "2025-07-28T14:34:09Z",
        "updated_at": "2025-07-30T09:14:04Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-07-29T08:48:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f54810e030376fcc3e574e77e9e4f7f87a1ebca4b766d930e1a90724e17145cc/debba/rewindtty"
        ],
        "homepage": "",
        "readme_summary": "RewindTTY is a C-based terminal session recorder and replayer. It captures terminal input/output with accurate timing information and stores it in a JSON format. The tool allows users to replay sessions with original timing, making it useful for debugging, auditing, or creating demonstrations.",
        "key_features": [
            "Record terminal sessions with accurate timing",
            "Replay sessions with original timing",
            "Store sessions in JSON format",
            "Graceful shutdown and file closure on interruption",
            "Lightweight with minimal dependencies"
        ],
        "primary_use_case": "Capturing and replaying terminal sessions with precise timing for debugging, auditing, or demonstration purposes.",
        "open_issues": 0,
        "cover_image_prompt": "An archivist meticulously rewinding a giant, glowing film reel representing a terminal session. The archivist uses a special crank that emits sparks of JSON data. The rewound session is displayed on a holographic screen, showing perfectly timed commands and outputs. Small UI elements float around the scene, displaying code snippets and timing information. The scene is set in a futuristic archive with warm, inviting lighting. The image should be in a detailed 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 188700274,
        "name": "copyparty",
        "description": "Portable file server with accelerated resumable uploads, dedup, WebDAV, FTP, TFTP, zeroconf, media indexer, thumbnails++ all in one file, no deps",
        "url": "https://github.com/9001/copyparty",
        "language": "Python",
        "stars": 11836,
        "forks": 358,
        "created_at": "2019-05-26T15:28:33Z",
        "updated_at": "2025-07-30T10:13:46Z",
        "topics": [
            "copyparty",
            "file-server",
            "file-sharing",
            "file-upload-server",
            "ftp-server",
            "nas-frontend",
            "tftp-server",
            "webdav-server"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-29T20:24:17Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/188700274/42754d5b-fa34-45dd-9030-6ff0c16036be"
        ],
        "homepage": "",
        "readme_summary": "Copyparty is a portable file server that supports resumable uploads and downloads through a web browser. It offers multiple protocols including HTTP, WebDAV, FTP, TFTP, and SMB, and provides features like media indexing, thumbnails, file management, and sharing capabilities. It can be deployed on various devices and has optional Android and iOS integrations.",
        "key_features": [
            "Resumable uploads/downloads",
            "HTTP, WebDAV, FTP, TFTP, SMB protocols",
            "Android app and iOS shortcuts",
            "Media indexer and thumbnails",
            "File manager (cut/paste, rename, delete)",
            "Shares (temporary links)",
            "Batch rename",
            "RSS feeds",
            "Media player with playlist support"
        ],
        "primary_use_case": "Turning almost any device into a file server with resumable uploads/downloads.",
        "open_issues": 69,
        "cover_image_prompt": "A friendly octopus wearing a server rack as a hat, juggling various file types (images, documents, videos) with its tentacles. Each tentacle represents a different protocol (HTTP, WebDAV, FTP, TFTP, SMB), indicated by small icons near the tentacle's base. The octopus is smiling and standing on a small device (like a Raspberry Pi), symbolizing portability. Subtle UI elements float around the octopus, showing upload progress bars and thumbnail previews. The scene is brightly lit with a clean, modern aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 949199938,
        "name": "machine-learning-visualized",
        "description": "ML algorithms implemented and derived from first-principles in Jupyter Notebooks and NumPy",
        "url": "https://github.com/gavinkhung/machine-learning-visualized",
        "language": "Shell",
        "stars": 784,
        "forks": 43,
        "created_at": "2025-03-15T22:31:42Z",
        "updated_at": "2025-07-30T09:38:10Z",
        "topics": [
            "book",
            "jupyter-notebook",
            "latex",
            "machine-learning",
            "neural-network",
            "numpy",
            "python"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-09T06:51:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b0a529646911ea6e2899294323058f1e300f897e2e01a8cddd58e0e87084c20e/gavinkhung/machine-learning-visualized"
        ],
        "homepage": "https://ml-visualized.com/",
        "readme_summary": "The Machine Learning Visualized repository provides Jupyter Notebook implementations of various machine learning algorithms, derived from first principles using NumPy. It focuses on visualizing the training process and the impact of weights on loss functions through interactive notebooks. The repository serves as a platform for learning and understanding machine learning concepts through interactive code and visualizations.",
        "key_features": [
            "Implements machine learning algorithms from first principles",
            "Provides Jupyter Notebooks with mathematical derivations",
            "Offers interactive notebooks for visualizing weight influence on loss functions",
            "Generates visualizations of machine learning algorithms during training",
            "Uses Jupyter Book to create a website with Markdown and Jupyter Notebooks"
        ],
        "primary_use_case": "Learning and visualizing machine learning algorithms through code and interactive notebooks.",
        "open_issues": 3,
        "cover_image_prompt": "A sculptor meticulously chisels away at a rough block of marble, revealing a perfectly formed neural network within. The sculptor's tools are labeled with mathematical equations and NumPy code snippets. Digital projections display visualizations of machine learning algorithms training and converging. The scene is set in a bright, modern workshop filled with glowing particles representing data. The composition is clean and focused, with a warm color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 652712035,
        "name": "airllm",
        "description": "AirLLM 70B inference with single 4GB GPU",
        "url": "https://github.com/lyogavin/airllm",
        "language": "Jupyter Notebook",
        "stars": 5881,
        "forks": 460,
        "created_at": "2023-06-12T16:28:41Z",
        "updated_at": "2025-07-30T09:56:06Z",
        "topics": [
            "chinese-llm",
            "chinese-nlp",
            "finetune",
            "generative-ai",
            "instruct-gpt",
            "instruction-set",
            "llama",
            "llm",
            "lora",
            "open-models",
            "open-source",
            "open-source-models",
            "qlora"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T13:11:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/32404435dd9fc4e8db7676158afed2224355ff93befe5ed0c5d2c812c50eb94c/lyogavin/airllm"
        ],
        "homepage": "",
        "readme_summary": "AirLLM optimizes memory usage for LLM inference, allowing 70B models to run on a single 4GB GPU without quantization. It supports various models like Llama, ChatGLM, QWen, and offers features like model compression and CPU inference. The library aims to make large language models accessible on resource-constrained environments.",
        "key_features": [
            "Enables inference of 70B LLMs on a single 4GB GPU",
            "Supports Llama3.1 405B on 8GB VRAM",
            "Offers 8bit/4bit quantization",
            "Supports CPU inference",
            "Supports non-sharded models",
            "Supports multiple models: ChatGLM, QWen, Baichuan, Mistral, InternLM",
            "Provides model compression for faster inference",
            "Supports MacOS"
        ],
        "primary_use_case": "Running large language models with limited GPU memory.",
        "open_issues": 112,
        "cover_image_prompt": "Imagine a skilled architect effortlessly constructing a towering skyscraper, each floor representing a layer of a complex AI model. The architect uses lightweight, translucent building blocks, symbolizing efficient memory usage, to build the structure on a single, compact foundation representing a 4GB GPU. The skyscraper glows with a soft, internal light, showcasing the power of inference. Subtle UI elements float around the structure, displaying real-time performance metrics and code snippets. The scene is set in a futuristic cityscape with a clear blue sky. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 319848237,
        "name": "doggo",
        "description": ":dog: Command-line DNS Client for Humans. Written in Golang",
        "url": "https://github.com/mr-karan/doggo",
        "language": "Go",
        "stars": 3742,
        "forks": 122,
        "created_at": "2020-12-09T05:07:07Z",
        "updated_at": "2025-07-30T05:27:53Z",
        "topics": [
            "dns",
            "dns-client",
            "doh"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T06:40:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8a7c7eb4957ed5fd4b256333a82ce9d353fecd0b8ebc4fa02150f60059cafc81/mr-karan/doggo"
        ],
        "homepage": "https://doggo.mrkaran.dev/",
        "readme_summary": "Doggo is a command-line DNS client written in Go that provides human-readable output and supports multiple DNS protocols like DoH, DoT, and DoQ. It allows users to perform DNS lookups, query specific record types, and obtain results in JSON format for scripting. Doggo offers cross-platform support and aims to be a modern alternative to traditional DNS tools like `dig`.",
        "key_features": [
            "Human-readable output",
            "JSON output support",
            "Multiple transport protocols (DoH, DoT, DoQ, TCP, UDP, DNSCrypt)",
            "Multiple resolver support",
            "Reverse DNS lookups",
            "Cross-platform support"
        ],
        "primary_use_case": "Command-line DNS client for performing DNS lookups and queries.",
        "open_issues": 30,
        "cover_image_prompt": "A skilled cartographer meticulously charting unknown territories on a digital map, representing DNS resolution. The cartographer uses a magical compass that points towards different servers (DoH, DoT, DoQ), each visualized as unique islands in a vast ocean of data. The map displays domain names as constellations, and the cartographer's quill transforms these names into precise coordinates. Small UI elements float around the scene, showing DNS query results and network protocols. The setting is a futuristic library filled with glowing servers and data streams. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    }
]