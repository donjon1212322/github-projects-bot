[
    {
        "id": 1034083859,
        "name": "tidyai",
        "description": "TidyAI -A lightweight, console AI-powered file organization tool for Windows for your messy folders using ChatGPT lives in your context menu ",
        "url": "https://github.com/geetbatth/tidyai",
        "language": "PowerShell",
        "stars": 19,
        "forks": 1,
        "created_at": "2025-08-07T20:17:40Z",
        "updated_at": "2025-08-13T08:41:53Z",
        "topics": [
            "ai",
            "automation",
            "chatgpt",
            "file-management",
            "file-organization",
            "gpt",
            "openai",
            "powershell",
            "productivity",
            "windows"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T22:58:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bce5d2a38a50301e48e3daefca3fc0ec4937f59e8dbcfab9e3ac9715c9c6f7ca/geetbatth/tidyai"
        ],
        "homepage": "",
        "readme_summary": "TidyAI is a PowerShell-based Windows tool that leverages ChatGPT to intelligently organize files within messy folders. It integrates directly into the Windows Explorer context menu, allowing users to right-click a folder and initiate the AI-powered organization process. The tool is designed to be safe, only moving files into appropriate folders and providing an undo system for easy reversion.",
        "key_features": [
            "AI-Powered file organization using ChatGPT",
            "Right-Click Integration in Windows Explorer",
            "Safe file management (moves only, no rename/delete)",
            "Undo System for reverting organization",
            "Batch Processing for large folders",
            "Cost-Effective GPT-4 Mini model",
            "Pure PowerShell implementation (no dependencies)"
        ],
        "primary_use_case": "AI-powered file organization for Windows using ChatGPT, accessible via the context menu.",
        "open_issues": 0,
        "cover_image_prompt": "A meticulous librarian, powered by a glowing AI brain, organizes chaotic stacks of files into neatly labeled folders within a vast digital library. The librarian uses a special lens to analyze each file, understanding its content and placing it in the correct location. Small UI elements float around the scene, displaying file paths and organization progress. The repository name, 'TidyAI,' is subtly displayed on the librarian's desk. The scene is set in a bright, airy digital library with a clean and organized aesthetic. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1022165857,
        "name": "pennywiseai-tracker",
        "description": "PennyWise automatically reads transaction SMS messages and transforms them    into organized financial data with on-device AI assistance. No manual   entry, no cloud processing, complete privacy.",
        "url": "https://github.com/sarim2000/pennywiseai-tracker",
        "language": "Kotlin",
        "stars": 79,
        "forks": 8,
        "created_at": "2025-07-18T15:07:31Z",
        "updated_at": "2025-08-13T09:02:03Z",
        "topics": [
            "android",
            "expense-tracker",
            "kotlin",
            "mediapipe",
            "on-device-ai",
            "sms-parser"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-08-13T09:01:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/912e57e468f4fe8583ceb1e3cc6a66a894e36ac0746bf47f3f86c7eba53daac9/sarim2000/pennywiseai-tracker"
        ],
        "homepage": "https://github.com/sarim2000/pennywiseai-tracker",
        "readme_summary": "PennyWise AI is a free and open-source Android expense tracker that automatically parses transaction SMS messages from Indian banks, providing users with clear insights into their spending habits. It features on-device AI assistance, subscription tracking, and data export capabilities, all while ensuring complete privacy without cloud processing.",
        "key_features": [
            "Smart SMS Parsing",
            "Clear Insights (Analytics and Charts)",
            "Subscription Tracking",
            "On-device AI Assistant",
            "Auto-Categorization",
            "Data Export"
        ],
        "primary_use_case": "Automatic expense tracking from bank SMS for Android users in India.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a skilled tailor meticulously crafting a suit from scattered pieces of fabric. The tailor, representing PennyWise, uses a glowing needle to stitch together SMS messages (the fabric pieces) into a perfectly tailored financial report (the suit). UI elements float around the tailor, displaying charts and graphs. The tailor's workshop is clean and modern, with subtle digital displays showing bank logos. The scene is brightly lit, conveying efficiency and clarity. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1033484250,
        "name": "bitchat-plugin",
        "description": "Vibe Coded Bitchat Plugin for Linux using bluer  #rust #linux #bitchat #bluetooth #mesh",
        "url": "https://github.com/spr-networks/bitchat-plugin",
        "language": "Rust",
        "stars": 4,
        "forks": 1,
        "created_at": "2025-08-06T22:19:05Z",
        "updated_at": "2025-08-12T11:22:59Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-07T08:38:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f0ceaf0f2d0d0e8f6bb06aa8d60c4ca82db822257d77158891b2a9781307e9ce/spr-networks/bitchat-plugin"
        ],
        "homepage": null,
        "readme_summary": "The bitchat-plugin repository provides a Linux-based plugin, designed especially for SPR routers, that allows devices to join and relay messages within a Bitchat mesh network. It incorporates Noise XX E2E encryption for secure communication and can be provisioned with an API key to offer unique WiFi passwords to Bitchat clients. This facilitates secure and private communication over a decentralized network.",
        "key_features": [
            "Runs on Linux in the terminal",
            "Handles Noise XX E2E encryption",
            "Relays Packets",
            "Enables SPR to join the Bitchat mesh and relay messages",
            "Can be provisioned with an API key for super to hand out unique wifi passwords to bitchat clients"
        ],
        "primary_use_case": "Enabling a Linux-based device, particularly an SPR router, to participate in a Bitchat mesh network, relaying messages and providing WiFi access via unique passwords.",
        "open_issues": 0,
        "cover_image_prompt": "A lone radio tower on a windswept hill, its signal reaching out to a network of interconnected devices scattered across a landscape. The tower acts as a central hub, relaying messages between devices that are otherwise out of range. Each device glows faintly, indicating its participation in the mesh network. The landscape includes both urban and rural settings, symbolizing the plugin's versatility. Subtle UI elements are overlaid on some devices, showing simplified chat interfaces. The scene is bathed in a soft, ethereal light, conveying a sense of connectivity and community. The image should be in a 3D isometric illustration style with clean lines and a muted color palette."
    },
    {
        "id": 49081891,
        "name": "brmodelo-app",
        "description": "BRMW is a free open source entity-relationship database modeling tool. We're working to make learning database modeling simple and accessible for everyone.",
        "url": "https://github.com/brmodeloweb/brmodelo-app",
        "language": "JavaScript",
        "stars": 1438,
        "forks": 55,
        "created_at": "2016-01-05T17:37:44Z",
        "updated_at": "2025-08-13T06:51:50Z",
        "topics": [
            "angularjs",
            "database",
            "database-modeling",
            "entity-relationship-diagram",
            "javascript",
            "modeling",
            "nodejs",
            "relational-databases"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-06-22T20:08:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bf92679b6babe7229c265be779ab51f6e58d61a2031e0de6a0cc143135765d08/brmodeloweb/brmodelo-app"
        ],
        "homepage": "https://www.brmodeloweb.com",
        "readme_summary": "The brmodelo-app is a web application designed for database modeling and teaching. It provides a user-friendly interface for creating and visualizing entity-relationship diagrams. The application aims to make database modeling simple and accessible for everyone, offering features for both development and testing.",
        "key_features": [
            "Web application for database modeling",
            "Teaching tool for database modeling",
            "Supports entity-relationship diagrams",
            "Docker support (work in progress)",
            "E2E and Unit tests"
        ],
        "primary_use_case": "Database modeling and teaching.",
        "open_issues": 52,
        "cover_image_prompt": "Imagine a skilled architect meticulously crafting a blueprint for a grand cathedral, each line representing a database entity and their relationships. The architect uses a digital drafting table that subtly displays code snippets and ER diagrams. Glowing lines connect the different parts of the blueprint, symbolizing the connections within the database model. The scene is set in a bright, modern studio with natural light streaming in. The image should be in a clean, 3D isometric illustration style with clear lines and vibrant colors."
    },
    {
        "id": 86057635,
        "name": "slonik",
        "description": "A Node.js PostgreSQL client with runtime and build time type safety, and composable SQL.",
        "url": "https://github.com/gajus/slonik",
        "language": "TypeScript",
        "stars": 4804,
        "forks": 144,
        "created_at": "2017-03-24T10:45:50Z",
        "updated_at": "2025-08-13T08:06:54Z",
        "topics": [
            "javascript",
            "nodejs",
            "postgres",
            "postgresql",
            "typescript"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T14:52:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/201c53a056d37ebf090c2bd2ce7ef865f190895a217821a8759eea3531cb7214/gajus/slonik"
        ],
        "homepage": "",
        "readme_summary": "Slonik is a Node.js PostgreSQL client emphasizing type safety, detailed logging, and composable SQL. It promotes writing raw SQL and discourages ad-hoc dynamic SQL generation. Key features include runtime validation, safe connection/transaction handling, detailed logging, and an ESLint plugin for SQL.",
        "key_features": [
            "Runtime validation",
            "Assertions and type safety",
            "Safe connection handling",
            "Safe transaction handling",
            "Safe value interpolation",
            "Transaction nesting",
            "Transaction events",
            "Transaction retrying",
            "Query retrying",
            "Detailed logging",
            "Asynchronous stack trace resolution",
            "Middlewares",
            "Mapped errors",
            "ESLint plugin"
        ],
        "primary_use_case": "A Node.js PostgreSQL client with runtime and build time type safety, and composable SQL.",
        "open_issues": 26,
        "cover_image_prompt": "A skilled architect meticulously constructing a robust bridge using precisely cut stone blocks, each representing a SQL query. The bridge connects two bustling cities labeled 'Node.js' and 'PostgreSQL'. The architect uses a set of finely crafted tools, representing Slonik's type safety and validation features. Subtle UI elements float around the architect, displaying snippets of TypeScript code and database schemas. The scene is bathed in warm, inviting light, symbolizing the ease of use and reliability. The image should be in a detailed 3D isometric illustration style with a focus on clarity and precision."
    },
    {
        "id": 721844134,
        "name": "sql-flow",
        "description": "DuckDB for streaming data",
        "url": "https://github.com/turbolytics/sql-flow",
        "language": "Python",
        "stars": 607,
        "forks": 14,
        "created_at": "2023-11-21T22:18:36Z",
        "updated_at": "2025-08-13T08:36:27Z",
        "topics": [],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-26T00:40:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c690d2e6f9cd872992ff4895dd9bcc98b9330113a23132440514c2718b44ed9d/turbolytics/sql-flow"
        ],
        "homepage": "",
        "readme_summary": "SQLFlow is a stream processing engine that allows users to define data pipelines using SQL. It leverages DuckDB and Apache Arrow for high-performance processing of data from sources like Kafka and WebSockets. The processed data can be written to various output sinks, including PostgreSQL, Kafka topics, and cloud storage, in formats like Parquet and Iceberg.",
        "key_features": [
            "Process data from Kafka, WebSockets, and more.",
            "Write outputs to PostgreSQL, Kafka topics, or cloud storage (such as S3), in a variety of formats, including parquet and iceberg.",
            "Built on DuckDB and Apache Arrow for high-speed processing."
        ],
        "primary_use_case": "Streaming data transformations using SQL.",
        "open_issues": 25,
        "cover_image_prompt": "Imagine a skilled chef in a bustling kitchen, representing SQLFlow, expertly transforming raw ingredients (streaming data from Kafka represented by conveyor belts) into gourmet dishes (refined data outputs like PostgreSQL tables and cloud storage files). The chef uses a powerful DuckDB-branded food processor and Apache Arrow-shaped knives for high-speed preparation. Digital screens display SQL queries and data flows, subtly connecting the culinary process to software. The kitchen is brightly lit with a clean, modern design. The image should be in a 3D isometric illustration style with vibrant colors and rich details, emphasizing the transformation process."
    }
]