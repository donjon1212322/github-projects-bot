[
    {
        "id": 942369670,
        "name": "clippy",
        "description": "ðŸ“Ž Clippy, now with some AI",
        "url": "https://github.com/felixrieseberg/clippy",
        "language": "TypeScript",
        "stars": 569,
        "forks": 22,
        "created_at": "2025-03-04T02:17:19Z",
        "updated_at": "2025-05-08T09:59:05Z",
        "topics": [
            "ai",
            "clippy",
            "electron",
            "llama",
            "llm",
            "retro"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T00:38:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ff4427ec4a8ac71251201740d46c638926eba05a0ce659cb7131307145018733/felixrieseberg/clippy"
        ],
        "homepage": "https://felixrieseberg.github.io/clippy/",
        "readme_summary": "Clippy is an Electron-based application that allows users to run large language models (LLMs) locally on their computers using a 1990s-inspired user interface. It leverages Llama.cpp for efficient model execution and supports various GGUF models, offering a nostalgic yet functional way to interact with modern AI technology.",
        "key_features": [
            "Simple chat interface",
            "Pre-packaged with Llama.cpp for efficient model execution",
            "Supports custom models, prompts, and parameters",
            "Offline and local operation"
        ],
        "primary_use_case": "Running large language models locally with a retro-style interface.",
        "open_issues": 22,
        "cover_image_prompt": "Imagine a retro office from the 1990s, complete with a bulky computer monitor displaying a modern chat interface. Clippy, the iconic paperclip assistant, stands beside the monitor, gesturing towards it with a helpful expression. Instead of offering mundane advice, Clippy is surrounded by glowing particles representing language models, with subtle code snippets floating in the background. The scene is bathed in a nostalgic, slightly pixelated light, blending the charm of the past with the power of modern AI. The image should be in a 3D isometric illustration style with vibrant colors and clear details, subtly incorporating the 'Clippy' name into the monitor's interface."
    },
    {
        "id": 967455814,
        "name": "dnsanity",
        "description": "High-performance DNS validator using template-based verification",
        "url": "https://github.com/nil0x42/dnsanity",
        "language": "Go",
        "stars": 95,
        "forks": 4,
        "created_at": "2025-04-16T13:34:32Z",
        "updated_at": "2025-05-08T09:14:46Z",
        "topics": [
            "bugbounty",
            "bugbountyautomation",
            "dns",
            "dns-validation",
            "dns-validator",
            "dnsvalidator",
            "golang",
            "projectdiscovery",
            "recon"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-06T09:30:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/967455814/8cbde83d-9eb0-4750-a70a-bc735f7c51ad"
        ],
        "homepage": "",
        "readme_summary": "DNSanity is a high-performance DNS validator written in Go that uses template-based verification to quickly validate DNS servers at scale. It offers features such as customizable validation templates, concurrency, and rate limiting, making it suitable for security reconnaissance and DNS brute-forcing.",
        "key_features": [
            "Fast DNS resolver validation",
            "Customizable validation templates",
            "Concurrency for testing at scale",
            "Global and per-server rate limiting",
            "Automatic template re-validation"
        ],
        "primary_use_case": "Validating DNS resolvers for security reconnaissance and DNS brute-forcing.",
        "open_issues": 2,
        "cover_image_prompt": "A seasoned detective meticulously examining DNS resolvers under a magnifying glass, revealing hidden vulnerabilities like cracks in a foundation. The detective's office is filled with maps of the internet, and glowing screens display real-time DNS data streams. A magnifying glass emits digital particles highlighting the resolvers' strengths and weaknesses. The repository name, 'DNSanity,' is subtly etched on the detective's desk. The scene is set in a dimly lit, noir-style office with a focus on the detective's focused expression. The image should be in a digital painting style with sharp details and a dramatic color scheme."
    },
    {
        "id": 904947981,
        "name": "ShortMoji",
        "description": "ShortMoji is a lightweight python program that makes it easy to insert emojis and special characters anywhere with simple keyboard shortcuts (similar to Discord's emoji system).",
        "url": "https://github.com/TooFuW/ShortMoji",
        "language": "Python",
        "stars": 35,
        "forks": 0,
        "created_at": "2024-12-17T21:25:21Z",
        "updated_at": "2025-04-19T05:52:07Z",
        "topics": [
            "desktop-app",
            "emoji",
            "emoji-keyboard",
            "emoticon",
            "keyboard",
            "keyboard-shortcuts",
            "python",
            "shortcut",
            "windows",
            "windows-app"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-20T04:11:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6ee14f51751b442dcd36599fd030aa39258f83cddf8ebcffbbd8c7347bb3a5d9/TooFuW/ShortMoji"
        ],
        "homepage": "",
        "readme_summary": "ShortMoji is a lightweight Python application that allows users to quickly insert emojis and special characters using simple keyboard shortcuts, similar to Discord's emoji system. It provides a convenient way to enhance text input with visual elements without needing to browse through extensive emoji libraries or character maps. The application supports a wide range of emojis and special characters, accessible through easy-to-remember shortcuts.",
        "key_features": [
            "Emoji insertion via keyboard shortcuts",
            "Special character insertion via keyboard shortcuts",
            "Lightweight python program",
            "Similar to Discord's emoji system",
            "145 unique emojis and special characters"
        ],
        "primary_use_case": "Quick insertion of emojis and special characters using keyboard shortcuts in any application.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled calligrapher, seated at a high-tech desk, effortlessly transforming short, cryptic keyboard commands into beautifully rendered emojis and special characters that float into a chat window. The desk is adorned with glowing keycaps displaying the shortcut commands, and the chat window showcases a lively conversation filled with diverse emojis. Digital particles subtly highlight the conversion process, linking the keyboard input to the visual output. The scene is bathed in soft, ambient light, creating a sense of seamless digital artistry. The image should be in a clean, flat design style with vibrant colors and clear iconography."
    },
    {
        "id": 915933343,
        "name": "beforeafter",
        "description": "A browser-based tool for comparing and combining before/after images. No server needed, runs entirely in your browser.",
        "url": "https://github.com/yani-/beforeafter",
        "language": "HTML",
        "stars": 14,
        "forks": 0,
        "created_at": "2025-01-13T06:08:43Z",
        "updated_at": "2025-05-08T08:36:55Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-01-13T06:09:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7c1600f7f186372a20261fe1abce17f942ef4940ee4910d6d5740d1bbc82d5e4/yani-/beforeafter"
        ],
        "homepage": "https://yani-.github.io/beforeafter/",
        "readme_summary": "BeforeAfter is a browser-based tool for comparing and combining images, particularly useful for visualizing changes. It offers features like side-by-side comparison, visual diff highlighting, clipboard pasting, drag-and-drop support, and customizable appearance. The tool requires no installation and runs entirely in the browser.",
        "key_features": [
            "Combine before/after images side by side or vertically",
            "Visual diff tool to highlight changes between images",
            "Paste images directly from clipboard",
            "Drag and drop support",
            "Customizable appearance",
            "Download combined or diff images",
            "Mobile-friendly",
            "No installation required"
        ],
        "primary_use_case": "Comparing and combining before/after images in a browser.",
        "open_issues": 0,
        "cover_image_prompt": "An artist standing before a split canvas, seamlessly merging two distinct landscape paintings into a unified scene. One side depicts a dull, faded landscape, while the other shows a vibrant, colorful version. The artist uses a digital brush emitting glowing particles to blend the two halves, creating a harmonious image. A small tablet displays the BeforeAfter logo and UI elements. The scene is set in a bright, modern studio with natural light. The composition is clean and focused with a balanced color scheme. The image should be in a flat design style with clear iconography and subtle gradients."
    },
    {
        "id": 913468419,
        "name": "LLaVA-Mini",
        "description": "LLaVA-Mini is a unified large multimodal model (LMM) that can support the understanding of images, high-resolution images, and videos in an efficient manner. ",
        "url": "https://github.com/ictnlp/LLaVA-Mini",
        "language": "Python",
        "stars": 467,
        "forks": 21,
        "created_at": "2025-01-07T18:37:05Z",
        "updated_at": "2025-05-08T08:38:11Z",
        "topics": [
            "efficient",
            "gpt4o",
            "gpt4v",
            "large-language-models",
            "large-multimodal-models",
            "llama",
            "llava",
            "multimodal",
            "multimodal-large-language-models",
            "video",
            "vision",
            "vision-language-model",
            "visual-instruction-tuning"
        ],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-01-13T03:12:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/83b0d6bac88fa3b734518857da362b04d258dbad5f072cb4828fa28028a8617f/ictnlp/LLaVA-Mini"
        ],
        "homepage": "",
        "readme_summary": "LLaVA-Mini is a large multimodal model designed for efficient image, high-resolution image, and video understanding. It achieves this efficiency by representing images with only one vision token, significantly reducing computational effort, response latency, and memory usage. The model maintains performance comparable to previous LLaVA versions while offering substantial improvements in efficiency and resource utilization.",
        "key_features": [
            "Efficient image, high-resolution image, and video understanding using a single vision token.",
            "77% FLOPs reduction compared to previous methods.",
            "Low-latency responses (40 milliseconds).",
            "Reduced VRAM memory usage (0.6 MB/image), enabling processing of long videos.",
            "Performance comparable to LLaVA-v1.5 with significantly fewer vision tokens."
        ],
        "primary_use_case": "Efficient image and video understanding with reduced computational cost and memory usage.",
        "open_issues": 24,
        "cover_image_prompt": "A skilled miniaturist meticulously crafting a tiny, intricate diorama inside a single, glowing computer chip. The diorama depicts various scenes: a bustling city representing image understanding, a sprawling landscape for high-resolution images, and a flowing river symbolizing video processing. The miniaturist uses specialized tools to precisely arrange each element, highlighting the efficiency of the process. UI elements displaying code snippets and performance metrics subtly float around the chip. The scene is bathed in soft, diffused light, emphasizing the detail and precision. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 915772200,
        "name": "Days-Left-Reminder",
        "description": "Tells you how many days or sunsets you have left",
        "url": "https://github.com/gieoon/Days-Left-Reminder",
        "language": "JavaScript",
        "stars": 19,
        "forks": 1,
        "created_at": "2025-01-12T18:57:51Z",
        "updated_at": "2025-05-08T01:11:52Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2025-01-20T19:09:50Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cce7296ae3fc2e7761729336ec284d1570a9efb1c6632fbfff73471d966e0ea1/gieoon/Days-Left-Reminder"
        ],
        "homepage": null,
        "readme_summary": "The Days-Left-Reminder repository is a JavaScript-based tool designed to provide a daily reminder of the user's remaining days, calculated from a specified target date. It sends daily email notifications to encourage users to focus on meaningful activities and avoid wasting time. The script is intended to be run in App Script and requires customization with the user's email address and target date.",
        "key_features": [
            "Calculates remaining days based on a target date.",
            "Sends daily reminders via email.",
            "Customizable target date and email address.",
            "Runs as an App Script."
        ],
        "primary_use_case": "Providing a daily reminder of the limited time remaining in one's life to encourage more meaningful actions.",
        "open_issues": 0,
        "cover_image_prompt": "An elderly person sitting on a park bench, watching a vibrant sunset over a cityscape. Each setting sun represents a day passing. The person is holding a small, glowing digital tablet displaying a countdown timer showing the remaining sunsets. Subtle UI elements on the tablet show personalized settings for target date and email notifications. The scene is set in a peaceful park with warm, nostalgic lighting. The image should be in a digital painting style with soft colors and clear details, evoking a sense of reflection and urgency. The repository name, 'Days-Left-Reminder,' is subtly etched into the park bench."
    },
    {
        "id": 895245856,
        "name": "videoseal",
        "description": "Open and efficient video watermarking",
        "url": "https://github.com/facebookresearch/videoseal",
        "language": "Python",
        "stars": 375,
        "forks": 43,
        "created_at": "2024-11-27T20:49:30Z",
        "updated_at": "2025-05-08T05:56:10Z",
        "topics": [
            "video",
            "watermarking"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-04-04T10:20:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e2ec62aeccf90c71f0083f168f4cbfc04f67c5032855f992f82feb068462f034/facebookresearch/videoseal"
        ],
        "homepage": "",
        "readme_summary": "The Video Seal repository provides an open and efficient solution for video watermarking. It includes pre-trained models, training and inference code, and evaluation tools for both image and video watermarking. The repository also offers baselines of state-of-the-art image watermarking models adapted for video, enabling users to easily implement and experiment with video watermarking techniques.",
        "key_features": [
            "Image and video watermarking",
            "Pre-trained models",
            "Training code",
            "Inference code",
            "Evaluation tools",
            "Baselines of state-of-the-art image watermarking models adapted for video"
        ],
        "primary_use_case": "Open and efficient video watermarking for protecting video content.",
        "open_issues": 11,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate seals onto digital video streams flowing through a high-tech workshop. The artisan uses a specialized tool that emits glowing, coded light, embedding the seals seamlessly into the video. Completed videos emerge with a subtle, shimmering aura, indicating their authenticity and protection. UI elements display watermarking parameters and security metrics. The scene is set in a clean, modern laboratory with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 67834502,
        "name": "mimesis",
        "description": "Mimesis is a robust data generator for Python that can produce a wide range of fake data in multiple languages.",
        "url": "https://github.com/lk-geimfari/mimesis",
        "language": "Python",
        "stars": 4557,
        "forks": 338,
        "created_at": "2016-09-09T21:41:22Z",
        "updated_at": "2025-05-08T00:34:40Z",
        "topics": [
            "data",
            "dataframe",
            "datascience",
            "dummy",
            "factory",
            "factory-boy",
            "fake",
            "fixtures",
            "generator",
            "json-generator",
            "mimesis",
            "mock",
            "pandas",
            "polars",
            "pytest-plugin",
            "python",
            "schema",
            "syntetic",
            "synthetic-data",
            "testing"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-05-05T10:22:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/67834502/89fdbd6f-8093-46fa-a4f4-1238bbc942f2"
        ],
        "homepage": "https://mimesis.name",
        "readme_summary": "Mimesis is a Python library for generating fake data in various languages. It offers a wide range of data providers, schema-based data generation, and supports custom extensions. Mimesis is designed for ease of use, performance, and multilingual support, making it suitable for testing, development, and data science projects.",
        "key_features": [
            "Multilingual support (46 locales)",
            "Extensible with custom data providers and field handlers",
            "Easy to use with simple design and clear documentation",
            "High performance",
            "Variety of data providers",
            "Schema-based data generators",
            "Intuitive with editor support and autocompletion"
        ],
        "primary_use_case": "Generating fake data for software development, testing, and data science.",
        "open_issues": 13,
        "cover_image_prompt": "A skilled artisan meticulously crafting diverse, realistic-looking artifacts from raw materials on a workbench. Each artifact represents a different type of data (names, addresses, emails, etc.). The artisan uses various tools, each labeled with a programming language icon, to shape and refine the data. Subtle UI elements float around the workbench, displaying data schemas and validation rules. The scene is set in a bright, organized workshop with a clean, focused composition. The color scheme is vibrant and inviting. The image should be in a 3D isometric illustration style with rich details and a touch of whimsy."
    }
]