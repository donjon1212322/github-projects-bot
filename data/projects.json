[
    {
        "id": 748568485,
        "name": "whoBIRD",
        "description": "Identify bird sounds in real time with this Android version of BirdNET. Bird sound recognition for more than 6,000 species worldwide. ",
        "url": "https://github.com/woheller69/whoBIRD",
        "language": "Kotlin",
        "stars": 420,
        "forks": 21,
        "created_at": "2024-01-26T09:19:16Z",
        "updated_at": "2025-04-05T09:00:04Z",
        "topics": [
            "android-app",
            "artificial-intelligence",
            "birding",
            "birdnet",
            "birdsong"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-05T08:25:24Z",
        "media_urls": [
            "https://opengraph.githubassets.com/446ab1e132a74a8113d95bd7c138afc71293fe4cdeecd8ad3f6c9fd5b6c9a28b/woheller69/whoBIRD"
        ],
        "homepage": "",
        "readme_summary": "whoBIRD is an Android application that identifies bird sounds in real-time using the BirdNET framework. It boasts an extensive database of over 6,000 bird species and operates offline. The app provides various customization options, including audio source selection, noise filtering, and threshold adjustments for detection sensitivity.",
        "key_features": [
            "Real-time bird sound identification",
            "Offline functionality (no internet required)",
            "Extensive database of over 6,000 bird species",
            "Customization options (ignore date/place, show images, audio source selection, high pass filter, threshold setting, save .wav files)",
            "Detection notifications and detailed detection list",
            "Ability to backup, share, or delete observation database"
        ],
        "primary_use_case": "Identifying bird sounds in real-time using an Android app, without requiring an internet connection.",
        "open_issues": 6,
        "cover_image_prompt": "A curious child in a lush forest, holding up a smartphone to record birdsong. The phone's screen displays a real-time spectrogram and the name of the bird being identified. Surrounding the child are glowing, stylized representations of various bird species, each emitting a unique sound wave. Subtle UI elements float in the air, showing the app's interface and bird identification data. The forest is bathed in soft, dappled sunlight, creating a magical and educational atmosphere. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 94530674,
        "name": "nvtop",
        "description": "GPU & Accelerator process monitoring for AMD, Apple, Huawei, Intel, NVIDIA and Qualcomm",
        "url": "https://github.com/Syllo/nvtop",
        "language": "C",
        "stars": 8933,
        "forks": 317,
        "created_at": "2017-06-16T09:52:13Z",
        "updated_at": "2025-04-05T08:47:22Z",
        "topics": [
            "adreno",
            "amd",
            "apple",
            "ascend",
            "command-line-tool",
            "gpu",
            "huawei",
            "intel",
            "linux",
            "monitoring",
            "ncurses",
            "nvidia"
        ],
        "quality_score": 1.05,
        "contributors_count": 0,
        "last_commit_date": "2025-03-29T11:00:25Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ee7f2b8eab3234d4203b79a645a6fe3d458c5a12f4b57e218bbbe2c72b33893b/Syllo/nvtop"
        ],
        "homepage": "",
        "readme_summary": "NVTOP is a command-line tool that provides a real-time, htop-like interface for monitoring GPU and accelerator processes. It supports a wide range of vendors, including AMD, Apple, Huawei, Intel, NVIDIA, and Qualcomm. NVTOP allows users to monitor multiple GPUs, customize the interface, and save preferences for future use.",
        "key_features": [
            "Monitors GPU and accelerator processes",
            "Supports multiple GPUs",
            "Provides htop-like interface",
            "Supports AMD, Apple, Huawei, Intel, NVIDIA, Qualcomm, and Broadcom GPUs",
            "Interactive setup utility",
            "Saves preferences",
            "Command-line options and manual page"
        ],
        "primary_use_case": "Monitoring GPU and accelerator usage and processes on Linux systems.",
        "open_issues": 85,
        "cover_image_prompt": "Imagine a diligent air traffic controller in a bustling airport tower, overseeing a multitude of glowing aircraft representing different GPU processes. Each aircraft's status (AMD, NVIDIA, Intel, etc.) is clearly displayed on the controller's holographic screen. The controller smoothly manages the traffic flow, ensuring optimal performance and preventing bottlenecks. Subtle UI elements and data visualizations float around the tower, reinforcing the software aspect. The scene is set in a futuristic, brightly lit control tower. The image should be in a clean, 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 319112812,
        "name": "privtracker",
        "description": "Private BitTorrent tracker generator",
        "url": "https://github.com/meehow/privtracker",
        "language": "Go",
        "stars": 686,
        "forks": 31,
        "created_at": "2020-12-06T19:21:56Z",
        "updated_at": "2025-04-05T09:58:45Z",
        "topics": [
            "bittorrent",
            "bittorrent-tracker",
            "privacy",
            "privtracker",
            "torrent",
            "torrent-tracker",
            "tracker"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-02-04T23:51:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1f0202197a7288457cc740ae00de5ad48cbd5a0b56e20ec5d2c886314067b898/meehow/privtracker"
        ],
        "homepage": "https://privtracker.com",
        "readme_summary": "PrivTracker is a tool for generating private BitTorrent trackers, enabling users to share files exclusively within a defined group. It simplifies the process of creating a private tracker, offering features like automatic TLS/HTTPS support and Docker Compose integration. This allows for secure and efficient file sharing without relying on public trackers or centralized services.",
        "key_features": [
            "Private BitTorrent tracker generation",
            "Peer sharing within a defined group",
            "Simplified setup with one-click generation",
            "Automatic TLS/HTTPS support via Let's Encrypt",
            "Docker Compose support"
        ],
        "primary_use_case": "Private file sharing among trusted groups, avoiding public networks and centralized services.",
        "open_issues": 0,
        "cover_image_prompt": "A group of friends gathered around a digital campfire, sharing files represented as glowing embers. One friend, acting as a 'tracker,' carefully distributes these embers directly between the others, ensuring they don't scatter into the dark, vast forest representing the public internet. A subtle UI element floats above the campfire, displaying the PrivTracker logo and a simplified tracker interface. The scene is set in a stylized, low-poly forest clearing at night, with a warm, inviting glow emanating from the campfire. The image should be in a 3D isometric illustration style with soft lighting and a focus on clear, understandable visuals."
    },
    {
        "id": 880240067,
        "name": "lada",
        "description": "Restore videos with pixelated/mosaic regions",
        "url": "https://github.com/ladaapp/lada",
        "language": "Python",
        "stars": 103,
        "forks": 5,
        "created_at": "2024-10-29T11:27:06Z",
        "updated_at": "2025-04-05T10:02:04Z",
        "topics": [
            "depixelization",
            "jav-restoration",
            "mosaic-removal"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T23:32:21Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6d8714ec49d94cd77cf0d76737d2e92364fe50af8bbd139ace3f392c13295a58/ladaapp/lada"
        ],
        "homepage": "",
        "readme_summary": "Lada is a tool designed to recover pixelated adult videos. It offers features to restore mosaic scenes and allows users to watch or export the restored videos using either a command-line interface or a graphical user interface.",
        "key_features": [
            "Recover Pixelated Videos",
            "Watch/Export Videos (CLI or GUI)"
        ],
        "primary_use_case": "Restoring pixelated or mosaic scenes in adult videos to improve visual quality.",
        "open_issues": 16,
        "cover_image_prompt": "An artist meticulously restoring a damaged mosaic mural, revealing a vibrant, clear image beneath. The artist uses digital tools, with a subtle UI overlay showing pixelated and restored video frames. The mural is partially pixelated, transitioning to a high-definition image where the artist has worked. The scene is set in a bright, modern studio with soft, diffused lighting. Small screens display code snippets related to depixelization algorithms. The composition is clean and focused, highlighting the restoration process. The image should be in a digital painting style with clear outlines and vibrant colors."
    },
    {
        "id": 681566005,
        "name": "magika",
        "description": "Detect file content types with deep learning",
        "url": "https://github.com/google/magika",
        "language": "Python",
        "stars": 8521,
        "forks": 442,
        "created_at": "2023-08-22T09:36:55Z",
        "updated_at": "2025-04-05T08:53:07Z",
        "topics": [
            "deep-learning",
            "filetype",
            "keras-classification-models",
            "keras-models",
            "mime-types"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-03T17:30:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a95cdc02aa40658f7dd3f73659936121bbc6fe1476d7afd825f8517d858c4366/google/magika"
        ],
        "homepage": "https://google.github.io/magika/",
        "readme_summary": "Magika is an AI-powered file type detection tool that uses a deep learning model to accurately identify file types within milliseconds. It is trained on a large dataset and achieves high accuracy, making it suitable for improving security and content policy enforcement in applications like email, cloud storage, and web browsing.",
        "key_features": [
            "AI-powered file type detection",
            "Deep learning model for accurate detection",
            "Small model size (a few MBs)",
            "Fast identification (milliseconds on a single CPU)",
            "Trained on ~100M samples across 200+ content types",
            "High accuracy (~99% on test set)",
            "Command line tool (Rust), Python API, Rust bindings, JavaScript/TypeScript bindings, GoLang bindings (WIP)"
        ],
        "primary_use_case": "Detecting file content types for improved security and content policy enforcement.",
        "open_issues": 91,
        "cover_image_prompt": "A librarian, surrounded by towering shelves of unlabeled books, uses a magical magnifying glass to instantly identify the content of each book, revealing its title and genre in glowing text. The librarian smiles confidently as they efficiently categorize the vast collection. Subtle UI elements float around the scene, displaying file type icons and confidence scores. The scene is set in a grand, sunlit library with a warm, inviting atmosphere. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 270910423,
        "name": "FlareSolverr",
        "description": "Proxy server to bypass Cloudflare protection",
        "url": "https://github.com/FlareSolverr/FlareSolverr",
        "language": "Python",
        "stars": 9080,
        "forks": 772,
        "created_at": "2020-06-09T05:23:31Z",
        "updated_at": "2025-04-05T07:53:41Z",
        "topics": [
            "api",
            "chrome",
            "chromium",
            "cloudflare",
            "docker",
            "hacktoberfest",
            "proxy",
            "puppeteer",
            "rest",
            "server"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-03-04T02:05:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/df8d02eb503d83e3d38e0ee70eb601f477158226eaf09d96a0f2ae82f185044d/FlareSolverr/FlareSolverr"
        ],
        "homepage": "",
        "readme_summary": "FlareSolverr is a proxy server designed to bypass Cloudflare and DDoS-GUARD protection. It utilizes Selenium and undetected-chromedriver to solve challenges, providing HTML code and cookies that can be used to access protected resources. The project offers Docker installation, precompiled binaries, and source code installation options, catering to various user preferences and system architectures.",
        "key_features": [
            "Bypasses Cloudflare and DDoS-GUARD protection",
            "Uses Selenium and undetected-chromedriver to solve challenges",
            "Provides HTML code and cookies for bypassing Cloudflare",
            "Supports Docker installation",
            "Offers precompiled binaries for x64 architecture",
            "Allows permanent sessions with proper management"
        ],
        "primary_use_case": "Bypassing Cloudflare and DDoS-GUARD protection for web scraping and automation tasks.",
        "open_issues": 45,
        "cover_image_prompt": "A skilled locksmith effortlessly unlocks a heavily fortified gate labeled 'Cloudflare' with a specialized key, allowing a stream of data packets to flow freely into a vibrant city representing the user's application. The locksmith stands confidently, surrounded by subtle digital interfaces displaying successful bypass logs and security metrics. The scene is bathed in a soft, ethereal glow, symbolizing the seamless and secure access provided by FlareSolverr. The composition is clean and focused, with a clear visual hierarchy. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 783044221,
        "name": "tryharder",
        "description": "C++ Staged Shellcode Loader with Evasion capabilities.",
        "url": "https://github.com/tehstoni/tryharder",
        "language": "C++",
        "stars": 90,
        "forks": 10,
        "created_at": "2024-04-06T19:33:02Z",
        "updated_at": "2025-04-04T17:38:53Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2024-10-07T15:41:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4f27a9828b8696a70f36a958125251977f66ed3e733c5392a3a673c2db04db84/tehstoni/tryharder"
        ],
        "homepage": "",
        "readme_summary": "The tryharder repository provides a C++ staged shellcode loader with evasion capabilities. It is designed to work seamlessly with the Sliver C2 framework, allowing for the execution of shellcode on target systems while bypassing security measures. The loader is also demonstrated to be compatible with Cobalt Strike shellcode, offering flexibility in payload selection.",
        "key_features": [
            "Staged shellcode loading",
            "Evasion capabilities",
            "Compatibility with Sliver C2 framework",
            "Cobalt Strike shellcode compatibility"
        ],
        "primary_use_case": "Loading and executing shellcode with evasion techniques, primarily intended for use with the Sliver C2 framework but adaptable to other shellcode sources.",
        "open_issues": 0,
        "cover_image_prompt": "A blacksmith meticulously forging a key from raw shellcode at a glowing forge. The key is then used to unlock a heavily fortified server room door, symbolizing the bypass of security measures. Digital code streams subtly flow around the blacksmith and the door, hinting at the software nature of the process. The scene is set in a high-tech workshop with dramatic lighting. Small UI elements display shellcode snippets and server access logs. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]