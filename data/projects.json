[
    {
        "id": 77145066,
        "name": "docker-android",
        "description": "Android in docker solution with noVNC supported and video recording",
        "url": "https://github.com/budtmo/docker-android",
        "language": "Python",
        "stars": 12178,
        "forks": 1446,
        "created_at": "2016-12-22T13:02:48Z",
        "updated_at": "2025-08-16T10:09:55Z",
        "topics": [
            "alibabacloud",
            "android",
            "android-emulator",
            "aws",
            "azure",
            "cloud",
            "docker",
            "docker-android",
            "emulator",
            "gcp",
            "genymotion",
            "jenkins",
            "kubernetes",
            "mobile-app",
            "mobile-web",
            "novnc",
            "saltstack",
            "selenium",
            "selenium-grid",
            "terraform"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-13T04:13:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/462a216d8aabae83277a730a82bb32e3422e247eb5766400a2934202fe33f9c7/budtmo/docker-android"
        ],
        "homepage": "",
        "readme_summary": "The docker-android repository provides Docker images for running Android emulators, enabling developers to build and test Android applications in isolated environments. It supports various Android versions, device profiles, and remote access via noVNC, facilitating efficient and consistent testing workflows. The solution also integrates with cloud services and testing frameworks.",
        "key_features": [
            "Android emulation within Docker containers",
            "noVNC support for remote access and control",
            "Support for multiple Android versions and device profiles",
            "ADB connect for external control",
            "Integration with cloud solutions like Genymotion Cloud",
            "Log sharing via web UI",
            "Ability to run UI tests with frameworks like Appium and Espresso"
        ],
        "primary_use_case": "Android application development and testing in isolated environments.",
        "open_issues": 137,
        "cover_image_prompt": "Imagine a bustling mobile device testing facility where tiny android robots are meticulously running apps inside glass domes. Each dome represents a different Android version, and a central control panel displays real-time video feeds from each device via noVNC. A technician in a lab coat monitors the tests, occasionally adjusting settings on the control panel. Subtle UI elements and code snippets float around the scene, connecting the physical testing to the digital world. The scene is brightly lit and rendered in a clean, 3D isometric illustration style with vibrant colors."
    },
    {
        "id": 707667804,
        "name": "Bluetooth-LE-Spam",
        "description": null,
        "url": "https://github.com/simondankelmann/Bluetooth-LE-Spam",
        "language": "Kotlin",
        "stars": 4458,
        "forks": 353,
        "created_at": "2023-10-20T11:54:26Z",
        "updated_at": "2025-08-16T08:16:09Z",
        "topics": [
            "android",
            "bluetooth-low-energy",
            "f-droid",
            "fdroid"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-21T05:34:30Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dcdb1178f41976e60b7bfcba9598f288a23da69b770b28e37d7e0218d445306d/simondankelmann/Bluetooth-LE-Spam"
        ],
        "homepage": "",
        "readme_summary": "The Bluetooth LE Spam repository provides an Android application that leverages Bluetooth Low Energy to broadcast fake device advertisements. This can trigger unwanted pop-up dialogs on nearby devices, simulating connection requests or other service notifications. The app also includes a spam detector to identify the source of such advertisements.",
        "key_features": [
            "Sends BLE advertisements mimicking various services",
            "Triggers unwanted pop-up dialogs on nearby devices",
            "Simulates Apple device popups, Microsoft Swift Pair, and Samsung Easy Setup",
            "Includes a Spam Detector to identify nearby spammers (Flipper Zero, etc.)"
        ],
        "primary_use_case": "Creating phantom Bluetooth device advertisements to trigger pop-up dialogs on nearby devices for testing or demonstration purposes.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a mischievous gremlin in a workshop overflowing with Bluetooth devices. The gremlin is gleefully broadcasting signals from a central console, causing nearby smartphones and gadgets to display a flurry of unexpected pop-up notifications and connection requests. Some devices are comically frozen or glitching. The console has a screen displaying the app's interface. The scene is chaotic but playful, with glowing Bluetooth symbols and digital confetti adding to the whimsical atmosphere. The style is a vibrant, 3D isometric illustration with exaggerated details and a lighthearted tone."
    },
    {
        "id": 1003646358,
        "name": "OmniAvatar",
        "description": null,
        "url": "https://github.com/Omni-Avatar/OmniAvatar",
        "language": "Python",
        "stars": 1547,
        "forks": 140,
        "created_at": "2025-06-17T13:06:06Z",
        "updated_at": "2025-08-16T09:11:12Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-08-06T15:17:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a9d078bb6ca0b28a9b1dc77e178ccac900790be002706942a66cf18c20a92d06/Omni-Avatar/OmniAvatar"
        ],
        "homepage": "https://omni-avatar.github.io/",
        "readme_summary": "OmniAvatar is a project focused on efficient audio-driven avatar video generation with adaptive body animation. It provides model weights and inference code for both 1.3B and 14B parameter models, along with LoRA and audio condition weights. The project leverages Hugging Face for model distribution and includes instructions for installation, model download, and inference.",
        "key_features": [
            "Audio-driven avatar video generation",
            "Adaptive body animation",
            "Model weights for 1.3B and 14B parameter models available",
            "Inference code released",
            "LoRA and audio condition weights provided",
            "Hugging Face integration"
        ],
        "primary_use_case": "Generating realistic avatar videos from audio input.",
        "open_issues": 33,
        "cover_image_prompt": "Imagine a skilled puppeteer controlling a digital avatar on a large screen. The puppeteer holds a microphone, and their voice is translated into the avatar's speech and expressions, with subtle UI elements displaying audio waveforms and animation parameters. The avatar's body movements are fluid and realistic, adapting seamlessly to the audio input. The scene is set in a modern studio with soft, diffused lighting, creating a professional and engaging atmosphere. Small code snippets and data visualizations float in the background, subtly connecting the metaphor to software. The composition is clean and focused, emphasizing the connection between the puppeteer, the audio input, and the lifelike avatar. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 969084914,
        "name": "doWM",
        "description": "A beautiful window manager for x11",
        "url": "https://github.com/BobdaProgrammer/doWM",
        "language": "Go",
        "stars": 409,
        "forks": 16,
        "created_at": "2025-04-19T10:54:52Z",
        "updated_at": "2025-08-16T08:42:46Z",
        "topics": [
            "beautiful",
            "desktop",
            "go",
            "golang",
            "linux",
            "ricing",
            "simple",
            "window-manager",
            "window-managers",
            "wm",
            "x11",
            "x11-wm"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-14T16:15:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/06d500e0ef61c882055a53d96169b14ed682d36504223edacc02523f790bedb8/BobdaProgrammer/doWM"
        ],
        "homepage": "https://dowm.softwarespot.top",
        "readme_summary": "doWM is a window manager for X11, written in Go, that provides both floating and tiling window management capabilities. It is configured using YAML files and shell scripts, allowing users to customize their window management experience. The primary goal is to provide a simple and beautiful window management solution for Linux users.",
        "key_features": [
            "Floating and tiling window management",
            "Written in Go",
            "Configurable via YAML and shell scripts",
            "X11 support"
        ],
        "primary_use_case": "Customizing and managing the X11 windowing environment on Linux systems.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting stained glass windows within a digital workshop. Each pane represents an application window, carefully arranged and sized within a larger frame, symbolizing the X11 environment. The artisan uses a Go programming language toolkit, subtly visible as glowing runes on their workbench. The finished windows glow with vibrant colors, showcasing the 'beautiful' aesthetic. A faint code overlay suggests the underlying window management logic. The workshop is clean and organized, reflecting the 'simple' nature of doWM. Render in a 3D isometric illustration style with soft, diffused lighting and a pastel color palette."
    },
    {
        "id": 490028114,
        "name": "beelzebub",
        "description": "A secure low code honeypot framework, leveraging AI for System Virtualization.",
        "url": "https://github.com/mariocandela/beelzebub",
        "language": "Go",
        "stars": 1377,
        "forks": 114,
        "created_at": "2022-05-08T18:47:02Z",
        "updated_at": "2025-08-16T08:16:25Z",
        "topics": [
            "agentic-ai-security",
            "cloudnative",
            "cloudsecurity",
            "cybersecurity",
            "deception",
            "decoys",
            "framework",
            "go",
            "golang",
            "honeypot",
            "kubernetes",
            "llama",
            "llm",
            "llm-honeypot",
            "llm-security",
            "mcp",
            "mcp-honeypot",
            "research-project",
            "security",
            "whitehat"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T20:12:19Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/490028114/6bb2bae0-6869-4731-960d-3d7880c1066a"
        ],
        "homepage": "https://beelzebub-honeypot.com",
        "readme_summary": "Beelzebub is a low-code honeypot framework that leverages AI to create realistic, high-interaction honeypot environments. It supports multiple protocols, integrates with LLMs for deception, and provides observability through Prometheus and ELK stack. It is designed to detect and analyze cyber attacks in a secure and easily manageable way.",
        "key_features": [
            "Low-code configuration using YAML-based, modular service definitions",
            "LLM integration for simulating real systems and creating high-interaction honeypot experiences",
            "Multi-protocol support including SSH, HTTP, TCP, and MCP (for detecting prompt injection)",
            "Prometheus metrics and observability",
            "Docker and Kubernetes ready",
            "ELK stack integration"
        ],
        "primary_use_case": "Detecting and analyzing cyber attacks by creating a secure honeypot environment.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled illusionist stands on a stage, conjuring deceptive mirages of computer systems to lure shadowy figures representing cyber attackers. The stage is filled with shimmering, holographic projections of servers and network devices. The illusionist subtly manipulates the projections with AI-powered controls, creating realistic yet fake environments. Small screens display metrics of detected attacks and captured threat intelligence. The scene is set in a dimly lit, futuristic theater with a dramatic spotlight on the illusionist. The image should be in digital painting style with vibrant colors and clear details."
    },
    {
        "id": 1003143578,
        "name": "agents-towards-production",
        "description": " This repository delivers end-to-end, code-first tutorials covering every layer of production-grade GenAI agents, guiding you from spark to scale with proven patterns and reusable blueprints for real-world launches.",
        "url": "https://github.com/NirDiamant/agents-towards-production",
        "language": "Jupyter Notebook",
        "stars": 9938,
        "forks": 1269,
        "created_at": "2025-06-16T17:33:44Z",
        "updated_at": "2025-08-16T09:59:41Z",
        "topics": [
            "agent",
            "agent-framework",
            "agents",
            "ai-agents",
            "genai",
            "generative-ai",
            "llm",
            "llms",
            "mlops",
            "multi-agent",
            "production",
            "tool-integration",
            "tutorials"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T00:24:45Z",
        "media_urls": [
            "https://opengraph.githubassets.com/862dfe87a852cdf490b99dd5ba6aa48eed2f00742b63f92861e140e5242fbe2f/NirDiamant/agents-towards-production"
        ],
        "homepage": "",
        "readme_summary": "The repository provides comprehensive, code-first tutorials for building production-grade GenAI agents. It covers various aspects, including stateful workflows, vector memory, real-time web search APIs, and deployment strategies. The tutorials aim to guide users through the process of scaling AI agents from initial prototypes to enterprise-level applications.",
        "key_features": [
            "End-to-end tutorials for GenAI agents",
            "Stateful workflows",
            "Vector memory",
            "Real-time web search API integration",
            "Docker deployment",
            "FastAPI endpoints",
            "Security guardrails",
            "GPU scaling",
            "Browser automation",
            "Fine-tuning",
            "Multi-agent coordination",
            "Observability",
            "Evaluation",
            "UI development"
        ],
        "primary_use_case": "Building production-ready GenAI agents that scale from prototype to enterprise.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a complex building, each level representing a different stage of AI agent development. The foundation shows raw code and initial concepts, gradually ascending to layers of fine-tuning, security guardrails, and scalable infrastructure. The architect uses blueprints (tutorials) to guide the process, ensuring each layer integrates seamlessly. Subtle tech elements like glowing data streams and UI overlays are incorporated into the building's design. The scene is set in a bright, modern studio with a focus on clarity and precision. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, conveying the repository's role in building production-ready AI agents."
    },
    {
        "id": 1000968426,
        "name": "js-data-structures",
        "description": "Проект помогает фронтенд-разработчикам освоить структуры данных через практические примеры на JavaScript",
        "url": "https://github.com/RuSaG0/js-data-structures",
        "language": "Vue",
        "stars": 12,
        "forks": 1,
        "created_at": "2025-06-12T15:45:51Z",
        "updated_at": "2025-08-16T09:22:25Z",
        "topics": [
            "algorithms",
            "array",
            "arraylist",
            "arrays",
            "datastructures",
            "datastructures-algorithms",
            "frontend",
            "fullstack",
            "javascript",
            "linked-list",
            "list",
            "lists",
            "map",
            "queue",
            "queues",
            "set",
            "stack",
            "stacks",
            "typescript",
            "web"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-08-14T19:12:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/abad4a69d3decadfd26e92fe28ccb67b9e30d17de6c0616cea105a486bca7f9c/RuSaG0/js-data-structures"
        ],
        "homepage": "https://rusag0.github.io/js-data-structures/",
        "readme_summary": "This repository serves as a practical guide for frontend developers to learn and understand data structures. It provides real-world examples implemented in JavaScript with Vue.js, covering common data structures like arrays, lists, maps, and trees. The project aims to bridge the gap between theoretical knowledge and practical application in frontend development.",
        "key_features": [
            "Demonstrates data structures in JavaScript",
            "Provides practical examples for frontend development",
            "Uses Vue.js for implementation",
            "Includes examples for arrays, lists, maps, queues, sets, stacks, and trees",
            "Uses TypeScript for code quality"
        ],
        "primary_use_case": "Learning and demonstrating data structures in the context of frontend development using JavaScript and Vue.js.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled architect meticulously constructing a grand building (representing a frontend application) using various uniquely shaped building blocks (representing different data structures like arrays, lists, maps, etc.). The architect carefully selects and places each block, ensuring structural integrity and optimal design. Holographic blueprints displaying code snippets and data visualizations subtly overlay the construction site. The scene is set in a bright, modern studio with a focus on clarity and precision. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and rich details."
    }
]