[
    {
        "id": 825345980,
        "name": "waypoint",
        "description": null,
        "url": "https://github.com/NishantJoshi00/waypoint",
        "language": "Go",
        "stars": 11,
        "forks": 0,
        "created_at": "2024-07-07T14:27:54Z",
        "updated_at": "2025-04-13T08:59:07Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-21T05:25:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7694e5272d94f9e00e6238b0a33bc4379d13f5b7f8e52a69be69cce57cf0d8c5/NishantJoshi00/waypoint"
        ],
        "homepage": null,
        "readme_summary": "WayPoint is a fast, lightweight URL mapping and redirection system that dynamically manages URL shortcuts through YAML configuration files. It offers features like human-readable shortcuts, hierarchical organization, real-time updates, and flexible deployment options. It can be used as a server for web access or integrated with your shell for command-line usage.",
        "key_features": [
            "Human-readable Shortcuts",
            "Hierarchical Organization",
            "Real-time Updates",
            "Flexible Deployment",
            "Multiple Access Methods",
            "Shell Integration"
        ],
        "primary_use_case": "Creating and managing custom URL shorteners for internal tools, documentation, or any web resources.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled cartographer meticulously charting a vast, interconnected network of shortcuts on a magical map. The cartographer uses a special quill that transforms complex URLs into simple, memorable symbols on the map. The map itself is a vibrant tapestry of interconnected paths, leading to various destinations represented by miniature landmarks. Small UI elements float around the map, displaying configuration files and redirection rules. The scene is set in a cozy, sunlit study filled with scrolls and navigational tools. The image should be in a detailed 3D isometric illustration style with warm colors and a sense of adventure."
    },
    {
        "id": 378998405,
        "name": "minecraft-building-assistance-game",
        "description": null,
        "url": "https://github.com/cassidylaidlaw/minecraft-building-assistance-game",
        "language": "Python",
        "stars": 96,
        "forks": 7,
        "created_at": "2021-06-21T16:40:03Z",
        "updated_at": "2025-04-13T07:34:44Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-04-10T16:46:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/eb3fbbeb38e1fc2b0f0f2e8af7edc964713aea14e11501def48eab0194c787f8/cassidylaidlaw/minecraft-building-assistance-game"
        ],
        "homepage": null,
        "readme_summary": "This repository provides the Minecraft Building Assistance Game (MBAG), a multiagent environment for studying assistance games. It includes the implementation of the AssistanceZero algorithm for training AI assistants and allows integration with Minecraft via Project Malmo for visualization and interaction with human players. The repository also provides a house dataset for training and evaluation.",
        "key_features": [
            "Minecraft Building Assistance Game (MBAG) environment",
            "AssistanceZero algorithm implementation for training AI assistants",
            "Multiagent environment runnable within Python",
            "Integration with Minecraft via Project Malmo for visualization and human interaction",
            "House dataset for training and evaluation"
        ],
        "primary_use_case": "Training and evaluating AI assistants for complex assistance games within the Minecraft environment.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a master architect overseeing a bustling construction site in Minecraft. The architect holds a glowing blueprint, representing the desired structure, while robotic assistants diligently place blocks according to the plan. One assistant struggles, and the architect subtly adjusts the blueprint, guiding the robot to correct its placement. UI elements float nearby, displaying code snippets and performance metrics of the AI assistants. The scene is set in a vibrant, blocky Minecraft world with dynamic lighting. The image should be in a 3D isometric illustration style with clear details and a playful color scheme."
    },
    {
        "id": 771435022,
        "name": "BlueSpy",
        "description": "PoC to record audio from a Bluetooth device",
        "url": "https://github.com/TarlogicSecurity/BlueSpy",
        "language": "Python",
        "stars": 1098,
        "forks": 150,
        "created_at": "2024-03-13T09:45:25Z",
        "updated_at": "2025-04-13T09:50:25Z",
        "topics": [
            "bluetooth",
            "bluetooth-le",
            "bluetooth-low-energy"
        ],
        "quality_score": 0.35,
        "contributors_count": 0,
        "last_commit_date": "2024-04-04T10:45:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9a71a592e99fb403e7e41977d92bdc666e9e86d7866c2471f900229554bb2962/TarlogicSecurity/BlueSpy"
        ],
        "homepage": "",
        "readme_summary": "BlueSpy is a proof-of-concept Python script designed to record audio from Bluetooth devices without the user's knowledge. It exploits vulnerabilities related to insecure pairing procedures, specifically the failure to comply with the BSAM-PA-05 control. The repository provides individual scripts for pairing, connecting, recording, and playback, utilizing common Linux tools for Bluetooth management and audio processing.",
        "key_features": [
            "Records audio from Bluetooth devices without user awareness",
            "Exploits insecure Bluetooth pairing procedures",
            "Provides scripts for pairing, connecting, recording, and playback",
            "Uses common Linux tools like bluetoothctl, btmgmt, pactl, parecord, and paplay"
        ],
        "primary_use_case": "Proof-of-concept for demonstrating Bluetooth security vulnerabilities and raising awareness about insecure Bluetooth device configurations.",
        "open_issues": 8,
        "cover_image_prompt": "A detective wearing headphones, subtly listening to a Bluetooth speaker through a high-tech listening device disguised as a pen. The speaker sits on a table in a brightly lit living room, while the detective is in a dimly lit van outside, monitoring the audio feed on a small screen displaying waveform visualizations. Digital particles representing Bluetooth signals flow between the speaker and the pen. The repository name, 'BlueSpy,' is subtly etched onto the pen. The image should be in a digital painting style with clear outlines and a focus on the contrast between the two scenes."
    },
    {
        "id": 609875415,
        "name": "GPT_Vuln-analyzer",
        "description": "Uses ChatGPT API, Bard API, and Llama2, Python-Nmap, DNS Recon, PCAP and JWT recon modules and uses the GPT3 model to create vulnerability reports based on Nmap scan data, and DNS scan information. It can also perform subdomain enumeration to a great extent",
        "url": "https://github.com/morpheuslord/GPT_Vuln-analyzer",
        "language": "Python",
        "stars": 547,
        "forks": 66,
        "created_at": "2023-03-05T14:02:47Z",
        "updated_at": "2025-04-13T08:06:27Z",
        "topics": [
            "ai-vulnerability-analysis",
            "bard-ai",
            "bard-api",
            "chatgpt",
            "chatgpt-api",
            "dns",
            "dns-enumeration",
            "dns-enumeration-ai",
            "dns-record",
            "hacking-tools",
            "information-gathering",
            "llama2",
            "nmap",
            "nmap-api",
            "nmap-vulnerability",
            "nmap-vulnerability-analysis-ai",
            "openai",
            "runpod",
            "terminal",
            "vulnerability-analysis"
        ],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2024-11-09T12:45:33Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0a8669ea0d8b4bc206f3a4e8bc139ce1f55a9660011a31b1dbc400e6cfc7ea4e/morpheuslord/GPT_Vuln-analyzer"
        ],
        "homepage": "",
        "readme_summary": "The GPT_Vuln-analyzer is a proof-of-concept application that leverages AI models (ChatGPT, Bard, Llama2) to automate vulnerability analysis. It integrates network scanning (Nmap), DNS enumeration, JWT analysis, and PCAP analysis to identify potential security weaknesses and generate comprehensive reports. The tool offers both a command-line interface (CLI) and a graphical user interface (GUI) for ease of use.",
        "key_features": [
            "Network vulnerability analysis using Nmap",
            "DNS enumeration and subdomain enumeration",
            "JWT analysis",
            "AI-powered vulnerability report generation using ChatGPT, Bard, and Llama2",
            "PCAP analysis",
            "CLI and GUI interfaces"
        ],
        "primary_use_case": "Automated vulnerability analysis and report generation using AI models and network scanning tools.",
        "open_issues": 1,
        "cover_image_prompt": "A detective wearing a fedora and trench coat, standing in a dimly lit server room, using a magnifying glass to examine network cables and server racks. The magnifying glass highlights vulnerabilities, represented by glowing red cracks in the cables and servers. A holographic display shows a simplified network topology with data flowing through it. The detective is holding a tablet displaying AI-generated vulnerability reports. The scene is set in a film noir style with dramatic lighting and a blue and purple color scheme. Small code snippets and data visualizations are subtly incorporated into the scene. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 5624155,
        "name": "iSniff-GPS",
        "description": "Passive sniffing tool for capturing and visualising WiFi location data disclosed by iOS devices",
        "url": "https://github.com/hubert3/iSniff-GPS",
        "language": "Python",
        "stars": 1210,
        "forks": 203,
        "created_at": "2012-08-31T03:39:45Z",
        "updated_at": "2025-04-13T06:41:29Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2016-12-28T19:04:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/75939e5be0f10f71c9ffcf793bedbc1e22688ece70d55ddd3da0ad298200468e/hubert3/iSniff-GPS"
        ],
        "homepage": null,
        "readme_summary": "iSniff GPS is a passive sniffing tool that captures WiFi data broadcast by iOS devices to determine their previous geographical locations. It collects SSID probes, ARPs, and MDNS packets, extracts BSSIDs and SSIDs, and queries Apple's WiFi location service and wigle.net to obtain GPS coordinates, providing a web interface for data analysis and visualization.",
        "key_features": [
            "Passive sniffing of WiFi data (SSID probes, ARPs, MDNS packets)",
            "Geolocation of devices based on previously joined WiFi networks",
            "Database storage of captured data",
            "Web interface for viewing and analyzing data",
            "Querying Apple's WiFi location service for BSSID coordinates",
            "Querying wigle.net for SSID coordinates"
        ],
        "primary_use_case": "Passive sniffing and geolocation of iOS devices based on WiFi network information disclosure.",
        "open_issues": 11,
        "cover_image_prompt": "A detective wearing a trench coat and holding a magnifying glass, examining footprints on a world map. The footprints glow with faint WiFi signals, leading to various locations marked with tiny smartphone icons. The detective is surrounded by floating data packets and subtle UI elements showing network names and GPS coordinates. The scene is set in a dimly lit, high-tech office with a holographic display showing a simplified world map. The composition is focused and clean, with a blue and green color scheme. The image should be in a 3D isometric illustration style with detailed textures and soft lighting."
    },
    {
        "id": 952096867,
        "name": "simon",
        "description": "Minimal, web-based system monitor with alerts and Docker insights—all bundled into a single binary",
        "url": "https://github.com/alibahmanyar/simon",
        "language": "Rust",
        "stars": 62,
        "forks": 4,
        "created_at": "2025-03-20T18:16:50Z",
        "updated_at": "2025-04-13T09:39:59Z",
        "topics": [
            "alerting",
            "docker",
            "monitoring-tool"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-04-06T06:23:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/28457d922d351dcf8538493e335cf18698169ca46c9b55faa27e1d800a7a379d/alibahmanyar/simon"
        ],
        "homepage": "",
        "readme_summary": "Simon is a lightweight, web-based system monitor that provides real-time insights into system resources and Docker containers. It features an alerting system for proactive issue detection and is distributed as a single binary, simplifying deployment. The tool aims to provide comprehensive monitoring with minimal resource overhead.",
        "key_features": [
            "System Monitoring (CPU, memory, disk usage, network activity)",
            "Web-Based UI",
            "Docker Integration (container listing, resource usage, logs)",
            "Alerting System (configurable thresholds)",
            "Single binary deployment",
            "Low Overhead"
        ],
        "primary_use_case": "System and Docker container monitoring with alerting capabilities.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a diligent lighthouse keeper meticulously monitoring a network of interconnected ships through a sophisticated web-based dashboard. Each ship represents a system or Docker container, with real-time data streams flowing into the lighthouse. The keeper, using advanced monitoring tools, identifies potential issues and sends out alerts like flares, guiding the ships safely. The lighthouse is powered by a single, compact generator, symbolizing the single-binary deployment. Subtle UI elements on the dashboard display system metrics and container logs. The scene is set at twilight with a blend of warm and cool lighting. The image should be in a detailed digital painting style with clear outlines and a focus on conveying stability and vigilance."
    },
    {
        "id": 756058516,
        "name": "zane-ops",
        "description": "A self-hosted PaaS for your web services, web apps, databases and everything you need for your next startup.",
        "url": "https://github.com/zane-ops/zane-ops",
        "language": "Python",
        "stars": 485,
        "forks": 17,
        "created_at": "2024-02-11T21:12:43Z",
        "updated_at": "2025-04-13T03:52:27Z",
        "topics": [
            "netlify",
            "railway",
            "render",
            "self-hosted",
            "selfhosted",
            "selfhosting",
            "vercel"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-04-11T19:20:39Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f9eb6230a02b3687475ede2c6565ab373e119d69d59c96a40e4d02e7cc956168/zane-ops/zane-ops"
        ],
        "homepage": "https://zaneops.dev",
        "readme_summary": "ZaneOps is a self-hosted, open-source platform designed to simplify the deployment and management of web services, applications, and databases. It offers a free alternative to platforms like Heroku and Railway by leveraging Docker Swarm for scalability and Caddy for flexibility, making it suitable for both startups and enterprises.",
        "key_features": [
            "Self-hosted platform",
            "Open-source",
            "Supports static sites, web apps, databases, and services",
            "Uses Docker Swarm for scalability",
            "Uses Caddy for flexibility",
            "Alternative to Heroku, Railway, and Render"
        ],
        "primary_use_case": "Self-hosting web services, web applications, databases, and other services for startups and enterprises.",
        "open_issues": 9,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a modern city skyline, where each building represents a different type of application (web app, database, service). The architect uses a central control panel with intuitive UI elements to deploy and manage these applications seamlessly. Docker containers float like building blocks into their designated spots, and Caddy's logo subtly appears on the city's central server, ensuring smooth traffic flow. The scene is bathed in a soft, futuristic glow, with small code snippets projected onto the buildings. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 911620016,
        "name": "godex",
        "description": "godex is a cli file manager for searching , zipping ,cloud backup,versioning and so much more",
        "url": "https://github.com/inodinwetrust10/godex",
        "language": "Go",
        "stars": 28,
        "forks": 0,
        "created_at": "2025-01-03T12:56:08Z",
        "updated_at": "2025-04-13T08:10:36Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-21T11:12:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e7f6196857551ca9f0edaa4ed2cc23dd6f812966d077c3e226febf5f2c67a2a5/inodinwetrust10/godex"
        ],
        "homepage": "",
        "readme_summary": "godex is a command-line file manager designed to simplify file operations. It offers features such as file searching, compression, cloud backup integration with Google Drive, and file versioning. The tool aims to provide a comprehensive solution for managing files directly from the command line.",
        "key_features": [
            "File Search",
            "Compression Tools",
            "Google Drive Backup",
            "File Versioning",
            "Shell Completion"
        ],
        "primary_use_case": "Command-line file management",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled librarian meticulously organizing a vast digital library. The librarian, equipped with advanced tools, swiftly categorizes files, compresses documents into neat packages, safeguards data with cloud backups, and meticulously tracks file versions. Holographic displays showcase search results, compression progress bars, cloud storage icons, and version history timelines. The scene is set in a futuristic, minimalist library with soft, ambient lighting. Small code snippets and file icons subtly connect the metaphor to software. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    }
]