[
    {
        "id": 944414751,
        "name": "blender-mcp",
        "description": null,
        "url": "https://github.com/ahujasid/blender-mcp",
        "language": "Python",
        "stars": 13386,
        "forks": 1259,
        "created_at": "2025-03-07T09:58:58Z",
        "updated_at": "2025-09-11T10:10:00Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-08-21T19:43:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/627fc8367f1ea6e617445c7cce8c02d78da26bc4e5b5167aa642f05d74f1247f/ahujasid/blender-mcp"
        ],
        "homepage": null,
        "readme_summary": "BlenderMCP integrates Blender with Claude AI using the Model Context Protocol (MCP), enabling AI-assisted 3D modeling, scene creation, and manipulation. It allows Claude to directly interact with and control Blender through a socket-based server, facilitating object manipulation, material control, scene inspection, and code execution within Blender.",
        "key_features": [
            "Two-way communication between Claude AI and Blender",
            "Object manipulation (create, modify, delete)",
            "Material control (apply and modify materials and colors)",
            "Scene inspection (get detailed information about the current Blender scene)",
            "Code execution (run arbitrary Python code in Blender from Claude)",
            "View screenshots for Blender viewport",
            "Search and download Sketchfab models",
            "Support for Poly Haven assets through their API",
            "Support to generate 3D models using Hyper3D Rodin"
        ],
        "primary_use_case": "AI-assisted 3D modeling and scene creation in Blender using Claude AI.",
        "open_issues": 16,
        "cover_image_prompt": "An artist stands before a 3D model of a house in Blender, receiving instructions from a glowing Claude AI assistant floating nearby. The AI assistant is depicted as a friendly, helpful entity, providing real-time suggestions and adjustments to the model. The scene shows the artist using voice commands, which are visualized as sound waves transforming into 3D shapes. Small UI elements display code snippets and MCP commands. The setting is a bright, modern studio. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 1009325669,
        "name": "Raijin",
        "description": "A free, simple weather TUI that pulls data without the need for an API key, account, or subscription",
        "url": "https://github.com/MasonStooksbury/Raijin",
        "language": "Rust",
        "stars": 60,
        "forks": 2,
        "created_at": "2025-06-27T00:28:32Z",
        "updated_at": "2025-09-11T04:53:38Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-07-03T23:40:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/43fc6ebd37f81f5393163e58b7d1db62c1edaec7fa052205530e03a65c7ecec2/MasonStooksbury/Raijin"
        ],
        "homepage": "",
        "readme_summary": "Raijin is a free and simple terminal-based weather application (TUI) written in Rust. It retrieves weather data from NWS and OpenMeteo, and moon phase data from ViewBits, without requiring API keys, accounts, or subscriptions. Currently, it supports macOS and Linux operating systems.",
        "key_features": [
            "Terminal User Interface (TUI)",
            "Free weather data access (no API key required)",
            "Data from NWS and OpenMeteo",
            "Moon phase data from ViewBits",
            "Configuration via environment file",
            "Cross-platform support (macOS and Linux)"
        ],
        "primary_use_case": "Displaying current weather conditions and forecasts in a terminal window.",
        "open_issues": 1,
        "cover_image_prompt": "A serene sky deity, Raijin, sits cross-legged on a cloud, gently summoning weather data from the heavens. Raijin holds a glowing orb displaying a miniature weather forecast, complete with sun, rain, and temperature icons. Streams of data, visualized as glowing particles, flow from the sky into the orb. Small UI elements showing weather data are subtly integrated into the cloudscape. The scene is set in a stylized, ethereal sky with soft, diffused lighting. The image should be in a flat design style with clear iconography and a calming color scheme."
    },
    {
        "id": 452327893,
        "name": "OpenMower",
        "description": "Let's upgrade cheap off-the-shelf robotic mowers to modern, smart RTK GPS based lawn mowing robots!",
        "url": "https://github.com/ClemensElflein/OpenMower",
        "language": "C++",
        "stars": 6150,
        "forks": 356,
        "created_at": "2022-01-26T15:24:24Z",
        "updated_at": "2025-09-11T10:10:22Z",
        "topics": [
            "arduino",
            "gps",
            "landscaping",
            "lawn-mower",
            "path-finding",
            "raspberry-pi",
            "robomow",
            "robot",
            "robotics",
            "ros",
            "rtk"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-05-09T09:43:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/04d9813ce6587017de5f88045e8e4fa85dee1fc50d6d14f4c20baf11b3b65149/ClemensElflein/OpenMower"
        ],
        "homepage": "",
        "readme_summary": "The OpenMower project aims to replace the limited software of cheap robotic lawn mowers with a modern, smart, RTK GPS-based system. It leverages existing hardware from off-the-shelf mowers, focusing on software improvements for autonomous mowing, safety, and advanced features like no perimeter wire and obstacle avoidance.",
        "key_features": [
            "Autonomous Lawn Mowing",
            "Good Safety (emergency stop)",
            "No Perimeter Wire Needed",
            "Low Cost",
            "Open Source",
            "Obstacle Avoidance",
            "Rain Detection",
            "RTK GPS based navigation"
        ],
        "primary_use_case": "Upgrading existing robotic lawn mowers with advanced autonomous navigation and control systems.",
        "open_issues": 20,
        "cover_image_prompt": "A gardener meticulously tending a lawn using a smartphone app that controls a small, advanced robotic lawnmower. The mower, equipped with glowing GPS antennas, precisely navigates the yard without any perimeter wires. The app displays a detailed map of the lawn with marked mowing zones and obstacle locations. Digital particles float around the mower, visualizing its smart pathfinding algorithms. A small UI element on the phone shows the OpenMower logo. The scene is set in a sunny, suburban backyard with lush green grass. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 19813003,
        "name": "fdupes",
        "description": "FDUPES is a program for identifying or deleting duplicate files residing within specified directories.",
        "url": "https://github.com/adrianlopezroche/fdupes",
        "language": "C",
        "stars": 2761,
        "forks": 204,
        "created_at": "2014-05-15T09:00:19Z",
        "updated_at": "2025-09-11T10:04:11Z",
        "topics": [],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-31T19:08:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ce46885bf790710fd703e2fe7ebaa44af4145405e02146c01e9f1a3ed0a251e3/adrianlopezroche/fdupes"
        ],
        "homepage": "",
        "readme_summary": "FDUPES is a command-line tool written in C for identifying duplicate files within specified directories. It offers various options for recursive searching, handling symlinks and hardlinks, filtering by file size, and deleting duplicates while providing options for user confirmation and sorting.",
        "key_features": [
            "Recursive directory searching",
            "Symlink and hardlink handling",
            "File size filtering",
            "Duplicate file deletion with user confirmation",
            "Caching for faster comparisons",
            "Summarization of duplicate information",
            "Sorting of output by time, ctime, or name"
        ],
        "primary_use_case": "Identifying and removing duplicate files to free up disk space.",
        "open_issues": 68,
        "cover_image_prompt": "A meticulous librarian in a vast, organized library, carefully comparing books side-by-side to identify identical copies. The librarian uses a magnifying glass that emits a soft, digital glow, revealing subtle differences and similarities. Unnecessary duplicate books are gently stacked aside, freeing up shelf space. A small screen displays file sizes and modification dates. The scene is set in a grand, well-lit library with a warm, inviting atmosphere. The image should be in a 3D isometric illustration style with rich details and a focus on clarity, using a color scheme of greens, browns, and golds."
    }
]