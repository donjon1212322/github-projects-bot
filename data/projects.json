[
    {
        "id": 951646417,
        "name": "ios-simulator-mcp",
        "description": "MCP server for interacting with the iOS simulator",
        "url": "https://github.com/joshuayoes/ios-simulator-mcp",
        "language": "JavaScript",
        "stars": 862,
        "forks": 38,
        "created_at": "2025-03-20T02:39:27Z",
        "updated_at": "2025-08-08T08:52:28Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-31T22:26:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/95b178f153b22313d94d337138feb25ac9a68f131d7a0cfbb2632b2e9306e12b/joshuayoes/ios-simulator-mcp"
        ],
        "homepage": null,
        "readme_summary": "The iOS Simulator MCP Server enables interaction with iOS simulators through a Model Context Protocol. It provides functionalities to retrieve simulator information, control UI interactions (tapping, swiping, text input), inspect UI elements, take screenshots, and integrate with AI agents for visual feedback, primarily used for automated QA testing and validation.",
        "key_features": [
            "Get the ID of the currently booted iOS simulator",
            "Describe all accessibility elements on screen",
            "Tap on screen coordinates",
            "Input text",
            "Swipe between coordinates",
            "Get information about UI elements at specific coordinates",
            "Take screenshots of the simulator screen",
            "Show a view of the simulator screen to your AI agent",
            "Filter specific tools using environment variables"
        ],
        "primary_use_case": "Quality Assurance tasks via MCP tool calls, allowing AI assistants to validate UI consistency and behavior after feature implementation.",
        "open_issues": 9,
        "cover_image_prompt": "A skilled puppeteer meticulously controlling a miniature iOS simulator with glowing threads connected to its UI elements. The puppeteer uses a control panel filled with knobs and levers labeled with actions like 'Tap', 'Swipe', and 'Input Text'. The simulator displays a vibrant app interface, reflecting the puppeteer's precise commands. Small screens around the scene show code snippets and accessibility data. The scene is set in a modern, well-lit workshop. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1028470147,
        "name": "FSB",
        "description": null,
        "url": "https://github.com/LakshmanTurlapati/FSB",
        "language": "JavaScript",
        "stars": 14,
        "forks": 1,
        "created_at": "2025-07-29T15:18:37Z",
        "updated_at": "2025-08-08T07:13:22Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-02T04:39:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a0fccc565943e7e87b007c8ee328fc352a02f1cc5e2cd66147f43b3a3fe7c075/LakshmanTurlapati/FSB"
        ],
        "homepage": null,
        "readme_summary": "FSB is a Chrome extension that provides AI-powered browser automation through a natural language interface. It supports multiple AI models, analyzes webpage structure, and automates tasks like form filling and navigation. The primary use case is to streamline repetitive browsing tasks and automate workflows for web testing, data entry, research, and more.",
        "key_features": [
            "Multi-Model AI Support (Grok, Gemini, and more)",
            "Natural Language Interface",
            "Smart DOM Analysis",
            "Comprehensive Automation (click, type, scroll, etc.)",
            "CAPTCHA Integration",
            "Analytics & Monitoring",
            "Modern Interface",
            "Secure Configuration",
            "Smart Recovery",
            "Multiple UI Modes"
        ],
        "primary_use_case": "AI-powered browser automation for tasks like web testing, data entry, research, social media automation, and e-commerce activities.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled navigator at the helm of a futuristic ship, expertly guiding it through a complex network of interconnected web pages represented as glowing constellations. The navigator uses a holographic interface displaying natural language commands and AI model options. The ship effortlessly interacts with various websites, represented as floating islands, gathering data and automating tasks. Subtle code snippets and UI elements are integrated into the constellations, hinting at the underlying technology. The scene is bathed in a soft, ethereal glow, creating a sense of seamless automation and intelligent navigation. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 628160489,
        "name": "SimpMusic",
        "description": "A simple music app using YouTube Music for backend",
        "url": "https://github.com/maxrave-dev/SimpMusic",
        "language": "Kotlin",
        "stars": 4248,
        "forks": 201,
        "created_at": "2023-04-15T04:53:33Z",
        "updated_at": "2025-08-08T10:00:44Z",
        "topics": [
            "android",
            "android-16",
            "android-app",
            "android-application",
            "android-auto",
            "exoplayer",
            "kotlin",
            "media3",
            "mp3",
            "music",
            "spotify",
            "video-streaming",
            "youtube",
            "youtube-music"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-26T06:34:13Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/628160489/d1caf378-9996-45bd-aad8-360494ce98be"
        ],
        "homepage": "https://simpmusic.org/",
        "readme_summary": "SimpMusic is a free and open-source Android music player that utilizes YouTube Music as its backend. It offers a variety of features, including ad-free playback, background play, offline support, synced lyrics, and integration with services like Musixmatch, Spotify, SponsorBlock, and Return YouTube Dislike. The app aims to provide a comprehensive music listening experience by combining the vast library of YouTube Music with the convenience of a dedicated music player.",
        "key_features": [
            "Play music from YouTube Music or YouTube for free, without ads and in the background",
            "Browsing Home, Charts, Podcast, Moods & Genre with YouTube Music data at high speed",
            "Search everything on YouTube",
            "Analyze your playing data, create custom playlists, and sync with YouTube Music",
            "Spotify Canvas supported",
            "Play 1080p video option with subtitle",
            "AI song suggestions",
            "Notifications from followed artists",
            "Caching and offline playback support",
            "Synced lyrics from Musixmatch, LRCLIB, Spotify and YouTube Transcript and translated lyrics",
            "Personalize data and multi-YouTube-account support",
            "Supports SponsorBlock and Return YouTube Dislike",
            "Sleep Timer",
            "Android Auto with online content"
        ],
        "primary_use_case": "A FOSS YouTube Music client for Android with features from Spotify, Musixmatch, SponsorBlock, and ReturnYouTubeDislike.",
        "open_issues": 490,
        "cover_image_prompt": "A skilled DJ seamlessly blending music from a vintage YouTube Music record player with a sleek, modern Spotify console. The DJ, bathed in vibrant, pulsing light, uses glowing digital sliders to mix tracks, creating a dynamic soundscape that fills a futuristic club. Floating lyrics from Musixmatch and SponsorBlock logos subtly appear as holographic projections around the DJ. The scene is set against a backdrop of abstract waveforms and data visualizations. The image should be in a vibrant, 3D isometric illustration style with rich details and a neon color scheme."
    },
    {
        "id": 33242423,
        "name": "flowblade",
        "description": "Video Editor for Linux",
        "url": "https://github.com/jliljebl/flowblade",
        "language": "Python",
        "stars": 2876,
        "forks": 192,
        "created_at": "2015-04-01T10:49:55Z",
        "updated_at": "2025-08-08T06:50:30Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-07-01T07:40:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/87cca8a157cefa7ad0640edb947376d7a390d5ae498ed7783cde6be9ea6613ad/jliljebl/flowblade"
        ],
        "homepage": "",
        "readme_summary": "Flowblade is a multitrack non-linear video editor for Linux that allows users to compose movies from video, audio, and graphics files. It offers a range of editing tools, image compositing features, and audio/video filters. Flowblade supports various media formats and provides advanced features like media generation, batch encoding, and USB shuttle control.",
        "key_features": [
            "Multitrack non-linear video editing",
            "Image compositing with blend modes and wipes",
            "Extensive image and audio filters",
            "Media generator plugin framework",
            "Batch encoding and media re-linking",
            "USB Shuttle playback control"
        ],
        "primary_use_case": "Creating and editing videos from various media sources, applying effects, and producing a final video output.",
        "open_issues": 56,
        "cover_image_prompt": "A film director meticulously editing a complex scene on a digital timeline, splicing together various clips of reality. The director uses a digital scalpel to cut and arrange footage, seamlessly blending scenes with vibrant transitions and effects. The timeline displays multiple video and audio tracks, each representing a layer of the story. Small screens around the editing suite show waveforms, color correction tools, and compositing options. The scene is set in a modern, dimly lit editing suite with a focused atmosphere. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 988821906,
        "name": "winhider",
        "description": "winhider  - Hide windows from screensharing and also from taskbar / taskswitcher (Alt-Tab) while still being able to use them normally",
        "url": "https://github.com/aamitn/winhider",
        "language": "C++",
        "stars": 31,
        "forks": 0,
        "created_at": "2025-05-23T06:05:29Z",
        "updated_at": "2025-08-08T08:38:45Z",
        "topics": [
            "winapi"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-06-12T07:28:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c1c9ff7f26b04b433bc22418c4f0a5385c88699b74a3b3865fb40732072cee63/aamitn/winhider"
        ],
        "homepage": "http://winhider.bitmutex.com/",
        "readme_summary": "WinHider is a C++ application designed to hide specific windows from being visible during screen sharing sessions and from the taskbar/taskswitcher. This allows users to maintain privacy and reduce distractions while still being able to interact with the hidden applications. It offers both a graphical user interface (GUI) and a command-line interface (CLI) for managing window visibility.",
        "key_features": [
            "Hides windows from screensharing",
            "Hides windows from taskbar and taskswitcher (Alt-Tab)",
            "Allows normal use of hidden windows",
            "GUI and CLI interface",
            "Winget installation support"
        ],
        "primary_use_case": "Hiding sensitive or distracting windows during screen sharing sessions while still being able to use them.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a stage magician performing a trick. With a flourish, they make a window disappear from a large screen displaying a video call, while the magician can still see and interact with the hidden window on a smaller, personal monitor. The stage is subtly decorated with binary code patterns and glowing circuit designs. The large screen shows confused faces of the video call participants. The magician wears a sleek, modern suit with a subtle 'WinHider' logo on the lapel. The scene is bathed in soft, theatrical lighting with a touch of digital glow. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 99286908,
        "name": "Addon",
        "description": "ClearURLs is an add-on based on the new WebExtensions technology and will automatically remove tracking elements from URLs to help protect your privacy.",
        "url": "https://github.com/ClearURLs/Addon",
        "language": "JavaScript",
        "stars": 4432,
        "forks": 122,
        "created_at": "2017-08-04T00:41:25Z",
        "updated_at": "2025-08-08T02:14:40Z",
        "topics": [
            "addon",
            "addons-mozilla-org",
            "anti-tracking",
            "chrome",
            "firefox",
            "privacy",
            "security",
            "tracking-protection",
            "webextensions"
        ],
        "quality_score": 0.7500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-07-05T12:04:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/677703cbec589fe2c473cd7fa16f2e8c57c0b04124340c00a7ce4f73504adbef/ClearURLs/Addon"
        ],
        "homepage": "http://docs.clearurls.xyz",
        "readme_summary": "ClearURLs is a browser extension that automatically removes tracking elements from URLs, enhancing user privacy while browsing. It supports various browsers and offers features like blocking ad domains, cleaning multiple URLs, preventing tracking injection, and providing a context menu option for copying clean links. The extension aims to provide a cleaner and more private browsing experience by removing unnecessary tracking parameters from web addresses.",
        "key_features": [
            "Removes tracking from URLs automatically",
            "Blocks some common ad domains (optional)",
            "Built-in tool to clean up multiple URLs at once",
            "Supports redirection without tracking services",
            "Context menu entry for copying clean links",
            "Blocks hyperlink auditing (ping tracking)",
            "Prevents ETag tracking",
            "Prevents tracking injection via history API",
            "Prevents search engine tracking rewriting"
        ],
        "primary_use_case": "Automatically remove tracking elements from URLs to protect user privacy.",
        "open_issues": 213,
        "cover_image_prompt": "A meticulous gardener tending to a lush garden, carefully pruning away unwanted vines and leaves from healthy plants. The gardener uses specialized digital clippers that display URL strings, snipping off tracking parameters (utm codes, etc.) and leaving behind clean, direct links. The pruned vines transform into digital dust motes. Small UI elements showing the ClearURLs logo and cleaned URLs subtly float around the garden. The scene is set in a vibrant, sunlit greenhouse. The image should be in a flat design style with clear iconography and a bright, cheerful color scheme."
    }
]