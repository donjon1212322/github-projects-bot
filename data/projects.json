[
    {
        "id": 196274912,
        "name": "IronRDP",
        "description": "Rust implementation of the Microsoft Remote Desktop Protocol (RDP)",
        "url": "https://github.com/Devolutions/IronRDP",
        "language": "Rust",
        "stars": 2028,
        "forks": 95,
        "created_at": "2019-07-10T21:04:54Z",
        "updated_at": "2025-03-25T10:08:04Z",
        "topics": [
            "rdp",
            "rust"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-25T02:54:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/40d4e1140f6080fa9408e5e09752fe9e6934bbd10ec0494e47c69cfee8c68b7b/Devolutions/IronRDP"
        ],
        "homepage": "",
        "readme_summary": "IronRDP is a collection of Rust crates that provide an implementation of the Microsoft Remote Desktop Protocol (RDP), with a focus on security. It offers support for various video codecs and provides examples of both asynchronous and synchronous RDP clients, showcasing its versatility in different application scenarios.",
        "key_features": [
            "Uncompressed raw bitmap support",
            "Interleaved Run-Length Encoding (RLE) Bitmap Codec support",
            "RDP 6.0 Bitmap Compression support",
            "Microsoft RemoteFX (RFX) support",
            "Asynchronous I/O RDP client example",
            "Blocking, synchronous RDP client example"
        ],
        "primary_use_case": "Implementing the Microsoft Remote Desktop Protocol (RDP) in Rust.",
        "open_issues": 40,
        "cover_image_prompt": "A skilled locksmith meticulously crafting a key from raw metal, representing the Remote Desktop Protocol. The key is intricately designed with circuit patterns and digital glyphs, symbolizing secure communication. The locksmith's workshop is filled with blueprints of computer networks and glowing screens displaying encrypted data streams. The finished key unlocks a shimmering portal leading to a vibrant, remote desktop environment. Small UI elements and code snippets are subtly integrated into the scene. The composition is clean and focused with a blue and silver color scheme. The image should be in a detailed technical illustration style with labeled parts and a sense of precision."
    },
    {
        "id": 927096917,
        "name": "tray-tui",
        "description": "System tray in your terminal",
        "url": "https://github.com/Levizor/tray-tui",
        "language": "Rust",
        "stars": 65,
        "forks": 0,
        "created_at": "2025-02-04T11:58:01Z",
        "updated_at": "2025-03-24T17:19:44Z",
        "topics": [
            "ratatui",
            "system-tray",
            "tray-menu",
            "tui"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T21:02:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6316bcea309bc48df4c1a39c18d9b01694e21c35a4987b8660be93bb54fda925/Levizor/tray-tui"
        ],
        "homepage": "",
        "readme_summary": "tray-tui brings system tray functionality to the terminal, allowing users to interact with tray menus through an interactive tree-based navigation system. It is built using Rust and the ratatui library, providing a seamless TUI experience for managing system tray items and actions.",
        "key_features": [
            "System tray integration in a terminal",
            "Interactive tree-based menu navigation",
            "Built using Rust and ratatui"
        ],
        "primary_use_case": "Displaying system tray menus as interactive trees within a terminal user interface.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan in a workshop meticulously crafting intricate clockwork gears, each representing a system tray icon. The artisan carefully places these gears onto a miniature terminal screen, bringing the system tray to life within the digital interface. The terminal displays a neatly organized tree menu, showcasing the interactive navigation of tray items. Subtle digital elements like glowing code snippets and UI icons are integrated into the scene. The workshop is bathed in soft, focused lighting, highlighting the artisan's precision. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 929156152,
        "name": "groovy",
        "description": null,
        "url": "https://github.com/gradio-app/groovy",
        "language": "Python",
        "stars": 75,
        "forks": 6,
        "created_at": "2025-02-07T23:00:11Z",
        "updated_at": "2025-03-25T09:01:52Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-03-03T18:39:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a9291289a5c4a40a30d8e8aeda53bcbc822a7c1d6f50492f33eab82d435fbb9f/gradio-app/groovy"
        ],
        "homepage": null,
        "readme_summary": "Groovy is a Python-to-JavaScript transpiler designed for use in the Gradio library. It converts Python functions into their JavaScript equivalents, enabling developers to write Python code that runs efficiently on the client-side. Groovy prioritizes clear error reporting for unsupported Python code, making it easier for developers to adapt their functions accordingly.",
        "key_features": [
            "Converts Python functions to JavaScript equivalents.",
            "Supports a subset of the Python standard library.",
            "Provides complete error reporting for unsupported Python code."
        ],
        "primary_use_case": "Transpiling Python code to JavaScript for client-side execution, particularly within the Gradio library.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled artisan meticulously chiseling a Python statue, transforming it into a sleek JavaScript sculpture. The artisan uses specialized tools that highlight the differences between the two forms, with Python code flowing into one side and JavaScript code emerging from the other. The workshop is filled with subtle tech elements, such as glowing data streams and UI screens displaying the transpilation process. The scene is set in a brightly lit, modern studio with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 515647260,
        "name": "1Panel",
        "description": "ðŸ”¥ 1Panel offers an intuitive web interface for managing websites, files, containers, databases and LLMs within a Linux server.",
        "url": "https://github.com/1Panel-dev/1Panel",
        "language": "Go",
        "stars": 26231,
        "forks": 2329,
        "created_at": "2022-07-19T15:44:52Z",
        "updated_at": "2025-03-25T09:45:07Z",
        "topics": [
            "1panel",
            "cockpit",
            "docker",
            "docker-ui",
            "lamp",
            "linux",
            "lnmp",
            "ollama",
            "webmin"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-25T02:12:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0bf6fb2fd30131bee364e23ef3a06621e2f9ac606811129c56db9ac17e85528d/1Panel-dev/1Panel"
        ],
        "homepage": "https://1panel.pro",
        "readme_summary": "1Panel is a web-based control panel designed to simplify Linux server management. It offers features such as website deployment, an application store for easy installation of open-source tools, and focuses on security and reliability through containerization.",
        "key_features": [
            "Web-based Linux server management",
            "Website deployment",
            "Application store",
            "Security and reliability"
        ],
        "primary_use_case": "Linux server management through a web interface.",
        "open_issues": 639,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a complex symphony, where each instrument represents a different server function (websites, files, containers, databases, LLMs). The conductor, representing 1Panel, stands on a platform resembling a web interface, with intuitive controls and displays. Musical notes transform into digital data streams, flowing seamlessly between the instruments. Subtle UI elements are projected onto the instruments, showing real-time status and configurations. The scene is bathed in soft, warm light, creating a sense of harmony and control. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 831420946,
        "name": "bunster",
        "description": "Compile shell scripts to static binaries.",
        "url": "https://github.com/yassinebenaid/bunster",
        "language": "Go",
        "stars": 2219,
        "forks": 54,
        "created_at": "2024-07-20T13:53:54Z",
        "updated_at": "2025-03-25T10:09:58Z",
        "topics": [
            "aot",
            "bash",
            "compiler",
            "go",
            "shell"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-03-23T10:23:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ec542a65976afde95878ff3bdfcb53d3578330674e516f7bcae84a1d756567f0/yassinebenaid/bunster"
        ],
        "homepage": "https://bunster.netlify.app",
        "readme_summary": "Bunster is a shell compiler that converts bash scripts into Go code and then compiles them into static binaries. This allows the scripts to run in environments where a shell is not available, improving security and portability. Bunster aims to provide modern language features like improved error handling, a module system, and support for .env files.",
        "key_features": [
            "Compiles shell scripts to static binaries",
            "Transpiles shell scripts to Go code",
            "Aims for bash compatibility",
            "Provides improved error handling and messages",
            "Plans to introduce a module system with a package manager",
            "Will support .env files and static asset embedding",
            "Aims to support different shells and POSIX"
        ],
        "primary_use_case": "Compiling shell scripts into standalone, portable, and secure static binaries that can run in environments without a shell.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled artisan meticulously crafting a series of intricate Russian nesting dolls, each doll encapsulating a fully functional shell script. The artisan uses a special compiler's chisel, emitting sparks of Go code as they carve. The final, smallest doll glows with a self-contained energy, symbolizing the static binary. UI elements displaying compilation logs and shell commands subtly float around the artisan's workbench. The scene is set in a bright, modern workshop with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 774716772,
        "name": "heyform",
        "description": "Open-Source Form Builder",
        "url": "https://github.com/heyform/heyform",
        "language": "TypeScript",
        "stars": 7965,
        "forks": 569,
        "created_at": "2024-03-20T03:34:24Z",
        "updated_at": "2025-03-25T09:03:20Z",
        "topics": [
            "form",
            "quiz",
            "survey"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T01:27:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/774716772/96c47530-c0b6-4d26-9b97-a0c10c4b83e8"
        ],
        "homepage": "https://heyform.net",
        "readme_summary": "HeyForm is an open-source form builder that simplifies the creation of engaging conversational forms. It offers a wide array of input types, smart logic, powerful integrations, and extensive customization options. Users can analyze data collected through insightful analytics and export results for further analysis.",
        "key_features": [
            "Versatile Inputs (text, email, phone, picture choices, date pickers, file uploads)",
            "Smart Logic (conditional logic, URL redirections)",
            "Powerful Integrations (webhooks, analytics, marketing platforms, Zapier, Make.com)",
            "Visual Themes (customizable fonts, colors, backgrounds)",
            "Advanced Theming (custom CSS)",
            "Insightful Analytics (drop-off rates, completion rates)",
            "Data Export (CSV)"
        ],
        "primary_use_case": "Creating conversational forms for surveys, questionnaires, quizzes, and polls without coding.",
        "open_issues": 12,
        "cover_image_prompt": "Imagine a skilled architect meticulously crafting a digital blueprint for a dynamic form, using intuitive tools and a vibrant palette of customizable elements. The architect stands before a large, interactive screen displaying the form taking shape, with options for versatile inputs, smart logic, and powerful integrations clearly visible. Subtle tech elements, like glowing data streams and UI icons, subtly connect the architectural design to the digital realm. The scene is set in a bright, modern studio with natural lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 660603097,
        "name": "zebar",
        "description": "Zebar is a tool for creating customizable and cross-platform taskbars, desktop widgets, and popups.",
        "url": "https://github.com/glzr-io/zebar",
        "language": "Rust",
        "stars": 1628,
        "forks": 68,
        "created_at": "2023-06-30T11:37:12Z",
        "updated_at": "2025-03-25T05:47:13Z",
        "topics": [
            "bar",
            "desktop",
            "dock",
            "linux",
            "macos",
            "ricing",
            "statusbar",
            "taskbar",
            "unixporn",
            "widget",
            "windows"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-02-27T11:00:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bfd0c2a39fbdd1bcf87d14c69a2b8be9e7ea9aaa215ac4f6169c59e7ae4445fa/glzr-io/zebar"
        ],
        "homepage": "",
        "readme_summary": "Zebar is a Rust-based tool for creating customizable and cross-platform desktop widgets, taskbars, and popups. It leverages native webviews for lightweight widget rendering and exposes system information through reactive providers. Zebar supports various frontend frameworks, allowing users to build widgets with their preferred technology.",
        "key_features": [
            "Cross-platform support (Windows, MacOS, Linux)",
            "Customizable desktop widgets",
            "Taskbar creation",
            "Popup creation",
            "Uses native webviews for widgets (lightweight alternative to Electron)",
            "Exposes system information via reactive providers (CPU, battery, etc.)",
            "Frontend framework agnostic (React, SolidJS, etc.)"
        ],
        "primary_use_case": "Creating customizable and cross-platform taskbars, desktop widgets, and popups.",
        "open_issues": 32,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting intricate clockwork gears, each representing a different desktop element like a calendar, weather display, or system monitor. The artisan carefully assembles these gears onto a customizable panel, creating a personalized dashboard. Digital threads of code subtly weave through the gears, connecting them to real-time data streams. The artisan's workshop is bathed in soft, ambient light, with UI elements subtly projected onto the walls. The composition is clean and focused, emphasizing the artisan's precision. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 916618403,
        "name": "baitroute",
        "description": "A web honeypot library to create vulnerable-looking endpoints to detect and mislead attackers",
        "url": "https://github.com/utkusen/baitroute",
        "language": "Go",
        "stars": 333,
        "forks": 13,
        "created_at": "2025-01-14T13:03:07Z",
        "updated_at": "2025-03-25T08:45:12Z",
        "topics": [
            "deception",
            "decoy",
            "honeypot",
            "threat-analysis",
            "threat-hunting",
            "threat-intelligence"
        ],
        "quality_score": 0.7000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-01-14T20:50:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ac7324209b5b8a663de377b9f73285f5fd02bd8082303d4fbdf44e705d60b883/utkusen/baitroute"
        ],
        "homepage": "",
        "readme_summary": "Baitroute is a web honeypot library designed to detect and mislead attackers by creating realistic, vulnerable-looking endpoints. It integrates seamlessly with Go, Python, and Javascript web frameworks and offers ready-to-use rules that can be configured to create custom decoys. The library aims to provide an early warning system for potential attacks and waste attackers' time by presenting them with false positive vulnerabilities.",
        "key_features": [
            "Easy Integration with Go, Python, and Javascript web frameworks",
            "Ready-to-use vulnerability/misconfiguration rules",
            "Configurable endpoints with custom status codes, headers, and response bodies",
            "Selective rule loading",
            "Alert integration with external systems"
        ],
        "primary_use_case": "Detect vulnerability scans and mislead attackers by providing false positive results, acting as an early warning system and wasting attackers' time.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled detective meticulously setting up a series of elaborate, tempting traps within a sprawling digital city. These traps, disguised as vulnerable buildings and open doors, are designed to lure unsuspecting hackers into revealing their presence. The detective observes from a hidden control room, monitoring the traps and gathering intelligence on the intruders. Subtle UI elements and code snippets float in the air, hinting at the underlying technology. The scene is rendered in a 3D isometric illustration style with a dark, mysterious atmosphere and glowing digital accents."
    },
    {
        "id": 233472199,
        "name": "Microsoft-Activation-Scripts",
        "description": "Open-source Windows and Office activator featuring HWID, Ohook, TSforge, KMS38, and Online KMS activation methods, along with advanced troubleshooting.",
        "url": "https://github.com/massgravel/Microsoft-Activation-Scripts",
        "language": "Batchfile",
        "stars": 127367,
        "forks": 12397,
        "created_at": "2020-01-12T23:03:34Z",
        "updated_at": "2025-03-25T10:06:59Z",
        "topics": [
            "activator",
            "hwid",
            "kms",
            "kms38",
            "massgrave",
            "massgravel",
            "microsoft",
            "microsoft365",
            "office",
            "office365",
            "ohook",
            "powershell",
            "tsforge",
            "windows",
            "windows-10",
            "windows-11"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-14T10:00:16Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/233472199/7f86712b-fee6-4659-a2cf-c967d6b0d733"
        ],
        "homepage": "https://massgrave.dev",
        "readme_summary": "The Microsoft Activation Scripts repository provides open-source tools for activating Windows and Office using various methods like HWID, Ohook, TSforge, KMS38, and Online KMS. It also includes advanced troubleshooting capabilities to assist users in resolving activation issues. The repository aims to simplify and streamline the activation process for Microsoft products.",
        "key_features": [
            "HWID Activation",
            "Ohook Activation",
            "TSforge Activation",
            "KMS38 Activation",
            "Online KMS Activation",
            "Troubleshooting"
        ],
        "primary_use_case": "Windows and Office activation",
        "open_issues": 3,
        "cover_image_prompt": "A skilled locksmith, representing the Microsoft Activation Scripts, expertly crafting keys (HWID, Ohook, TSforge, KMS38, Online KMS) to unlock glowing Windows and Office icons. The locksmith's workshop is filled with digital blueprints and troubleshooting tools, subtly hinting at the software aspect. A large screen displays the repository name. The scene is set in a brightly lit, clean workshop with a focus on precision and security. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    }
]