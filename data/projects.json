[
    {
        "id": 834082440,
        "name": "camoufox",
        "description": "ü¶ä Anti-detect browser",
        "url": "https://github.com/daijro/camoufox",
        "language": "C++",
        "stars": 3232,
        "forks": 272,
        "created_at": "2024-07-26T11:31:27Z",
        "updated_at": "2025-09-13T09:48:58Z",
        "topics": [
            "antidetect",
            "antidetect-browser",
            "fingerprint",
            "firefox",
            "networking",
            "playwright",
            "scraping",
            "webscraping"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-03-15T10:50:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3224035a54453f1a9f979fe53c4e8080c7bb8dbeb49b2fd4df9cae91958056f6/daijro/camoufox"
        ],
        "homepage": "https://camoufox.com",
        "readme_summary": "Camoufox is an open-source anti-detect browser based on Firefox, designed for web scraping and anti-bot evasion. It focuses on fingerprint injection and rotation at the C++ level, aiming to be undetectable by anti-bot systems and outperform commercial anti-bot browsers.",
        "key_features": [
            "Invisible to anti-bot systems",
            "Fingerprint injection & rotation (without JS injection)",
            "Human-like mouse movement",
            "Ad blocking & circumvention",
            "Memory efficiency",
            "PyPi package for updates & auto fingerprint injection",
            "Up-to-date with the latest Firefox version"
        ],
        "primary_use_case": "Web scraping with anti-bot evasion and fingerprint spoofing.",
        "open_issues": 143,
        "cover_image_prompt": "A skilled illusionist standing on a digital stage, manipulating glowing masks that represent browser fingerprints. The illusionist subtly alters each mask, making them appear unique and authentic to bypass watchful robotic eyes in the audience. Small UI elements displaying browser properties and code snippets float around the stage. The scene is set in a futuristic theater with dramatic lighting. The image should be in a 3D isometric illustration style with vibrant colors and intricate details, conveying the concept of undetectable fingerprint manipulation."
    },
    {
        "id": 116322814,
        "name": "howdy",
        "description": "üõ°Ô∏è Windows Hello‚Ñ¢ style facial authentication for Linux",
        "url": "https://github.com/boltgolt/howdy",
        "language": "Python",
        "stars": 6677,
        "forks": 339,
        "created_at": "2018-01-05T00:54:21Z",
        "updated_at": "2025-09-13T09:39:19Z",
        "topics": [
            "arch-linux",
            "camera",
            "debian",
            "face-recognition",
            "fedora",
            "ir-camera",
            "linux",
            "opensuse",
            "pam",
            "pam-module",
            "ubuntu"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-22T10:19:45Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/116322814/14ef1700-65da-11e9-9ef0-e720d09a7731"
        ],
        "homepage": "",
        "readme_summary": "Howdy provides Windows Hello-style facial authentication for Linux systems. It leverages built-in IR emitters and cameras for facial recognition, enabling password-free authentication for login, screen lock, sudo, and other PAM-integrated functions.",
        "key_features": [
            "Facial recognition authentication",
            "PAM integration",
            "IR emitter and camera support",
            "Package availability for Debian/Ubuntu, Arch Linux, Fedora, and openSUSE"
        ],
        "primary_use_case": "Password-free authentication on Linux systems using facial recognition.",
        "open_issues": 267,
        "cover_image_prompt": "A friendly robot doorman, with a built-in IR camera for a face, stands in front of a Linux computer displaying a login screen. The robot scans a user's face, represented by a glowing outline, and grants access, symbolized by a green checkmark appearing on the screen. The scene is set in a modern, minimalist office. Small UI elements show the Howdy logo and facial recognition process. Digital particles flow from the robot's camera to the computer. The composition is clean and focused with a blue and green color scheme. The image should be in flat design style with clear iconography."
    },
    {
        "id": 1030990993,
        "name": "hexora",
        "description": "Static analysis of malicious Python code",
        "url": "https://github.com/rushter/hexora",
        "language": "Rust",
        "stars": 26,
        "forks": 2,
        "created_at": "2025-08-02T19:10:44Z",
        "updated_at": "2025-09-13T09:36:22Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-09-12T13:26:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a8779a7bb176439bc8faf9366e6e8c770cb4cf4f08a4db9b5fcf16d2add9e7dc/rushter/hexora"
        ],
        "homepage": "",
        "readme_summary": "Hexora is a static analysis tool written in Rust designed to detect malicious patterns in Python code. It can be used to audit project dependencies, detect malicious scripts, analyze IoC files, and audit new PyPi packages.",
        "key_features": [
            "Audit project dependencies for supply-chain attacks",
            "Detect malicious scripts from various sources",
            "Analyze IoC files from security incidents",
            "Audit new packages uploaded to PyPi",
            "Provides rule-based static analysis with configurable confidence levels",
            "Can be used as a command-line tool or a Python library"
        ],
        "primary_use_case": "Static analysis of Python code to identify potentially malicious or harmful patterns.",
        "open_issues": 1,
        "cover_image_prompt": "A detective meticulously examining Python code through a magnifying glass, revealing hidden snakes and spiders within the lines of code. The detective wears a fedora and trench coat, symbolizing the investigative nature of the tool. The code snippets are subtly displayed on holographic screens surrounding the detective. The scene is set in a dimly lit, futuristic office with digital rain falling outside the window. Small UI elements display Hexora's logo and rule codes. The composition is focused and dramatic with a blue and green color scheme. The image should be in a digital painting style with clear outlines and rich details."
    },
    {
        "id": 928102730,
        "name": "index-tts",
        "description": "An Industrial-Level Controllable and Efficient Zero-Shot Text-To-Speech System",
        "url": "https://github.com/index-tts/index-tts",
        "language": "Python",
        "stars": 9076,
        "forks": 877,
        "created_at": "2025-02-06T04:08:05Z",
        "updated_at": "2025-09-13T10:07:09Z",
        "topics": [
            "bigvgan",
            "cross-lingual",
            "indextts",
            "text-to-speech",
            "tts",
            "voice-clone",
            "zero-shot-tts"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-12T08:48:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f55436d1b150df8cb5be8b4a01c1712f98704977a9f9c6eeedfb71e46bf91b93/index-tts/index-tts"
        ],
        "homepage": "",
        "readme_summary": "IndexTTS2 is an autoregressive zero-shot text-to-speech system focused on controllable speech duration and emotional expression. It allows for precise control over the length of generated speech, independent control over timbre and emotion, and improved speech clarity in highly emotional expressions.",
        "key_features": [
            "Precise speech duration control",
            "Disentanglement of emotional expression and speaker identity",
            "Zero-shot voice cloning",
            "Emotional tone control via text descriptions",
            "Improved speech clarity in emotional expressions",
            "Cross-lingual support"
        ],
        "primary_use_case": "Video dubbing and other applications requiring strict audio-visual synchronization, as well as applications needing controllable emotional expression in synthesized speech.",
        "open_issues": 169,
        "cover_image_prompt": "Imagine a skilled puppeteer meticulously controlling two marionettes: one representing the speaker's voice (timbre), and the other representing the speaker's emotions. The puppeteer uses precise dials and levers to adjust the duration and intensity of each marionette's performance. A screen behind the puppeteer displays the text being spoken, with highlighted sections indicating emotional cues. Subtle digital particles flow from the text to the emotion marionette, enhancing its expressiveness. The scene is set in a modern sound studio with soft, focused lighting. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 533087958,
        "name": "d2",
        "description": "D2 is a modern diagram scripting language that turns text to diagrams.",
        "url": "https://github.com/terrastruct/d2",
        "language": "Go",
        "stars": 21844,
        "forks": 570,
        "created_at": "2022-09-05T23:12:27Z",
        "updated_at": "2025-09-13T09:36:05Z",
        "topics": [
            "developer-tools",
            "diagramming",
            "diagrams",
            "go",
            "golang",
            "software-architecture",
            "text-to-diagram"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T13:10:32Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/533087958/9449b2c9-1509-476d-8d26-48d8c98380c3"
        ],
        "homepage": "https://d2lang.com",
        "readme_summary": "D2 is a modern diagram scripting language that converts text descriptions into diagrams. It allows users to define diagrams using a text-based syntax and then renders them into various output formats like SVG. D2 aims to simplify the process of creating and maintaining diagrams, especially for software architecture and other technical documentation.",
        "key_features": [
            "Text-to-diagram conversion",
            "Diagram scripting language",
            "Multiple export file types (e.g., SVG)",
            "Themes",
            "Fonts",
            "Language tooling",
            "Plugins",
            "Layout engine (elk)",
            "IDE (Terrastruct)",
            "Playground (online editor)"
        ],
        "primary_use_case": "Creating diagrams from text descriptions for software architecture, system design, and other technical documentation purposes.",
        "open_issues": 429,
        "cover_image_prompt": "A skilled architect standing before a blueprint, effortlessly transforming lines of code into a vibrant, interconnected city skyline. The architect uses a special pen that emits glowing digital particles, instantly constructing buildings and infrastructure on the blueprint. Small screens around the scene display the D2 code and the resulting diagram in real-time. The scene is set in a modern design studio with natural lighting. The image should be in 3D isometric illustration style with rich details and a clean, organized composition. The city skyline subtly incorporates the 'D2' logo."
    },
    {
        "id": 362234372,
        "name": "cariddi",
        "description": "Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more",
        "url": "https://github.com/edoardottt/cariddi",
        "language": "Go",
        "stars": 2752,
        "forks": 248,
        "created_at": "2021-04-27T19:54:43Z",
        "updated_at": "2025-09-13T08:36:08Z",
        "topics": [
            "bugbounty",
            "crawler",
            "crawling",
            "endpoint-discovery",
            "endpoints",
            "go",
            "golang",
            "hacktoberfest",
            "infosec",
            "osint",
            "penetration-testing",
            "pentesting",
            "recon",
            "reconnaissance",
            "redteam",
            "scraper",
            "secret-keys",
            "secrets-detection",
            "security",
            "security-tools"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-12T10:19:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ca7043538ac689d2203347f25a80e493d60e30f7a977ebc79bed90a482aad0f6/edoardottt/cariddi"
        ],
        "homepage": "https://edoardottt.com/",
        "readme_summary": "Cariddi is a Go-based tool designed for comprehensive web reconnaissance. It crawls domains to discover URLs and scans them for sensitive information such as API keys, secrets, file extensions, and endpoints. It supports various installation methods and offers extensive scan customization options.",
        "key_features": [
            "Crawls domains for URLs",
            "Scans for endpoints",
            "Detects secrets and API keys",
            "Identifies file extensions",
            "Supports custom endpoint and secret files",
            "Offers proxy configuration",
            "Provides options to ignore specific file extensions"
        ],
        "primary_use_case": "Web reconnaissance and security auditing to identify potential vulnerabilities and sensitive information exposure.",
        "open_issues": 8,
        "cover_image_prompt": "A seasoned explorer meticulously charting a vast, uncharted digital ocean from a high-tech submarine. The submarine's sonar emits waves that reveal hidden islands representing endpoints, with glowing treasures symbolizing discovered secrets and API keys. The explorer examines these findings on holographic displays inside the submarine, which subtly show code snippets and data visualizations. The scene is set in a deep, blue ocean with bioluminescent creatures. The composition is focused and clear, with a cool color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]