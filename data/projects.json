[
    {
        "id": 966234228,
        "name": "blender-mcp",
        "description": "Text to 4D Worlds in Blender",
        "url": "https://github.com/CommonSenseMachines/blender-mcp",
        "language": "Python",
        "stars": 15,
        "forks": 0,
        "created_at": "2025-04-14T15:55:14Z",
        "updated_at": "2025-04-20T07:25:58Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T02:31:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/2690a5c834c4f7434042a31f27885c4524b90a3cffbe04b503af6bc88b73f806/CommonSenseMachines/blender-mcp"
        ],
        "homepage": "",
        "readme_summary": "The BlenderMCP repository facilitates AI-assisted 3D modeling by connecting Blender to CSM.ai and language models. It allows users to search for and integrate 3D assets from CSM.ai using natural language and animate humanoid meshes with text prompts, streamlining the 3D creation process.",
        "key_features": [
            "Search public or private CSM.ai sessions for 3D assets.",
            "Animate humanoid meshes in Blender using text prompts.",
            "Integrates Blender, CSM.ai, and LLMs via the Model Context Protocol (MCP)."
        ],
        "primary_use_case": "AI-assisted 3D modeling workflows in Blender using language models and a 3D asset library.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled architect using a sophisticated AI assistant (Cursor) to design a futuristic building (Blender). The architect speaks into a microphone, describing the desired structure, while the AI assistant, connected to a vast library of 3D models (CSM.ai), instantly generates and integrates the components into the building design. The scene is set in a bright, airy studio filled with holographic projections of building schematics and design options. Small UI elements display code snippets and real-time feedback from the AI. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 967748913,
        "name": "speech-to-latex",
        "description": "Turn speech to LaTeX, 100% local",
        "url": "https://github.com/Thomas-McKanna/speech-to-latex",
        "language": "TypeScript",
        "stars": 6,
        "forks": 2,
        "created_at": "2025-04-17T00:07:54Z",
        "updated_at": "2025-04-19T17:26:25Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-17T00:50:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0643a57e2cc57b6e3c3afebf0cbc07c1e8682ab3a6b3eac04814230ceac8b438/Thomas-McKanna/speech-to-latex"
        ],
        "homepage": "https://thomas-mckanna.github.io/speech-to-latex/",
        "readme_summary": "The Speech to LaTeX repository provides a web application that transcribes spoken mathematics into LaTeX expressions, operating entirely client-side. It leverages Whisper Web for speech recognition, WebLLM for text-to-LaTeX conversion, and MathJax for rendering the output. This allows for a privacy-focused, offline-capable, and real-time conversion experience.",
        "key_features": [
            "Voice to LaTeX conversion",
            "100% Client-side processing",
            "Privacy-focused operation",
            "Offline functionality",
            "Real-time conversion",
            "Customizable models"
        ],
        "primary_use_case": "Converting spoken mathematical expressions into LaTeX code within a web browser.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled calligrapher sits at a desk, listening intently to spoken words and transcribing them directly into elegant LaTeX code on a digital parchment. The parchment glows softly, displaying beautifully rendered mathematical equations. A microphone sits nearby, capturing the spoken input. Small UI elements float around the scene, showing the Whisper and WebLLM logos. The setting is a cozy, well-lit study with a focus on precision and clarity. The composition is clean and focused, with a warm color scheme. The image should be in a flat design style with clear iconography and subtle digital accents."
    },
    {
        "id": 16752620,
        "name": "gogs",
        "description": "Gogs is a painless self-hosted Git service",
        "url": "https://github.com/gogs/gogs",
        "language": "Go",
        "stars": 46243,
        "forks": 5023,
        "created_at": "2014-02-12T01:57:08Z",
        "updated_at": "2025-04-20T10:01:59Z",
        "topics": [
            "docker",
            "git",
            "go",
            "gogs",
            "mysql",
            "postgresql",
            "raspberry-pi",
            "scip-enabled",
            "self-hosted",
            "sqlite3"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T12:48:37Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/16752620/55903c64-96ac-4dbe-af06-cf527ec6ec3c"
        ],
        "homepage": "https://gogs.io",
        "readme_summary": "Gogs is a lightweight, self-hosted Git service written in Go. It provides a simple and painless way to manage Git repositories with features like user dashboards, access control, webhooks, and database backend support. It aims to be easy to install and use across various platforms.",
        "key_features": [
            "User dashboard, profile, and activity timeline",
            "Access via SSH, HTTP, and HTTPS",
            "User, organization, and repository management",
            "Webhooks (Slack, Discord, Dingtalk)",
            "Git hooks, deploy keys, and Git LFS",
            "Issues, pull requests, wiki, protected branches, collaboration",
            "Repository migration and mirroring",
            "Web editor",
            "Jupyter Notebook and PDF rendering",
            "Authentication (SMTP, LDAP, reverse proxy, GitHub)",
            "Customizable templates and static files",
            "Database backend support (PostgreSQL, MySQL, SQLite3)",
            "Localization (over 31 languages)"
        ],
        "primary_use_case": "Self-hosted Git service",
        "open_issues": 917,
        "cover_image_prompt": "A skilled architect meticulously constructing a miniature city representing a self-hosted Git service. The architect is placing tiny buildings (repositories) onto a well-organized grid (the Gogs platform). Wires (representing SSH, HTTP, HTTPS protocols) connect the buildings, ensuring seamless communication. A blueprint subtly displays the Gogs logo. The scene is set in a bright, modern studio with digital screens showing user dashboards and code snippets. The image should be in a clean, 3D isometric illustration style with a pastel color scheme, emphasizing clarity and organization."
    },
    {
        "id": 227091502,
        "name": "perfetto",
        "description": "Performance instrumentation and tracing for Android, Linux and Chrome",
        "url": "https://github.com/google/perfetto",
        "language": "C++",
        "stars": 3568,
        "forks": 433,
        "created_at": "2019-12-10T10:32:44Z",
        "updated_at": "2025-04-20T07:06:48Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-18T02:26:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5ca89f340b94c34298b73fef6f3423cc20bc7e988a918b94cc265a46c5ecc0ad/google/perfetto"
        ],
        "homepage": "https://www.perfetto.dev",
        "readme_summary": "Perfetto is a comprehensive open-source stack designed for performance instrumentation and trace analysis. It provides tools and libraries for recording system and application-level traces, including heap profiling. The stack features a SQL-based trace analysis library and a web UI for visualizing and exploring large trace datasets.",
        "key_features": [
            "System-level tracing",
            "App-level tracing",
            "Native + Java heap profiling",
            "Trace analysis using SQL",
            "Web-based UI for trace visualization"
        ],
        "primary_use_case": "Performance instrumentation and trace analysis for Android, Linux, and Chrome.",
        "open_issues": 69,
        "cover_image_prompt": "A meticulous clockmaker, hunched over a giant, intricate clock, fine-tuning its gears with specialized tools. Each gear represents a different system component (Android, Linux, Chrome). The clockmaker uses a magnifying glass to examine the gears, revealing performance bottlenecks and inefficiencies. Digital readouts and graphs float around the clock, displaying real-time performance metrics. The clockmaker's workbench is filled with tracing tools and analysis reports. The scene is bathed in soft, focused lighting, emphasizing the precision and detail of the work. The image should be in a detailed technical illustration style with labeled parts and a clean, informative aesthetic."
    },
    {
        "id": 4095287,
        "name": "rubocop",
        "description": "A Ruby static code analyzer and formatter, based on the community Ruby style guide.",
        "url": "https://github.com/rubocop/rubocop",
        "language": "Ruby",
        "stars": 12731,
        "forks": 3073,
        "created_at": "2012-04-21T10:09:58Z",
        "updated_at": "2025-04-20T04:28:42Z",
        "topics": [
            "code-formatter",
            "hacktoberfest",
            "linter",
            "rubocop",
            "ruby",
            "static-code-analysis"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T17:26:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9fa76325816c0e1c9f74fc790ef11257ee95c58f580736d1f6c7a56876e91a73/rubocop/rubocop"
        ],
        "homepage": "https://docs.rubocop.org",
        "readme_summary": "RuboCop is a Ruby static code analyzer and formatter that enforces the community Ruby Style Guide. It identifies code style issues, automatically fixes many of them, and offers extensive configuration options. Its primary use case is to ensure code quality and consistency in Ruby projects through automated style checking and formatting.",
        "key_features": [
            "Ruby static code analysis (linting)",
            "Code formatting",
            "Enforcement of Ruby Style Guide",
            "Automatic code fixing",
            "Extensive configuration options"
        ],
        "primary_use_case": "Automated Ruby code style checking and formatting to ensure code quality and consistency.",
        "open_issues": 319,
        "cover_image_prompt": "A meticulous clockmaker meticulously adjusting the gears of a giant Ruby gemstone clock. Each gear represents a different aspect of Ruby code style, and as the clockmaker adjusts them, the clock ticks with perfect precision. Small screens display code snippets being automatically formatted and analyzed in real-time. The clock is set in a brightly lit, steampunk-inspired workshop with intricate tools and blueprints scattered around. The image should be in a detailed digital painting style with a focus on clarity and precision."
    },
    {
        "id": 70908208,
        "name": "rasa",
        "description": "💬   Open source machine learning framework to automate text- and voice-based conversations: NLU, dialogue management, connect to Slack, Facebook, and more - Create chatbots and voice assistants",
        "url": "https://github.com/RasaHQ/rasa",
        "language": "Python",
        "stars": 20009,
        "forks": 4766,
        "created_at": "2016-10-14T12:27:49Z",
        "updated_at": "2025-04-20T10:07:28Z",
        "topics": [
            "bot",
            "bot-framework",
            "botkit",
            "bots",
            "chatbot",
            "chatbots",
            "chatbots-framework",
            "conversation-driven-development",
            "conversational-agents",
            "conversational-ai",
            "conversational-bots",
            "machine-learning",
            "machine-learning-library",
            "mitie",
            "natural-language-processing",
            "nlp",
            "nlu",
            "rasa",
            "spacy",
            "wit"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-14T10:26:14Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/70908208/7ac6d480-677b-11e9-8160-e988e9fd6255"
        ],
        "homepage": "https://rasa.com/docs/rasa/",
        "readme_summary": "Rasa is an open-source machine learning framework designed to automate conversations. It provides tools for NLU, dialogue management, and integrations with various platforms like Slack and Facebook. Rasa enables developers to build contextual assistants and chatbots capable of having layered conversations.",
        "key_features": [
            "NLU (Natural Language Understanding)",
            "Dialogue Management",
            "Integration with multiple platforms (Slack, Facebook, etc.)",
            "Voice assistant capabilities (Alexa, Google Home)"
        ],
        "primary_use_case": "Automating text and voice-based conversations using machine learning.",
        "open_issues": 4,
        "cover_image_prompt": "Imagine a skilled architect meticulously crafting a conversational bridge between two bustling cities, one representing human language and the other, automated systems. The architect, equipped with blueprints of NLU and dialogue management, carefully lays the foundation using building blocks labeled 'Facebook,' 'Slack,' and 'Voice Assistants.' Digital particles flow from the architect's hands, solidifying the bridge's structure. Small UI elements display conversations flowing seamlessly across the bridge. The scene is set in a bright, open workshop with a blueprint table in the center. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 2990192,
        "name": "Signal-Android",
        "description": "A private messenger for Android.",
        "url": "https://github.com/signalapp/Signal-Android",
        "language": "Kotlin",
        "stars": 26874,
        "forks": 6374,
        "created_at": "2011-12-15T20:01:12Z",
        "updated_at": "2025-04-20T06:04:08Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-15T21:20:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/419dbd23df03d8e32391c1601a201b1b29567e17f966f95b2ecd059f1fd8a383/signalapp/Signal-Android"
        ],
        "homepage": "https://signal.org",
        "readme_summary": "Signal Android is a secure messaging application that prioritizes user privacy. It provides features such as encrypted text messaging, voice and video calls, and utilizes the device's data connection for communication. The application is designed to offer a secure communication platform for Android users.",
        "key_features": [
            "Secure messaging using data connection (WiFi/3G/4G/5G)",
            "High-fidelity message sending and receiving",
            "HD voice/video calls",
            "Advanced privacy-preserving technology"
        ],
        "primary_use_case": "Private and secure messaging on Android devices.",
        "open_issues": 331,
        "cover_image_prompt": "A blacksmith forging a secure lock from molten data streams, representing Signal's secure messaging. The blacksmith, clad in modern techwear, hammers the glowing data on an anvil displaying a simplified chat interface. Finished locks float upwards, each containing a miniature, warmly lit conversation scene. Digital particles swirl around the forge, subtly displaying encryption algorithms. The scene is set in a high-tech workshop with dramatic lighting, emphasizing the heat and intensity of the forging process. The image should be in a 3D isometric illustration style with vibrant colors and sharp details, subtly incorporating the Signal logo."
    },
    {
        "id": 854337508,
        "name": "spring-ai-alibaba",
        "description": "Agentic AI Framework for Java Developers",
        "url": "https://github.com/alibaba/spring-ai-alibaba",
        "language": "Java",
        "stars": 2365,
        "forks": 454,
        "created_at": "2024-09-09T01:35:50Z",
        "updated_at": "2025-04-20T08:57:46Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-20T03:58:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c7a47aae154cde74277da41fb0b99fd675c3ac5fffe97203c214c3291a922920/alibaba/spring-ai-alibaba"
        ],
        "homepage": "https://java2ai.com",
        "readme_summary": "Spring AI Alibaba is an AI application framework for Java developers that simplifies the integration of Alibaba Cloud QWen LLM services into Spring Boot applications. It provides high-level abstractions like ChatClient, supports various AI model types, and offers features like RAG and function calling, making it easier to build intelligent agents.",
        "key_features": [
            "Support for Alibaba Cloud QWen Model and Dashscope Model service",
            "High-level AI agent abstraction -- ChatClient",
            "Support various Model types like Chat, Text to Image, Audio Transcription, Text to Speech",
            "RAG (Retrieval-Augmented Generation) support",
            "Function calling",
            "Spring Boot Auto Configuration and Starters"
        ],
        "primary_use_case": "Building AI-powered Java applications with seamless integration with Alibaba Cloud AI services.",
        "open_issues": 149,
        "cover_image_prompt": "A skilled Java architect stands before a towering Alibaba Cloud, seamlessly weaving threads of code into a vibrant tapestry of AI services. The architect uses a 'ChatClient' needle to stitch together QWen LLM models, vector databases, and Spring Boot components, creating intelligent agents. The tapestry glows with digital particles, subtly displaying code snippets and AI function calls. The scene is set in a modern, cloud-native workshop with soft, ambient lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors, conveying the seamless integration and power of Spring AI Alibaba."
    },
    {
        "id": 808045485,
        "name": "ladybird",
        "description": "Truly independent web browser",
        "url": "https://github.com/LadybirdBrowser/ladybird",
        "language": "C++",
        "stars": 37416,
        "forks": 1555,
        "created_at": "2024-05-30T09:18:10Z",
        "updated_at": "2025-04-20T09:29:54Z",
        "topics": [
            "browser",
            "browser-engine"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-19T11:18:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0ffcbef8d1781846ab81879e6400bb39f243bb9351d3a4e3c62d78caa6b8032e/LadybirdBrowser/ladybird"
        ],
        "homepage": "https://ladybird.org",
        "readme_summary": "Ladybird is an independent web browser aiming to provide a complete browsing experience based on modern web standards. It employs a multi-process architecture for robustness and security, leveraging components from SerenityOS such as LibWeb for rendering and LibJS for JavaScript execution. The browser is currently in pre-alpha and intended for developer use.",
        "key_features": [
            "Independent web browser",
            "Multi-process architecture",
            "Sandboxed renderer processes",
            "Uses components from SerenityOS (LibWeb, LibJS, LibWasm, etc.)"
        ],
        "primary_use_case": "Building a complete, usable web browser based on web standards.",
        "open_issues": 375,
        "cover_image_prompt": "A skilled architect meticulously constructing a grand cathedral using individual web components as building blocks. The architect carefully places each block, ensuring it adheres to strict standards, while a blueprint labeled 'Web Standards' guides their work. The cathedral's stained-glass windows display various web pages, showcasing the browser's rendering capabilities. Subtle UI elements and code snippets float around the scene, connecting the architectural metaphor to software development. The scene is set in a brightly lit workshop with a focus on precision and detail. The image should be in a detailed technical illustration style with labeled parts and a clean, professional aesthetic."
    }
]