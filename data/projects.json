[
    {
        "id": 461205332,
        "name": "zoetic",
        "description": "üå± üé• Markdown presentations using your webcam",
        "url": "https://github.com/kantord/zoetic",
        "language": "JavaScript",
        "stars": 73,
        "forks": 2,
        "created_at": "2022-02-19T13:49:30Z",
        "updated_at": "2025-06-19T08:51:06Z",
        "topics": [
            "jsx",
            "markdown",
            "mdx",
            "mdx-deck",
            "pre",
            "presentation",
            "react",
            "remote-work",
            "slides",
            "slideshow",
            "webcam",
            "webcam-streaming"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2022-11-13T18:25:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/461205332/3eb9bd3a-0cb6-417c-ac4e-8057757fc652"
        ],
        "homepage": "",
        "readme_summary": "Zoetic is a JavaScript-based tool for creating and presenting slides using Markdown, with the unique feature of integrating a live webcam feed directly into the presentation. It allows users to create slides using Markdown or MDX, and then present them with their webcam feed overlaid, making it suitable for online meetings and remote presentations. Planned features include green screen support, multi-camera support, and virtual webcam functionality.",
        "key_features": [
            "Markdown presentation with webcam integration",
            "Slide creation using Markdown/MDX",
            "Live presentation with screen sharing",
            "Planned features: Green screen support, multi-camera support, virtual webcam support, on-screen drawing, window sharing"
        ],
        "primary_use_case": "Creating and delivering presentations with integrated webcam feed using Markdown.",
        "open_issues": 1,
        "cover_image_prompt": "A presenter stands on a stage, seamlessly integrated into their slide presentation via webcam. The slides display various topics, while the presenter's live video feed is cleverly overlaid, creating an engaging and dynamic presentation. The stage is bathed in soft, focused lighting, highlighting the presenter and the slides. Subtle UI elements float around the presenter, representing controls for managing the slides and camera. The repository name, 'zoetic', is subtly displayed on a screen in the background. The image should be in a digital painting style with clean lines and vibrant colors."
    },
    {
        "id": 996231722,
        "name": "Transfer",
        "description": "A local file server Android app. Upload and download files over Wi-Fi ",
        "url": "https://github.com/matan-h/Transfer",
        "language": "Kotlin",
        "stars": 53,
        "forks": 2,
        "created_at": "2025-06-04T16:40:53Z",
        "updated_at": "2025-06-19T07:59:04Z",
        "topics": [
            "android",
            "android-app",
            "file-sharing",
            "file-sharing-server",
            "local-network",
            "local-server",
            "no-cloud"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-15T11:10:13Z",
        "media_urls": [
            "https://opengraph.githubassets.com/431629822ffb41c3410ea642ae889dfd958720786f85dabffd9809b48ec76607/matan-h/Transfer"
        ],
        "homepage": "",
        "readme_summary": "Transfer is an Android app that creates a local file server, allowing users to easily upload and download files between devices on the same Wi-Fi network. It offers a simple web interface and command-line access, with security features like IP permissions and password protection.",
        "key_features": [
            "Effortless LAN Sharing",
            "Configurable Security (IP Permissions, Password Protection)",
            "Powerful CLI Access (curl-friendly)",
            "Dual Browse UI (App and Web)",
            "Quick In-App Transfers (Upload, Paste)"
        ],
        "primary_use_case": "Quickly transfer files between devices on a local network without needing cables, cloud services, or complex configurations.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a friendly bellhop in a bustling hotel lobby, effortlessly transferring suitcases (files) between guests (devices) using a levitating platform. The platform glows with Wi-Fi signals, and each suitcase has a small screen displaying its contents. In the background, a subtle UI element shows an IP address and port number. The scene is bright and welcoming, with a clean, modern aesthetic. The image should be in a 3D isometric illustration style with soft lighting and pastel colors."
    },
    {
        "id": 618260101,
        "name": "The-50-Front-end-Project",
        "description": "This git repository consists of a collection of 50 carefully curated frontend projects that showcase your skills and creativity as a frontend developer. Each project is unique and visually stunning, demonstrating your proficiency in a wide range of technologies and design principles",
        "url": "https://github.com/SudeepAcharjee/The-50-Front-end-Project",
        "language": "CSS",
        "stars": 316,
        "forks": 84,
        "created_at": "2023-03-24T04:45:03Z",
        "updated_at": "2025-06-19T09:25:52Z",
        "topics": [
            "bootstrap",
            "css",
            "html5",
            "js",
            "json",
            "nodejs",
            "reactjs",
            "scss",
            "typescript"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-03-12T18:22:30Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a7655dbca475ff23e193ad8592fd15b167614d0666909d92ae768773334ef83a/SudeepAcharjee/The-50-Front-end-Project"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a collection of 50 frontend projects designed to help developers enhance their web development skills. The projects cover a wide range of technologies, including HTML, CSS, JavaScript, React, Bootstrap, and Tailwind CSS. It serves as a practical resource for learning and skill improvement through hands-on experience.",
        "key_features": [
            "50 frontend projects",
            "HTML, CSS, JavaScript",
            "React",
            "Bootstrap",
            "Tailwind CSS",
            "Diverse range of projects"
        ],
        "primary_use_case": "Learning and improving frontend web development skills through practical projects.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a grand stage where a spotlight shines on 50 miniature theaters, each showcasing a different frontend project. A master puppeteer stands proudly, holding strings connected to each theater, subtly adjusting the scenes within. Each theater features a unique visual style and interactive element, representing the diverse range of projects. Small screens embedded in the stage display snippets of HTML, CSS, and JavaScript code, subtly connecting the scene to software. The stage is set in a modern, minimalist studio with soft, ambient lighting. The composition is wide and panoramic, capturing the breadth of the collection. The color scheme is vibrant and diverse, reflecting the variety of projects. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 971698957,
        "name": "domain-scanner",
        "description": "‰∏Ä‰∏™Áî®GoËØ≠Ë®ÄÁºñÂÜôÁöÑÂº∫Â§ß‰∏îÁÅµÊ¥ªÁöÑÂüüÂêçÊ≥®ÂÜåÂèØÁî®ÊÄßÊ£ÄÊü•Êâ´ÊèèÂ∑•ÂÖ∑ A powerful and flexible domain name availability checker written in Go. This tool helps you find available domain names based on various patterns and filters.",
        "url": "https://github.com/xuemian168/domain-scanner",
        "language": "Go",
        "stars": 340,
        "forks": 46,
        "created_at": "2025-04-23T23:34:49Z",
        "updated_at": "2025-06-19T08:49:19Z",
        "topics": [
            "domain",
            "tld"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-05-28T04:31:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bb651f6ab84ce3e05fee6807499c32140a078b9495b7a89c6f5efb29732797a3/xuemian168/domain-scanner"
        ],
        "homepage": "https://zli.li/",
        "readme_summary": "Domain Scanner is a Go-based tool for checking domain name availability. It uses multiple verification methods like DNS records, WHOIS information, and SSL certificate verification. The tool supports advanced filtering with regular expressions, concurrent processing, and provides detailed verification results, making it easy to find available domain names.",
        "key_features": [
            "Multi-method Verification (DNS, WHOIS, SSL)",
            "Advanced Filtering (Regular Expressions)",
            "Concurrent Processing (Multi-threaded)",
            "Smart Error Handling (Automatic Retries)",
            "Detailed Results (Verification Signatures)",
            "Configurable Delay"
        ],
        "primary_use_case": "Checking domain name availability based on various patterns and filters.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a seasoned cartographer meticulously charting unexplored territories on a digital map. The cartographer uses a specialized lens that reveals the availability of unclaimed lands (domain names), marking them with vibrant colors. Registered territories are shown with established flags and borders. The map is overlaid with subtle digital grids and glowing data streams, representing the real-time scanning process. Small UI elements display domain availability status and registration details. The scene is set in a futuristic map room with soft, ambient lighting. The image should be in a detailed digital painting style with clear outlines and a focus on clarity."
    },
    {
        "id": 942369670,
        "name": "clippy",
        "description": "üìé Clippy, now with some AI",
        "url": "https://github.com/felixrieseberg/clippy",
        "language": "TypeScript",
        "stars": 924,
        "forks": 41,
        "created_at": "2025-03-04T02:17:19Z",
        "updated_at": "2025-06-19T10:05:38Z",
        "topics": [
            "ai",
            "clippy",
            "electron",
            "llama",
            "llm",
            "retro"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T15:06:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ae66c86cbeeb9fd6797d1bdc431d63ac684726b47f31a742c741b1df9e342cb2/felixrieseberg/clippy"
        ],
        "homepage": "https://felixrieseberg.github.io/clippy/",
        "readme_summary": "Clippy is an Electron-based application that allows users to run large language models (LLMs) locally on their computers. It provides a simple, nostalgic chat interface reminiscent of Microsoft Office 1997's Clippy. The application supports GGUF models via Llama.cpp and offers easy setup and offline operation.",
        "key_features": [
            "Simple chat interface",
            "Batteries included (easy setup, automatic hardware acceleration)",
            "Custom model support",
            "Offline operation"
        ],
        "primary_use_case": "Running large language models locally with a retro-style user interface.",
        "open_issues": 37,
        "cover_image_prompt": "Imagine a retro office cubicle from the 1990s, but instead of a typical computer, there's a glowing, futuristic terminal. Clippy, the iconic paperclip assistant, stands beside it, not offering office advice, but orchestrating complex calculations represented by swirling, colorful data streams. These streams flow into the terminal and produce concise, helpful answers displayed in a classic chat window. Small UI elements showing llama.cpp configurations are subtly visible. The scene is bathed in the soft glow of CRT monitors, creating a nostalgic yet futuristic atmosphere. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 159785192,
        "name": "ktorm",
        "description": "A lightweight ORM framework for Kotlin with strong-typed SQL DSL and sequence APIs.",
        "url": "https://github.com/kotlin-orm/ktorm",
        "language": "Kotlin",
        "stars": 2253,
        "forks": 154,
        "created_at": "2018-11-30T07:28:36Z",
        "updated_at": "2025-06-19T08:51:39Z",
        "topics": [
            "kotlin",
            "ktorm",
            "orm",
            "sql"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-10-03T12:57:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/159785192/9b30d300-7645-11e9-8820-b2b7b5367fa0"
        ],
        "homepage": "https://www.ktorm.org",
        "readme_summary": "Ktorm is a lightweight ORM framework for Kotlin that simplifies database interactions. It offers a strong-typed SQL DSL and sequence APIs, allowing developers to write flexible queries with fine-grained control over generated SQL. The framework is designed to be extensible, supporting custom operators, data types, and database dialects.",
        "key_features": [
            "No configuration files or annotations",
            "Strong typed SQL DSL",
            "Flexible queries with fine-grained control",
            "Entity sequence APIs",
            "Extensible design"
        ],
        "primary_use_case": "Simplifying database operations in Kotlin applications using a lightweight ORM framework.",
        "open_issues": 97,
        "cover_image_prompt": "A skilled sculptor meticulously chiseling away at a rough block of marble, revealing a perfectly formed database table inside. The sculptor's tools are labeled with \"Kotlin DSL\" and \"Sequence APIs.\" Digital code fragments subtly float around the sculptor, representing SQL queries being generated. The scene is set in a bright, modern workshop with natural light streaming in. The composition is clean and focused, highlighting the transformation from raw data to structured table. The image should be in a 3D isometric illustration style with a pastel color scheme."
    }
]