[
    {
        "id": 662640428,
        "name": "winapps",
        "description": " Run Windows apps such as Microsoft Office/Adobe in Linux (Ubuntu/Fedora) and GNOME/KDE as if they were a part of the native OS, including Nautilus integration. Hard fork of https://github.com/Fmstrat/winapps/",
        "url": "https://github.com/winapps-org/winapps",
        "language": "Shell",
        "stars": 6916,
        "forks": 212,
        "created_at": "2023-07-05T15:05:25Z",
        "updated_at": "2025-08-25T10:13:09Z",
        "topics": [
            "cassowary",
            "docker",
            "freerdp",
            "gnome",
            "hacktoberfest",
            "integration",
            "kde",
            "libvirt",
            "linux",
            "linux-app",
            "nautilus",
            "nix-flake",
            "podman",
            "qemu",
            "qemu-kvm",
            "seamless",
            "winapps",
            "windows",
            "wine",
            "xfce"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-08-24T15:26:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/666126e9caa20d67edd0e55be913e3b1a9d38c78dfe2d995a1d60bca0e1f5cd3/winapps-org/winapps"
        ],
        "homepage": "",
        "readme_summary": "The winapps repository enables users to run Windows applications on Linux distributions like Ubuntu and Fedora, integrating them seamlessly with desktop environments such as GNOME, KDE, and XFCE. It leverages technologies like Docker, Podman, libvirt, and FreeRDP to provide a native-like experience for Windows applications within Linux, including features like Nautilus integration and a taskbar widget for easy management.",
        "key_features": [
            "Runs Windows applications on Linux.",
            "Seamless integration with KDE Plasma, GNOME, and XFCE.",
            "Supports Docker, Podman, and libvirt.",
            "Uses FreeRDP for rendering.",
            "Nautilus integration for file opening.",
            "Taskbar widget for administration.",
            "Automatic opening of Microsoft Office links."
        ],
        "primary_use_case": "Running Windows applications seamlessly within a Linux environment.",
        "open_issues": 85,
        "cover_image_prompt": "A skilled stage magician seamlessly pulling Windows applications, represented by glowing icons like Word and Photoshop, out of a Linux terminal, depicted as a sleek, futuristic portal. The applications float effortlessly into a vibrant desktop environment, blending perfectly with native Linux applications. Subtle code snippets and UI elements are projected onto the magician's cloak, hinting at the underlying technology. The scene is set on a modern stage with dynamic lighting and a captivated audience. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 1035648869,
        "name": "py-mcp-manager",
        "description": "Simple MCP Manager Desktop Application",
        "url": "https://github.com/namuan/py-mcp-manager",
        "language": "Python",
        "stars": 17,
        "forks": 1,
        "created_at": "2025-08-10T21:03:25Z",
        "updated_at": "2025-08-25T10:12:16Z",
        "topics": [
            "desktop-app",
            "mcp",
            "pyqt6",
            "python3"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-17T09:32:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6bef5ac03a8185e2a9c59345392d6a6feab2fe218a93ad17e6fabb16af3f787e/namuan/py-mcp-manager"
        ],
        "homepage": "",
        "readme_summary": "The py-mcp-manager repository provides a desktop application for managing MCP servers. It simplifies the process of configuring, starting, stopping, and monitoring multiple MCP servers from a single graphical interface. The application allows users to manage server configurations, monitor logs, and control server status in real-time.",
        "key_features": [
            "Manages multiple MCP servers from a single interface",
            "Configures, starts, and stops MCP servers",
            "Monitors server logs and status in real-time",
            "Provides a graphical interface for server management",
            "Allows importing/exporting server configurations"
        ],
        "primary_use_case": "Simplifying the management of Model Context Protocol (MCP) servers through a desktop application.",
        "open_issues": 0,
        "cover_image_prompt": "A conductor orchestrating a symphony of server icons, each representing an MCP server. The conductor stands on a platform resembling a desktop application window, with controls for starting, stopping, and configuring servers. Each server icon emits a unique melody, visualized as glowing sound waves, indicating its status and activity. Small screens display server logs and configuration details as musical notes. The scene is set in a grand concert hall with warm, inviting lighting. The image should be in a 3D isometric illustration style with rich details and vibrant colors, conveying control and harmony."
    },
    {
        "id": 728438436,
        "name": "mesh2motion-app",
        "description": "Import a 3D Model and automatically assign and export animations",
        "url": "https://github.com/scottpetrovic/mesh2motion-app",
        "language": "TypeScript",
        "stars": 1161,
        "forks": 93,
        "created_at": "2023-12-07T00:08:05Z",
        "updated_at": "2025-08-25T10:09:05Z",
        "topics": [],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-25T02:27:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6a0dcbc21f7e0d86ff0726572a86915a7658e8e1ba348032d3395d82efaf6b85/scottpetrovic/mesh2motion-app"
        ],
        "homepage": null,
        "readme_summary": "The mesh2motion-app repository provides a tool to import 3D models, automatically assign skeletons, and export animations. It supports GLB/GLTF formats and allows users to modify skeletons and test animations before exporting. The application aims to provide a flexible, open-source alternative to existing animation tools.",
        "key_features": [
            "Imports 3D models (GLB/GLTF)",
            "Assigns and modifies skeletons",
            "Applies and tests animations",
            "Exports animations (GLB/GLTF)"
        ],
        "primary_use_case": "Automatically assigning and exporting animations to 3D models.",
        "open_issues": 15,
        "cover_image_prompt": "A skilled artisan meticulously assembling a complex clockwork animation from individual 3D model parts. The artisan carefully fits bones and joints, bringing the static model to life with fluid motion. Digital screens display animation timelines and code snippets, subtly connecting the craft to software. The scene is set in a bright, organized workshop filled with tools and spare parts. The composition is clean and focused with a warm, inviting color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]