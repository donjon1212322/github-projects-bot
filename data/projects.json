[
    {
        "id": 1005246104,
        "name": "fireplexity",
        "description": null,
        "url": "https://github.com/mendableai/fireplexity",
        "language": "TypeScript",
        "stars": 306,
        "forks": 63,
        "created_at": "2025-06-19T23:26:27Z",
        "updated_at": "2025-06-28T10:09:11Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-06-25T14:26:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/255bf3c5c5e56642aa503c54cd46de035890221174928d804d3c8e2104ada43e/mendableai/fireplexity"
        ],
        "homepage": "https://tools.firecrawl.dev/fireplexity",
        "readme_summary": "Fireplexity is an AI search engine that utilizes Firecrawl's web scraping API to provide intelligent answers with real-time citations and live data. It leverages GPT-4o-mini for AI responses and includes features like live stock data and AI-generated follow-up questions, offering a comprehensive search experience.",
        "key_features": [
            "Real-time Web Search",
            "AI Responses",
            "Source Citations",
            "Live Stock Data",
            "Smart Follow-ups"
        ],
        "primary_use_case": "AI-powered search engine with real-time web scraping and source citations.",
        "open_issues": 0,
        "cover_image_prompt": "A futuristic librarian stands amidst towering stacks of books, each representing a website. The librarian uses a high-tech magnifying glass, connected to a glowing AI interface, to instantly extract relevant information from the books and synthesize answers. The answers materialize as holographic text above the librarian's head, complete with citations linking back to the original books. Small screens display real-time stock charts integrated into the librarian's interface. The scene is set in a sleek, modern library with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 1008454558,
        "name": "combicode",
        "description": "üì¶ A CLI tool to combine a project's codebase into a single file for LLM context.",
        "url": "https://github.com/aaurelions/combicode",
        "language": "JavaScript",
        "stars": 17,
        "forks": 1,
        "created_at": "2025-06-25T15:09:52Z",
        "updated_at": "2025-06-28T06:53:48Z",
        "topics": [
            "ai",
            "cli",
            "codebase",
            "combine",
            "context",
            "llm",
            "tools"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-25T23:14:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8da3b8fc3724ec485cbd29142684518a22cb993ca7bee77ddb698e62c962da38/aaurelions/combicode"
        ],
        "homepage": "",
        "readme_summary": "Combicode is a CLI tool designed to bundle a project's source code into a single, LLM-friendly text file. It intelligently includes a system prompt and file tree overview, skips common junk files, respects .gitignore rules, and offers customization options for file inclusion and exclusion, enabling users to provide comprehensive context to LLMs.",
        "key_features": [
            "Combines project codebase into a single file",
            "LLM-friendly output with system prompt and file tree",
            "Intelligent ignoring of common junk files and directories",
            ".gitignore aware",
            "Zero-install usage via npx or pipx",
            "Customizable file extension filtering and exclude patterns"
        ],
        "primary_use_case": "Preparing a project's codebase for use as context in Large Language Models (LLMs).",
        "open_issues": 0,
        "cover_image_prompt": "A skilled chef meticulously combining various ingredients (code files) from labeled containers (project directories) into a single, steaming pot (LLM context). The chef uses a strainer (gitignore) to remove unwanted bits. A holographic display shows a simplified file tree. The scene is set in a clean, modern kitchen with bright, focused lighting. The image should be in a 3D isometric illustration style with clear iconography and vibrant colors."
    },
    {
        "id": 756594023,
        "name": "ingestr",
        "description": "ingestr is a CLI tool to copy data between any databases with a single command seamlessly.",
        "url": "https://github.com/bruin-data/ingestr",
        "language": "Python",
        "stars": 2982,
        "forks": 89,
        "created_at": "2024-02-12T23:00:36Z",
        "updated_at": "2025-06-28T10:04:27Z",
        "topics": [
            "bigquery",
            "copy-database",
            "data-ingestion",
            "data-integration",
            "data-pipeline",
            "duckdb",
            "ingestion-pipeline",
            "mssql",
            "postgresql",
            "snowflake"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-26T15:42:38Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e07b922c8dc923495ad744b032281961814b55c60fc4c1ba14e70603880cc8d3/bruin-data/ingestr"
        ],
        "homepage": "https://bruin-data.github.io/ingestr/",
        "readme_summary": "ingestr is a CLI tool designed for seamless data transfer between various databases. It simplifies data ingestion by allowing users to copy data from any source to any destination using a single command, eliminating the need for complex coding. The tool supports incremental loading strategies and offers a straightforward installation process.",
        "key_features": [
            "Data ingestion from any source to any destination",
            "Incremental loading (append, merge, delete+insert)",
            "Single-command installation"
        ],
        "primary_use_case": "Copying data between different databases seamlessly with a single command.",
        "open_issues": 6,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a grand building. The architect holds blueprints representing diverse data sources (PostgreSQL, BigQuery, etc.) and directs a team of robots to seamlessly transfer data blocks from various trucks (sources) onto the building's structure (destination). The building's facade displays subtle UI elements showing data pipelines and transfer progress. The scene is set in a bright, futuristic cityscape with a clean, organized composition. The image should be in a 3D isometric illustration style with vibrant colors and clear details, subtly incorporating the 'ingestr' logo on the architect's hard hat."
    },
    {
        "id": 951429064,
        "name": "ableton-mcp",
        "description": null,
        "url": "https://github.com/ahujasid/ableton-mcp",
        "language": "Python",
        "stars": 1713,
        "forks": 192,
        "created_at": "2025-03-19T17:00:09Z",
        "updated_at": "2025-06-28T09:37:02Z",
        "topics": [],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-03-27T10:16:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/bf1bf989e15a8ff21dba09943f7a2f71e8aeb99b69dde96d03a26587c490cb5b/ahujasid/ableton-mcp"
        ],
        "homepage": null,
        "readme_summary": "AbletonMCP enables Claude AI to directly interact with and control Ableton Live through the Model Context Protocol (MCP). This integration facilitates prompt-assisted music production by allowing Claude to manipulate tracks, select instruments and effects, create clips, and control session parameters. The system consists of an Ableton Remote Script and an MCP server, enabling two-way communication and control.",
        "key_features": [
            "Two-way communication between Claude AI and Ableton Live",
            "Track manipulation (creation, modification)",
            "Instrument and effect selection",
            "Clip creation and editing",
            "Session control (playback, clip firing, transport control)"
        ],
        "primary_use_case": "Prompt-assisted music production, track creation, and Ableton Live session manipulation using Claude AI.",
        "open_issues": 18,
        "cover_image_prompt": "Imagine a skilled composer conducting an orchestra, where each instrument represents a different function within Ableton Live. The conductor, representing Claude AI, uses a glowing baton to orchestrate the music, creating melodies and harmonies in real-time. Visual cues, like floating MIDI notes and waveforms, represent the data flowing between Claude AI and Ableton Live. A subtle UI overlay displays Ableton's interface, showcasing the AI's control over track manipulation and session settings. The scene is set in a modern recording studio with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 750550657,
        "name": "quarkdown",
        "description": "ü™ê Markdown with superpowers ‚Äî from ideas to presentations, articles and books.",
        "url": "https://github.com/iamgio/quarkdown",
        "language": "Kotlin",
        "stars": 7864,
        "forks": 154,
        "created_at": "2024-01-30T21:13:04Z",
        "updated_at": "2025-06-28T09:43:49Z",
        "topics": [
            "compiler",
            "markdown",
            "markup",
            "markup-language",
            "paper",
            "pdf",
            "presentations",
            "scripting-language",
            "slides",
            "typesetting",
            "typesetting-system"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-27T10:56:54Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/750550657/039ae946-fcb4-49f9-9190-1859ac4aafc2"
        ],
        "homepage": "https://quarkdown.com",
        "readme_summary": "Quarkdown is a Markdown-based typesetting system that extends Markdown with functions and allows compiling a project into various formats like books, presentations, and articles. It features a standard library, custom function definitions, live preview, and fast compilation, enabling users to create complex and dynamic content.",
        "key_features": [
            "Markdown extension with functions",
            "Versatile compilation targets (book, presentation, article)",
            "Standard library with layout builders, I/O, math, conditional statements, and loops",
            "Custom function and variable definition",
            "Live preview",
            "Fast compilation speed"
        ],
        "primary_use_case": "Typesetting system for creating books, presentations, and articles from Markdown.",
        "open_issues": 12,
        "cover_image_prompt": "A skilled typesetter in a bright, modern workshop is meticulously arranging digital markdown blocks onto a printing press, transforming them into diverse outputs: a beautifully bound book, a dynamic presentation projected onto a screen, and a scholarly article displayed on a tablet. The typesetter uses a magical quill that converts the markdown into various formats with ease. Subtle UI elements float around the scene, displaying code snippets and layout options. The workshop is filled with soft, diffused light, creating a sense of precision and creativity. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 986123965,
        "name": "StreamingKokoroJS",
        "description": " Unlimited text-to-speech in the Browser using Kokoro-JS, 100% local, 100% open source",
        "url": "https://github.com/rhulha/StreamingKokoroJS",
        "language": "JavaScript",
        "stars": 219,
        "forks": 18,
        "created_at": "2025-05-19T06:32:34Z",
        "updated_at": "2025-06-28T09:40:43Z",
        "topics": [
            "ai",
            "kokoro",
            "kokoro-tts",
            "text-to-speech",
            "tts"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-12T14:06:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/007e4e626a5b570348004abb58e9333dca8351b210f7fa25b6c8d20b75a72aca/rhulha/StreamingKokoroJS"
        ],
        "homepage": "https://rhulha.github.io/StreamingKokoroJS/",
        "readme_summary": "StreamingKokoroJS is a web-based text-to-speech application that leverages the Kokoro-82M model to generate high-quality speech audio entirely in the browser. It offers features like WebGPU acceleration, streaming audio generation, and multiple voice styles, all while running locally without server-side processing, ensuring privacy and offline functionality.",
        "key_features": [
            "100% Client-Side Processing",
            "WebGPU Acceleration",
            "Streaming Audio Generation",
            "Smart Text Chunking",
            "Multiple Voice Styles",
            "Audio Download",
            "Fully Open Source"
        ],
        "primary_use_case": "Web-based text-to-speech application that runs entirely in the browser.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a human voice from raw text, like a sculptor shaping clay. The artisan's workshop is filled with glowing screens displaying lines of code and waveforms, subtly blending the analog and digital worlds. The artisan carefully molds the text, represented as flowing ribbons, into a clear, resonant voice emanating from a vintage microphone. Digital particles swirl around the microphone, visualizing the transformation. The scene is bathed in warm, inviting light, creating a sense of artistry and innovation. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]