[
    {
        "id": 919835586,
        "name": "Hunyuan3D-2",
        "description": "High-Resolution 3D Assets Generation with Large Scale Hunyuan3D Diffusion Models.",
        "url": "https://github.com/Tencent/Hunyuan3D-2",
        "language": "Python",
        "stars": 7753,
        "forks": 617,
        "created_at": "2025-01-21T05:21:35Z",
        "updated_at": "2025-03-23T09:57:55Z",
        "topics": [
            "3d",
            "3d-aigc",
            "3d-generation",
            "diffusion-models",
            "hunyuan3d",
            "image-to-3d",
            "shape",
            "shape-generation",
            "text-to-3d",
            "texture-generation"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-23T05:20:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7aea39897f0b11251222783e2d4db2a1084dc3c188c6748d012edd7fdc914d26/Tencent/Hunyuan3D-2"
        ],
        "homepage": "https://3d.hunyuan.tencent.com/",
        "readme_summary": "The Hunyuan3D-2 repository provides tools and models for generating high-resolution 3D assets. It supports both image-to-3D and text-to-3D conversion, leveraging diffusion models for shape and texture generation. The repository also includes turbo models for faster inference.",
        "key_features": [
            "High-Resolution 3D Asset Generation",
            "Image-to-3D Conversion",
            "Text-to-3D Conversion",
            "Texture Generation",
            "Diffusion Models for 3D Generation",
            "Shape Generation",
            "Turbo Models for faster inference"
        ],
        "primary_use_case": "Generating high-resolution 3D assets from images and text using diffusion models.",
        "open_issues": 73,
        "cover_image_prompt": "A skilled 3D sculptor shaping digital clay into intricate, high-resolution 3D models. The sculptor uses advanced tools that transform simple sketches and text prompts into detailed 3D assets. Glowing particles of data flow from the tools to the clay, enhancing its texture and form. Small UI elements display real-time previews and parameters of the 3D generation process. The scene is set in a bright, modern studio with a clean, focused composition. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 950065302,
        "name": "bambot",
        "description": "Low cost (~$300) humanoid robot 🌱",
        "url": "https://github.com/timqian/bambot",
        "language": "TypeScript",
        "stars": 285,
        "forks": 21,
        "created_at": "2025-03-17T15:19:05Z",
        "updated_at": "2025-03-23T09:53:02Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-03-21T16:07:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5043fe12cfa24a452710e3f4b2b35e1970b8fd1d92dd1eb3708ac88855e5b641/timqian/bambot"
        ],
        "homepage": "https://bambot.org",
        "readme_summary": "Bambot is an open-source project providing the hardware and software designs for building a low-cost humanoid robot. The project includes hardware schematics, software for controlling the robot, and a demo video. It is intended for hobbyists, researchers, and educators interested in robotics.",
        "key_features": [
            "Hardware designs for a low-cost humanoid robot",
            "Software for controlling the robot",
            "Demo video showcasing the robot's capabilities"
        ],
        "primary_use_case": "Building and experimenting with a low-cost humanoid robot.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled artisan meticulously assembling a miniature humanoid robot from various components, each representing different software modules and hardware parts. The robot stands on a workbench amidst scattered tools and electronic components, with a faint holographic projection displaying lines of TypeScript code. The artisan carefully connects a servo motor, symbolizing movement, and a small camera, representing perception. The scene is set in a brightly lit workshop with a clean, organized aesthetic. Small UI elements showing robot control panels are subtly incorporated. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 191318242,
        "name": "googlemaps-scraper",
        "description": "Google Maps reviews scraping",
        "url": "https://github.com/gaspa93/googlemaps-scraper",
        "language": "Python",
        "stars": 410,
        "forks": 147,
        "created_at": "2019-06-11T07:32:50Z",
        "updated_at": "2025-03-23T09:48:34Z",
        "topics": [
            "google-maps",
            "google-maps-scraping",
            "python",
            "reviews",
            "scraper"
        ],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2024-04-26T22:41:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a54b8f917efd202715b24be90544bbf6d128de54909f5d98cd8fd2db60745aba/gaspa93/googlemaps-scraper"
        ],
        "homepage": "",
        "readme_summary": "The googlemaps-scraper repository provides tools to scrape reviews from Google Maps places. It allows users to extract a specified number of the most recent reviews and offers a monitoring feature to incrementally store reviews in MongoDB. The scraper can also extract POI metadata and sort reviews based on different criteria.",
        "key_features": [
            "Scrapes Google Maps reviews from a given URL.",
            "Allows specifying the number of reviews to retrieve.",
            "Offers options to scrape POI metadata instead of reviews.",
            "Provides a monitoring functionality for incremental scraping and storage in MongoDB.",
            "Sort reviews by relevance, date, or rating."
        ],
        "primary_use_case": "Extracting and monitoring Google Maps reviews for a specific Point Of Interest (POI).",
        "open_issues": 10,
        "cover_image_prompt": "A cartographer meticulously charting a vast, sprawling city map, carefully noting each review posted on building facades as glowing stars. The cartographer uses a magnifying glass to examine digital screens displaying Google Maps reviews, transcribing the sentiment onto the master map. The map is filled with pins and markers, each representing a place with its aggregated reviews. Small UI elements float around the scene, displaying snippets of Python code and MongoDB database entries. The scene is set in a vintage study with warm, inviting lighting. The image should be in a detailed digital painting style with clear outlines and a focus on conveying information."
    },
    {
        "id": 377310071,
        "name": "photo-video-watermark",
        "description": "Telegram bot for creating watermark on photos and videos.",
        "url": "https://github.com/h1w/photo-video-watermark",
        "language": "Python",
        "stars": 21,
        "forks": 20,
        "created_at": "2021-06-15T22:40:42Z",
        "updated_at": "2025-03-23T08:34:32Z",
        "topics": [
            "aiogram",
            "aiogram-bot",
            "aiogrambot",
            "ffmpeg",
            "pyffmpeg",
            "python",
            "python-aiogram",
            "python-asyncio",
            "python-ffmpeg",
            "python-pil",
            "python-pillow",
            "telegram-bot",
            "telegram-files",
            "telegrambot",
            "watermark",
            "watermark-image",
            "watermark-video",
            "watermarking"
        ],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2021-06-20T04:06:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/09c33de50a33824a8b7ebfcb47f94de94223550e024e4e3a7376febd0b4d15c0/h1w/photo-video-watermark"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a Telegram bot that allows users to add watermarks to both photos and videos. It includes video conversion capabilities and leverages libraries like aiogram, Pillow, and ffmpeg. The bot is designed to be easily accessible and user-friendly through the Telegram interface.",
        "key_features": [
            "Telegram bot integration",
            "Video conversion",
            "Watermark addition to photos",
            "Watermark addition to videos"
        ],
        "primary_use_case": "Creating watermarks on photos and videos via a Telegram bot.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously applying shimmering watermarks onto a collection of photos and videos, transforming them into protected works of art. The artisan uses a digital brush, drawing glowing patterns onto the media displayed on a holographic screen. Small UI elements showing watermark settings and processing progress float around the scene. The setting is a bright, modern studio with soft, diffused lighting. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 875351091,
        "name": "jinsp",
        "description": "Visually inspect JSON data from the terminal",
        "url": "https://github.com/simeonkr/jinsp",
        "language": "C",
        "stars": 25,
        "forks": 0,
        "created_at": "2024-10-19T18:34:55Z",
        "updated_at": "2025-03-23T09:38:16Z",
        "topics": [
            "json",
            "terminal",
            "terminal-ui",
            "tui"
        ],
        "quality_score": 0.25,
        "contributors_count": 0,
        "last_commit_date": "2024-12-07T20:05:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7a1c7a2a4b0fbd8be29e2887e6b6f1c71d8c79c4d83a6e66405bc690c2e702b9/simeonkr/jinsp"
        ],
        "homepage": "",
        "readme_summary": "jinsp is a terminal-based tool for browsing and inspecting JSON data. It uses Miller columns for navigation, providing a visual representation of the JSON tree structure. The tool allows users to navigate the JSON data using keyboard or mouse, preview selected elements, and search for specific keywords.",
        "key_features": [
            "Terminal-based JSON data inspection",
            "Miller columns for navigation",
            "Read-only preview of selected element",
            "Keyboard and mouse navigation",
            "Search functionality"
        ],
        "primary_use_case": "Visually inspect JSON data from the terminal.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, intricate cave system using a glowing crystal. The crystal reveals the cave's structure layer by layer, like Miller columns, allowing the cartographer to navigate its depths with ease. The cave walls are subtly etched with JSON-like structures, and the cartographer's tools include a magnifying glass and a notebook filled with data. A faint UI overlay displays navigation controls and search functions. The scene is set in a dimly lit cavern with dramatic lighting, rendered in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 507135376,
        "name": "waymore",
        "description": "Find way more from the Wayback Machine, Common Crawl, Alien Vault OTX, URLScan, VirusTotal & Intelligence X!",
        "url": "https://github.com/xnl-h4ck3r/waymore",
        "language": "Python",
        "stars": 1971,
        "forks": 223,
        "created_at": "2022-06-24T20:24:13Z",
        "updated_at": "2025-03-23T08:51:55Z",
        "topics": [],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-20T01:39:54Z",
        "media_urls": [
            "https://opengraph.githubassets.com/def1228d6a69570c650910be2e15bc69057dd1f618d954129c64750d906198ac/xnl-h4ck3r/waymore"
        ],
        "homepage": "",
        "readme_summary": "Waymore is a Python tool designed to discover a comprehensive set of URLs from various sources, including the Wayback Machine, Common Crawl, and security intelligence platforms. It distinguishes itself by downloading archived responses from the Wayback Machine, enabling deeper analysis for hidden links and parameters. The tool also manages rate limiting issues, ensuring more complete results compared to other similar tools.",
        "key_features": [
            "Finds URLs from Wayback Machine, Common Crawl, Alien Vault OTX, URLScan, VirusTotal, and Intelligence X.",
            "Downloads archived responses for URLs on Wayback Machine to search for more links, developer comments, and parameters.",
            "Handles rate limiting from sources to provide more complete results."
        ],
        "primary_use_case": "Finding more URLs and information from various web archives and intelligence sources than other existing tools, particularly for bug bounty hunting and reconnaissance.",
        "open_issues": 6,
        "cover_image_prompt": "Imagine a detective meticulously sifting through towering stacks of archived documents, each representing a different source of web data like the Wayback Machine, Common Crawl, and VirusTotal. The detective uses a magnifying glass that highlights hidden URLs and valuable information within the archives. Digital threads connect the detective to various data sources, visualized as glowing portals. The scene is set in a dimly lit, expansive library filled with endless rows of data. The image should be in a detailed digital painting style with a focus on depth and texture, using a color scheme of blues and grays with pops of vibrant color to represent discovered URLs."
    },
    {
        "id": 699540469,
        "name": "bitmagnet",
        "description": "A self-hosted BitTorrent indexer, DHT crawler, content classifier and torrent search engine with web UI, GraphQL API and Servarr stack integration.",
        "url": "https://github.com/bitmagnet-io/bitmagnet",
        "language": "Go",
        "stars": 2834,
        "forks": 117,
        "created_at": "2023-10-02T20:47:56Z",
        "updated_at": "2025-03-23T03:04:58Z",
        "topics": [
            "bittorrent",
            "dht",
            "prowlarr",
            "radarr",
            "selfhosted",
            "servarr",
            "sonarr",
            "torrent",
            "torrents",
            "torznab"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T15:01:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4ca4a1fca1d84d78fc56d37db2815b6f3889928f7fe417a8c1541735f6f61cce/bitmagnet-io/bitmagnet"
        ],
        "homepage": "https://bitmagnet.io/",
        "readme_summary": "Bitmagnet is a self-hosted BitTorrent indexer that crawls the DHT network, classifies content, and provides a torrent search engine. It features a web UI and GraphQL API for easy access and integrates with the Servarr stack for automated media management.",
        "key_features": [
            "BitTorrent indexer",
            "DHT crawler",
            "Content classifier",
            "Torrent search engine",
            "Web UI",
            "GraphQL API",
            "Servarr stack integration"
        ],
        "primary_use_case": "Self-hosted BitTorrent indexing and searching",
        "open_issues": 36,
        "cover_image_prompt": "Imagine a vast, interconnected library where a diligent librarian, equipped with a magnifying glass that emits digital particles, meticulously catalogs and organizes torrent files into labeled shelves. The librarian uses a glowing interface to classify content, ensuring each torrent finds its proper place. Outside the library, a network of interconnected nodes represents the DHT crawler, feeding new information into the system. The library's entrance displays a user-friendly web UI, inviting visitors to easily search and discover content. The scene is bathed in warm, inviting light, with subtle code snippets and data visualizations subtly integrated into the library's architecture. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 805155266,
        "name": "cherry-studio",
        "description": "🍒 Cherry Studio is a desktop client that supports for multiple LLM providers. Support deepseek-r1",
        "url": "https://github.com/CherryHQ/cherry-studio",
        "language": "TypeScript",
        "stars": 20395,
        "forks": 1710,
        "created_at": "2024-05-24T01:56:26Z",
        "updated_at": "2025-03-23T10:09:31Z",
        "topics": [
            "agent",
            "anthropic",
            "assistant",
            "chatbot",
            "chatbotai",
            "electron",
            "llm",
            "openai"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-23T06:25:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/805155266/692d7ac1-0787-4b91-99b3-a9231ed6151d"
        ],
        "homepage": "https://cherry-ai.com",
        "readme_summary": "Cherry Studio is a cross-platform desktop application designed to simplify interactions with various LLMs. It supports a wide range of providers, including OpenAI, Gemini, Anthropic, and local models. The application offers features such as pre-configured AI assistants, document processing, and practical tools integration, enhancing the user experience for both casual users and developers.",
        "key_features": [
            "Diverse LLM Provider Support (OpenAI, Gemini, Anthropic, Claude, Peplexity, Poe, Ollama, LM Studio)",
            "AI Assistants & Conversations (300+ Pre-configured, Custom Creation, Multi-model Simultaneous Conversations)",
            "Document & Data Processing (Text, Images, Office, PDF, WebDAV, Mermaid Charts, Code Syntax Highlighting)",
            "Practical Tools Integration (Global Search, Topic Management, AI-powered Translation, Drag-and-drop Sorting, Mini Program Support, MCP Server)",
            "Cross-platform Support (Windows, Mac, Linux)",
            "Light/Dark Themes and Transparent Window",
            "Complete Markdown Rendering",
            "Easy Content Sharing"
        ],
        "primary_use_case": "A desktop client for interacting with multiple LLM providers and AI assistants.",
        "open_issues": 428,
        "cover_image_prompt": "Imagine a skilled artisan in a bright, modern workshop, crafting intricate chatbots from various raw materials like code snippets, datasets, and language models. The artisan carefully assembles these elements, connecting them to different cloud services represented by glowing portals. Each finished chatbot, displayed on a small screen, showcases its unique capabilities. The workshop is filled with tools and interfaces, subtly hinting at the underlying technology. The scene is bathed in soft, diffused light, creating a sense of innovation and collaboration. The image should be in a clean, flat design style with clear iconography and a vibrant color scheme."
    }
]