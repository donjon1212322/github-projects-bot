[
    {
        "id": 825062215,
        "name": "Scraperr",
        "description": "Self-hosted webscraper.",
        "url": "https://github.com/jaypyles/Scraperr",
        "language": "TypeScript",
        "stars": 4534,
        "forks": 219,
        "created_at": "2024-07-06T16:55:49Z",
        "updated_at": "2025-10-19T10:10:13Z",
        "topics": [
            "docker",
            "helm",
            "kubernetes",
            "opensource",
            "playwright",
            "python",
            "scraping",
            "self-hosted",
            "web-scraper",
            "web-scrapers",
            "web-scraping",
            "webscraper",
            "webscraping"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-12T16:55:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0bf551e4683c4a3ebfcb9ba1a4eeb7f7a14fe32d080783e213fc8eca08ac5c21/jaypyles/Scraperr"
        ],
        "homepage": "https://scraperr-docs.pages.dev/",
        "readme_summary": "Scraperr is a self-hosted web scraping solution that allows users to scrape websites without writing code. It offers features like XPath-based extraction, queue management, domain spidering, and data export in various formats, making it a versatile tool for web data extraction.",
        "key_features": [
            "XPath-Based Extraction",
            "Queue Management",
            "Domain Spidering",
            "Custom Headers",
            "Media Downloads",
            "Results Visualization",
            "Data Export",
            "Notifcation Channels"
        ],
        "primary_use_case": "Web scraping and data extraction from websites.",
        "open_issues": 2,
        "cover_image_prompt": "A diligent librarian meticulously cataloging web pages, represented as physical books, into a vast digital library. The librarian uses a magnifying glass (XPath) to examine each page, extracting key information and placing it into organized shelves (data structures). Glowing digital threads connect the books to the library's central database. Small UI elements display scraping progress and data visualization. The scene is set in a bright, modern library with a blue and white color scheme. The image should be in a 3D isometric illustration style with clean lines and clear details."
    },
    {
        "id": 1013031861,
        "name": "ssh-bot",
        "description": "Telegram bot for executing commands on remote hosts via ssh.",
        "url": "https://github.com/Lifailon/ssh-bot",
        "language": "Go",
        "stars": 91,
        "forks": 10,
        "created_at": "2025-07-03T08:55:35Z",
        "updated_at": "2025-10-18T20:43:14Z",
        "topics": [
            "bot",
            "chat-bot",
            "go",
            "ssh-client",
            "telegrambot"
        ],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T08:10:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/447341154863da1541cd1076c88845889c8a4db6c65ead223574005dfec5fef2/Lifailon/ssh-bot"
        ],
        "homepage": "https://hub.docker.com/r/lifailon/ssh-bot",
        "readme_summary": "The ssh-bot is a Telegram bot written in Go that allows users to execute commands on remote hosts via SSH. It eliminates the need for VPNs or external IP addresses by providing asynchronous command execution and supports various authentication methods and configuration options.",
        "key_features": [
            "Executing commands on local or remote hosts via SSH",
            "Support for parallel command execution",
            "SSH connection manager with host availability check",
            "Support for directory navigation",
            "Combined access to remote hosts by key and/or password",
            "Error handling for commands requiring user input",
            "Support for storing and reusing passed variables and functions"
        ],
        "primary_use_case": "Remotely executing commands on servers or devices within a home network via a Telegram bot interface.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a friendly robot butler standing in a high-tech server room, holding a Telegram chat window displaying command prompts. The butler receives commands from the chat and relays them to various servers represented by glowing portals. Each portal shows a glimpse of the command being executed on the remote system. The server room is clean and organized, with subtle digital displays showing SSH connection status and command output. The robot has a helpful expression and a small screen on its chest displaying the repository name 'ssh-bot'. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 720466801,
        "name": "inpaint-web",
        "description": "A free and open-source inpainting & image-upscaling tool powered by webgpu and wasm on the browser。|   基于 Webgpu 技术和 wasm 技术的免费开源 inpainting & image-upscaling 工具, 纯浏览器端实现。",
        "url": "https://github.com/lxfater/inpaint-web",
        "language": "TypeScript",
        "stars": 5507,
        "forks": 636,
        "created_at": "2023-11-18T15:21:15Z",
        "updated_at": "2025-10-18T19:42:07Z",
        "topics": [
            "image-upscaling",
            "inpainting",
            "super-resolution",
            "webgpu"
        ],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2024-10-19T02:14:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/6a8bf193ddc8c2cb9bae73150b49a9b99fe9ed853f4376c070106c799e92a2d4/lxfater/inpaint-web"
        ],
        "homepage": "https://inpaintweb.lxfater.com/",
        "readme_summary": "Inpaint-web is a free and open-source inpainting and image-upscaling tool that operates entirely within the browser using WebGPU and WASM technologies. It allows users to repair and enhance images directly in their browser without relying on server-side processing.",
        "key_features": [
            "Image Inpainting (修复)",
            "Super-Resolution (图片高清化)",
            "Image Modification History",
            "Model Optimization",
            "Post-Processing Integrated into the Model"
        ],
        "primary_use_case": "In-browser image inpainting and upscaling",
        "open_issues": 19,
        "cover_image_prompt": "A skilled artisan meticulously restoring a damaged painting within a digital frame. The artisan uses a glowing brush that emits streams of digital particles, seamlessly filling in the missing sections of the artwork. To the side, a magnifying glass reveals the enhanced details of a low-resolution photograph being upscaled to stunning clarity. Small UI elements float around the scene, displaying before-and-after views and subtle code snippets. The setting is a bright, modern studio with a focus on precision and artistry. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 1051869896,
        "name": "flint",
        "description": "Lightweight tool for managing linux virtual machines",
        "url": "https://github.com/volantvm/flint",
        "language": "TypeScript",
        "stars": 1151,
        "forks": 59,
        "created_at": "2025-09-06T22:27:48Z",
        "updated_at": "2025-10-19T09:47:29Z",
        "topics": [
            "cloud",
            "cloud-init",
            "devops",
            "hypervisor",
            "infra",
            "infrastructure",
            "kvm",
            "libvirt",
            "orchestration",
            "oss",
            "qemu",
            "serial",
            "snapshot",
            "virtual-machine",
            "virtualization",
            "vm",
            "vmm",
            "webtty"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-26T23:39:22Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/1051869896/ad0c965b-19f2-4f39-b123-047325db7b69"
        ],
        "homepage": "",
        "readme_summary": "Flint is a lightweight KVM management tool designed for developers, sysadmins, and home labs. It provides a modern web UI, CLI, and API for managing virtual machines, emphasizing simplicity and efficiency by avoiding XML and unnecessary bloat.",
        "key_features": [
            "Modern Web UI (Next.js + Tailwind)",
            "Single Binary (<11MB)",
            "CLI and API for automation",
            "Cloud-Init support",
            "Snapshot-based template system",
            "Multi-layered authentication",
            "Non-intrusive design"
        ],
        "primary_use_case": "Managing KVM virtual machines with a focus on ease of use and minimal overhead.",
        "open_issues": 8,
        "cover_image_prompt": "A skilled architect overseeing the construction of miniature virtual cities within a server room. The architect uses a tablet displaying a simplified blueprint, effortlessly deploying new buildings (VMs) with a tap. Cloud-shaped drones deliver resources (cloud-init data) to each city. A large screen behind the architect shows a clean dashboard with resource allocation and performance metrics. The repository name, 'Flint,' is subtly etched on the architect's tablet. The scene is bathed in soft, blue light, creating a sense of calm efficiency. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 1050485604,
        "name": "Disciplined-AI-Software-Development",
        "description": "This methodology provides a structured approach for collaborating with AI systems on software development projects. It addresses common issues like code bloat, architectural drift, and context dilution through systematic constraints and validation checkpoints.",
        "url": "https://github.com/Varietyz/Disciplined-AI-Software-Development",
        "language": "Python",
        "stars": 359,
        "forks": 27,
        "created_at": "2025-09-04T13:53:02Z",
        "updated_at": "2025-10-19T08:33:52Z",
        "topics": [
            "ai",
            "ai-agents",
            "ai-collaboration",
            "best-practices",
            "collaborate",
            "collaboration",
            "collaborative",
            "context",
            "documentation",
            "dry",
            "educational",
            "kiss",
            "llms",
            "methodology",
            "methodology-development",
            "prompt-engineering",
            "software-architecture",
            "software-development",
            "software-engineering",
            "workflow"
        ],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-09-17T17:34:47Z",
        "media_urls": [
            "https://opengraph.githubassets.com/de8b67a81ec5be6582945ff9de255723403f3f4cdbda9f54da91a34d7eab83aa/Varietyz/Disciplined-AI-Software-Development"
        ],
        "homepage": "https://banes-lab.com",
        "readme_summary": "The Disciplined AI Software Development methodology provides a structured approach for collaborating with AI systems on software development projects. It addresses common issues like code bloat, architectural drift, and context dilution through systematic constraints and validation checkpoints. The methodology uses four stages with systematic constraints, behavioral consistency enforcement, and validation checkpoints.",
        "key_features": [
            "AI Behavioral Configuration using custom instructions and persona frameworks",
            "Collaborative Planning with AI to define project scope and dependencies",
            "Systematic Implementation with file size constraints for focused development",
            "Data-Driven Iteration for benchmarking and improvement"
        ],
        "primary_use_case": "Collaborating with AI systems on software development projects to mitigate common issues like code bloat and architectural drift.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned architect collaborating with a diligent AI assistant at a digital drafting table, meticulously crafting a software blueprint. The architect points to a section of the blueprint, while the AI assistant analyzes code snippets displayed on a holographic screen. The blueprint glows with interconnected modules, representing the structured approach. Small UI elements show validation checkpoints and dependency chains. The scene is set in a modern, well-lit studio with a blue and green color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 485548415,
        "name": "Daft",
        "description": "Distributed query engine providing simple and reliable data processing for any modality and scale",
        "url": "https://github.com/Eventual-Inc/Daft",
        "language": "Rust",
        "stars": 4618,
        "forks": 315,
        "created_at": "2022-04-25T22:02:29Z",
        "updated_at": "2025-10-19T08:06:56Z",
        "topics": [
            "artificial-intelligence",
            "big-data",
            "data-engineering",
            "distributed-computing",
            "machine-learning",
            "multimodal",
            "python",
            "rust"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-10-17T23:08:33Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/485548415/d4d6d5b1-23b4-43db-986b-ed6fd21e09f7"
        ],
        "homepage": "https://daft.ai",
        "readme_summary": "Daft is a distributed query engine, written in Rust, designed for large-scale data processing using Python or SQL. It focuses on providing a familiar interactive API, powerful query optimization, data catalog integrations, rich multimodal type-system, seamless interchange with Apache Arrow, and is built for cloud environments.",
        "key_features": [
            "Familiar interactive API (Lazy Python Dataframe, SQL)",
            "Powerful Query Optimizer",
            "Data Catalog integrations (AWS Glue, Unity Catalog, Apache Iceberg)",
            "Rich multimodal type-system (Images, URLs, Tensors)",
            "Seamless Interchange (Apache Arrow)",
            "Built for the cloud (S3 cloud storage)"
        ],
        "primary_use_case": "Large-scale data processing and analysis, including multimodal data, in distributed computing environments.",
        "open_issues": 315,
        "cover_image_prompt": "A skilled cartographer meticulously assembling a vast, intricate map from diverse fragments of data – images, text snippets, numerical charts, and audio waveforms. The cartographer uses a powerful lens to seamlessly integrate these disparate pieces, revealing hidden patterns and insights. Digital streams of data flow into the map, illuminating it with vibrant colors. The repository name, 'Daft,' is subtly etched onto the cartographer's desk. The scene is set in a bright, airy studio with a blend of modern and classical elements. The image should be in a 3D isometric illustration style with rich details and a clean, focused composition."
    },
    {
        "id": 1045266535,
        "name": "pocket-server",
        "description": "An OS for your agents, built for your pocket.",
        "url": "https://github.com/yayasoumah/pocket-server",
        "language": "TypeScript",
        "stars": 744,
        "forks": 64,
        "created_at": "2025-08-26T22:48:18Z",
        "updated_at": "2025-10-19T04:50:15Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-09-24T16:22:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5031116ab454973e0b9a29c9559c2874ea474d552b7825a5a610a65eed75eafa/yayasoumah/pocket-server"
        ],
        "homepage": "https://www.pocket-agent.xyz/",
        "readme_summary": "Pocket Server is a local runtime environment for AI agents, designed to run on a user's machine and be controlled via a mobile app. It provides core OS capabilities like agent runtime, a mobile terminal, file system access, and remote access, enabling users to interact with their codebase and agents from their phone.",
        "key_features": [
            "Agent runtime and tools",
            "Native mobile terminal",
            "File system + editor",
            "Repo search",
            "Background/cloud agents",
            "Notifications",
            "Security model",
            "Remote access",
            "Versioned releases (macOS, Linux)"
        ],
        "primary_use_case": "Running and managing AI agents locally and interacting with them remotely via a mobile application.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled craftsman meticulously assembling miniature robots within a smartphone held in their hand. Each robot represents an AI agent, and the phone acts as a central control panel. The craftsman uses various tools, displayed as app icons on the phone's screen, to fine-tune and manage the robots. A subtle overlay of code snippets and data visualizations floats around the scene, connecting the physical action to the digital realm. The workshop is bathed in soft, focused lighting, highlighting the precision and care involved. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 1051368307,
        "name": "zai-python-sdk",
        "description": "Unofficial Python SDK for Z.AI API. Free, open-source client library for accessing advanced language   models including GLM-4.5V and 360B models. Features automatic authentication, streaming responses,   customizable parameters, and modular architecture. No API key required.",
        "url": "https://github.com/iotbackdoor/zai-python-sdk",
        "language": "Python",
        "stars": 36,
        "forks": 2,
        "created_at": "2025-09-05T21:39:38Z",
        "updated_at": "2025-10-18T17:44:26Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-09-05T21:45:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0621e8bf05e09c9627f13251570b2805d1df607cfc967bdc14c1f0e3922ecbda/iotbackdoor/zai-python-sdk"
        ],
        "homepage": null,
        "readme_summary": "The zai-python-sdk is an unofficial Python SDK for the Z.AI API, offering access to advanced language models like GLM-4.5V and 360B. It simplifies interaction with the API through features like automatic authentication, streaming responses, customizable parameters, and a modular architecture, without requiring an API key.",
        "key_features": [
            "Automatic guest token authentication",
            "Support for multiple AI models",
            "Streaming and non-streaming responses",
            "Customizable model parameters",
            "Modular architecture",
            "Comprehensive error handling",
            "Verbose mode for debugging",
            "Model Presets"
        ],
        "primary_use_case": "Interacting with Z.AI's language models for chat completions and other language-based tasks.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled cartographer meticulously charting a vast, ever-shifting landscape of language with advanced tools. The cartographer uses a telescope to observe distant linguistic features and a quill to record them on a dynamic map that visualizes language models. Small screens display code snippets and real-time API responses, subtly connecting the scene to software. The setting is a futuristic library filled with glowing data streams. The composition is a wide shot with a focus on the cartographer and the map, using a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]