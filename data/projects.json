[
    {
        "id": 982517950,
        "name": "Windows-MCP",
        "description": "Lightweight MCP Server for automating Windows OS in the easy way.",
        "url": "https://github.com/CursorTouch/Windows-MCP",
        "language": "Python",
        "stars": 38,
        "forks": 2,
        "created_at": "2025-05-13T02:27:53Z",
        "updated_at": "2025-06-27T09:53:00Z",
        "topics": [
            "ai",
            "desktop",
            "mcp",
            "tools",
            "windows",
            "windows-automation"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-27T09:20:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4ac3c04c4434305eafe82dec0a48dd4c71a646b667c47c665fdcf869f8ec472e/CursorTouch/Windows-MCP"
        ],
        "homepage": "",
        "readme_summary": "Windows-MCP is a lightweight MCP server that enables seamless integration between AI agents and the Windows operating system. It allows AI agents to perform tasks such as file navigation, application control, and UI interaction without relying on specific fine-tuned models or computer vision techniques. The project is open-source, customizable, and offers real-time interaction with minimal dependencies.",
        "key_features": [
            "Seamless Windows Integration",
            "Use Any LLM (Vision Optional)",
            "Rich Toolset for UI Automation",
            "Lightweight & Open-Source",
            "Customizable & Extendable",
            "Real-Time Interaction"
        ],
        "primary_use_case": "Automating Windows OS tasks using AI agents.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled architect overseeing a miniature city constructed entirely of Windows UI elements. The architect, representing the Windows-MCP server, stands at a central control panel, seamlessly directing AI-powered robots to interact with the city's buildings (applications). Some robots are filing documents, others are clicking buttons, and some are even performing QA tests, all orchestrated by the architect's commands. Subtle digital particles flow between the control panel and the robots, visualizing the data exchange. The repository's name is subtly displayed on the control panel. The scene is in a 3D isometric illustration style with bright, clean colors and a focus on clarity and functionality."
    },
    {
        "id": 1001657737,
        "name": "firestarter",
        "description": " ðŸ”¥ Instantly create AI chatbots for any website with RAG-powered search, streaming responses, and OpenAI-compatible API endpoints",
        "url": "https://github.com/mendableai/firestarter",
        "language": "TypeScript",
        "stars": 372,
        "forks": 67,
        "created_at": "2025-06-13T19:07:52Z",
        "updated_at": "2025-06-27T09:53:06Z",
        "topics": [],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-18T13:39:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/efcccc66178993a849ab4adcfe9bfeca551e8e627b1beaa472a43361c75a2f9a/mendableai/firestarter"
        ],
        "homepage": "https://tools.firecrawl.dev/firestarter",
        "readme_summary": "Firestarter enables the rapid creation of AI chatbots for websites by crawling content, indexing it with RAG, and providing a ready-to-use chat interface and OpenAI-compatible API. It leverages technologies like Firecrawl, Upstash Search, and Vercel AI SDK to deliver streaming AI responses and supports multiple LLM providers.",
        "key_features": [
            "RAG-powered search",
            "Streaming AI responses",
            "OpenAI-compatible API endpoints",
            "Web scraping and content aggregation",
            "Semantic search using Upstash",
            "Flexible LLM provider support"
        ],
        "primary_use_case": "Instantly creating AI chatbots for any website.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled architect standing before a vast digital blueprint, instantly constructing fully functional AI chatbot interfaces onto various website mockups displayed on holographic screens. The architect uses a special tool that pulls website data and seamlessly integrates it into the chatbot designs. Glowing data streams flow from the websites to the architect's tool, then transform into interactive chat windows. The scene is set in a bright, futuristic design studio with a clean, minimalist aesthetic. Small code snippets and API endpoint visualizations float subtly in the background. The image should be in 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 503167251,
        "name": "tproxy",
        "description": "A cli tool to proxy and analyze TCP connections.",
        "url": "https://github.com/kevwan/tproxy",
        "language": "Go",
        "stars": 3548,
        "forks": 251,
        "created_at": "2022-06-14T01:21:58Z",
        "updated_at": "2025-06-27T09:42:47Z",
        "topics": [
            "charles",
            "connection",
            "grpc",
            "monitoring-tool",
            "proxy",
            "relay",
            "tcp",
            "tcpdump",
            "wireshark"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-07T05:51:27Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/503167251/760eb50a-ca3f-4b45-a2b1-e0cd931a2896"
        ],
        "homepage": "https://go-zero.dev",
        "readme_summary": "tproxy is a command-line tool designed to proxy and analyze TCP connections. It's primarily used for monitoring network traffic, especially for gRPC and MySQL connections, providing insights into connection behavior, reliability, and performance. The tool supports protocol-specific analysis and offers features like packet delay and speed limiting.",
        "key_features": [
            "Proxies TCP connections",
            "Analyzes network traffic",
            "Monitors gRPC connections",
            "Monitors MySQL connection pools",
            "Provides connection statistics (retransmission rate, RTT)",
            "Supports protocol-specific analysis (gRPC, HTTP2, Redis, MongoDB)",
            "Allows delaying packets",
            "Enables speed limiting"
        ],
        "primary_use_case": "Monitoring and analyzing TCP connections for backend service development, including gRPC and MySQL.",
        "open_issues": 5,
        "cover_image_prompt": "A skilled air traffic controller in a modern control tower, overseeing numerous TCP connections represented as glowing airplanes. The controller uses advanced monitoring tools to analyze and manage the connections, ensuring smooth and reliable data flow. Some planes are highlighted to show gRPC, MySQL, or other protocols being analyzed. The control tower is filled with subtle UI elements displaying connection statistics and data streams. The scene is set against a backdrop of a futuristic cityscape with a clear blue sky. The image should be in a clean, 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 934159469,
        "name": "awesome-cursor-rules-mdc",
        "description": "Curated list of awesome Cursor Rules .mdc files",
        "url": "https://github.com/sanjeed5/awesome-cursor-rules-mdc",
        "language": "Python",
        "stars": 2059,
        "forks": 226,
        "created_at": "2025-02-17T11:23:04Z",
        "updated_at": "2025-06-27T09:43:48Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-05-14T05:12:05Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4a2fd2ab30cd8af74955831124cf46566cc0d4270d5d7d3c6523a3a4b5187cdd/sanjeed5/awesome-cursor-rules-mdc"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a tool to generate Cursor MDC rule files from a structured JSON format. It leverages semantic web search (Exa) and LLMs (Gemini, OpenAI, or Anthropic) to create comprehensive and detailed rules. The tool supports parallel processing, progress tracking, and a smart retry system for efficient rule generation.",
        "key_features": [
            "Generates comprehensive MDC rule files for libraries",
            "Uses Exa for semantic web search to gather best practices",
            "Leverages LLM to create detailed, structured content",
            "Supports parallel processing for efficiency",
            "Tracks progress to allow resuming interrupted runs",
            "Smart retry system that focuses on failed libraries by default"
        ],
        "primary_use_case": "Generating Cursor MDC (Markdown Cursor) rule files from structured data to enhance the Cursor code editor experience.",
        "open_issues": 3,
        "cover_image_prompt": "A skilled architect meticulously crafting intricate cursor designs on a digital drafting table. The architect uses a specialized stylus that draws inspiration from a vast library of design patterns represented by glowing, floating .mdc files. A holographic display showcases the cursor rules in action, seamlessly interacting with various code editors. The scene is set in a bright, modern studio filled with subtle tech elements like data visualizations and code snippets. The repository name, 'Awesome Cursor Rules,' is subtly etched onto the drafting table. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    }
]