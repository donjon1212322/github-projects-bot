[
    {
        "id": 94889537,
        "name": "webscrapbook",
        "description": "A browser extension that captures web pages to local device or backend server for future retrieval, organization, annotation, and edit. This project inherits from legacy Firefox add-on ScrapBook X.",
        "url": "https://github.com/danny0838/webscrapbook",
        "language": "JavaScript",
        "stars": 960,
        "forks": 124,
        "created_at": "2017-06-20T12:38:00Z",
        "updated_at": "2025-03-17T09:17:24Z",
        "topics": [
            "archive",
            "bookmark",
            "browser-extension",
            "capture",
            "chrome-extension",
            "firefox-addon",
            "maff",
            "webextension"
        ],
        "quality_score": 1.0,
        "contributors_count": 0,
        "last_commit_date": "2025-03-14T05:15:06Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d4b66b81353c691588b2a902002687f50e741c0298d64d1e2e78029fd9c8dbb1/danny0838/webscrapbook"
        ],
        "homepage": "",
        "readme_summary": "WebScrapBook is a browser extension for capturing web pages with customizable archive formats. It allows users to save web content locally or on a server for future retrieval, organization, annotation, and editing. The project is based on the legacy Firefox add-on ScrapBook X.",
        "key_features": [
            "Web page capture",
            "Archive formats",
            "Customizable configurations",
            "Future retrieval",
            "Organization",
            "Annotation",
            "Editing"
        ],
        "primary_use_case": "Capturing and archiving web pages for offline access, organization, and annotation.",
        "open_issues": 36,
        "cover_image_prompt": "A librarian carefully archiving web pages into glowing books within a vast, futuristic digital library. The librarian uses a special tool that captures websites displayed on floating screens and neatly places them onto the shelves. Each book represents a captured webpage, complete with annotations and editable content. Subtle UI elements and data visualizations float around the library, connecting the metaphor to software. The scene is set in a brightly lit, organized library with a clean, focused composition. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 738314904,
        "name": "wrtag",
        "description": "fast automated music tagging and organization based on MusicBrainz",
        "url": "https://github.com/sentriz/wrtag",
        "language": "Go",
        "stars": 47,
        "forks": 1,
        "created_at": "2024-01-03T00:15:57Z",
        "updated_at": "2025-03-17T03:16:09Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-03-17T00:11:11Z",
        "media_urls": [
            "https://opengraph.githubassets.com/244c67327bbde91fb798864ca8139ee63a11afe4ea0ad65f0af604bf223adc86/sentriz/wrtag"
        ],
        "homepage": "",
        "readme_summary": "wrtag is a fast and automated music tagging and organization tool built in Go, leveraging the MusicBrainz database. It provides a suite of tools for various use cases, including tagging, organizing, and fetching cover art, with a focus on speed and composability. The tool supports addons for extended functionality and offers a web interface for remote importing.",
        "key_features": [
            "Fast music tagging using Go",
            "Filesystem organization of music files",
            "Cover art fetching from Cover Art Archive",
            "Concurrent processing with filesystem locking",
            "Addons for lyrics, ReplayGain, and subprocesses",
            "Web interface for importing new releases",
            "Support for gazelle-origin files",
            "Cross-platform support (Linux, macOS, Windows)"
        ],
        "primary_use_case": "Automated music tagging and organization based on the MusicBrainz database.",
        "open_issues": 4,
        "cover_image_prompt": "A meticulous librarian, surrounded by towering shelves of disorganized music albums, waves a glowing wand. The wand emits musical notes that magically sort and arrange the albums into perfect order, each labeled with accurate metadata. Digital particles representing data flow around the librarian, connecting the physical albums to a vast, glowing MusicBrainz database interface in the background. The scene is set in a grand, futuristic library with soft, warm lighting. Small UI elements display album details and tagging information. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 529956444,
        "name": "SubSeven",
        "description": "SubSeven Legacy Official Source Code Repository",
        "url": "https://github.com/DarkCoderSc/SubSeven",
        "language": "Pascal",
        "stars": 594,
        "forks": 86,
        "created_at": "2022-08-28T19:14:56Z",
        "updated_at": "2025-03-17T05:52:53Z",
        "topics": [
            "delphi",
            "lazarus",
            "pascal",
            "remote-access",
            "remote-control",
            "remote-desktop",
            "remote-file"
        ],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2023-11-09T10:28:15Z",
        "media_urls": [
            "https://opengraph.githubassets.com/059e8e53b12e28e5e7c9e15b7387f11c83d2accd4f7a73da7c88487611025d76/DarkCoderSc/SubSeven"
        ],
        "homepage": "",
        "readme_summary": "SubSeven Legacy is a Delphi-based project recreating the look and feel of the original SubSeven remote access tool. It provides features like file and process management, remote terminal access, and Windows session management, all within a classic SubSeven 2.2.X themed interface. The project aims to evoke nostalgia and demonstrate remote access capabilities without including any malicious functionalities.",
        "key_features": [
            "SubSeven 2.2.X branch UX theme in pure VCL/WinAPI",
            "Pure Socket API with support of latest OpenSSL version",
            "Multi-Threaded / Concurrency",
            "File Manager (Reactive)",
            "Process Manager",
            "Remote Terminal",
            "Windows Session Manager",
            "Run As / Create Process As (Windows Session Supported)"
        ],
        "primary_use_case": "Remote access and control, reminiscent of the original SubSeven Backdoor but without malicious features, primarily for nostalgic or educational purposes.",
        "open_issues": 0,
        "cover_image_prompt": "An archaeologist carefully restoring an ancient, ornate control panel from a forgotten civilization. The panel features glowing buttons and levers that control a holographic projection of a modern computer desktop. The archaeologist is meticulously cleaning and repairing the panel, revealing its intricate details and restoring its functionality. Small UI elements from the SubSeven Legacy application are subtly incorporated into the holographic projection. The scene is set in a dimly lit, dusty chamber with beams of light illuminating the control panel. The image should be in a detailed digital painting style with a focus on texture and lighting."
    },
    {
        "id": 886008786,
        "name": "fileserver",
        "description": "No dependencies static files and SPA server written in Go.",
        "url": "https://github.com/ffss92/fileserver",
        "language": "Go",
        "stars": 13,
        "forks": 0,
        "created_at": "2024-11-10T00:06:38Z",
        "updated_at": "2025-03-17T09:00:07Z",
        "topics": [
            "fileserver",
            "go"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-02-21T22:36:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/709db72429c2a148e02919ba786a3481215f0d302faa8ece51332bb8155fff71/ffss92/fileserver"
        ],
        "homepage": "",
        "readme_summary": "The fileserver repository provides a simple way to serve static files and SPAs in Go applications. It enhances file serving with features like ETag header generation for efficient caching and gzip compression to reduce file sizes. The repository offers convenient methods for mounting the file server to existing HTTP routers.",
        "key_features": [
            "ETag header generation",
            "gzip compression",
            "Static file serving",
            "SPA serving"
        ],
        "primary_use_case": "Serving static files and Single-Page Applications (SPAs) with features like ETag generation and gzip compression.",
        "open_issues": 0,
        "cover_image_prompt": "A friendly librarian meticulously organizing files in a vast, sunlit library. Each file represents a digital asset, neatly categorized and easily accessible. The librarian uses a special magnifying glass that highlights ETag headers and gzip compression symbols on the files. A small UI element floats nearby, displaying a file directory structure. The library is filled with warm, inviting light, creating a sense of order and efficiency. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and rich details."
    },
    {
        "id": 690120202,
        "name": "misconfig-mapper",
        "description": "Misconfig Mapper is a fast tool to help you uncover security misconfigurations on popular third-party services used by your company and/or bug bounty targets!",
        "url": "https://github.com/intigriti/misconfig-mapper",
        "language": "Go",
        "stars": 674,
        "forks": 51,
        "created_at": "2023-09-11T15:10:11Z",
        "updated_at": "2025-03-17T09:03:56Z",
        "topics": [
            "bug-bounty",
            "bugbounty",
            "cybersecurity",
            "hacking",
            "hacking-tool",
            "misconfig",
            "misfconfiguration",
            "services"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-03-15T22:24:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f88ed3d2bee22a259f67a8525af1b23241e408fc97d34b96a664614e26062873/intigriti/misconfig-mapper"
        ],
        "homepage": "https://bugology.intigriti.io/misconfig-mapper-docs",
        "readme_summary": "Misconfig Mapper is a Go-based tool designed to identify and resolve common security misconfigurations in various services and SaaS solutions. It utilizes a template-based CLI tool to automate the testing process, allowing users to detect service presence, generate permutations for company-specific service discovery, and perform detailed misconfiguration checks.",
        "key_features": [
            "Template-based CLI tool for detecting misconfigurations",
            "Automatic permutation generation based on company name for service discovery",
            "Option to detect service presence without misconfiguration checks",
            "Extensible through modification of the `services.json` file"
        ],
        "primary_use_case": "Detecting security misconfigurations in third-party services used by companies and bug bounty targets.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled cartographer meticulously examining a complex network of interconnected pipes and valves, each labeled with the names of popular online services. The cartographer uses a magnifying glass to identify weak points and misconfigurations, highlighting potential vulnerabilities on a large map spread across a wooden table. Small screens display snippets of code and configuration settings, subtly connecting the physical map to the digital realm. The scene is set in a dimly lit, steampunk-inspired workshop with warm, inviting lighting. The image should be in a detailed technical illustration style with clear labels and vibrant colors."
    },
    {
        "id": 930466730,
        "name": "go-tmdb-cli",
        "description": "A CLI to fetch and display data from TMDB.",
        "url": "https://github.com/alnah/go-tmdb-cli",
        "language": "Go",
        "stars": 4,
        "forks": 0,
        "created_at": "2025-02-10T17:19:47Z",
        "updated_at": "2025-03-16T22:20:04Z",
        "topics": [],
        "quality_score": 0.3,
        "contributors_count": 0,
        "last_commit_date": "2025-02-12T02:00:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e82f7127cf7698e798e8ac79cfd972932340bef059897cdb5696dacee6147258/alnah/go-tmdb-cli"
        ],
        "homepage": "",
        "readme_summary": "The go-tmdb-cli is a command-line tool for fetching and displaying movie data from The Movie Database (TMDB). It allows users to retrieve curated lists of movies and filter results based on various criteria like language, year, and genre. The tool is designed to provide a simple interface for accessing TMDB data directly from the terminal.",
        "key_features": [
            "Fetches movie data from TMDB",
            "Displays data in a command-line interface",
            "Supports filtering by language, year, genres, rating, etc.",
            "Provides curated lists (now playing, popular, top rated, upcoming)"
        ],
        "primary_use_case": "Fetching and displaying movie data from TMDB via a command-line interface.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, unexplored island representing the TMDB database. The cartographer, equipped with a magnifying glass that subtly displays UI elements, carefully examines film reels and movie posters scattered across the island. Each reel and poster represents a movie or TV show, and the cartographer uses a magical compass, displaying API calls, to locate specific titles and genres. The island is surrounded by a sea of data, with glowing particles representing information flowing to and from the cartographer's table. The scene is set in a sunlit, antique study filled with maps and research tools. The image should be in a detailed digital painting style with vibrant colors and clear outlines."
    },
    {
        "id": 905998319,
        "name": "pixie",
        "description": "Tiny but powerful library creating your java objects with a bit of magical pixie dust",
        "url": "https://github.com/tomitribe/pixie",
        "language": "Java",
        "stars": 10,
        "forks": 3,
        "created_at": "2024-12-20T00:14:34Z",
        "updated_at": "2025-03-17T00:26:18Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-02-23T22:46:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/077158ee9fe3fd08a825b948e70fa27caa935b7959db1325bbd48fead2f0bc57/tomitribe/pixie"
        ],
        "homepage": null,
        "readme_summary": "Pixie is a lightweight Java library designed to streamline object creation and configuration. It offers dependency injection, configuration management, and event handling capabilities within a small 100k jar. Pixie utilizes constructor injection with annotations and can be configured via properties files or a fluent builder API.",
        "key_features": [
            "Configuration",
            "Dependency Injection",
            "Events",
            "Constructor Injection"
        ],
        "primary_use_case": "Simplifying Java object creation and configuration using annotations and a properties-based or builder API.",
        "open_issues": 3,
        "cover_image_prompt": "A skilled artisan meticulously crafting intricate clockwork automatons using tiny gears and springs. Each automaton represents a Java object, brought to life with a sprinkle of shimmering pixie dust. The artisan's workbench is adorned with blueprints and jars labeled 'Configuration,' 'Dependency Injection,' and 'Events.' Subtle UI elements and code snippets are visible in the background, connecting the scene to software development. The composition is clean and focused, with a warm, inviting color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 844920178,
        "name": "reactify-core",
        "description": "Java library for developing reactive programming(reactor-core) backend systems in microservices",
        "url": "https://github.com/hoangtien2k3/reactify-core",
        "language": "Java",
        "stars": 22,
        "forks": 3,
        "created_at": "2024-08-20T08:20:08Z",
        "updated_at": "2025-03-16T15:10:24Z",
        "topics": [
            "caching",
            "call-api",
            "elasticsearch",
            "java21",
            "kafka",
            "keycloak",
            "microservices-architecture",
            "minio",
            "minio-server",
            "oauth2",
            "postgresql",
            "reactor-core",
            "redis-cache",
            "restfull-api",
            "security",
            "trace-log",
            "webflux"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-16T07:20:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7b9fb09e21e1b5f68ed2f8545700930c8602f467f54f142b825730db8c7b4fa0/hoangtien2k3/reactify-core"
        ],
        "homepage": "https://reactify-sand.vercel.app",
        "readme_summary": "Reactify-core is a Java library designed to simplify the development of reactive microservices using Spring Boot and reactor-core. It provides features such as Keycloak integration, trace logging, caching, and MinIO server support, enabling developers to build robust and scalable backend systems.",
        "key_features": [
            "Reactive programming with reactor-core",
            "Keycloak integration for security",
            "Trace logging",
            "Caching (Redis)",
            "MinIO server support",
            "Exception handling",
            "API validation",
            "WebClient for API calls"
        ],
        "primary_use_case": "Developing reactive backend systems in microservices using Java and Spring Boot.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a miniature city where each building represents a microservice. The architect, equipped with blueprints labeled 'reactor-core' and 'webflux,' directs a team of tiny robots. Some robots are laying bricks of 'keycloak' security, while others are installing 'redis-cache' units and 'elasticsearch' data centers. A network of glowing fiber optic cables, representing 'trace-log,' connects all the buildings. The scene is set on a large server rack, with small screens displaying real-time performance metrics. The image should be in a 3D isometric illustration style with vibrant colors and clear details, conveying a sense of organized complexity and efficient microservice architecture."
    },
    {
        "id": 910583288,
        "name": "openldk",
        "description": "A JIT Compiler and Runtime for Java in Common Lisp",
        "url": "https://github.com/atgreen/openldk",
        "language": "Java",
        "stars": 204,
        "forks": 6,
        "created_at": "2024-12-31T17:55:50Z",
        "updated_at": "2025-03-17T06:32:05Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-03-15T16:19:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b68cccc7b2f4439667c20fdc2b31f5488f648cacb76943d2e8d24166284581e7/atgreen/openldk"
        ],
        "homepage": "",
        "readme_summary": "OpenLDK is a JIT compiler and runtime for Java implemented in Common Lisp. It translates Java bytecode into Lisp code, which is then compiled into native machine code. This allows for seamless integration of Java libraries into Lisp projects, mapping Java classes to CLOS classes.",
        "key_features": [
            "Java Bytecode to Lisp Translation",
            "Native Machine Code Compilation",
            "CLOS Integration",
            "OpenJDK Runtime Libraries"
        ],
        "primary_use_case": "Integrating Java libraries into a Lisp-based workflow without the need for an out-of-process Java runtime environment.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled artisan meticulously weaving threads of Java code into a vibrant tapestry of Common Lisp. The artisan uses a special loom that translates Java bytecode into Lisp code, which then seamlessly integrates with the tapestry. Small screens display snippets of Java and Lisp code, subtly connecting the metaphor to software. The scene is set in a bright, airy workshop filled with spools of colorful code. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    }
]