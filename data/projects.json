[
    {
        "id": 991575077,
        "name": "mpvpaper-stop",
        "description": "Automatic stop feature for mpvpaper animated wallpapers implemented via a background process",
        "url": "https://github.com/pvtoari/mpvpaper-stop",
        "language": "C",
        "stars": 17,
        "forks": 0,
        "created_at": "2025-05-27T20:46:47Z",
        "updated_at": "2025-08-29T10:06:34Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-23T22:19:16Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4cd31fdf60771ff90f7300c2dee6174d89c3b351efb48a04387bb9159968a85a/pvtoari/mpvpaper-stop"
        ],
        "homepage": null,
        "readme_summary": "The `mpvpaper-stop` utility automatically pauses `mpvpaper` when any window becomes visible on the active Hyprland workspace and resumes playback when no windows are displayed. It achieves this by monitoring window visibility via Hyprland's IPC socket and controlling `mpvpaper`'s playback status through its IPC socket, ensuring video wallpapers only play when visible.",
        "key_features": [
            "Automatic pause/resume of mpvpaper based on window visibility",
            "Configurable polling period",
            "Option to fork into the background",
            "Verbose mode for debugging",
            "Customizable path for mpvpaper's IPC socket",
            "Waits for the mpvpaper socket to be available before starting"
        ],
        "primary_use_case": "Automatically pauses and resumes mpvpaper animated wallpapers based on window visibility in Hyprland.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a conductor pausing a grand orchestra when people enter a concert hall and resuming when they leave. The conductor stands on a small stage, a tablet displaying a simplified Hyprland desktop with windows opening and closing. When windows appear on the tablet, the conductor lowers their baton, silencing the orchestra. When the desktop is clear, the music swells back to life. Subtle code snippets float around the conductor, and the repository name, 'mpvpaper-stop,' is subtly displayed on the music stand. The scene is bathed in soft, ambient light. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 92111509,
        "name": "Trilium",
        "description": "Build your personal knowledge base with Trilium Notes",
        "url": "https://github.com/TriliumNext/Trilium",
        "language": "TypeScript",
        "stars": 30575,
        "forks": 2038,
        "created_at": "2017-05-23T00:30:20Z",
        "updated_at": "2025-08-29T09:02:11Z",
        "topics": [
            "electron",
            "electron-app",
            "knowledge-base",
            "knowledge-graph",
            "knowledge-management",
            "knowledge-management-graph",
            "local-first",
            "note-managment",
            "note-taker",
            "note-taking",
            "notebook",
            "notes",
            "notes-app",
            "personal-knowledge-base",
            "personal-wiki",
            "scriptable",
            "self-hosted",
            "self-hosting",
            "wiki"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-28T22:31:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4deef76f474f07d46a816375d82d7c599a9bdccb9b074f409cff2dd6d413dd31/TriliumNext/Trilium"
        ],
        "homepage": "",
        "readme_summary": "Trilium Notes is a free, open-source, cross-platform note-taking application designed for building large personal knowledge bases. It offers hierarchical note organization, a rich WYSIWYG editor, code support, encryption, synchronization, and advanced features like scripting and relation maps. Trilium Notes scales well and provides a touch-optimized mobile frontend.",
        "key_features": [
            "Hierarchical note organization",
            "WYSIWYG note editor with markdown support",
            "Code note support with syntax highlighting",
            "Full text search and note hoisting",
            "Note versioning",
            "Note attributes and scripting",
            "Multi-language UI",
            "OpenID and TOTP integration",
            "Synchronization with self-hosted server",
            "Note sharing",
            "Note encryption",
            "Diagram sketching (Excalidraw)",
            "Relation and link maps",
            "Mind maps (Mind Elixir)",
            "Geo maps",
            "REST API",
            "Mobile frontend",
            "Dark theme",
            "Evernote import"
        ],
        "primary_use_case": "Building a personal knowledge base",
        "open_issues": 1102,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, interconnected archipelago of islands, each island representing a note of knowledge. The cartographer uses a magical quill that transforms thoughts into glowing pathways connecting related islands, forming a comprehensive knowledge map. Subtle UI elements float in the air, displaying note titles and attribute tags. The scene is set in a sunlit study filled with ancient maps and scrolls, creating a sense of discovery and organization. The image should be in a detailed 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 1009399156,
        "name": "TEMPEST-LoRa",
        "description": "TEMPEST-LoRa: Cross-Technology Covert Communication",
        "url": "https://github.com/XieyangSun/TEMPEST-LoRa",
        "language": "MATLAB",
        "stars": 127,
        "forks": 21,
        "created_at": "2025-06-27T04:25:15Z",
        "updated_at": "2025-08-29T06:30:37Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2025-08-01T02:17:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4e35f3765cb3d29d9d7fb0195cf9d90a2a170ae5a671fbd74809df7dd1524911/XieyangSun/TEMPEST-LoRa"
        ],
        "homepage": null,
        "readme_summary": "This repository provides MATLAB code and instructions to reproduce a covert communication technique called TEMPEST-LoRa. It allows users to generate malicious images or videos that, when displayed, cause VGA or HDMI cables to emit electromagnetic radiation that can be received and decoded by standard LoRa devices. The repository includes tools for configuring transmission parameters, encoding payloads, generating attack videos, and analyzing captured LoRa signals.",
        "key_features": [
            "Generates malicious images/videos that emit LoRa-compatible packets via electromagnetic radiation (EMR) from VGA/HDMI cables.",
            "Provides MATLAB scripts for configuring EMR transmission parameters (frequency, spread factor, bandwidth, preamble length).",
            "Includes tools for encoding payloads into EMR signals and generating attack videos.",
            "Offers scripts for reverse-engineering captured LoRa signals to analyze chirp encoding.",
            "Demonstrates cross-technology covert communication between video displays and LoRa receivers."
        ],
        "primary_use_case": "Demonstrates a cross-technology covert communication technique using electromagnetic radiation from video cables to transmit data to LoRa receivers.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled spy, hidden in the shadows, eavesdropping on a conversation between a computer monitor displaying a vibrant video and a distant radio tower. The monitor subtly radiates waves of energy, imperceptible to the naked eye, carrying secret messages encoded within the video's pixels. The radio tower, equipped with a LoRa receiver, decodes these hidden signals. Small UI elements on the spy's device show LoRa parameters. The scene is set in a dimly lit, high-tech environment with a sense of intrigue. The image should be in a digital painting style with clear outlines and a focus on conveying the covert communication aspect."
    },
    {
        "id": 402229935,
        "name": "vdu_controls",
        "description": "VDU controls - a control panel for monitor brightness/contrast/...",
        "url": "https://github.com/digitaltrails/vdu_controls",
        "language": "Python",
        "stars": 183,
        "forks": 7,
        "created_at": "2021-09-01T23:28:15Z",
        "updated_at": "2025-08-29T09:02:18Z",
        "topics": [
            "bh1750",
            "ddc",
            "ddcutil",
            "gui",
            "gy-30",
            "gy-302",
            "linux",
            "mccs",
            "python",
            "qt5"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-29T02:06:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d1adcb96d2dc2cbbaaad7d96d7e536faad9c28f2b4a25c8952ea024137f9262c/digitaltrails/vdu_controls"
        ],
        "homepage": "",
        "readme_summary": "vdu_controls is a Python-based application that provides a control panel for external monitors, allowing users to adjust brightness, contrast, and audio settings. It features an ambient-light-level slider to simultaneously control multiple displays and supports presets for different scenarios. The application can run in the system tray and automatically adapt to light and dark desktop themes.",
        "key_features": [
            "DDC control panel for external monitors",
            "Ambient light level adjustment for multiple displays",
            "Presets for different settings (night, day, etc.)",
            "System tray integration",
            "Automatic light/dark theme adjustment",
            "Solar-illumination based brightness control"
        ],
        "primary_use_case": "Control and adjust brightness, contrast, and other settings of external monitors, especially in response to ambient light conditions.",
        "open_issues": 11,
        "cover_image_prompt": "Imagine a conductor leading an orchestra, but instead of musicians, the orchestra is composed of monitors of various sizes and types. The conductor's baton is a single slider that controls the brightness and contrast of all the monitors in harmony, adjusting to the ambient light in the room. Subtle UI elements float around the monitors, displaying brightness levels and color profiles. The scene is set in a modern, minimalist studio with soft, diffused lighting. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, emphasizing the unified control over multiple displays."
    },
    {
        "id": 873217205,
        "name": "vulnhuntr",
        "description": "Zero shot vulnerability discovery using LLMs",
        "url": "https://github.com/protectai/vulnhuntr",
        "language": "Python",
        "stars": 2261,
        "forks": 248,
        "created_at": "2024-10-15T19:44:25Z",
        "updated_at": "2025-08-29T02:40:38Z",
        "topics": [
            "ai",
            "llm",
            "security",
            "static-analysis",
            "vulnerability-detection"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2025-02-06T18:04:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f67a1c475f02ae29e1ff387a0c7d623e03c139a9a353b4397a634e88d9e9b0f5/protectai/vulnhuntr"
        ],
        "homepage": "",
        "readme_summary": "Vulnhuntr is a tool that leverages LLMs to automatically discover remotely exploitable vulnerabilities in Python codebases. It performs static code analysis to identify complex, multi-step vulnerabilities, focusing on common vulnerability classes such as LFI, RCE, and XSS. The tool is designed to analyze GitHub repositories and requires an API key for the LLM service.",
        "key_features": [
            "Zero-shot vulnerability discovery using LLMs",
            "Static code analysis for vulnerability detection",
            "Identifies multi-step, security-bypassing vulnerabilities",
            "Supports Python codebases",
            "Integration with LLMs (Claude and GPT)",
            "Detection of LFI, AFO, RCE, XSS, SQLI, SSRF, and IDOR vulnerabilities"
        ],
        "primary_use_case": "Automated vulnerability detection in GitHub repositories using LLMs and static code analysis.",
        "open_issues": 10,
        "cover_image_prompt": "A skilled detective, equipped with a magnifying glass enhanced with digital interfaces, meticulously examines a complex network of interconnected pipes representing code pathways. The detective traces the flow from a user's keyboard (input) through the pipes, identifying weak points and vulnerabilities that lead to a server room (output) where data is stored. The scene is set in a dimly lit, futuristic laboratory filled with holographic displays showing code snippets and security metrics. The image should be in a digital painting style with sharp focus and vibrant colors, highlighting the detective's focused expression and the intricate details of the code network."
    },
    {
        "id": 971770699,
        "name": "CryptX",
        "description": null,
        "url": "https://github.com/PersonX-46/CryptX",
        "language": "Kotlin",
        "stars": 81,
        "forks": 1,
        "created_at": "2025-04-24T03:17:05Z",
        "updated_at": "2025-08-29T09:02:32Z",
        "topics": [],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-12T02:01:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4d7a500375a28f00650a98685db5501a6eafa3a8508af723fc7a0616e74e9755/PersonX-46/CryptX"
        ],
        "homepage": null,
        "readme_summary": "CryptX is an Android toolkit designed for experimenting with various security techniques. It allows users to encrypt and decrypt data using common algorithms, generate and detect hash types, and hide files within images using steganography. The application is built with Jetpack Compose and does not require internet permissions or collect any data.",
        "key_features": [
            "Encryption & Decryption (AES, DES, 3DES, Blowfish, ChaCha20)",
            "Hash Generator (MD5, SHA-1, SHA-256 and more)",
            "Hash Detector",
            "File Steganography (hide/extract files in JPG/PNG images)"
        ],
        "primary_use_case": "A personal Android toolkit for experimenting with cryptography, steganography, and hashing techniques.",
        "open_issues": 2,
        "cover_image_prompt": "A skilled locksmith in a high-tech workshop, meticulously crafting intricate locks and keys. The locksmith uses advanced tools to encrypt and decrypt data streams represented by glowing threads. Around the workshop, images are subtly hidden within artwork, and complex hash functions are visualized as geometric patterns. The scene is set in a brightly lit, organized space with a blend of modern and classic elements. Small UI elements display encryption algorithms and steganography tools. The image should be in a 3D isometric illustration style with clear details and vibrant colors."
    }
]