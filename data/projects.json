[
    {
        "id": 704776837,
        "name": "SunnyCapturer",
        "description": "A simple and beautiful cross-platform screenshot software, It also supports OCR, image translation, stickers and  pinning images features.  |  ÁÆÄÂçï‰∏îÊºÇ‰∫ÆÁöÑË∑®Âπ≥Âè∞Êà™ÂõæËΩØ‰ª∂ÔºåÊîØÊåÅÁ¶ªÁ∫ø OCR„ÄÅÂõæÁâáÁøªËØë„ÄÅË¥¥ÂõæÂíåÈíâÂõæÁ≠âÂäüËÉΩ",
        "url": "https://github.com/XMuli/SunnyCapturer",
        "language": "HTML",
        "stars": 442,
        "forks": 20,
        "created_at": "2023-10-14T04:13:12Z",
        "updated_at": "2025-09-08T08:30:58Z",
        "topics": [
            "capture",
            "image",
            "ocr",
            "screen",
            "screenshot",
            "snapshot",
            "sunnycapturer",
            "translate"
        ],
        "quality_score": 0.9,
        "contributors_count": 0,
        "last_commit_date": "2025-09-04T14:18:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3f1f62f9042db76c94bc80c7fff099d8c808f83880265602b9426f3167aa3bc2/XMuli/SunnyCapturer"
        ],
        "homepage": "http://sunnycapturer.xmuli.tech/",
        "readme_summary": "SunnyCapturer is a cross-platform screenshot tool with features like OCR, image translation, sticker support, and image pinning. It aims to provide a simple and beautiful interface for capturing and manipulating screen content across different operating systems.",
        "key_features": [
            "Screenshot capture",
            "OCR (Optical Character Recognition)",
            "Image translation",
            "Sticker support",
            "Image pinning"
        ],
        "primary_use_case": "Capturing and annotating screenshots with additional functionalities like OCR and image translation.",
        "open_issues": 15,
        "cover_image_prompt": "A digital artist sitting at a multi-screen workstation, effortlessly capturing a floating screen image with a stylized digital pen. The captured image transforms into text via OCR, represented by glowing characters flowing from the image. Another screen displays a translated version of the text in a different language. Digital stickers float around the workstation, ready to be applied. The scene is set in a brightly lit, modern studio with subtle UI elements on the screens. The composition is clean and focused with a vibrant color scheme. The image should be in a flat design style with clear iconography."
    },
    {
        "id": 960420129,
        "name": "winboat",
        "description": "Run Windows apps on üêß Linux with ‚ú® seamless integration",
        "url": "https://github.com/TibixDev/winboat",
        "language": "TypeScript",
        "stars": 2302,
        "forks": 45,
        "created_at": "2025-04-04T12:03:11Z",
        "updated_at": "2025-09-08T10:07:27Z",
        "topics": [
            "docker",
            "docker-compose",
            "linux",
            "rdp",
            "virtualization",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T03:53:26Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/960420129/699936fe-eb73-47d1-aa22-e6fd0837066b"
        ],
        "homepage": "https://www.winboat.app/",
        "readme_summary": "WinBoat allows users to run Windows applications on Linux with seamless integration. It leverages containerization and remote desktop technologies to provide a native-like experience for Windows apps within a Linux environment, including filesystem integration and access to the full Windows desktop.",
        "key_features": [
            "Elegant Interface",
            "Automated Installs",
            "Run Any App",
            "Full Windows Desktop",
            "Filesystem Integration",
            "Smartcard passthrough",
            "Resource monitoring"
        ],
        "primary_use_case": "Running Windows applications on Linux systems.",
        "open_issues": 26,
        "cover_image_prompt": "A skilled shipwright carefully fitting a pane of glass into the side of a sturdy wooden boat. The glass pane displays the Windows logo, while the boat is adorned with penguin emblems. The shipwright is using advanced tools to ensure a perfect, seamless fit. Digital particles flow from the glass pane, integrating it with the boat's structure. The scene is set in a bright, modern workshop with subtle UI elements displayed on nearby screens. The composition is clean and focused, with a blue and white color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 75785240,
        "name": "authelia",
        "description": "The Single Sign-On Multi-Factor portal for web apps, now OpenID Certified‚Ñ¢",
        "url": "https://github.com/authelia/authelia",
        "language": "Go",
        "stars": 25179,
        "forks": 1265,
        "created_at": "2016-12-07T00:56:57Z",
        "updated_at": "2025-09-08T09:46:55Z",
        "topics": [
            "2fa",
            "authentication",
            "docker",
            "golang",
            "kubernetes",
            "ldap",
            "mfa",
            "multifactor",
            "oauth2",
            "openid-connect",
            "passkeys",
            "push-notifications",
            "security",
            "sso",
            "sso-authentication",
            "totp",
            "two-factor",
            "two-factor-authentication",
            "webauthn",
            "yubikey"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-08T09:46:50Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/75785240/724ca480-396f-11ea-874f-d39c6900e14d"
        ],
        "homepage": "https://www.authelia.com",
        "readme_summary": "Authelia is an open-source Single Sign-On (SSO) and multi-factor authentication (MFA) server. It protects web applications by requiring users to authenticate through its portal, supporting various 2FA methods like TOTP, WebAuthn, and push notifications, enhancing security for web services.",
        "key_features": [
            "Single Sign-On (SSO)",
            "Multi-Factor Authentication (MFA)",
            "TOTP support",
            "WebAuthn support",
            "LDAP integration",
            "YubiKey support",
            "Push Notifications",
            "OpenID Connect support",
            "OAuth2 support"
        ],
        "primary_use_case": "Securing web applications with SSO and MFA.",
        "open_issues": 56,
        "cover_image_prompt": "A gatekeeper standing before a grand doorway, meticulously checking credentials before allowing access to a vibrant city representing web applications. The gatekeeper holds a glowing tablet displaying various authentication methods like passkeys and OTPs. Users present their credentials, which are verified against a ledger showing successful authentications. Digital particles flow around the doorway, representing secure data transmission. Small UI elements on the tablet show authentication logs and security metrics. The scene is set in a futuristic cityscape with bright, inviting lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 7951393,
        "name": "handlers",
        "description": "Package gorilla/handlers is a collection of useful middleware for Go HTTP services & web applications üõÉ",
        "url": "https://github.com/gorilla/handlers",
        "language": "Go",
        "stars": 1718,
        "forks": 275,
        "created_at": "2013-02-01T03:53:49Z",
        "updated_at": "2025-09-01T08:39:38Z",
        "topics": [
            "go",
            "golang",
            "gorilla",
            "gorilla-web-toolkit",
            "handler",
            "http",
            "middleware"
        ],
        "quality_score": 0.7000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2024-01-22T03:57:35Z",
        "media_urls": [
            "https://opengraph.githubassets.com/177687ed13c052b73020ef01ba6b18739173f15b7e7bb6e83d1c6f3b3f54a234/gorilla/handlers"
        ],
        "homepage": "https://gorilla.github.io",
        "readme_summary": "The `gorilla/handlers` repository provides a collection of HTTP middleware for Go web applications, designed to enhance request logging, response compression, content type validation, and other common web server functionalities. It offers pre-built handlers for tasks like logging requests in standard formats, compressing responses with gzip, and handling different HTTP methods.",
        "key_features": [
            "Logging HTTP requests (Common Log Format, Combined Log Format)",
            "Gzipping responses",
            "Validating request content types",
            "Matching HTTP methods to handlers",
            "Populating request information from proxy headers",
            "Redirecting to canonical hostnames",
            "Recovering from panics"
        ],
        "primary_use_case": "Enhancing Go HTTP services and web applications with commonly used middleware functionalities.",
        "open_issues": 16,
        "cover_image_prompt": "A skilled architect meticulously constructing a building from modular blocks, each representing a different HTTP middleware function (logging, compression, security). The architect carefully places each block, creating a robust and efficient structure. Digital blueprints float around the scene, displaying code snippets and configuration settings. The building glows with a soft, internal light, symbolizing the enhanced functionality. The repository name is subtly etched into the foundation. The scene is set in a bright, modern design studio. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 457435290,
        "name": "go-whatsapp-web-multidevice",
        "description": "GOWA - WhatsApp REST API with support for UI, Webhooks, and MCP. Built with Golang for efficient memory use. ",
        "url": "https://github.com/aldinokemal/go-whatsapp-web-multidevice",
        "language": "Go",
        "stars": 2359,
        "forks": 591,
        "created_at": "2022-02-09T16:19:30Z",
        "updated_at": "2025-09-08T09:40:44Z",
        "topics": [
            "bot",
            "go",
            "golang",
            "golang-whatsapp",
            "golang-whatsapp-api",
            "rest",
            "rest-api",
            "whatsapp",
            "whatsapp-api",
            "whatsapp-api-go",
            "whatsapp-multi-device",
            "whatsapp-web-multi-device"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-06T08:30:05Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/457435290/70c0c823-04d7-4410-9f7d-8b8331498061"
        ],
        "homepage": "",
        "readme_summary": "GOWA is a WhatsApp REST API built with Golang, designed for efficient memory usage. It supports UI, Webhooks, and MCP (Model Context Protocol), enabling integration with AI agents and tools. The project provides a comprehensive solution for sending WhatsApp messages, managing statuses, and receiving messages with webhook notifications.",
        "key_features": [
            "Send WhatsApp messages via HTTP API",
            "MCP (Model Context Protocol) Server Support",
            "Mention someone in messages",
            "Post WhatsApp Status",
            "Image and video compression before sending",
            "Customizable OS name",
            "Basic Authentication",
            "Subpath deployment support",
            "Customizable port and debug mode",
            "Auto-reply messages",
            "Auto-mark read incoming messages",
            "Webhook for received messages",
            "Webhook Secret"
        ],
        "primary_use_case": "Providing a REST API for interacting with WhatsApp, enabling automation and integration with other applications and services, particularly AI agents through MCP.",
        "open_issues": 12,
        "cover_image_prompt": "A diligent messenger bird, representing the GoWA API, carrying scrolls (messages) between a bustling city (representing various applications) and a serene cloud (representing the WhatsApp service). The bird wears a small backpack containing UI elements and webhook symbols. The city buildings have subtle UI screens displaying message data. The cloud emits glowing particles forming chat bubbles. The scene is set in a bright, optimistic sky. The image should be in a flat design style with clear iconography and a vibrant color scheme. The GoWA logo is subtly incorporated as a building sign."
    },
    {
        "id": 919456166,
        "name": "wordpecker-app",
        "description": " A personalized language-learning tool that combines Duolingo-style lessons with your own curated vocabulary lists. Seamlessly add words from books, articles, or videos, and revisit them through interactive quizzes and LLM-generated lessons. ",
        "url": "https://github.com/baturyilmaz/wordpecker-app",
        "language": "TypeScript",
        "stars": 1611,
        "forks": 149,
        "created_at": "2025-01-20T12:26:43Z",
        "updated_at": "2025-09-08T09:00:14Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2025-08-08T11:44:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d34de70846e54ce70c8b9405b1284fb2a75d31b4c5c34b54936fbae967849a48/baturyilmaz/wordpecker-app"
        ],
        "homepage": "https://wordpeckerapp.com",
        "readme_summary": "The WordPecker App is a personalized language-learning tool that combines Duolingo-style lessons with custom vocabulary lists. Users can add words from various sources like books and videos, then practice them through interactive quizzes and LLM-generated lessons. The app aims to make vocabulary acquisition more efficient and personalized.",
        "key_features": [
            "Duolingo-style lessons",
            "Custom vocabulary lists",
            "Interactive quizzes",
            "LLM-generated lessons",
            "Vocabulary discovery feature (Vision Garden)",
            "Docker support"
        ],
        "primary_use_case": "Personalized language learning and vocabulary building.",
        "open_issues": 8,
        "cover_image_prompt": "A gardener tending to a 'word garden' where each plant represents a word in a language. The gardener uses a watering can labeled 'WordPecker' to nourish the plants. Some plants are blooming with UI elements showing definitions and example sentences. A small screen displays a Duolingo-style lesson integrated into the garden. The scene is set in a bright, whimsical garden with soft lighting. Subtle tech elements like digital particles floating around the plants and the repository name subtly etched into a garden stone connect the metaphor to software. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    }
]