[
    {
        "id": 966235850,
        "name": "sokuji",
        "description": "Live speech translation application built with Electron 34 and React, using OpenAI's Realtime API.",
        "url": "https://github.com/kizuna-ai-lab/sokuji",
        "language": "JavaScript",
        "stars": 106,
        "forks": 0,
        "created_at": "2025-04-14T15:58:15Z",
        "updated_at": "2025-05-31T09:43:49Z",
        "topics": [
            "ai",
            "chrome-extension",
            "electron",
            "linux-app",
            "llm",
            "meeting",
            "openai",
            "react",
            "translation",
            "translator",
            "typescript"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-05-30T09:01:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/d7091dcd506344bf04ea6dbf9216acc0f77aa56739371dbc7ec3fa53220f74df/kizuna-ai-lab/sokuji"
        ],
        "homepage": "https://kizuna-ai-lab.github.io/sokuji/",
        "readme_summary": "Sokuji is a desktop application that provides real-time speech translation using OpenAI's Realtime API. It supports features like automatic turn detection, audio visualization, and virtual audio device management, making it suitable for bridging language barriers in live conversations. A browser extension is also available, offering similar functionality with integration for Google Meet and Microsoft Teams.",
        "key_features": [
            "Real-time speech translation using OpenAI's Realtime API",
            "Support for GPT-4o Realtime and GPT-4o mini Realtime models",
            "Automatic turn detection",
            "Audio visualization with waveform display",
            "Virtual audio device creation and management on Linux",
            "Automatic audio routing between virtual devices",
            "Audio input and output device selection",
            "Comprehensive logs for tracking API interactions"
        ],
        "primary_use_case": "Live speech translation for meetings and conversations.",
        "open_issues": 9,
        "cover_image_prompt": "Imagine a skilled interpreter sitting at a high-tech console, effortlessly translating spoken words between two individuals who are virtually present on holographic displays. The interpreter's console features a real-time audio waveform visualization and displays snippets of code related to speech processing. Digital particles representing translated words float between the holographic displays, forming clear, understandable sentences. The scene is set in a modern, minimalist office with soft, ambient lighting. The image should be in a 3D isometric illustration style with vibrant colors and crisp details, subtly incorporating the 'Sokuji' logo on the console."
    },
    {
        "id": 932580333,
        "name": "BillionMail",
        "description": "BillionMail gives you open-source MailServer, NewsLetter,  Email Marketing — fully self-hosted, dev-friendly, and free from monthly fees. Join the discord: https://discord.gg/fD6rDkDV",
        "url": "https://github.com/aaPanel/BillionMail",
        "language": "Go",
        "stars": 3556,
        "forks": 234,
        "created_at": "2025-02-14T06:25:45Z",
        "updated_at": "2025-05-31T10:08:17Z",
        "topics": [
            "dovecot",
            "email",
            "email-marketing",
            "mail",
            "mailserver",
            "newsletter",
            "newsletters",
            "postfix",
            "rspamd",
            "server",
            "smtp"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-05-30T08:45:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9eb29c44cca99e5856616d1f994bf33690c8382fc4829800cc26d9d2f11fad68/aaPanel/BillionMail"
        ],
        "homepage": "http://www.billionmail.com/",
        "readme_summary": "BillionMail is an open-source mail server and email marketing platform designed to provide businesses and individuals with full control over their email campaigns. It offers features such as advanced analytics, customizable templates, and unlimited sending, all while ensuring privacy through self-hosting. The platform aims to be a cost-effective and feature-rich alternative to expensive, closed-source solutions.",
        "key_features": [
            "Open-source mail server and email marketing platform",
            "Advanced analytics for tracking email performance",
            "Unlimited email sending capabilities",
            "Customizable email templates",
            "Self-hosted for complete control and privacy"
        ],
        "primary_use_case": "Managing email campaigns, sending newsletters, promotional emails, and transactional messages.",
        "open_issues": 25,
        "cover_image_prompt": "A skilled gardener tending to a vast field of email seedlings, nurturing them into full-fledged marketing campaigns. The gardener uses a watering can labeled 'BillionMail' to nourish the plants, which sprout into personalized newsletters and promotional emails. A nearby control panel displays analytics and customer management data. The scene is set in a bright, sunny digital landscape with floating UI elements and subtle code snippets integrated into the environment. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and clear iconography."
    },
    {
        "id": 131129792,
        "name": "bandit",
        "description": "Bandit is a tool designed to find common security issues in Python code.",
        "url": "https://github.com/PyCQA/bandit",
        "language": "Python",
        "stars": 7018,
        "forks": 650,
        "created_at": "2018-04-26T09:08:12Z",
        "updated_at": "2025-05-30T21:34:03Z",
        "topics": [
            "bandit",
            "linter",
            "python",
            "security",
            "security-scanner",
            "security-tools",
            "static-code-analysis"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-26T21:00:19Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/131129792/fff334d9-70ac-4bb0-a941-89087a6ffab7"
        ],
        "homepage": "https://bandit.readthedocs.io",
        "readme_summary": "Bandit is a security linter for Python code that identifies common security vulnerabilities. It works by processing Python files, building an Abstract Syntax Tree (AST), and running plugins against the AST nodes to detect potential issues. Bandit is also available as a container image, ensuring consistent and verifiable execution.",
        "key_features": [
            "Finds common security issues in Python code",
            "Processes files and builds AST",
            "Runs plugins against AST nodes",
            "Generates reports",
            "Available as a container image",
            "Signed container images for verification"
        ],
        "primary_use_case": "Identifying security vulnerabilities in Python code through static analysis.",
        "open_issues": 163,
        "cover_image_prompt": "A seasoned detective meticulously inspecting lines of Python code projected onto a holographic screen, using a magnifying glass that highlights potential security vulnerabilities as glowing red threads. The detective's office is filled with stacks of code documentation and digital displays showing real-time security metrics. A subtle 'Bandit' logo is integrated into the detective's badge. The scene is set in a dimly lit, futuristic office with a noir atmosphere. The image should be in a digital painting style with sharp focus and dramatic lighting."
    },
    {
        "id": 871373324,
        "name": "contextgem",
        "description": "ContextGem: Effortless LLM extraction from documents",
        "url": "https://github.com/shcherbak-ai/contextgem",
        "language": "Python",
        "stars": 1043,
        "forks": 73,
        "created_at": "2024-10-11T20:36:09Z",
        "updated_at": "2025-05-31T09:25:58Z",
        "topics": [
            "ai",
            "contract-analysis",
            "data-extraction",
            "document-intelligence",
            "docx",
            "docx2md",
            "docx2txt",
            "generative-ai",
            "legaltech",
            "llm",
            "llm-extraction",
            "llm-framework",
            "llm-pipeline",
            "llms",
            "nlp",
            "prompt-engineering",
            "text-analysis",
            "unstructured-data"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-29T23:36:05Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/871373324/760ce77b-3b57-472b-9762-545d363b41fa"
        ],
        "homepage": "https://contextgem.dev/",
        "readme_summary": "ContextGem is an open-source LLM framework designed to simplify the extraction of structured data from documents. It provides powerful abstractions to automate dynamic prompts, data modeling, and granular reference mapping, reducing boilerplate code and development overhead. The framework aims to make LLM-based document intelligence more accessible and efficient.",
        "key_features": [
            "Automated dynamic prompts",
            "Automated data modelling and validators",
            "Precise granular reference mapping (paragraphs & sentences)"
        ],
        "primary_use_case": "Effortless extraction of structured data and insights from documents using LLMs.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled gem cutter meticulously extracts structured data from a rough, uncut document using specialized tools. The extracted data shines brightly as a perfectly cut gem, revealing insights and clarity. The gem cutter's workbench is adorned with subtle UI elements and glowing data streams, connecting the metaphor to software. The scene is set in a modern workshop with focused lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 961914674,
        "name": "OmniSVG",
        "description": "OmniSVG is the first family of end-to-end multimodal SVG generators that leverage pre-trained Vision-Language Models (VLMs), capable of generating complex and detailed SVGs, from simple icons to intricate anime characters.",
        "url": "https://github.com/OmniSVG/OmniSVG",
        "language": "Python",
        "stars": 1735,
        "forks": 50,
        "created_at": "2025-04-07T11:14:32Z",
        "updated_at": "2025-05-31T10:02:47Z",
        "topics": [],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-05-26T13:16:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cdca307fb33b51808dd2b166746e3ecf1a2f8455b4431fdec456b256b0cbe4e6/OmniSVG/OmniSVG"
        ],
        "homepage": "",
        "readme_summary": "OmniSVG is a novel framework for generating SVGs using Vision-Language Models. It parameterizes SVG commands into discrete tokens, enabling the creation of complex SVGs from various inputs. The project also introduces MMSVG-2M, a large multimodal SVG dataset, and establishes a standardized evaluation protocol for conditional SVG generation.",
        "key_features": [
            "End-to-end multimodal SVG generation",
            "Leverages pre-trained Vision-Language Models (VLMs)",
            "Generates complex and detailed SVGs from simple icons to intricate anime characters",
            "Parameterizes SVG commands and coordinates into discrete tokens",
            "Introduces MMSVG-2M, a multimodal dataset with two million richly annotated SVG assets",
            "Standardized evaluation protocol for conditional SVG generation tasks"
        ],
        "primary_use_case": "Generating complex and detailed SVGs from multimodal inputs using pre-trained Vision-Language Models.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled artisan meticulously crafting an intricate SVG anime character from a swirling cloud of code, using a magical stylus that translates thoughts into vector paths. The artisan's workbench is adorned with glowing screens displaying vision-language model outputs and datasets of SVG assets. Digital particles flow from the artisan's mind, shaping the SVG with precision and detail. The scene is set in a bright, airy studio filled with creative tools and inspiration. The image should be in a vibrant digital painting style with clear outlines and rich colors, conveying the power of AI-driven SVG generation."
    },
    {
        "id": 488600439,
        "name": "skops",
        "description": "skops is a Python library helping you share your scikit-learn based models and put them in production",
        "url": "https://github.com/skops-dev/skops",
        "language": "Python",
        "stars": 481,
        "forks": 56,
        "created_at": "2022-05-04T13:30:17Z",
        "updated_at": "2025-05-31T05:31:51Z",
        "topics": [
            "hacktoberfest",
            "huggingface",
            "machine-learning",
            "mlops",
            "scikit-learn"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-04-23T12:11:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8d7e0da8f0926f682b5a8ef692297f7218c4bda03869aafac2d8089782b467df/skops-dev/skops"
        ],
        "homepage": "https://skops.readthedocs.io/en/stable/",
        "readme_summary": "Skops is a Python library designed to facilitate the sharing and deployment of scikit-learn models. It provides secure model persistence via `skops.io`, avoiding the use of pickle, and offers tools in `skops.card` for generating model cards that explain model usage and functionality, promoting transparency and ease of use.",
        "key_features": [
            "Secure persistence of scikit-learn estimators without using pickle (skops.io)",
            "Tools to create model cards explaining model functionality and usage (skops.card)"
        ],
        "primary_use_case": "Sharing and deploying scikit-learn based models securely and with clear documentation.",
        "open_issues": 16,
        "cover_image_prompt": "Imagine a skilled artisan carefully crafting miniature houses from blueprints, each house representing a machine learning model. The artisan uses a special 'security sealant' to protect the houses from the elements, ensuring their longevity and integrity. A display case nearby showcases the finished houses, each accompanied by a detailed card explaining its purpose and construction. Subtle UI elements float around the scene, displaying code snippets and model metrics. The scene is set in a bright, airy workshop with a focus on precision and care. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 441537080,
        "name": "shellfirm",
        "description": "Intercept any risky patterns (default or defined by you) and prompt you a small challenge for double verification",
        "url": "https://github.com/kaplanelad/shellfirm",
        "language": "Rust",
        "stars": 864,
        "forks": 26,
        "created_at": "2021-12-24T19:00:12Z",
        "updated_at": "2025-05-30T20:06:15Z",
        "topics": [
            "captcha",
            "devops",
            "devops-tools",
            "prompt",
            "rust",
            "shell",
            "terminal",
            "zsh"
        ],
        "quality_score": 0.8500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-25T08:38:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b2275fd7fe002d171cc68f20fa577af623b1348631c178546dcb53ca76cf4d38/kaplanelad/shellfirm"
        ],
        "homepage": "",
        "readme_summary": "Shellfirm is a security tool that intercepts potentially risky shell commands and prompts users with a verification challenge before execution. It acts as a 'captcha' for the terminal, helping to prevent accidental data loss or system damage. It supports Zsh and Bash, providing a safeguard against common mistakes like `rm -rf *` or `git reset --hard`.",
        "key_features": [
            "Intercepts risky shell commands.",
            "Prompts users with a challenge for verification.",
            "Provides warnings about potentially dangerous actions.",
            "Supports Zsh and Bash shells.",
            "Offers customizable risky patterns (though not explicitly stated, it's implied by 'defined by you')"
        ],
        "primary_use_case": "Preventing accidental or unintended execution of dangerous shell commands.",
        "open_issues": 1,
        "cover_image_prompt": "A vigilant gatekeeper standing before a terminal, intercepting a command represented by a speeding bullet. The gatekeeper holds a glowing shield displaying a math problem, deflecting the bullet only if the problem is solved correctly. Digital particles swirl around the terminal, visualizing the command evaluation process. Small UI elements on the terminal screen show the shellfirm interface and warning messages. The scene is set in a futuristic server room with dramatic lighting. The image should be in digital painting style with clean lines and clear details."
    },
    {
        "id": 196274912,
        "name": "IronRDP",
        "description": "Rust implementation of the Microsoft Remote Desktop Protocol (RDP)",
        "url": "https://github.com/Devolutions/IronRDP",
        "language": "Rust",
        "stars": 2519,
        "forks": 122,
        "created_at": "2019-07-10T21:04:54Z",
        "updated_at": "2025-05-31T03:52:41Z",
        "topics": [
            "rdp",
            "rust"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-31T02:27:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4988f398b626df6f2ed2234a8ffe947e525ef6c2526ab2cf907326c17b386138/Devolutions/IronRDP"
        ],
        "homepage": "",
        "readme_summary": "IronRDP is a Rust library providing a secure implementation of the Microsoft Remote Desktop Protocol (RDP). It offers various features including support for multiple video codecs and provides examples for both asynchronous and synchronous client implementations, enabling developers to build robust and secure remote desktop applications.",
        "key_features": [
            "Rust implementation of Microsoft RDP",
            "Focus on security",
            "Support for Uncompressed raw bitmap, Interleaved Run-Length Encoding (RLE) Bitmap Codec, RDP 6.0 Bitmap Compression, and Microsoft RemoteFX (RFX)",
            "Asynchronous I/O client example",
            "Screenshot example"
        ],
        "primary_use_case": "Implementing a secure RDP client and server in Rust.",
        "open_issues": 41,
        "cover_image_prompt": "A skilled locksmith meticulously crafting a set of intricate, glowing keys inside a secure vault filled with digital servers. Each key represents a secure connection to a remote computer, visualized as a holographic screen displaying a desktop environment. The locksmith uses specialized tools that emit particles of encrypted data, ensuring each key is perfectly forged for secure access. Small UI elements displaying RDP connection details are subtly integrated into the vault's control panels. The scene is set in a futuristic, high-tech vault with dramatic lighting and a blue and green color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 203456148,
        "name": "bunkerweb",
        "description": "🛡️ Open-source and next-generation Web Application Firewall (WAF)",
        "url": "https://github.com/bunkerity/bunkerweb",
        "language": "Python",
        "stars": 8055,
        "forks": 464,
        "created_at": "2019-08-20T21:20:48Z",
        "updated_at": "2025-05-31T09:41:47Z",
        "topics": [
            "antibot",
            "bunkerized-nginx",
            "cybersecurity",
            "devops",
            "devsecops",
            "dnsbl",
            "docker",
            "hardening",
            "hosting",
            "kubernetes",
            "letsencrypt",
            "modsecurity",
            "nginx",
            "reverse-proxy",
            "security",
            "security-tuning",
            "swarm",
            "waf",
            "web-application-firewall",
            "web-security"
        ],
        "quality_score": 0.7999999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-03-14T16:35:56Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/203456148/d91b56bf-1da8-4023-a1b2-056c20ce3a2d"
        ],
        "homepage": "https://www.bunkerweb.io",
        "readme_summary": "BunkerWeb is an open-source Web Application Firewall (WAF) that protects web services by integrating seamlessly into existing environments like Docker and Kubernetes. Built on NGINX, it offers a configurable and extensible security solution through a web UI, CLI, and plugin system, ensuring web applications are secure by default.",
        "key_features": [
            "Web Application Firewall (WAF)",
            "NGINX-based web server",
            "Integration with Linux, Docker, Swarm, and Kubernetes",
            "Configurable via web UI or CLI",
            "Plugin system for extending security features"
        ],
        "primary_use_case": "Protecting web services and applications from cyber threats by acting as a reverse proxy and WAF.",
        "open_issues": 94,
        "cover_image_prompt": "A skilled blacksmith forging a glowing shield in a high-tech workshop. The blacksmith carefully hammers molten data, shaping it into a robust shield that deflects incoming cyberattacks represented by digital arrows and viruses. UI elements displaying threat detection logs subtly float in the background. The forge is clean and modern, with sparks of data illuminating the scene. The composition is focused and clear, with a color scheme of steel blues and fiery oranges. The image should be in a detailed digital painting style with crisp outlines and a sense of dynamic energy."
    }
]