[
    {
        "id": 984509143,
        "name": "dasshh",
        "description": "An AI Assistant on your terminal",
        "url": "https://github.com/vgnshiyer/dasshh",
        "language": "Python",
        "stars": 7,
        "forks": 0,
        "created_at": "2025-05-16T03:45:20Z",
        "updated_at": "2025-05-26T10:06:32Z",
        "topics": [
            "agentic-ai",
            "agents",
            "ai",
            "assistant",
            "llm"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-23T17:32:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/78169edd565e9391092f27d7e33a1ca729d1b2229813f39dbfe7d70c7bf98443/vgnshiyer/dasshh"
        ],
        "homepage": "http://blog.vgnshiyer.dev/dasshh",
        "readme_summary": "Dasshh is a terminal-based AI assistant that allows users to interact with their computer using natural language. It provides an interactive chat UI to execute system tasks, manage processes, and extend functionality with custom tools, all through simple English commands.",
        "key_features": [
            "Interactive chat UI",
            "Personal assistant on the terminal",
            "Performs actions on the computer with plain English",
            "Extensible with custom tools"
        ],
        "primary_use_case": "Interacting with a computer using natural language commands via a terminal-based AI assistant.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled conductor leading an orchestra, but instead of musicians, the orchestra is composed of computer programs and system processes. The conductor, representing Dasshh, effortlessly directs the 'orchestra' with simple spoken commands, translating natural language into precise actions on a terminal interface displayed subtly in the background. Each instrument (program) responds in harmony, creating a symphony of automated tasks. The scene is set in a minimalist, modern workspace bathed in soft, ambient light. The illustration is in a clean, 3D isometric style with vibrant colors and sharp details, subtly incorporating the Dasshh logo."
    },
    {
        "id": 968842454,
        "name": "circuitpython-peckus",
        "description": "PECKUS: Presence enforcing crypto-key USB-stick (running on CircuitPython)",
        "url": "https://github.com/juergenpabel/circuitpython-peckus",
        "language": "Python",
        "stars": 11,
        "forks": 0,
        "created_at": "2025-04-18T20:50:48Z",
        "updated_at": "2025-05-26T09:10:09Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-23T14:19:58Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3dce322ef08890175e14d807f0532b2036470346f44fb6d4beaa2bc8996855d7/juergenpabel/circuitpython-peckus"
        ],
        "homepage": "",
        "readme_summary": "PECKUS is a CircuitPython-based project that creates a presence-enforcing USB storage device. It stores a file (typically a cryptographic key) and only exposes it as a USB drive after successful presence verification, usually via Bluetooth LE. The device automatically relocks after a timeout or when the user's presence is no longer detected, providing an air-gap security benefit.",
        "key_features": [
            "Presence-enforced USB storage",
            "Bluetooth LE unlocking",
            "Automatic relocking based on timeout or user absence",
            "Read-only payload exposure"
        ],
        "primary_use_case": "Securely storing and accessing cryptographic keys or other sensitive data on a USB device, ensuring access only when the user is present and automatically locking when the user is absent.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a blacksmith carefully guarding a glowing key inside a locked chest. The blacksmith only unlocks the chest when they recognize the unique Bluetooth signature of their personal device nearby. Once unlocked, the key emits a soft, secure light, allowing access to valuable data represented by glowing circuits within the chest. After a short time or when the device moves away, the chest automatically locks, extinguishing the light. Small UI elements displaying Bluetooth connection status and a subtle 'PECKUS' logo are integrated into the blacksmith's workbench. The scene is set in a warmly lit workshop with a focus on security and controlled access. The image should be in a digital painting style with clear outlines and a focus on conveying security and controlled access."
    },
    {
        "id": 949877989,
        "name": "Find-Family",
        "description": "Cross-platform end-to-end encrypted location sharing app",
        "url": "https://github.com/vayun-mathur/Find-Family",
        "language": "Kotlin",
        "stars": 26,
        "forks": 1,
        "created_at": "2025-03-17T09:33:26Z",
        "updated_at": "2025-05-26T09:27:49Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-05-25T16:33:49Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3588881951fa39bebfdaf0e02c4f40d58d7db7869aaebfe896b08ec2198562b5/vayun-mathur/Find-Family"
        ],
        "homepage": "https://findfamily.cc/",
        "readme_summary": "Find Family is a cross-platform application designed for secure location sharing among family and friends. It offers end-to-end encryption, temporary sharing controls, saved place notifications, and battery status monitoring. The app prioritizes privacy by not requiring personal information and is fully open source.",
        "key_features": [
            "End-to-end encryption",
            "Temporary location sharing control",
            "Saved places with notifications",
            "Battery status monitoring",
            "Open source client",
            "Speed sharing",
            "Location history",
            "Temporary link sharing",
            "Bluetooth device tracking (in progress)",
            "Tor hidden service connection (todo)"
        ],
        "primary_use_case": "End-to-end encrypted location sharing with family and friends.",
        "open_issues": 2,
        "cover_image_prompt": "A family of paper dolls holding hands, their locations represented by glowing GPS pins on a digital map projected onto a cozy living room rug. The map updates in real-time, showing each doll's movement. A magnifying glass hovers over one doll, revealing a small battery icon indicating battery status. Subtle UI elements float around the scene, displaying location history and saved places. The repository name, \"Find Family\", is subtly etched into the rug. The scene is bathed in warm, inviting light. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 70908208,
        "name": "rasa",
        "description": "💬   Open source machine learning framework to automate text- and voice-based conversations: NLU, dialogue management, connect to Slack, Facebook, and more - Create chatbots and voice assistants",
        "url": "https://github.com/RasaHQ/rasa",
        "language": "Python",
        "stars": 20184,
        "forks": 4787,
        "created_at": "2016-10-14T12:27:49Z",
        "updated_at": "2025-05-26T09:11:09Z",
        "topics": [
            "bot",
            "bot-framework",
            "botkit",
            "bots",
            "chatbot",
            "chatbots",
            "chatbots-framework",
            "conversation-driven-development",
            "conversational-agents",
            "conversational-ai",
            "conversational-bots",
            "machine-learning",
            "machine-learning-library",
            "mitie",
            "natural-language-processing",
            "nlp",
            "nlu",
            "rasa",
            "spacy",
            "wit"
        ],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-01-14T10:26:14Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/70908208/7ac6d480-677b-11e9-8160-e988e9fd6255"
        ],
        "homepage": "https://rasa.com/docs/rasa/",
        "readme_summary": "Rasa is an open-source machine learning framework designed to automate conversations. It provides tools for NLU, dialogue management, and integrations with various messaging platforms and voice assistants. Rasa enables developers to build contextual assistants capable of engaging in layered, back-and-forth conversations.",
        "key_features": [
            "NLU (Natural Language Understanding)",
            "Dialogue Management",
            "Integration with multiple platforms (Slack, Facebook, etc.)",
            "Voice assistant capabilities (Alexa, Google Home)"
        ],
        "primary_use_case": "Automating text- and voice-based conversations using machine learning to build contextual assistants and chatbots.",
        "open_issues": 4,
        "cover_image_prompt": "A skilled architect overseeing a bustling construction site where conversations are being built like complex structures. The architect holds blueprints representing NLU and dialogue management, directing robots that lay bricks of text and voice data. These structures connect to various platforms like Facebook, Slack, and custom channels, visualized as interconnected buildings. Subtle UI elements glow on the blueprints, and digital particles flow around the construction site, symbolizing machine learning. The scene is set at dawn with a hopeful, productive atmosphere. The image should be in 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 2990192,
        "name": "Signal-Android",
        "description": "A private messenger for Android.",
        "url": "https://github.com/signalapp/Signal-Android",
        "language": "Kotlin",
        "stars": 27070,
        "forks": 6410,
        "created_at": "2011-12-15T20:01:12Z",
        "updated_at": "2025-05-26T07:18:50Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-05-21T19:20:18Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ec97b04104b8dc1ef5c7f6ca22813414bef6c459e436dcd932c195a30ac6ab75/signalapp/Signal-Android"
        ],
        "homepage": "https://signal.org",
        "readme_summary": "Signal Android is a secure messaging application that prioritizes user privacy. It enables users to send high-fidelity messages, make HD voice/video calls, and communicate securely using their phone's data connection. The application employs advanced privacy-preserving technology to ensure secure communication.",
        "key_features": [
            "Secure messaging using data connection (WiFi/3G/4G/5G)",
            "High-fidelity message sending and receiving",
            "HD voice/video calls",
            "Advanced privacy-preserving technology"
        ],
        "primary_use_case": "Private and secure messaging for Android devices.",
        "open_issues": 343,
        "cover_image_prompt": "A diligent messenger bird, carrying encrypted messages in glowing capsules, soars through a network of interconnected digital nodes. The bird navigates securely, avoiding eavesdropping shadows, delivering each capsule to its intended recipient, represented by a warmly lit window. Subtle UI elements float nearby, displaying encryption keys and secure connection indicators. The repository name, 'Signal,' is subtly etched onto the bird's satchel. The scene is set against a backdrop of a stylized cityscape with a focus on secure communication pathways. The image should be in a flat design style with clear iconography, vibrant colors, and a focus on security and privacy."
    },
    {
        "id": 253412060,
        "name": "shell_commands_for_Linux",
        "description": "Разные полезные скрипты для работы в Linux, на Python и на bash, сброс ключей IDE от JetBrains для бесплатного использования.  ",
        "url": "https://github.com/PopckovS/shell_commands_for_Linux",
        "language": "Python",
        "stars": 22,
        "forks": 5,
        "created_at": "2020-04-06T06:20:34Z",
        "updated_at": "2025-05-26T08:42:50Z",
        "topics": [
            "ide",
            "php",
            "php7",
            "phpstorm-ide",
            "pycharm-ide",
            "python3",
            "shell-script"
        ],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2021-09-23T23:24:40Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0801fbe1d301963ced571404c533e309f226d8272ec09b8dd7a1df99f75f3142/PopckovS/shell_commands_for_Linux"
        ],
        "homepage": "",
        "readme_summary": "This repository offers a collection of useful scripts for Linux environments, written in Python and Bash. It includes scripts for managing PHP versions, creating local Apache hosts, and resetting evaluation licenses for JetBrains IDEs like PyCharm and PhpStorm, enabling continued use beyond the initial trial period.",
        "key_features": [
            "Scripts for Linux system administration",
            "Scripts for managing PHP versions",
            "Scripts for creating local Apache hosts",
            "Scripts for resetting JetBrains IDE evaluation periods (PyCharm, PhpStorm)"
        ],
        "primary_use_case": "Provides a collection of shell scripts and Python scripts to automate common Linux tasks and manage JetBrains IDE licenses.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled mechanic in a well-lit workshop, tuning a Linux engine with various tools (Python scripts, Bash commands, PHP code). The engine is connected to different applications (IDE icons like PyCharm, PhpStorm) showing increased performance after each adjustment. The mechanic consults blueprints displaying code snippets and server configurations. Digital particles represent data flowing smoothly through the system. The workshop is clean and organized, with a subtle Linux logo in the background. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 3834332,
        "name": "bokeh",
        "description": "Interactive Data Visualization in the browser, from  Python",
        "url": "https://github.com/bokeh/bokeh",
        "language": "TypeScript",
        "stars": 19882,
        "forks": 4218,
        "created_at": "2012-03-26T15:40:01Z",
        "updated_at": "2025-05-26T07:39:59Z",
        "topics": [
            "bokeh",
            "data-visualisation",
            "interactive-plots",
            "javascript",
            "jupyter",
            "notebooks",
            "numfocus",
            "plots",
            "plotting",
            "python",
            "visualisation",
            "visualization"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-22T17:08:45Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/3834332/f2002880-882b-11eb-920b-5c3645483bbd"
        ],
        "homepage": "https://bokeh.org",
        "readme_summary": "Bokeh is a Python library for creating interactive data visualizations in web browsers. It allows developers to build elegant and versatile graphics with high-performance interactivity, even with large or streaming datasets. Bokeh is designed to help users quickly and easily create interactive plots, dashboards, and data applications.",
        "key_features": [
            "Interactive data visualization",
            "Versatile graphics construction",
            "High-performance interactivity",
            "Support for large and streaming datasets",
            "Creation of interactive plots, dashboards, and data applications"
        ],
        "primary_use_case": "Creating interactive plots, dashboards, and data applications for modern web browsers.",
        "open_issues": 774,
        "cover_image_prompt": "A skilled cartographer meticulously crafting interactive maps on a large, glowing touchscreen. The cartographer uses a stylus to drag and drop data points onto the map, instantly transforming them into dynamic charts and graphs. The map responds fluidly to the cartographer's touch, showcasing real-time updates and interactive elements. Subtle code snippets and data visualizations float around the scene, connecting the artistic representation to the underlying technology. The scene is set in a bright, modern studio with a clean, minimalist aesthetic. The image should be in a flat design style with clear iconography and vibrant colors."
    }
]