[
    {
        "id": 591273534,
        "name": "carbonyl",
        "description": "Chromium running inside your terminal",
        "url": "https://github.com/fathyb/carbonyl",
        "language": "Rust",
        "stars": 15547,
        "forks": 312,
        "created_at": "2023-01-20T10:58:22Z",
        "updated_at": "2025-09-27T08:51:47Z",
        "topics": [
            "browser",
            "chromium",
            "terminal"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2023-02-26T21:31:10Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e5bb420e56dc8ee056ccabbf5ba12b05449d6822456a2cf93a1e167b73396079/fathyb/carbonyl"
        ],
        "homepage": "",
        "readme_summary": "Carbonyl is a Chromium-based browser that runs inside a terminal. It supports modern web standards like WebGL, WebGPU, and media playback, offering a lightweight and efficient alternative to traditional graphical browsers, especially in environments without a window server or over SSH.",
        "key_features": [
            "Chromium-based rendering",
            "Terminal-based interface",
            "Support for WebGL, WebGPU, audio, and video",
            "Low resource usage (low CPU, fast startup)",
            "No window server requirement",
            "Docker support",
            "NPM package availability",
            "Pre-built binaries for macOS and Linux"
        ],
        "primary_use_case": "Running a fully-featured web browser in a terminal environment, suitable for remote access, resource-constrained systems, or situations where a graphical interface is unavailable.",
        "open_issues": 73,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a miniature, fully-detailed cityscape inside a glass terminal window. The artisan uses glowing digital tools to shape tiny buildings with web pages displayed on their facades. Data streams flow like rivers through the city, connecting various structures. The artisan's workbench is surrounded by subtle tech elements, such as small code snippets projected onto the glass and UI elements floating in the air. The scene is bathed in soft, ethereal light, creating a sense of wonder and precision. The composition is clean and focused, with a vibrant color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 795821853,
        "name": "cheatshh",
        "description": "Cheatshh is a CLI tool to store commands and their descriptions in a place you can look into as cheatshheat so you dont have to remember them.",
        "url": "https://github.com/AnirudhG07/cheatshh",
        "language": "Shell",
        "stars": 85,
        "forks": 0,
        "created_at": "2024-05-04T06:45:11Z",
        "updated_at": "2025-09-27T08:56:18Z",
        "topics": [
            "cheatsheet",
            "cheatsheets",
            "cheatsheets-hub",
            "cheatshh",
            "cli",
            "shell-script",
            "shellscript"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-08-15T18:50:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e2e03603e33827e9279f7764e14d7bfa062452d233a507324d5eb6ab34357411/AnirudhG07/cheatshh"
        ],
        "homepage": "",
        "readme_summary": "Cheatshh is a command-line tool designed to help users manage and access their command-line cheatsheets. It allows users to store commands and their descriptions, group them into libraries, and quickly access them via an interactive CLI. It supports features like bookmarking, viewing TLDR and MAN pages, and customization.",
        "key_features": [
            "Comprehensive cheatsheets for various command-line utilities and tools",
            "Easy-to-use interface for quickly accessing and executing commands",
            "Customizable cheatsheets and groups",
            "TLDR and MAN pages visible in the preview",
            "Easy to add, edit, delete commands & groups",
            "Bookmark commands",
            "Change configurations like colors and automatic man page display"
        ],
        "primary_use_case": "Storing and accessing command-line cheatsheets for quick reference and execution.",
        "open_issues": 0,
        "cover_image_prompt": "A librarian in a vast, glowing digital library, organizing floating command-line snippets into neatly labeled books. The librarian uses a magical quill that transforms complex commands into easily understandable cheat sheets. UI elements float around the librarian, displaying search results and command descriptions. The repository name 'cheatshh' is subtly etched on the librarian's desk. The scene is set in a futuristic library with soft, blue lighting. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 18199420,
        "name": "durdraw",
        "description": "Versatile ASCII and ANSI Art text editor for drawing in the Linux/Unix/macOS terminal, with animation, 256 and 16 colors, Unicode and CP437, and customizable themes",
        "url": "https://github.com/cmang/durdraw",
        "language": "Python",
        "stars": 1252,
        "forks": 43,
        "created_at": "2014-03-28T03:03:33Z",
        "updated_at": "2025-09-27T07:29:54Z",
        "topics": [
            "animation",
            "ansi",
            "ansi-art",
            "ascii",
            "ascii-art",
            "bbs",
            "drawing",
            "editor",
            "linux",
            "ncurses",
            "terminal",
            "terminal-art",
            "text-editor",
            "textmode",
            "tui",
            "unicode",
            "unicode-art",
            "xterm-256color"
        ],
        "quality_score": 0.6000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-22T05:18:29Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/18199420/8c1f2d58-79ef-48f8-8611-e191bd07ed56"
        ],
        "homepage": "http://durdraw.org",
        "readme_summary": "Durdraw is a versatile ASCII and ANSI art text editor designed for Linux, macOS, and other Unix-like systems. It allows users to create and edit text-based art with features like animation support, 256 and 16 color modes, Unicode and CP437 character sets, and customizable themes, drawing inspiration from classic DOS-based editors while providing a modern, terminal-based experience.",
        "key_features": [
            "ASCII, Unicode, and ANSI art editing",
            "Frame-based animation",
            "Custom themes",
            "256 and 16 color modes",
            "Terminal mouse input",
            "DOS ANSI art viewing",
            "CP437 and Unicode mixing and conversion",
            "HTML and mIRC color output"
        ],
        "primary_use_case": "Creating and editing ASCII, ANSI, and Unicode art in a terminal environment.",
        "open_issues": 17,
        "cover_image_prompt": "Imagine a skilled artisan meticulously crafting a vibrant mosaic using colorful tiles representing ASCII characters. The artisan carefully places each tile onto a large terminal screen, forming intricate patterns and animations. A palette of 256 colors surrounds the artisan, and a reference book of Unicode symbols lies open nearby. The scene is set in a cozy workshop filled with the soft glow of CRT monitors displaying example artworks. Subtle digital elements, like glowing code snippets and pixelated textures, enhance the connection to software. The image should be in a detailed digital painting style with a warm, inviting color scheme."
    },
    {
        "id": 1058593350,
        "name": "elementBlur",
        "description": "A simple browser extension to blur elements on any webpage for privacy and focus.",
        "url": "https://github.com/hongvin/elementBlur",
        "language": "JavaScript",
        "stars": 14,
        "forks": 2,
        "created_at": "2025-09-17T09:43:29Z",
        "updated_at": "2025-09-26T22:16:08Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-09-20T09:16:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/cbf63e7f343a6ee51a52e283c420c1215cddec3dff06214be6bd83d14e903e89/hongvin/elementBlur"
        ],
        "homepage": "",
        "readme_summary": "The elementBlur repository provides a browser extension that allows users to blur elements on any webpage. This is useful for hiding sensitive information or focusing on specific content by reducing distractions. The extension offers a simple toolbar interface and customizable blur intensity.",
        "key_features": [
            "Blur any element on a webpage with a click",
            "Easy-to-use toolbar interface",
            "Customizable blur intensity",
            "Lightweight and privacy-friendly"
        ],
        "primary_use_case": "Hiding sensitive information on webpages and improving focus by blurring distracting elements.",
        "open_issues": 0,
        "cover_image_prompt": "A librarian in a quiet reading room uses a special lens to selectively blur text in a book, focusing only on the key sentences. The blurred text appears as a soft, indistinct haze, while the focused sentences are crisp and clear. A small UI element in the corner shows the 'elementBlur' logo and a blur intensity slider. Digital particles subtly highlight the selected text. The scene is set in a warmly lit, classic library with bookshelves in the background. The composition is clean and focused. The image should be in a 3D isometric illustration style with soft colors and clear details."
    },
    {
        "id": 1007406267,
        "name": "coze-loop",
        "description": "Next-generation AI Agent Optimization Platform: Cozeloop addresses challenges in AI agent development by providing full-lifecycle management capabilities from development, debugging, and evaluation to monitoring.  ",
        "url": "https://github.com/coze-dev/coze-loop",
        "language": "Go",
        "stars": 4962,
        "forks": 653,
        "created_at": "2025-06-24T00:26:28Z",
        "updated_at": "2025-09-27T08:42:01Z",
        "topics": [
            "agent",
            "agent-evaluation",
            "agent-observability",
            "agentops",
            "ai",
            "coze",
            "eino",
            "evaluation",
            "langchain",
            "llm-observability",
            "llmops",
            "monitoring",
            "observability",
            "open-source",
            "openai",
            "playground",
            "prompt-management"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-09-26T06:07:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0a7af80f85daf789e14ed94ca24416aedb64a7e5c206f6a1c05e4effd4631fb4/coze-dev/coze-loop"
        ],
        "homepage": "",
        "readme_summary": "Coze Loop is an open-source AI agent optimization platform that provides full lifecycle management capabilities for AI agents, from development and debugging to evaluation and monitoring. It offers features like prompt engineering, AI agent evaluation, and observability to simplify the development process and enhance operational performance.",
        "key_features": [
            "Prompt development (Playground debugging, version management)",
            "Evaluation (Manage evaluation sets, evaluators, experiments)",
            "Observability (SDK trace reporting, trace data observation)",
            "Model integration (OpenAI, Volcengine Ark)"
        ],
        "primary_use_case": "Efficiently develop, debug, evaluate, monitor, and operate AI Agents.",
        "open_issues": 33,
        "cover_image_prompt": "A gardener meticulously tending to a vibrant, interconnected network of bonsai trees, each representing an AI agent. The gardener uses specialized tools (debuggers, evaluators, monitors) to prune and shape the trees, ensuring their health and optimal performance. Wires subtly connect the trees to a central control panel displaying real-time data and performance metrics. The scene is set in a futuristic greenhouse with soft, diffused lighting. Small UI elements showing prompt versions and evaluation scores are subtly integrated into the environment. The image should be in a 3D isometric illustration style with rich details and a harmonious color scheme."
    },
    {
        "id": 3961068,
        "name": "metadata_parser",
        "description": "python library for getting metadata",
        "url": "https://github.com/jvanasco/metadata_parser",
        "language": "Python",
        "stars": 151,
        "forks": 25,
        "created_at": "2012-04-07T22:38:09Z",
        "updated_at": "2025-09-27T05:15:22Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-30T23:32:04Z",
        "media_urls": [
            "https://opengraph.githubassets.com/303b093624aed999080a5969fd44a6183b604daa029ea2045c40d3d144451495/jvanasco/metadata_parser"
        ],
        "homepage": "",
        "readme_summary": "MetadataParser is a Python library designed to extract metadata from web documents. It relies on BeautifulSoup for parsing, Requests for fetching documents, and tldextract for domain parsing (which can be disabled). The library has been used in production for parsing billions of documents.",
        "key_features": [
            "Pulls as much metadata out of a document as possible",
            "Allows setting a 'strategy' for finding metadata (e.g., only accept opengraph or page attributes)",
            "Lightweight but functional URL validation",
            "Verbose logging"
        ],
        "primary_use_case": "Extracting metadata from web documents.",
        "open_issues": 2,
        "cover_image_prompt": "A librarian meticulously cataloging books, each representing a website, with a magical lens that reveals hidden metadata tags glowing on their covers. The librarian carefully records the metadata into a digital ledger, creating a structured database. Small UI elements display parsed metadata fields, and digital particles flow from the books to the ledger. The scene is set in a grand, well-lit library with a warm, inviting atmosphere. The composition is focused and clear, with a balanced color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 826168160,
        "name": "docling",
        "description": "Get your documents ready for gen AI",
        "url": "https://github.com/docling-project/docling",
        "language": "Python",
        "stars": 39858,
        "forks": 2765,
        "created_at": "2024-07-09T07:50:26Z",
        "updated_at": "2025-09-27T09:54:26Z",
        "topics": [
            "ai",
            "convert",
            "document-parser",
            "document-parsing",
            "documents",
            "docx",
            "html",
            "markdown",
            "pdf",
            "pdf-converter",
            "pdf-to-json",
            "pdf-to-text",
            "pptx",
            "tables",
            "xlsx"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-09-25T09:07:39Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/826168160/d3c8a8f9-af99-449f-856b-4ab9c897cce2"
        ],
        "homepage": "https://docling-project.github.io/docling",
        "readme_summary": "Docling is a Python library designed to simplify document processing and parsing of various formats, including PDFs, DOCX, PPTX, XLSX, and HTML. It provides advanced PDF understanding capabilities, seamless integrations with the gen AI ecosystem, and supports local execution for sensitive data.",
        "key_features": [
            "Parsing of multiple document formats (PDF, DOCX, PPTX, XLSX, HTML, etc.)",
            "Advanced PDF understanding (page layout, reading order, table structure, etc.)",
            "Unified DoclingDocument representation format",
            "Various export formats (Markdown, HTML, DocTags, JSON)",
            "Local execution capabilities",
            "Integrations with LangChain, LlamaIndex, Crew AI & Haystack",
            "Extensive OCR support",
            "Support of several Visual Language Models",
            "Audio support with Automatic Speech Recognition (ASR) models",
            "MCP server for agentic applications",
            "Simple CLI"
        ],
        "primary_use_case": "Preparing documents for use with GenAI models by parsing and converting them into a unified format.",
        "open_issues": 590,
        "cover_image_prompt": "An archivist in a grand library meticulously transforms stacks of diverse documents (PDFs, DOCX, HTML) into glowing, uniform data streams flowing into a futuristic AI brain. The archivist uses a special lens to extract structured information, represented by floating data visualizations. The library is filled with subtle tech elements, like screens displaying code snippets and the 'Docling' logo subtly etched on a bookshelf. The scene is bathed in warm, inviting light, creating a sense of knowledge and transformation. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 911980,
        "name": "tarantool",
        "description": "Get your data in RAM. Get compute close to data. Enjoy the performance.",
        "url": "https://github.com/tarantool/tarantool",
        "language": "Lua",
        "stars": 3563,
        "forks": 391,
        "created_at": "2010-09-15T07:59:26Z",
        "updated_at": "2025-09-26T19:34:01Z",
        "topics": [
            "appserver",
            "database",
            "disk",
            "in-memory",
            "lua",
            "msgpack",
            "tarantool",
            "transactions"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-09-25T12:34:36Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ded6988ed4099b5ca80442989b2dc0866aa8a23a83404cb506d4d3836936185/tarantool/tarantool"
        ],
        "homepage": "https://www.tarantool.io",
        "readme_summary": "Tarantool is an in-memory computing platform that combines a database and an application server. It's designed for high performance and is suitable for data-enriched components of scalable web architectures, such as queue servers, caches, and stateful web applications. It supports both in-memory and disk-based data storage with features like transactions, replication, and a Lua-based application server.",
        "key_features": [
            "Heavily optimized Lua interpreter with tracing JIT compiler",
            "Cooperative multitasking, non-blocking IO",
            "Persistent queues",
            "Sharding",
            "Cluster and application management framework",
            "Access to external databases (MySQL, PostgreSQL)",
            "MessagePack data format and protocol",
            "In-memory and LSM-tree data engines",
            "Multiple index types (HASH, TREE, RTREE, BITSET)",
            "Document oriented JSON path indexes",
            "Asynchronous master-master replication",
            "Synchronous quorum-based replication",
            "RAFT-based automatic leader election",
            "ANSI SQL support"
        ],
        "primary_use_case": "Data-enriched components of scalable web architecture (queue servers, caches, stateful web applications).",
        "open_issues": 1437,
        "cover_image_prompt": "Imagine a skilled clockmaker meticulously assembling a complex clockwork mechanism where each gear represents a different data process. The clock's face displays real-time data flowing smoothly, showcasing the speed and efficiency of the system. One hand points to a memory bank, and the other to a processing unit, highlighting the close proximity of data and compute. Small screens integrated into the clock display Lua code snippets and database queries. The scene is set in a brightly lit, futuristic workshop with a clean, organized aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    }
]