[
    {
        "id": 861761349,
        "name": "MoGe",
        "description": "[CVPR'25 Oral] MoGe: Unlocking Accurate Monocular Geometry Estimation for Open-Domain Images with Optimal Training Supervision",
        "url": "https://github.com/microsoft/MoGe",
        "language": "Python",
        "stars": 1350,
        "forks": 74,
        "created_at": "2024-09-23T13:23:42Z",
        "updated_at": "2025-07-11T09:14:39Z",
        "topics": [
            "3d-reconstruction",
            "3d-vision",
            "monocular-depth-estimation",
            "monocular-geometry-estimation"
        ],
        "quality_score": 0.9000000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-07-09T10:57:34Z",
        "media_urls": [
            "https://opengraph.githubassets.com/154f3205d3eb7988d547102619bbd3804826550365d17a4f8c85c8d4e9b7bea4/microsoft/MoGe"
        ],
        "homepage": "https://wangrc.site/MoGePage/",
        "readme_summary": "MoGe is a model designed for estimating 3D geometry from single images. It provides metric point maps, depth maps, normal maps, and camera FOV estimation. The model supports flexible resolutions, optional ground-truth FOV input, and is optimized for speed, making it suitable for various applications requiring monocular geometry estimation.",
        "key_features": [
            "Accurate 3D geometry estimation (point maps, depth maps, normal maps)",
            "Optional ground-truth FOV input for enhanced accuracy",
            "Flexible resolution support",
            "Optimized for speed (60ms latency on A100/RTX3090 with FP16)"
        ],
        "primary_use_case": "Recovering 3D geometry from monocular open-domain images.",
        "open_issues": 33,
        "cover_image_prompt": "Imagine an architect meticulously crafting a miniature cityscape from a single photograph. The architect, equipped with digital calipers and a holographic display, carefully extracts depth and dimension from the flat image, transforming it into a precise 3D model. The cityscape shimmers with realistic textures and lighting, showcasing the accurate geometry derived from the original photo. Subtle UI elements float nearby, displaying camera FOV data and normal maps. The scene is bathed in soft, ambient light, creating a sense of wonder and precision. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 940088392,
        "name": "lrcsnc",
        "description": "ðŸŽ¶ Player-agnostic synced lyrics fetcher and displayer",
        "url": "https://github.com/Endg4meZer0/lrcsnc",
        "language": "Go",
        "stars": 30,
        "forks": 2,
        "created_at": "2025-02-27T15:42:42Z",
        "updated_at": "2025-07-08T20:52:38Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-05-03T19:46:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/15a21b06a2002a6b66d664b4701b497ea5e25a3f59d6ca1a02d8f8e4342edf44/Endg4meZer0/lrcsnc"
        ],
        "homepage": null,
        "readme_summary": "lrcsnc fetches and displays synced lyrics for songs, synchronizing them with the song's actual position. It supports various players through MPRIS, offers romanization for East Asian languages, and allows customization via TOML configuration. It is primarily designed for use with bars like Waybar, providing a seamless lyrics display experience.",
        "key_features": [
            "Syncing to any player that supports MPRIS",
            "Romanization for Japanese, Chinese and Korean languages",
            "Customization and configuration using TOML",
            "Waybar integration"
        ],
        "primary_use_case": "Displaying synced lyrics for songs played through MPRIS-compatible players, primarily designed for use with bars like Waybar.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled musician standing on a stage, bathed in the spotlight, conducting an orchestra of lyrics that flow from musical notes into perfectly synchronized subtitles displayed on a large screen behind them. The musician's baton emits glowing particles that represent the real-time synchronization. Small UI elements showing lyrics and timestamps are subtly integrated into the stage design. The scene is set in a grand concert hall with warm, inviting lighting. The image should be in a digital painting style with clean lines and vibrant colors, creating a sense of harmony and precision."
    },
    {
        "id": 50904245,
        "name": "beam",
        "description": "Apache Beam is a unified programming model for Batch and Streaming data processing.",
        "url": "https://github.com/apache/beam",
        "language": "Java",
        "stars": 8208,
        "forks": 4370,
        "created_at": "2016-02-02T08:00:06Z",
        "updated_at": "2025-07-11T02:56:13Z",
        "topics": [
            "batch",
            "beam",
            "big-data",
            "golang",
            "java",
            "python",
            "sql",
            "streaming"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-09T22:16:08Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f59ca68310c25a4f3f82cd3111c20b3e65fc930ef85d03b8d652733bbcaf0bf0/apache/beam"
        ],
        "homepage": "https://beam.apache.org/",
        "readme_summary": "Apache Beam provides a unified programming model for defining data-parallel processing pipelines. It offers language-specific SDKs and Runners that enable execution on various distributed processing backends. The primary use case is to create portable data processing pipelines that can run on different execution environments.",
        "key_features": [
            "Unified programming model for batch and streaming data processing",
            "Language-specific SDKs (Java, Python, Go)",
            "Runners for executing pipelines on distributed processing backends (Flink, Spark, Dataflow, Hazelcast Jet)"
        ],
        "primary_use_case": "Defining and executing data processing pipelines for both batch and streaming data.",
        "open_issues": 4437,
        "cover_image_prompt": "A skilled architect overseeing the construction of a bridge that seamlessly connects two distant cities: one representing batch processing and the other representing streaming data. The architect holds a blueprint labeled \"Apache Beam,\" ensuring both sides are perfectly aligned. Data flows smoothly across the bridge in both directions, visualized as glowing streams of information. Subtle UI elements and code snippets are integrated into the bridge's design, connecting the metaphor to software. The scene is set during a bright, sunny day, symbolizing efficiency and clarity. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 976857026,
        "name": "TM-SGNL-Android",
        "description": "Unofficial and insecure Signal app, used by senior Trump officials like Mike Waltz, downloaded from the official TeleMessage website",
        "url": "https://github.com/micahflee/TM-SGNL-Android",
        "language": "Java",
        "stars": 180,
        "forks": 56,
        "created_at": "2025-05-02T22:05:52Z",
        "updated_at": "2025-07-11T00:40:39Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-05-05T17:30:12Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0fbf0475f5ce8e092c92ebf9babcc1403f0f9fc9d4827b0bb4be7239fc79860f/micahflee/TM-SGNL-Android"
        ],
        "homepage": "https://micahflee.com/heres-the-source-code-for-the-unofficial-signal-app-used-by-trump-officials/",
        "readme_summary": "This repository contains a modified, unofficial, and potentially insecure version of the Signal Android app. It was reportedly used by senior Trump officials and downloaded from the TeleMessage website. The modifications likely involve alterations to the original Signal codebase, potentially compromising its security and privacy features.",
        "key_features": [
            "Modified Signal app",
            "Unofficial version",
            "Potentially insecure",
            "Downloaded from TeleMessage website"
        ],
        "primary_use_case": "Modified and potentially insecure version of the Signal app, likely for circumventing security or privacy measures.",
        "open_issues": 2,
        "cover_image_prompt": "An old map being altered by a shadowy figure in a dimly lit room. The figure uses a quill to rewrite place names and routes on the map, subtly changing its original purpose. A flickering candle casts long shadows, highlighting the clandestine nature of the activity. Small code snippets and UI elements related to the Signal app are faintly visible on nearby scrolls and parchments. The repository name, \"TM-SGNL-Android,\" is subtly etched into the map's border. The image should be in a dark, moody digital painting style with a focus on detail and atmosphere."
    },
    {
        "id": 23427654,
        "name": "Feeder",
        "description": "Android feed reader app",
        "url": "https://github.com/spacecowboy/Feeder",
        "language": "Kotlin",
        "stars": 2144,
        "forks": 131,
        "created_at": "2014-08-28T12:50:32Z",
        "updated_at": "2025-07-11T00:03:06Z",
        "topics": [
            "android",
            "atom",
            "jetpack-compose",
            "jsonfeed",
            "kotlin",
            "nostr",
            "rss"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-08T17:39:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c3ec47519900d0588279ace6cdbe30af0343b2d0dcd457bb3167c98e26578719/spacecowboy/Feeder"
        ],
        "homepage": "",
        "readme_summary": "Feeder is an open-source Android feed reader that allows users to read news and posts from their favorite sites. It supports RSS, Atom, and JSONFeed formats and operates locally on the device, ensuring data privacy. Key features include offline reading, notification support, OPML import/export, and a Material Design interface.",
        "key_features": [
            "Offline reading",
            "Notification support",
            "OPML import/export",
            "Material Design"
        ],
        "primary_use_case": "Reading and aggregating news feeds from various sources (RSS, Atom, JSONFeed) locally on an Android device without account registration.",
        "open_issues": 139,
        "cover_image_prompt": "A librarian meticulously organizing a chaotic collection of scrolls (RSS, Atom, JSONFeed) into neat, labeled shelves within a grand, digital library. The librarian, wearing a futuristic headset displaying news headlines, carefully sorts each scroll, representing different news sources, into its proper place. Subtle UI elements float around the librarian, showing article previews and category tags. The library is bathed in soft, ambient light, creating a sense of order and accessibility. The repository name, 'Feeder,' is subtly etched onto the library's entrance archway. The image should be in 3D isometric illustration style with rich details and a calming color palette."
    }
]