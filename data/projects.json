[
    {
        "id": 1028245499,
        "name": "wayland-bongocat",
        "description": "bongocat for your desktop ₍^. .^₎",
        "url": "https://github.com/saatvik333/wayland-bongocat",
        "language": "C",
        "stars": 84,
        "forks": 2,
        "created_at": "2025-07-29T08:40:53Z",
        "updated_at": "2025-07-31T10:06:15Z",
        "topics": [
            "bongo-cat",
            "bongocat",
            "cat",
            "cute",
            "overlay",
            "wayland"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-07-31T08:58:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/60ee35a6a67b568e454f860822bd227fba9d8e36c94b8d920c3df03b0e59c2d0/saatvik333/wayland-bongocat"
        ],
        "homepage": "",
        "readme_summary": "The wayland-bongocat repository provides a Wayland-native overlay that displays an animated bongo cat reacting to keyboard input. It's designed for streamers and content creators to add a fun visual element to their desktop. Key features include real-time animation, hot-reload configuration, dynamic device detection, and optimized performance.",
        "key_features": [
            "Real-time Animation based on keyboard input",
            "Hot-Reload Configuration",
            "Dynamic Device Detection",
            "Performance Optimized",
            "Wayland Native",
            "Lightweight",
            "Multi-device Support",
            "Embedded Assets",
            "Cross-platform"
        ],
        "primary_use_case": "Displaying an animated bongo cat overlay that reacts to keyboard input, primarily for streamers and content creators.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a playful cartoon cat sitting at a futuristic control panel, its paws dancing across glowing keys. The cat's actions are mirrored on a large screen above, displaying vibrant animations that react instantly to each keystroke. Digital particles swirl around the cat, subtly forming keyboard layouts and code snippets. The control panel is sleek and modern, with the repository name subtly displayed on a small screen. The scene is brightly lit with a playful, energetic mood. The image should be in a 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 1021753449,
        "name": "his",
        "description": "A command history utility with icons and colors that works on Windows and GNU/Linux.",
        "url": "https://github.com/terroo/his",
        "language": "C++",
        "stars": 22,
        "forks": 0,
        "created_at": "2025-07-17T22:35:00Z",
        "updated_at": "2025-07-30T20:31:55Z",
        "topics": [
            "cli",
            "command-line",
            "cpp",
            "fuzzy-search",
            "history"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T23:52:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9b7bdb239b8b3d50cfd983edaddcce174608f53e33ab10ce5a9780b81817ebab/terroo/his"
        ],
        "homepage": "https://youtu.be/gILIsK3MiGQ",
        "readme_summary": "The `his` utility enhances command-line productivity by providing a visually rich and easily searchable command history. It uses icons and colors to categorize commands and offers fuzzy search for quick retrieval. `his` is designed to work seamlessly on both Windows and GNU/Linux operating systems.",
        "key_features": [
            "Command history utility",
            "Icons for command types",
            "Color-coded command history",
            "Fuzzy search functionality",
            "Cross-platform support (Windows and GNU/Linux)"
        ],
        "primary_use_case": "Efficiently accessing and executing previously used commands with visual cues and fuzzy search.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a seasoned detective in a dimly lit, noir-style office, surrounded by stacks of old case files (representing command history). The detective holds a magnifying glass (fuzzy search) over a file, with glowing icons (representing command types) subtly highlighting important details. A holographic screen displays a command line interface with color-coded entries. The scene is set in a retro-futuristic setting with a mix of analog and digital elements. The image should be in a digital painting style with sharp focus, dramatic lighting, and a cool color palette, emphasizing clarity and efficiency."
    },
    {
        "id": 1023879521,
        "name": "txplain",
        "description": "Open-source AI-powered blockchain transaction analysis",
        "url": "https://github.com/txplain/txplain",
        "language": "Go",
        "stars": 23,
        "forks": 2,
        "created_at": "2025-07-21T20:57:31Z",
        "updated_at": "2025-07-30T19:23:30Z",
        "topics": [
            "ai",
            "blockchain",
            "ethereum",
            "llm",
            "web3"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-24T22:17:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7fdd99d363b7bc43811a0460accf873eedd2ca79214bee3a5897cf1ae8124438/txplain/txplain"
        ],
        "homepage": "https://txplain.com",
        "readme_summary": "Txplain is an open-source AI-powered service that transforms complex blockchain transaction data into human-readable summaries. It uses direct blockchain calls and contract introspection, leveraging AI to provide accurate and comprehensive transaction analysis across multiple networks like Ethereum, Polygon, and Arbitrum.",
        "key_features": [
            "Dynamic Contract Introspection",
            "Real-time Signature Resolution",
            "Live Token Metadata",
            "AI-Powered Analysis",
            "Multi-Network Support",
            "Minimal External Dependencies"
        ],
        "primary_use_case": "Blockchain transaction analysis and explanation",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled translator meticulously deciphering ancient blockchain ledgers, transforming complex, encrypted data into clear, understandable narratives displayed on a holographic screen. The translator uses AI-powered lenses to highlight key transaction details, while subtle digital particles flow from the ledgers, forming concise summaries. The scene is set in a futuristic library filled with glowing data streams and subtle UI elements displaying transaction details. The image should be in a detailed digital painting style with vibrant colors and a focus on clarity."
    },
    {
        "id": 144310404,
        "name": "script_exporter",
        "description": "Prometheus exporter to execute scripts and collect metrics from the output or the exit status.",
        "url": "https://github.com/ricoberger/script_exporter",
        "language": "Go",
        "stars": 404,
        "forks": 89,
        "created_at": "2018-08-10T16:39:57Z",
        "updated_at": "2025-07-31T05:35:21Z",
        "topics": [
            "docker",
            "go",
            "kubernetes",
            "prometheus",
            "prometheus-exporter",
            "script",
            "scripts"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-15T07:51:29Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c4db3da585b23f67ebe456da08b4fc05dcb97dd32e25989a9a087f3bb8fdc236/ricoberger/script_exporter"
        ],
        "homepage": null,
        "readme_summary": "The Script Exporter is a Prometheus exporter that allows users to execute custom scripts and collect metrics from their output or exit status. It is configured via a YAML file, supports configuration reloading, and provides Docker images for easy deployment. The exporter is designed to enable monitoring of systems and applications by leveraging the flexibility of custom scripts.",
        "key_features": [
            "Executes scripts",
            "Collects metrics from script output",
            "Collects metrics from script exit status",
            "Configurable via YAML file",
            "Supports configuration reloading",
            "Provides Docker image and Docker Compose setup",
            "Offers example scripts for various use cases"
        ],
        "primary_use_case": "Executing scripts and exporting their output and exit status as Prometheus metrics for monitoring purposes.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a diligent librarian meticulously cataloging scrolls, each representing a script. The librarian carefully examines each scroll, extracting key information and organizing it into labeled jars, symbolizing metrics. A large, glowing Prometheus symbol hovers above the librarian, overseeing the process. Subtle UI elements display script execution details and metric values. The scene is set in a grand, yet modern library with warm, inviting lighting. The image should be in a detailed digital painting style, emphasizing clarity and precision."
    },
    {
        "id": 791603222,
        "name": "mynav",
        "description": "Workspace and session management TUI",
        "url": "https://github.com/GianlucaP106/mynav",
        "language": "Go",
        "stars": 169,
        "forks": 6,
        "created_at": "2024-04-25T02:45:11Z",
        "updated_at": "2025-07-30T20:59:30Z",
        "topics": [
            "cli",
            "development",
            "go",
            "management",
            "productivity",
            "sessions",
            "terminal",
            "tmux",
            "tui",
            "workspaces"
        ],
        "quality_score": 0.6499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-03T00:56:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/889acf8d7127d78549f87654c2158b303d7e8e22aa33328ad67de9116522ef82/GianlucaP106/mynav"
        ],
        "homepage": "",
        "readme_summary": "Mynav is a terminal-based workspace navigator and session manager built in Go. It helps developers organize and manage multiple projects through an intuitive interface, seamlessly integrating with tmux sessions. Mynav provides features for workspace management, advanced session management, and an enhanced developer experience with fuzzy search, keyboard shortcuts, and a Lazygit-like UI.",
        "key_features": [
            "Workspace Management (grouping, creation, navigation)",
            "Advanced Session Management (create, modify, delete, enter sessions, live preview, fast switching)",
            "Fuzzy search",
            "Tmux integration",
            "Keyboard shortcuts",
            "Git integration",
            "Lazygit-like terminal UI",
            "Vim-style navigation"
        ],
        "primary_use_case": "Organizing and managing multiple projects and tmux sessions through a terminal-based user interface.",
        "open_issues": 7,
        "cover_image_prompt": "Imagine a ship captain at the helm of a vessel, navigating through a sea of open application windows represented as floating islands. The captain uses a glowing compass, symbolizing MyNav, to chart a course between these islands, effortlessly switching between workspaces and sessions. The ship's bridge is adorned with subtle UI elements and glowing digital charts, representing tmux integration and session previews. The scene is bathed in the soft glow of a monitor screen, creating a focused and productive atmosphere. The illustration should be in a clean, 3D isometric style with vibrant colors and clear details."
    }
]