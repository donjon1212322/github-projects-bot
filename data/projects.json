[
    {
        "id": 991431142,
        "name": "memvid",
        "description": "Video-based AI memory library. Store millions of text chunks in MP4 files with lightning-fast semantic search. No database needed.",
        "url": "https://github.com/Olow304/memvid",
        "language": "Python",
        "stars": 486,
        "forks": 39,
        "created_at": "2025-05-27T16:01:08Z",
        "updated_at": "2025-06-01T10:07:16Z",
        "topics": [
            "ai",
            "context",
            "embedded",
            "faiss",
            "knowledge-base",
            "knowledge-graph",
            "llm",
            "machine-learning",
            "memory",
            "nlp",
            "offline-first",
            "opencv",
            "python",
            "rag",
            "retrieval-augmented-generation",
            "semantic-search",
            "vector-database",
            "video-processing"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-28T17:31:53Z",
        "media_urls": [
            "https://opengraph.githubassets.com/1dc79352756d5b3cb05dbc99a9288c825de9fb4828dd1ef20fcdf362b9e436d7/Olow304/memvid"
        ],
        "homepage": "https://pypi.org/project/memvid/",
        "readme_summary": "Memvid is a video-based AI memory library that stores millions of text chunks in MP4 files, enabling lightning-fast semantic search without needing a traditional database. It offers features like built-in chat, PDF support, efficient storage, and offline-first functionality, making it suitable for creating searchable knowledge bases from various text sources.",
        "key_features": [
            "Video-as-Database: Store millions of text chunks in a single MP4 file",
            "Semantic Search: Find relevant content using natural language queries",
            "Built-in Chat: Conversational interface with context-aware responses",
            "PDF Support: Direct import and indexing of PDF documents",
            "Fast Retrieval: Sub-second search across massive datasets",
            "Efficient Storage: 10x compression compared to traditional databases",
            "Pluggable LLMs: Works with OpenAI, Anthropic, or local models",
            "Offline-First: No internet required after video generation",
            "Simple API: Get started with just 3 lines of code"
        ],
        "primary_use_case": "Building searchable AI knowledge bases from various text sources like digital libraries, educational content, news archives, corporate knowledge, research papers, and personal notes.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a skilled librarian meticulously encoding countless books onto shimmering film reels, each reel representing a vast library compressed into a single, portable container. The librarian uses a special projector that instantly retrieves any passage from the films with a spoken query. Holographic displays show the original text alongside the librarian, subtly connecting the scene to digital information. The library is bathed in warm, inviting light, with shelves stretching into the distance. The image should be in a detailed digital painting style with a focus on clarity and ease of understanding."
    },
    {
        "id": 943088234,
        "name": "deepteam",
        "description": "The LLM Red Teaming Framework",
        "url": "https://github.com/confident-ai/deepteam",
        "language": "Python",
        "stars": 231,
        "forks": 36,
        "created_at": "2025-03-05T06:34:21Z",
        "updated_at": "2025-06-01T08:10:29Z",
        "topics": [],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-31T09:55:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9d58e01d8a9deea7dbe788653adbc553b50db93614dc56488c0abe16311ef777/confident-ai/deepteam"
        ],
        "homepage": "https://trydeepteam.com",
        "readme_summary": "DeepTeam is an open-source LLM red teaming framework designed for penetration testing and identifying vulnerabilities in large language model systems. It incorporates adversarial attack simulations and vulnerability detection, allowing users to customize tests and generate risk assessments in JSON format. The framework supports industry standards like OWASP and NIST.",
        "key_features": [
            "LLM red teaming framework",
            "Vulnerability detection (Bias, PII Leakage, Misinformation, Robustness)",
            "Adversarial attack simulation (Prompt Injection, Jailbreaking)",
            "Customizable vulnerabilities and attacks",
            "Risk assessment reporting in JSON format",
            "Support for OWASP Top 10 for LLMs and NIST AI RMF"
        ],
        "primary_use_case": "Penetration testing and security vulnerability detection for large language model systems.",
        "open_issues": 2,
        "cover_image_prompt": "A team of cybersecurity experts, depicted as skilled artisans, meticulously stress-testing a digital fortress representing an LLM system. They employ various tools, visualized as glowing probes and simulated attacks, to identify vulnerabilities like bias (represented by skewed scales) and data leaks (represented by dripping pipes). Successful defenses are shown as shimmering shields deflecting attacks. The scene is set in a futuristic, clean laboratory with subtle UI elements displaying risk assessment data in JSON format. The composition is balanced and focused, with a color scheme of blues, greens, and oranges. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 319029846,
        "name": "Depixelization_poc",
        "description": "Depix is a PoC for a technique to recover plaintext from pixelized screenshots.",
        "url": "https://github.com/spipm/Depixelization_poc",
        "language": "Python",
        "stars": 429,
        "forks": 44,
        "created_at": "2020-12-06T12:39:08Z",
        "updated_at": "2025-06-01T10:06:45Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-04-16T06:48:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c616804627dc27c6583b7d84a8822c0e9a90d25a90db83077a9cda426013637d/spipm/Depixelization_poc"
        ],
        "homepage": "",
        "readme_summary": "The Depix repository provides a proof-of-concept implementation for recovering plaintext from pixelized screenshots. It focuses on images pixelized with a linear box filter and includes tools for box detection visualization and pixelated image generation. The repository offers example usages demonstrating the process with different image editors and pixelization methods.",
        "key_features": [
            "Recovers plaintext from pixelized screenshots",
            "Works on images pixelized with a linear box filter",
            "Includes tools for showing box detection and generating pixelated images",
            "Provides example usage scenarios with different image editors and pixelization methods"
        ],
        "primary_use_case": "Recovering obscured text from pixelized images, particularly those pixelized using a linear box filter.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled archaeologist carefully piecing together a fragmented ancient scroll, revealing hidden text beneath the damaged surface. The archaeologist uses specialized tools that emit digital particles to reconstruct the pixelated sections of the scroll. Faint UI elements displaying code snippets and image processing algorithms float around the scene. The setting is a dimly lit, high-tech laboratory filled with ancient artifacts. The composition is focused and clean, with a warm color scheme. The image should be in a detailed digital painting style with clear outlines and a sense of mystery."
    },
    {
        "id": 896595985,
        "name": "index",
        "description": "The SOTA Open-Source Browser Agent for autonomously performing complex tasks on the web",
        "url": "https://github.com/lmnr-ai/index",
        "language": "Python",
        "stars": 2221,
        "forks": 109,
        "created_at": "2024-11-30T19:34:02Z",
        "updated_at": "2025-06-01T09:57:01Z",
        "topics": [
            "ai",
            "ai-agent",
            "browser-agent",
            "claude-3-7-sonnet",
            "gemini-pro",
            "llm",
            "sota"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-05-09T12:17:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/3b1c6c34f3d03b0938e260e8d3cc6b4fff1917aef5e74222db3e5d70f18bac05/lmnr-ai/index"
        ],
        "homepage": "",
        "readme_summary": "Index is an open-source browser agent that autonomously performs complex web tasks, turning websites into accessible APIs. It leverages LLMs with vision capabilities and supports structured output via Pydantic schemas. Index offers both a serverless API and an interactive CLI for seamless integration and usage.",
        "key_features": [
            "Autonomous execution of complex web tasks",
            "Integration with LLMs with vision capabilities (Gemini, Claude, OpenAI)",
            "Structured output via Pydantic schemas",
            "Serverless API availability",
            "Browser agent observability via Laminar",
            "Interactive CLI with browser state persistence"
        ],
        "primary_use_case": "Automating web interactions and extracting structured data from websites using a browser agent.",
        "open_issues": 5,
        "cover_image_prompt": "A skilled navigator at the helm of a ship, expertly charting a course through a complex web of interconnected islands representing websites. The navigator uses a sophisticated interface displaying code snippets and data visualizations to interpret the web's currents and tides. The ship seamlessly transforms raw data from the islands into structured information, which is then presented on glowing charts. The scene is set on a clear, sunny day with a vibrant blue sky. Small UI elements and digital particles subtly connect the metaphor to software. The composition is clean and focused with a harmonious color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 202291859,
        "name": "chatwoot",
        "description": "Open-source live-chat, email support, omni-channel desk. An alternative to Intercom, Zendesk, Salesforce Service Cloud etc. 🔥💬",
        "url": "https://github.com/chatwoot/chatwoot",
        "language": "Ruby",
        "stars": 23832,
        "forks": 4533,
        "created_at": "2019-08-14T06:50:51Z",
        "updated_at": "2025-06-01T08:29:10Z",
        "topics": [
            "actioncable",
            "chat-widget",
            "conversation",
            "customer-support",
            "dashboard",
            "design",
            "docker",
            "docker-image",
            "heroku",
            "intercom",
            "javascript",
            "livechat",
            "opensource",
            "rails",
            "ruby",
            "sass",
            "vuejs",
            "whatsapp",
            "zendesk"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-05-30T10:56:40Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/202291859/bd7a45e0-9a03-4a0b-8ab9-146e55911702"
        ],
        "homepage": "https://www.chatwoot.com/help-center",
        "readme_summary": "Chatwoot is an open-source customer support platform designed to centralize customer conversations from various channels into a single inbox. It offers features like a help center portal, collaboration tools, and an AI agent to automate responses. The platform aims to provide businesses with a scalable and flexible solution for managing customer support while maintaining control over their data.",
        "key_features": [
            "Omnichannel Support Desk",
            "Help center portal",
            "Collaboration & Productivity features (Private Notes, @mentions, Labels)",
            "AI Agent for Support (Captain)"
        ],
        "primary_use_case": "Providing an open-source customer support platform for businesses.",
        "open_issues": 891,
        "cover_image_prompt": "A bustling customer service center depicted as a vibrant control room. Agents, each representing a different communication channel (chat, email, social media), are connected to a central, glowing 'Chatwoot' console. This console transforms diverse customer inquiries into organized streams of support tickets, visualized as glowing threads converging into a single point. The room is filled with helpful resources, such as a knowledge base represented by a holographic library. The overall scene conveys efficiency and comprehensive customer support. The image should be in a clean, modern 3D isometric illustration style with bright, inviting colors."
    },
    {
        "id": 893031915,
        "name": "helix-db",
        "description": "HelixDB is a powerful, open-source, graph-vector database built in Rust for intelligent data storage for RAG and AI.",
        "url": "https://github.com/HelixDB/helix-db",
        "language": "Rust",
        "stars": 1896,
        "forks": 62,
        "created_at": "2024-11-23T11:02:14Z",
        "updated_at": "2025-06-01T06:32:11Z",
        "topics": [
            "ai",
            "cli",
            "database",
            "databases",
            "graph-database",
            "helix",
            "helixdb",
            "neo4j",
            "qdrant",
            "rag",
            "rust",
            "rust-crate",
            "rust-lang",
            "surrealdb",
            "vector",
            "vector-database",
            "vector-db",
            "vectorsearch"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-05-31T17:18:19Z",
        "media_urls": [
            "https://opengraph.githubassets.com/fb1f0569cace8a4ac6ebd1fd2233de75610ab55eceeda3a71cd29241ca88acbc/HelixDB/helix-db"
        ],
        "homepage": "https://helix-db.com",
        "readme_summary": "HelixDB is a high-performance, open-source graph-vector database built in Rust, designed for RAG and AI applications. It combines graph database capabilities with vector storage, offering features like ACID compliance, LMDB-powered storage, and a focus on developer experience. The database is designed to be fast and efficient, with native support for graph and vector data types.",
        "key_features": [
            "Fast & Efficient performance compared to other databases",
            "RAG-First native support for graph and vector data types",
            "Graph-Vector storage of relationships between nodes, vectors, or nodes AND vectors",
            "Reliable Storage powered by LMDB",
            "ACID Compliant data integrity and consistency"
        ],
        "primary_use_case": "Intelligent data storage for Retrieval Augmented Generation (RAG) and AI applications using a graph-vector database.",
        "open_issues": 18,
        "cover_image_prompt": "Imagine a skilled sculptor shaping a block of marble (representing raw data) into a magnificent statue (representing a knowledge graph enhanced with vector embeddings). The sculptor uses tools that resemble code interfaces, subtly displaying lines of Rust code and data visualizations. The statue stands on a pedestal labeled \"HelixDB\", glowing with a soft, internal light. Around the sculptor, spectral nodes connected by shimmering lines represent relationships within the data. The scene is set in a bright, modern workshop with a focus on clean lines and clarity. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 590158156,
        "name": "ubicloud",
        "description": "Open source alternative to AWS. Elastic compute, block storage (non replicated), firewall and load balancer, managed Postgres, and IAM services in public beta.",
        "url": "https://github.com/ubicloud/ubicloud",
        "language": "Ruby",
        "stars": 5155,
        "forks": 185,
        "created_at": "2023-01-17T19:29:00Z",
        "updated_at": "2025-06-01T02:37:07Z",
        "topics": [
            "bare-metal",
            "cloud",
            "github-actions",
            "hosting",
            "linux",
            "managed-cloud",
            "open",
            "opensource",
            "portable",
            "postgresql",
            "ruby"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-05-30T19:07:11Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/590158156/080ce663-3139-45ff-a824-900f2fef8720"
        ],
        "homepage": "https://ubicloud.com",
        "readme_summary": "Ubicloud is an open-source platform that enables users to build and manage their own cloud infrastructure on bare metal servers, offering an alternative to proprietary cloud providers like AWS. It provides essential IaaS features such as elastic compute, block storage, firewall, load balancer, managed Postgres, and IAM services. Ubicloud can be used as a managed platform or self-hosted, providing greater control and cost savings.",
        "key_features": [
            "Open source alternative to AWS",
            "Elastic compute",
            "Block storage (non replicated)",
            "Firewall and load balancer",
            "Managed Postgres",
            "IAM services",
            "Runs on bare metal providers (Hetzner, Leaseweb, AWS Bare Metal)",
            "Managed platform available",
            "Control plane for cloudifying bare metal machines"
        ],
        "primary_use_case": "Building and managing cloud infrastructure on bare metal servers as an open-source alternative to traditional cloud providers.",
        "open_issues": 15,
        "cover_image_prompt": "Imagine a skilled architect overseeing the construction of a towering cloud city, built not with bricks and mortar, but with servers and data streams. The architect, representing Ubicloud, uses blueprints to orchestrate the placement of each server, ensuring seamless integration and optimal performance. Below, bare metal servers from providers like Hetzner and AWS are being assembled into the cloud infrastructure. Digital particles flow between the servers, symbolizing the movement of data and applications. Small UI elements display the Ubicloud console, subtly connecting the scene to software. The composition is clean and focused, with a blue and white color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]