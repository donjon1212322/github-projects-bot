[
    {
        "id": 1079005883,
        "name": "superseedr",
        "description": "A BitTorrent Client in your Terminal",
        "url": "https://github.com/Jagalite/superseedr",
        "language": "Rust",
        "stars": 177,
        "forks": 5,
        "created_at": "2025-10-18T22:09:46Z",
        "updated_at": "2025-10-23T09:49:22Z",
        "topics": [],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-10-22T23:54:14Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ebfc619361d039a3e97969bc04069f4c56ba36aa9313142d46659327339420c6/Jagalite/superseedr"
        ],
        "homepage": "",
        "readme_summary": "Superseedr is a terminal-based BitTorrent client written in Rust, utilizing the Ratatui library for its user interface. It offers core BitTorrent functionalities such as peer discovery, rarest-first piece selection, and a tit-for-tat choking algorithm, along with a real-time dashboard and configuration management features.",
        "key_features": [
            "Real Time Performance Tuning",
            "Peer Discovery (Trackers, DHT, PEX, Magnet Links)",
            "Rarest-First Piece Selection & Endgame Mode",
            "Tit-for-tat Choking Algorithm",
            "Real-time Dashboard (ratatui)",
            "Persistent State (saves torrent list, progress, stats)",
            "Speed Limits (upload/download)"
        ],
        "primary_use_case": "Downloading and managing torrents directly from the terminal.",
        "open_issues": 0,
        "cover_image_prompt": "A diligent librarian meticulously organizing streams of digital books flowing into a vast, terminal-shaped library. The librarian uses glowing tools to sort and categorize the books, ensuring each one finds its proper place on the shelves. Small screens display download progress and network activity. The scene is set in a futuristic library with soft, ambient lighting. Subtle tech elements like digital particles and code snippets are woven into the background. The composition is clean and focused, with a warm color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 856521486,
        "name": "call-me",
        "description": "🟢 Call-Me: Your Go-To for Instant Video Calls!",
        "url": "https://github.com/miroslavpejic85/call-me",
        "language": "JavaScript",
        "stars": 645,
        "forks": 76,
        "created_at": "2024-09-12T18:03:13Z",
        "updated_at": "2025-10-23T08:01:14Z",
        "topics": [
            "click-to-call",
            "decentralized",
            "docker",
            "javascript",
            "live-streaming",
            "nodejs",
            "open-source",
            "peer-to-peer",
            "real-time-communication",
            "self-hosted",
            "video-conferencing",
            "webdev",
            "webrtc",
            "webrtc-signaling",
            "websockets"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-10-22T06:21:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/856521486/b7ecd254-f994-4142-abf6-708b679d94e9"
        ],
        "homepage": "https://cme.mirotalk.com",
        "readme_summary": "Call-Me is a WebRTC-based video conferencing application that enables one-to-one video calls directly from a web browser. It offers features such as user sign-in, initiating calls, camera/microphone switching, real-time chat, screen sharing, and a REST API for managing users and calls.",
        "key_features": [
            "Sign in with a username",
            "Initiate video calls",
            "Switch between cameras, microphones, or speakers",
            "Real-time chat",
            "Hide video feed",
            "Toggle audio/video/screen",
            "Hang up calls",
            "REST API for user and call management",
            "Click to Call functionality",
            "Easy integration via iframe"
        ],
        "primary_use_case": "Enabling instant one-to-one video calls within a web browser environment.",
        "open_issues": 2,
        "cover_image_prompt": "A friendly switchboard operator sits at a vintage telephone switchboard, connecting glowing lines representing video calls between different cities on a world map. Each city has a small screen displaying the faces of people video conferencing. The switchboard is subtly branded with the 'Call-Me' logo. Digital particles flow along the connected lines, symbolizing data transmission. The scene is set in a warmly lit, retro-futuristic office. The composition is clean and focused, with a shallow depth of field. The color scheme is warm and inviting. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 879320294,
        "name": "pydoll",
        "description": "Pydoll is a library for automating chromium-based browsers without a WebDriver, offering realistic interactions. ",
        "url": "https://github.com/autoscrape-labs/pydoll",
        "language": "Python",
        "stars": 5853,
        "forks": 316,
        "created_at": "2024-10-27T15:46:43Z",
        "updated_at": "2025-10-23T09:44:03Z",
        "topics": [
            "anti-detection",
            "automation",
            "browser-automation",
            "cdp",
            "chromium",
            "crawler",
            "e2e-tests",
            "fingerprinting",
            "headless",
            "playwright",
            "puppeteer",
            "recaptcha-v3",
            "scraping",
            "selenium",
            "testing",
            "testing-tools",
            "turnstile-solver",
            "web-scraping",
            "webdriver"
        ],
        "quality_score": 1.1000000000000003,
        "contributors_count": 0,
        "last_commit_date": "2025-10-19T01:23:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ab1d361dc881638c4856d50346063463ebb5bf8a622b3514c12dd84e6f35145e/autoscrape-labs/pydoll"
        ],
        "homepage": "https://pydoll.tech/",
        "readme_summary": "Pydoll is a Python library for automating Chromium-based browsers without requiring a WebDriver. It connects directly to the Chrome DevTools Protocol (CDP) and focuses on providing realistic, human-like interactions to avoid bot detection. The library aims to simplify browser automation for tasks like web scraping, testing, and automating repetitive processes.",
        "key_features": [
            "Zero Webdrivers",
            "Human-like Interaction Engine",
            "Asynchronous Performance",
            "Humanized Interactions",
            "Simplicity"
        ],
        "primary_use_case": "Browser automation, including web scraping, testing, and automating repetitive tasks, while avoiding bot detection.",
        "open_issues": 16,
        "cover_image_prompt": "A skilled puppeteer stands on a stage, manipulating a glowing browser window with strings. The browser window acts as a puppet, performing tasks like filling forms and clicking buttons. The puppeteer's hands are connected to the browser by glowing threads representing the Chrome DevTools Protocol. The stage is set in a modern, minimalist studio with soft, diffused lighting. Small UI elements and code snippets subtly float around the scene, connecting the metaphor to software. The composition is clean and focused, with a blue and purple color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 11008207,
        "name": "vitess",
        "description": "Vitess is a database clustering system for horizontal scaling of MySQL.",
        "url": "https://github.com/vitessio/vitess",
        "language": "Go",
        "stars": 20370,
        "forks": 2259,
        "created_at": "2013-06-27T21:20:28Z",
        "updated_at": "2025-10-23T10:10:26Z",
        "topics": [
            "cncf",
            "database-cluster",
            "kubernetes",
            "mysql",
            "shard",
            "vitess"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-19T16:52:31Z",
        "media_urls": [
            "https://opengraph.githubassets.com/308f2c9f28d79b9459d4ef907ce80f65c4d0fad4f8d467789516348276622592/vitessio/vitess"
        ],
        "homepage": "http://vitess.io",
        "readme_summary": "Vitess is a database clustering system designed for horizontal scaling of MySQL. It enables applications to remain agnostic to data distribution across multiple database servers, allowing for unlimited scaling through sharding and features like splitting and merging shards with minimal downtime.",
        "key_features": [
            "Horizontal scaling of MySQL",
            "Generalized sharding",
            "Application-agnostic data distribution",
            "Shard splitting and merging",
            "Atomic cutover"
        ],
        "primary_use_case": "Horizontally scale MySQL databases for applications requiring high availability and scalability.",
        "open_issues": 847,
        "cover_image_prompt": "A skilled architect overseeing the construction of a massive, interconnected city built from MySQL servers. The architect uses blueprints to strategically divide the city into manageable districts (shards), ensuring smooth traffic flow (data access). A central control tower monitors the city's health and dynamically adjusts resources. Small screens display database metrics and shard configurations. The scene is set in a bright, futuristic cityscape with glowing data streams connecting the servers. The image should be in 3D isometric illustration style with clear details and vibrant colors, subtly incorporating the Vitess logo."
    },
    {
        "id": 650121594,
        "name": "chatgpt-export",
        "description": "A browser bookmarklet for exporting conversations with ChatGPT as markdown files.",
        "url": "https://github.com/yaph/chatgpt-export",
        "language": "JavaScript",
        "stars": 94,
        "forks": 12,
        "created_at": "2023-06-06T11:38:46Z",
        "updated_at": "2025-10-23T08:20:26Z",
        "topics": [
            "bookmarklet",
            "browser-bookmarklets",
            "browser-tools",
            "chatgpt",
            "chatgpt-tools",
            "document-conversion",
            "html2markdown",
            "markdown",
            "vanilla-javascript",
            "vanilla-js"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-09-01T10:06:29Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/650121594/df4a9108-634c-42bf-af50-89ce3bf6adb4"
        ],
        "homepage": "https://geeksta.net/tools/chatgpt-to-markdown/",
        "readme_summary": "The chatgpt-export repository provides a browser bookmarklet that allows users to export their ChatGPT conversations as markdown files. This tool simplifies the process of archiving and sharing conversations in a readable and easily accessible format.",
        "key_features": [
            "Exports ChatGPT conversations as markdown files",
            "Easy installation via bookmarklet",
            "Removes unnecessary information for clean output",
            "Automatically names the file based on the conversation title"
        ],
        "primary_use_case": "Exporting and archiving ChatGPT conversations in markdown format.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a diligent librarian carefully transcribing spoken words from a glowing chatbot interface into neatly formatted markdown documents. The librarian sits at a desk surrounded by stacks of organized notes, each representing a saved conversation. A small screen on the desk displays the chat interface, while digital particles flow from the screen to the librarian's pen, symbolizing the conversion process. The repository name, 'ChatGPT Export,' is subtly displayed on a book spine. The scene is set in a cozy, well-lit study. The image should be in a 3D isometric illustration style with warm colors and clear details."
    },
    {
        "id": 14313288,
        "name": "pgbackrest",
        "description": "Reliable PostgreSQL Backup & Restore",
        "url": "https://github.com/pgbackrest/pgbackrest",
        "language": "C",
        "stars": 3333,
        "forks": 241,
        "created_at": "2013-11-11T21:08:39Z",
        "updated_at": "2025-10-23T09:20:40Z",
        "topics": [
            "archiving",
            "azure",
            "backup",
            "bzip2",
            "checksum",
            "database",
            "differential",
            "gcs",
            "gzip",
            "incremental",
            "lz4",
            "multi-process",
            "parallel",
            "pgbackrest",
            "postgres",
            "postgresql",
            "restore",
            "s3",
            "wal",
            "zstd"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-18T09:18:32Z",
        "media_urls": [
            "https://opengraph.githubassets.com/15ea9f25ba737af73eab4c5e87b8704fb54de5fb85f0a4871f59069efe4b0b1b/pgbackrest/pgbackrest"
        ],
        "homepage": "https://pgbackrest.org",
        "readme_summary": "pgBackRest is a reliable backup and restore solution for PostgreSQL, designed to handle large databases and workloads. It offers features like parallel backup and restore, local or remote operation, multiple repositories, and various backup types (full, differential, incremental) with integrity checks and resume capabilities.",
        "key_features": [
            "Parallel Backup & Restore",
            "Local or Remote Operation",
            "Multiple Repositories",
            "Full, Differential, & Incremental Backups",
            "Backup Rotation & Archive Expiration",
            "Backup Integrity",
            "Page Checksums",
            "Backup Resume",
            "Streaming Compression & Checksums"
        ],
        "primary_use_case": "PostgreSQL backup and restore management.",
        "open_issues": 54,
        "cover_image_prompt": "A skilled librarian meticulously archiving ancient scrolls (PostgreSQL databases) into a vast, organized vault. The librarian uses a multi-handed device to simultaneously copy and encrypt the scrolls, ensuring their safety and accessibility. Some scrolls are marked with labels indicating full, differential, and incremental backups. Digital particles flow around the scrolls, representing data streams. A subtle UI element displays backup progress. The vault is illuminated by soft, ethereal light. The image should be in a detailed 3D isometric illustration style with a focus on clarity and organization, using a color scheme of blues, greens, and golds."
    },
    {
        "id": 324593513,
        "name": "gpg-tui",
        "description": "Manage your GnuPG keys with ease! 🔐",
        "url": "https://github.com/orhun/gpg-tui",
        "language": "Rust",
        "stars": 1590,
        "forks": 42,
        "created_at": "2020-12-26T16:28:59Z",
        "updated_at": "2025-10-23T08:05:36Z",
        "topics": [
            "cli",
            "gnupg",
            "gpg",
            "gpg-configuration",
            "gpg-key",
            "gpg-keys",
            "gpg-signatures",
            "gpg-tui",
            "hacktoberfest",
            "key-management",
            "linux",
            "openpgp",
            "rust",
            "terminal",
            "tui",
            "tui-app",
            "tui-rs"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-10-21T11:09:34Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/324593513/affc5e80-b83d-11eb-9213-dfbcadb460b4"
        ],
        "homepage": "https://blog.orhun.dev/introducing-gpg-tui/",
        "readme_summary": "gpg-tui is a terminal user interface (TUI) for GnuPG, designed to simplify key management operations. It provides an interactive approach to tasks like listing, exporting, and signing GPG keys, offering a command-line fallback for advanced operations.",
        "key_features": [
            "Terminal User Interface for GnuPG",
            "Key Management (listing, exporting, signing)",
            "Command-line fallback for complex operations",
            "Customizable Key Bindings",
            "Detail Levels for Key Information",
            "User Interface features (scrolling, options menu, copy/paste, selection mode, detailed view, search, file explorer, show logs, running commands)"
        ],
        "primary_use_case": "Interactive management of GnuPG keys within a terminal environment.",
        "open_issues": 8,
        "cover_image_prompt": "Imagine a librarian meticulously organizing glowing keys in a vast, digital library. The librarian, representing the user, carefully places each key (GPG key) into labeled drawers, some keys emitting stronger glows than others, indicating their importance. A holographic display above shows a simplified TUI with key details. Subtle code snippets float as particles in the air, connecting the keys to the digital realm. The scene is set in a futuristic library with soft, ambient lighting. The image should be in a 3D isometric illustration style with clean lines and a calming color scheme of blues and greens."
    }
]