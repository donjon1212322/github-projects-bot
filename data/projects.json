[
    {
        "id": 92297825,
        "name": "Shizuku",
        "description": "Using system APIs directly with adb/root privileges from normal apps through a Java process started with app_process.",
        "url": "https://github.com/RikkaApps/Shizuku",
        "language": "Kotlin",
        "stars": 12991,
        "forks": 787,
        "created_at": "2017-05-24T13:53:49Z",
        "updated_at": "2025-03-07T09:00:45Z",
        "topics": [],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-02-14T00:36:46Z",
        "media_urls": [
            "https://opengraph.githubassets.com/56cf9e429fc1e05d2edb18d64b8708271950560b186335cd19d193fbea7218bd/RikkaApps/Shizuku"
        ],
        "homepage": "",
        "readme_summary": "Shizuku enables applications to access system APIs with elevated privileges, typically requiring root, by acting as an intermediary. It achieves this by running a server process with ADB or root permissions, allowing apps to bypass certain permission restrictions and perform privileged operations without direct root access. This approach offers a more reliable and flexible alternative to traditional methods that involve executing commands in a su shell.",
        "key_features": [
            "Allows normal apps to use system APIs with adb/root privileges.",
            "Acts as a middleman to forward requests from apps to the system server.",
            "Provides a way to bypass permission limitations for certain operations."
        ],
        "primary_use_case": "Enabling apps to perform privileged operations without requiring root access directly, by leveraging ADB or root to run a server process.",
        "open_issues": 173,
        "cover_image_prompt": "Imagine a skilled artisan crafting intricate puppets, each representing an Android application. The artisan uses special threads, symbolizing system APIs, to control the puppets with precision and power beyond their normal reach. A grand stage represents the Android system, where the puppets perform feats impossible without the artisan's guidance. Subtle UI elements and glowing data streams weave around the scene, connecting the puppets to the digital world. The repository name, 'Shizuku,' is subtly etched onto the artisan's workbench. The image should be in a vibrant, detailed 3D isometric illustration style with a warm, inviting color scheme."
    },
    {
        "id": 774468912,
        "name": "superfile",
        "description": "Pretty fancy and modern terminal file manager",
        "url": "https://github.com/yorukot/superfile",
        "language": "Go",
        "stars": 12896,
        "forks": 310,
        "created_at": "2024-03-19T15:49:52Z",
        "updated_at": "2025-03-07T08:50:30Z",
        "topics": [
            "bubbletea",
            "cli",
            "file-manager",
            "filemanager",
            "filesystem",
            "golang",
            "linux-app",
            "terminal-app",
            "terminal-based",
            "terminal-file-manager",
            "tui"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-06T04:05:35Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/774468912/db3881a5-05bd-4493-93b3-4da939b858ed"
        ],
        "homepage": "https://superfile.netlify.app",
        "readme_summary": "Superfile is a terminal-based file manager written in Go, designed to provide a modern and efficient way to navigate and manage files. It supports cross-platform usage (Linux, MacOS, and Windows) and offers features like customizable themes, plugin support, and hotkey customization to enhance the user experience.",
        "key_features": [
            "Terminal-based file management",
            "Cross-platform support (Linux, MacOS, Windows)",
            "Customizable themes",
            "Plugin support",
            "Hotkey customization"
        ],
        "primary_use_case": "Modern terminal-based file management for improved efficiency and organization.",
        "open_issues": 76,
        "cover_image_prompt": "A skilled cartographer in a high-tech workshop, meticulously organizing scattered files and documents into a beautifully structured, interactive map displayed on a large holographic table. The cartographer uses advanced tools to categorize and link files, creating a seamless and intuitive file management system. Small screens around the table show file paths and directory structures. The scene is set in a brightly lit, modern workspace with a clean and organized aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 872550457,
        "name": "Director",
        "description": "AI video agents framework for next-gen video interactions and workflows.",
        "url": "https://github.com/video-db/Director",
        "language": "Python",
        "stars": 783,
        "forks": 98,
        "created_at": "2024-10-14T16:22:12Z",
        "updated_at": "2025-03-07T01:46:56Z",
        "topics": [
            "agent",
            "agent-framework",
            "ai-agents",
            "framework",
            "llm",
            "openai",
            "rag",
            "search",
            "text-to-video",
            "video-editing",
            "video-processing",
            "videodb"
        ],
        "quality_score": 0.9500000000000001,
        "contributors_count": 0,
        "last_commit_date": "2025-03-05T05:38:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4ffadb4ce76eb2edc0463a238c6d81987efa6e2abc5b139b821ba5ef48c30bf1/video-db/Director"
        ],
        "homepage": "https://chat.videodb.io",
        "readme_summary": "Director is a framework for building AI-powered video agents that can automate complex video tasks. It leverages VideoDB's 'video-as-data' infrastructure and offers features like pre-built agents, a chat-based interface, and seamless integration with various AI tools, enabling users to simplify media workflows and unlock new possibilities in video processing and editing.",
        "key_features": [
            "20+ pre-built video agents that you can customize",
            "Sleek, chat-based interface with built-in video playback",
            "Seamless connection with powerful AI tools like LLMs, databases, and GenAI APIs"
        ],
        "primary_use_case": "Building video agents that can reason through complex video tasks like search, editing, compilation, and generation, and instantly stream the results.",
        "open_issues": 13,
        "cover_image_prompt": "Imagine a film director standing on a bustling movie set, orchestrating various scenes with multiple video screens displaying different clips. The director uses a tablet to issue natural language commands, which are instantly translated into complex video editing tasks being performed by AI assistants. The set is filled with subtle tech elements like glowing data streams and small code snippets overlaid on the video screens. The scene is set in a modern, high-tech studio with bright, focused lighting. The image should be in a 3D isometric illustration style with vibrant colors and crisp details, conveying a sense of seamless video creation and control."
    }
]