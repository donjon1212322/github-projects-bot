[
    {
        "id": 949513917,
        "name": "adb-mcp",
        "description": null,
        "url": "https://github.com/mikechambers/adb-mcp",
        "language": "JavaScript",
        "stars": 261,
        "forks": 34,
        "created_at": "2025-03-16T16:22:32Z",
        "updated_at": "2025-08-12T09:57:44Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-08-07T01:12:26Z",
        "media_urls": [
            "https://opengraph.githubassets.com/08c2388ce18bb08a4d7f208288eca63f385e1ef2298ed87b79c933d7ddc1715a/mikechambers/adb-mcp"
        ],
        "homepage": null,
        "readme_summary": "The adb-mcp repository is a proof-of-concept project that allows AI models to control Adobe Photoshop and Premiere Pro through the MCP protocol. It provides a MCP server, a Node-based proxy server, and Adobe UXP plugins to facilitate communication between AI clients and Adobe applications. This enables use cases such as conversational control of Adobe tools, automated task execution, and AI-driven template creation.",
        "key_features": [
            "Enables AI control of Adobe Photoshop and Premiere Pro via the MCP protocol.",
            "Provides a conversational interface for interacting with Adobe tools.",
            "Allows AI to automate tasks and create templates in Photoshop and Premiere.",
            "Offers a MCP Server that interfaces with AI/LLMs.",
            "Includes a Node-based command proxy server.",
            "Provides Adobe app plugins for Photoshop and Premiere."
        ],
        "primary_use_case": "Enabling AI/LLMs to control Adobe Photoshop and Premiere Pro for task automation, conversational interaction, and template creation.",
        "open_issues": 5,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony, but instead of musicians, they're directing Adobe Photoshop and Premiere Pro. The conductor's baton glows with digital energy, translating instructions from a floating AI assistant (represented by a friendly, glowing orb) into precise actions on the Adobe interfaces displayed on large screens. Visual cues like adjustment layers and video timelines subtly appear as musical notes and measures. The scene is set in a modern, minimalist studio with soft, diffused lighting. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 1007175454,
        "name": "browsernode",
        "description": "üåê Make websites accessible for AI agents. Automate tasks online with ease.",
        "url": "https://github.com/leoning60/browsernode",
        "language": "TypeScript",
        "stars": 187,
        "forks": 14,
        "created_at": "2025-06-23T15:19:13Z",
        "updated_at": "2025-08-12T10:00:31Z",
        "topics": [
            "ai-agents",
            "ai-tools",
            "browser-automation",
            "browsernode",
            "javascript",
            "llm",
            "playwright",
            "typescript"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-06T08:50:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5143499a0e72aed3862a88fcb7e735bdba1a2929154025f1fa234aca4b2d48d1/leoning60/browsernode"
        ],
        "homepage": "https://browsernode.com/",
        "readme_summary": "Browsernode is a TypeScript library that allows AI agents to control web browsers, enabling automation of online tasks. It is compatible with Browser-use APIs and offers examples for various use cases, including data extraction and document creation. The library supports both CommonJS and ESM module styles.",
        "key_features": [
            "Enables AI agents to interact with websites.",
            "Automates online tasks.",
            "Compatible with Browser-use APIs.",
            "Provides both CommonJS and ESM style examples.",
            "Includes demos for custom functions and use cases."
        ],
        "primary_use_case": "Connecting AI agents with web browsers to automate tasks and access online information.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled navigator piloting a browser-shaped ship through a vast ocean of websites, guided by a glowing AI compass. The ship efficiently collects data from various online destinations, represented by floating islands with distinct visual themes. Subtle UI elements and code snippets are integrated into the ship's design, symbolizing the underlying technology. The scene is set under a bright, optimistic sky with a clean, focused composition. The image should be in a 3D isometric illustration style with vibrant colors and rich details."
    },
    {
        "id": 1006445678,
        "name": "unhype",
        "description": "Browser extension to unhype/neutralise headers on the web ",
        "url": "https://github.com/av/unhype",
        "language": "TypeScript",
        "stars": 62,
        "forks": 4,
        "created_at": "2025-06-22T09:37:18Z",
        "updated_at": "2025-08-12T01:08:34Z",
        "topics": [
            "browser-extension",
            "llm",
            "web"
        ],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-08-03T19:12:41Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c573b823f18410ce03bcc800b6215fc88bb09b6faaa6395c022ba4d828aff984/av/unhype"
        ],
        "homepage": "",
        "readme_summary": "The unhype browser extension neutralizes sensational headlines on web pages using LLM technology. It allows users to configure which content is processed and supports multiple LLM providers, including Ollama, OpenRouter, and Mistral AI. The extension aims to provide a more balanced and factual reading experience by removing hype from online content.",
        "key_features": [
            "Unhypes/neutralizes headers on the web",
            "Configurable content selection via selectors",
            "LLM integration for content transformation",
            "Support for multiple LLM providers (Ollama, OpenRouter, Mistral AI)"
        ],
        "primary_use_case": "Neutralizing sensational or exaggerated headlines on web pages to provide a more balanced and factual reading experience.",
        "open_issues": 2,
        "cover_image_prompt": "A librarian meticulously replacing sensational headlines in books with neutral, factual statements. The librarian uses a special 'unhype' stamp on each headline, transforming exaggerated text into clear, concise language. Bookshelves are filled with both 'hyped' and 'unhyped' books, visually demonstrating the transformation. Small screens display browser interfaces with the extension active, subtly showing the before-and-after effect on web pages. The scene is set in a bright, modern library with a clean, organized aesthetic. The image should be in flat design style with clear iconography and a calming color scheme."
    },
    {
        "id": 1034865400,
        "name": "polygon-screenshot-tool",
        "description": "There aren't any screenshot tool in market that has polygon feature, like you draw bunch of straight lines to enclsoe the area you want to take screenshot of",
        "url": "https://github.com/sultanate-sultan/polygon-screenshot-tool",
        "language": "Python",
        "stars": 10,
        "forks": 0,
        "created_at": "2025-08-09T06:18:02Z",
        "updated_at": "2025-08-12T09:48:26Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-08-09T11:06:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0ba03345a0ad66ffb6b7348c3f5ec993bec66c088ca7f6c74b2014b0357f5f97/sultanate-sultan/polygon-screenshot-tool"
        ],
        "homepage": null,
        "readme_summary": "The Polygon Screenshot Tool is a Windows service that allows users to capture screenshots of irregular shapes defined by drawing a polygon. It runs in the system tray, is activated by a global hotkey, and copies the captured image directly to the clipboard, offering a fast and lightweight solution for capturing specific areas of the screen.",
        "key_features": [
            "Polygon Selection",
            "Global Hotkey Activation",
            "System Tray Integration",
            "High-DPI Support",
            "Clipboard Integration"
        ],
        "primary_use_case": "Capturing screenshots of polygon-defined areas on Windows.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled cartographer meticulously tracing a jagged coastline on a digital map with a glowing stylus. The stylus emits a beam of light that precisely captures the irregular shape, transforming it into a clean, defined area. A small screen in the corner displays the captured polygon being copied to a clipboard icon. The scene is set in a bright, modern design studio with a focus on precision and clarity. Subtle digital particles float around the stylus, emphasizing the technology involved. The repository name, 'Polygon Screenshot Tool,' is subtly displayed on the map. The image should be in a flat design style with clear iconography and a vibrant color scheme."
    },
    {
        "id": 208728772,
        "name": "milvus",
        "description": "Milvus is a high-performance, cloud-native vector database built for scalable vector ANN search",
        "url": "https://github.com/milvus-io/milvus",
        "language": "Go",
        "stars": 36505,
        "forks": 3341,
        "created_at": "2019-09-16T06:43:43Z",
        "updated_at": "2025-08-12T09:45:43Z",
        "topics": [
            "anns",
            "cloud-native",
            "diskann",
            "distributed",
            "embedding-database",
            "embedding-similarity",
            "embedding-store",
            "faiss",
            "golang",
            "hnsw",
            "image-search",
            "llm",
            "nearest-neighbor-search",
            "rag",
            "vector-database",
            "vector-search",
            "vector-similarity",
            "vector-store"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-08-12T03:37:42Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/208728772/998c09ca-cfa6-4c01-ac75-3dfad7f4862b"
        ],
        "homepage": "https://milvus.io",
        "readme_summary": "Milvus is a high-performance, cloud-native vector database designed for scalable vector ANN search. It excels at organizing and searching large volumes of unstructured data, supporting various AI applications. Milvus offers features like hardware acceleration, distributed architecture, real-time updates, and a lightweight Python version for quick starts.",
        "key_features": [
            "High-performance vector database",
            "Scalable vector ANN search",
            "Cloud-native architecture",
            "Hardware acceleration (CPU/GPU)",
            "Fully-distributed and K8s-native",
            "Real-time streaming updates",
            "Standalone mode",
            "Milvus Lite (Python quickstart)"
        ],
        "primary_use_case": "Efficiently organizing and searching vast amounts of unstructured data (text, images, multi-modal) for AI applications.",
        "open_issues": 562,
        "cover_image_prompt": "Imagine a vast library where books are represented by glowing orbs of light, each containing unique information. A scholar, equipped with a special lens, effortlessly searches and retrieves specific orbs based on their similarity to a query orb. The lens displays a UI showing the search results and similarity scores. The library is powered by a network of interconnected nodes, subtly hinting at the distributed nature of the system. The scene is bathed in soft, ethereal light, creating a sense of knowledge and discovery. The image should be in a 3D isometric illustration style with clean lines and vibrant colors, subtly incorporating the Milvus logo."
    },
    {
        "id": 5349565,
        "name": "presto",
        "description": "The official home of the Presto distributed SQL query engine for big data",
        "url": "https://github.com/prestodb/presto",
        "language": "Java",
        "stars": 16440,
        "forks": 5484,
        "created_at": "2012-08-09T01:03:37Z",
        "updated_at": "2025-08-12T10:10:12Z",
        "topics": [
            "big-data",
            "data",
            "hadoop",
            "hive",
            "java",
            "lakehouse",
            "presto",
            "query",
            "sql"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-08-12T07:05:58Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/5349565/33e38c80-023e-11ea-96e6-40042ef6e9c7"
        ],
        "homepage": "http://prestodb.io",
        "readme_summary": "Presto is a distributed SQL query engine designed for big data analytics. It allows users to query data stored in various sources, such as Hive and Hadoop, using standard SQL. The project is built with Java and uses Maven for dependency management and building.",
        "key_features": [
            "Distributed SQL query engine",
            "Big data processing",
            "Supports Java 8+",
            "Maven build system",
            "Hive connector"
        ],
        "primary_use_case": "Analyzing large datasets using SQL queries across distributed systems.",
        "open_issues": 1821,
        "cover_image_prompt": "Imagine a skilled cartographer meticulously charting a vast, interconnected lake system. The cartographer, equipped with a high-powered telescope and advanced mapping tools, is carefully documenting each lake, river, and stream, representing diverse data sources. Glowing lines connect the lakes, symbolizing SQL queries traversing the data. Subtle UI elements float nearby, displaying query code and results. The scene is set in a futuristic observatory overlooking the expansive lake system, bathed in the soft glow of data streams. The illustration should be in a 3D isometric style, emphasizing clarity and detail with a cool, analytical color palette."
    },
    {
        "id": 28473847,
        "name": "walrus",
        "description": "Lightweight Python utilities for working with Redis",
        "url": "https://github.com/coleifer/walrus",
        "language": "Python",
        "stars": 1182,
        "forks": 92,
        "created_at": "2014-12-25T06:54:09Z",
        "updated_at": "2025-08-11T22:33:41Z",
        "topics": [
            "autocomplete",
            "database",
            "full-text-search",
            "orm",
            "python",
            "redis"
        ],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-07-05T13:44:23Z",
        "media_urls": [
            "https://opengraph.githubassets.com/9ce6e249492c67217acdcd948560f4ab4048af885befcf436dd59ea0f2292f6e/coleifer/walrus"
        ],
        "homepage": "https://walrus.readthedocs.org/",
        "readme_summary": "Walrus is a Python library that simplifies working with Redis by extending the popular redis-py client. It provides Pythonic container classes for Redis data types, along with features like autocomplete, caching, full-text search, graph store, and experimental models, making it easier to build applications that leverage Redis.",
        "key_features": [
            "Pythonic container classes for Redis data types",
            "Autocomplete",
            "Cache implementation with decorators",
            "Full-text search",
            "Graph store",
            "Rate-limiting",
            "Locking",
            "Experimental Models with secondary indexes",
            "Streams support"
        ],
        "primary_use_case": "Simplifying interaction with Redis in Python by extending redis-py with higher-level abstractions and additional features.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously crafting intricate glass sculptures, each representing a different Redis data structure (Hash, List, Set, etc.). The artisan uses glowing tools that subtly resemble Python code snippets to shape the glass. Finished sculptures are placed on a display shelf, each labeled with its corresponding data type. A faint digital grid overlays the scene, connecting the sculptures to a virtual database. The scene is set in a brightly lit workshop with a clean, organized aesthetic. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    }
]