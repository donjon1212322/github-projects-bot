[
    {
        "id": 472962423,
        "name": "TxtNet-Browser",
        "description": "An app that lets you browse the web over SMS",
        "url": "https://github.com/lukeaschenbrenner/TxtNet-Browser",
        "language": "Java",
        "stars": 1210,
        "forks": 29,
        "created_at": "2022-03-22T22:50:34Z",
        "updated_at": "2025-04-27T08:15:04Z",
        "topics": [],
        "quality_score": 0.6,
        "contributors_count": 0,
        "last_commit_date": "2025-03-02T20:23:48Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f5164965764f54e36eb67d40363f4310a91f4ef22eb3e27c3cdfd7ce133762b3/lukeaschenbrenner/TxtNet-Browser"
        ],
        "homepage": "",
        "readme_summary": "TxtNet Browser is an Android app that enables web browsing via SMS, eliminating the need for WiFi or mobile data. It achieves this by compressing HTML responses using Brotli and encoding them with a custom Base-114 format. The app also includes TxtNet Server, allowing users to host their own SMS-based web browsing service.",
        "key_features": [
            "Browse the web over SMS",
            "No WiFi or mobile data required",
            "Uses Brotli compression",
            "Custom Base-114 encoding",
            "Removes media content, JavaScript, and CSS",
            "Includes TxtNet Server for hosting your own server"
        ],
        "primary_use_case": "Browsing the web over SMS when no WiFi or mobile data is available.",
        "open_issues": 8,
        "cover_image_prompt": "An explorer in a dense jungle, holding up a magnifying glass to a vine-covered wall. The wall is etched with faint website URLs. The explorer's smartphone displays a simple SMS interface, receiving text messages that gradually reveal the website content on the wall. Small digital particles flow from the phone to the wall, enhancing the clarity of the revealed content. The scene is set in a lush, vibrant jungle with dappled sunlight. The image should be in a detailed digital painting style with a focus on clear outlines and intuitive visual elements."
    },
    {
        "id": 654870350,
        "name": "SpacetimeDB",
        "description": "Multiplayer at the speed of light",
        "url": "https://github.com/clockworklabs/SpacetimeDB",
        "language": "Rust",
        "stars": 15161,
        "forks": 489,
        "created_at": "2023-06-17T07:28:29Z",
        "updated_at": "2025-04-27T09:37:10Z",
        "topics": [
            "database",
            "dataoriented",
            "game-development",
            "relational",
            "relational-database",
            "smart-contracts"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-24T00:54:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/a4cf7396a8da38962cb2875d080136eadae76031f7513b4d683266f73505c01f/clockworklabs/SpacetimeDB"
        ],
        "homepage": "https://spacetimedb.com",
        "readme_summary": "SpacetimeDB is a relational database designed for building multiplayer applications. It focuses on providing real-time data synchronization and supports features like smart contracts, making it suitable for game development and other collaborative applications. The core concept is to enable multiplayer experiences with minimal latency.",
        "key_features": [
            "Multiplayer database",
            "Real-time data synchronization",
            "Relational database",
            "Smart contract integration",
            "Game development support"
        ],
        "primary_use_case": "Building multiplayer applications with real-time data synchronization.",
        "open_issues": 345,
        "cover_image_prompt": "Imagine a bustling intergalactic train station where data packets, resembling miniature spaceships, arrive from various planets. A central control tower, labeled \"SpacetimeDB,\" efficiently sorts and routes these packets in real-time, ensuring seamless communication between different worlds. The tower glows with a soft, ethereal light, and holographic displays show data flowing smoothly. Small UI elements on the tower show database queries and transaction logs. The scene is set against a backdrop of swirling nebulae and distant galaxies. The image should be in 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 168725504,
        "name": "ml-course",
        "description": "Open Machine Learning course",
        "url": "https://github.com/girafe-ai/ml-course",
        "language": "Jupyter Notebook",
        "stars": 3056,
        "forks": 1221,
        "created_at": "2019-02-01T16:20:39Z",
        "updated_at": "2025-04-27T10:03:47Z",
        "topics": [
            "computer-vision",
            "course",
            "deep-learning",
            "machine-learning",
            "materials",
            "natural-language-processing",
            "python",
            "pytorch",
            "reinforcement-learning",
            "seminars"
        ],
        "quality_score": 0.45,
        "contributors_count": 0,
        "last_commit_date": "2024-08-24T16:37:56Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0151576757fb1d37749699ded9082c5c1f5e1b99c6b889d80da0a001b1e3e545/girafe-ai/ml-course"
        ],
        "homepage": "",
        "readme_summary": "This repository hosts materials for an open Machine Learning course, including lecture recordings, slides, and homework assignments. It covers a range of topics from introductory concepts like Naive Bayes and kNN to more advanced topics like Deep Learning and Gradient Boosting. The course provides a structured learning path with deadlines for assignments.",
        "key_features": [
            "Lectures and seminar recordings",
            "Slides",
            "Homework assignments",
            "Deadlines",
            "Course materials"
        ],
        "primary_use_case": "Providing materials and resources for a Machine Learning course.",
        "open_issues": 20,
        "cover_image_prompt": "Imagine a grand library where each book represents a machine learning concept. A student sits at a table, illuminated by a soft glow, carefully studying these books. As they learn, the knowledge from the books transforms into glowing, interconnected neural networks that float around them, visualizing the concepts. Subtle UI elements on the table display code snippets and data visualizations related to the course material. The library has a warm, inviting atmosphere with a focus on learning and discovery. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 764979648,
        "name": "godoxy",
        "description": "Easy to use reverse proxy with docker integration",
        "url": "https://github.com/yusing/godoxy",
        "language": "Go",
        "stars": 1701,
        "forks": 68,
        "created_at": "2024-02-29T03:52:35Z",
        "updated_at": "2025-04-27T05:50:19Z",
        "topics": [
            "docker",
            "go",
            "golang",
            "homepage",
            "letsencrypt",
            "microservice",
            "reverse-proxy",
            "self-hosted",
            "startpage"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-26T01:48:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/81ca5774e06089a3fd755cd0e1b43721320199cf027f133b5113ca9b0d94ec5f/yusing/godoxy"
        ],
        "homepage": "",
        "readme_summary": "GoDoxy is a lightweight and performant reverse proxy designed for easy integration with Docker. It offers features like automatic SSL certificate management with Let's Encrypt, connection-level access control, and an intuitive WebUI for configuration and monitoring. GoDoxy simplifies the process of exposing and securing microservices.",
        "key_features": [
            "Reverse proxy",
            "Docker integration",
            "WebUI",
            "Automatic SSL certificate management (Let's Encrypt)",
            "ACL (IP/CIDR, Country, Timezone)",
            "Idle-sleep for Docker containers and Proxmox LXCs",
            "OpenID Connect support",
            "HTTP middlewares",
            "Custom error pages"
        ],
        "primary_use_case": "Simplifying reverse proxy setup and management for Dockerized applications, including automatic SSL certificate management, access control, and traffic management features.",
        "open_issues": 11,
        "cover_image_prompt": "Imagine a skilled traffic controller orchestrating a bustling city of microservices. The controller, representing GoDoxy, stands at a central hub, directing streams of data (glowing particles) flowing between various buildings (microservices). Some buildings have open doors (public access), while others require keys (authentication). The controller uses a dashboard with real-time metrics and logs to optimize traffic flow and ensure security. The city is bathed in a soft, futuristic glow, with subtle UI elements overlaid on the buildings. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 342373648,
        "name": "tcping",
        "description": "Ping TCP ports using tcping. Inspired by Linux's ping utility. Written in Go",
        "url": "https://github.com/pouriyajamshidi/tcping",
        "language": "Go",
        "stars": 849,
        "forks": 75,
        "created_at": "2021-02-25T20:42:42Z",
        "updated_at": "2025-04-27T08:18:15Z",
        "topics": [
            "command-line-tool",
            "golang",
            "latency-monitor",
            "linux",
            "macos",
            "networking",
            "ping",
            "tcp",
            "tcping",
            "windows"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-14T19:37:24Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/342373648/3e45b20d-6847-402c-8321-b7fbd9125b7a"
        ],
        "homepage": "",
        "readme_summary": "TCPING is a cross-platform ping utility that uses TCP instead of ICMP, making it suitable for environments where ICMP is blocked. It offers various output formats like JSON and CSV, and allows users to monitor network latency, packet loss, and connection quality. It supports IPv4/IPv6, and provides real-time connection statistics.",
        "key_features": [
            "TCP ping instead of ICMP when ICMP is blocked",
            "Colored, plain, JSON, CSV, and sqlite3 output formats",
            "Network latency, packet loss, and connection quality monitoring",
            "Source interface, timeout, and interval specification",
            "IPv4 and IPv6 support",
            "Real-time connection statistics",
            "Downtime and uptime reporting",
            "Retries hostname resolution",
            "Different TCP sequence numbering for successful and unsuccessful probes"
        ],
        "primary_use_case": "Monitor network latency and connection quality using TCP, especially in environments where ICMP is blocked.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled doctor using a stethoscope to listen to the heartbeat of a server rack. The stethoscope is connected to a UI displaying real-time latency data and connection quality metrics. Wires act as veins, connecting the server to a monitor showing a detailed network topology. The doctor wears a lab coat with the 'TCPING' logo subtly embroidered. The scene is set in a clean, modern server room with soft, diffused lighting. Small screens display JSON output and connection statistics. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 304836585,
        "name": "ezbookkeeping",
        "description": "A lightweight personal bookkeeping app hosted by yourself.",
        "url": "https://github.com/mayswind/ezbookkeeping",
        "language": "Go",
        "stars": 685,
        "forks": 81,
        "created_at": "2020-10-17T08:54:02Z",
        "updated_at": "2025-04-27T08:17:56Z",
        "topics": [
            "account-book",
            "accounting",
            "app",
            "bookkeeping",
            "cash-flow",
            "cashflow",
            "docker",
            "finances",
            "financial",
            "golang",
            "mobile",
            "money",
            "money-management",
            "money-manager",
            "moneytracker",
            "personal",
            "personal-finance",
            "self-hosted",
            "typescript",
            "vue"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-26T16:08:01Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/304836585/b54a8e74-4f66-4f6a-95ec-91940bb9f3d7"
        ],
        "homepage": "https://ezbookkeeping.mayswind.net",
        "readme_summary": "ezBookkeeping is a lightweight, self-hosted personal finance application designed for ease of use on both desktop and mobile devices. It offers features such as multi-database support, Docker deployment, two-factor authentication, and data import/export, making it a versatile solution for managing personal finances.",
        "key_features": [
            "Self-hosted",
            "Lightweight",
            "Docker support",
            "Multi-database support (SQLite, MySQL, PostgreSQL)",
            "Cross-platform (Windows, macOS, Linux)",
            "Mobile-friendly (PWA)",
            "Two-factor authentication",
            "Data export/import (CSV, OFX, QFX, QIF, IIF, GnuCash, FireFly III, Beancount)"
        ],
        "primary_use_case": "Personal bookkeeping and financial management.",
        "open_issues": 11,
        "cover_image_prompt": "A meticulous accountant, illuminated by a soft glow, balances a set of scales. On one side, digital coins representing income flow into a sleek, modern ledger. On the other, expenses, depicted as stylized bills and receipts, are carefully organized. A subtle overlay of a mobile app interface displays real-time financial data. The scene is set in a minimalist office with a warm, inviting atmosphere. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity."
    },
    {
        "id": 423339082,
        "name": "nwinfo",
        "description": "Hardware information utility for Windows",
        "url": "https://github.com/a1ive/nwinfo",
        "language": "C",
        "stars": 286,
        "forks": 26,
        "created_at": "2021-11-01T04:39:45Z",
        "updated_at": "2025-04-27T03:57:43Z",
        "topics": [
            "acpi",
            "cpu",
            "hardware",
            "pci",
            "smbios",
            "usb",
            "windows"
        ],
        "quality_score": 0.7499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-04-26T12:42:17Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e03ed2919df9a69eb712a34a79663b277f0846a3398c2497287235c165db70ec/a1ive/nwinfo"
        ],
        "homepage": "https://a1ive.github.io/nwinfo/",
        "readme_summary": "NWinfo is a Win32 program designed to retrieve comprehensive system and hardware details. It gathers information directly, bypassing WMI, and supports various export formats like JSON, YAML, and LUA. The tool is compatible with older Windows versions, including Windows XP.",
        "key_features": [
            "Obtains detailed system and hardware information (SMBIOS, CPUID, S.M.A.R.T., PCI, EDID)",
            "Supports exporting data in JSON, YAML, and LUA formats",
            "Gathers information directly without relying on WMI",
            "Compatible with Windows XP"
        ],
        "primary_use_case": "Obtaining system and hardware information on Windows systems.",
        "open_issues": 3,
        "cover_image_prompt": "Imagine a curious librarian in a vast, glowing digital library, meticulously organizing scattered books (representing hardware components) onto shelves labeled with glowing icons (CPU, Disk, USB, etc.). The librarian uses a magnifying glass that displays detailed information about each book on a small, holographic screen. The library is filled with soft, ambient light, and subtle data streams flow between the shelves. The repository name, 'NWinfo,' is subtly etched onto the librarian's desk. The image should be in a 3D isometric illustration style with clean lines, vibrant colors, and a focus on clarity and detail."
    },
    {
        "id": 111241370,
        "name": "capacitor",
        "description": "Build cross-platform Native Progressive Web Apps for iOS, Android, and the Web ⚡️",
        "url": "https://github.com/ionic-team/capacitor",
        "language": "TypeScript",
        "stars": 13135,
        "forks": 1051,
        "created_at": "2017-11-18T21:38:09Z",
        "updated_at": "2025-04-27T08:18:17Z",
        "topics": [
            "android",
            "capacitor",
            "cordova",
            "cross-platform",
            "css",
            "html",
            "ionic",
            "ios",
            "java",
            "javascript",
            "pwa",
            "swift"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-04-21T18:09:42Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/111241370/ed127b80-fe7d-11ea-9676-2438b27aca94"
        ],
        "homepage": "https://capacitorjs.com",
        "readme_summary": "Capacitor enables developers to build cross-platform applications for iOS, Android, and the web from a single codebase. It provides a unified API for accessing native features and supports the creation of native plugins. Capacitor also offers first-class PWA support, allowing applications to be deployed to both app stores and the mobile web.",
        "key_features": [
            "Cross-platform development for iOS, Android, and Web",
            "Single codebase for multiple platforms",
            "Cross-platform API for accessing native SDKs",
            "Native plugin support (Swift, Kotlin/Java)",
            "Progressive Web App (PWA) support",
            "Cordova plugin compatibility"
        ],
        "primary_use_case": "Building cross-platform native Progressive Web Apps using web technologies like JavaScript, HTML, and CSS.",
        "open_issues": 183,
        "cover_image_prompt": "A skilled architect overseeing the construction of a modern building, seamlessly blending web components (represented by glowing, interconnected blocks) with native mobile platforms (represented by stylized iOS and Android devices). The architect holds a blueprint displaying JavaScript code, symbolizing the unified codebase. Digital particles flow between the web components and native platforms, indicating cross-platform compatibility. The scene is set in a bright, futuristic cityscape with a clean, minimalist aesthetic. Small UI elements are subtly incorporated into the building's design. The image should be in a flat design style with clear iconography and vibrant colors."
    }
]