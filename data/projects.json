[
    {
        "id": 438267145,
        "name": "quiet",
        "description": "A private, p2p alternative to Slack and Discord built on Tor & IPFS",
        "url": "https://github.com/TryQuiet/quiet",
        "language": "C",
        "stars": 2136,
        "forks": 98,
        "created_at": "2021-12-14T13:40:02Z",
        "updated_at": "2025-06-21T09:57:57Z",
        "topics": [
            "chat",
            "collaboration",
            "decentralized",
            "discord-alternatives",
            "ipfs",
            "local-first",
            "p2p",
            "privacy",
            "slack-alternative"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-06-19T17:23:30Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/438267145/6414416f-0916-4a8f-ba1d-0c4e93c1b7c0"
        ],
        "homepage": "https://www.tryquiet.org",
        "readme_summary": "Quiet is a decentralized, peer-to-peer team chat application built on Tor. It offers end-to-end encryption and eliminates the need for a central server, providing a private alternative to traditional team communication platforms like Slack and Discord. Users can create communities and communicate directly with each other, ensuring data privacy and control.",
        "key_features": [
            "Team Chat",
            "End-to-end Encryption",
            "Channels",
            "Decentralized communication over Tor",
            "No central server required"
        ],
        "primary_use_case": "Private, p2p team communication as an alternative to Slack and Discord.",
        "open_issues": 587,
        "cover_image_prompt": "Imagine a group of travelers huddled around a campfire in a dense forest, sharing stories and maps that glow with soft light. Each traveler holds a unique piece of a larger, interconnected map, representing the decentralized nature of the chat. Above them, a network of glowing, interconnected nodes symbolizes the Tor network, ensuring their privacy. Subtle UI elements float around the campfire, showing chat bubbles and encrypted messages. The scene is set at twilight, with a warm, inviting glow emanating from the campfire. The image should be in a detailed digital painting style with a focus on atmosphere and clear visual storytelling."
    },
    {
        "id": 968818186,
        "name": "doc2image",
        "description": "Turn your documents into stunning AI-generated images.",
        "url": "https://github.com/dylannalex/doc2image",
        "language": "Python",
        "stars": 20,
        "forks": 5,
        "created_at": "2025-04-18T19:43:28Z",
        "updated_at": "2025-06-21T07:29:47Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-18T02:18:09Z",
        "media_urls": [
            "https://opengraph.githubassets.com/03d1bf00d4fd1edf1576bd90c8d8928e4854dede188dda43cd06f146b2e948f6/dylannalex/doc2image"
        ],
        "homepage": "",
        "readme_summary": "Doc2Image is an AI-powered application that converts documents into creative image prompts. It extracts key points from uploaded files and generates visual descriptions suitable for use with platforms like MidJourney and DALLÂ·E. The application supports both OpenAI and local models, offering a flexible and customizable experience for users to create stunning AI-generated images.",
        "key_features": [
            "Intuitive interface",
            "Quick setup",
            "Flexible AI support (OpenAI & local models)",
            "Prompt history",
            "Customizable settings"
        ],
        "primary_use_case": "Transforming documents into image generation prompts for AI art platforms.",
        "open_issues": 0,
        "cover_image_prompt": "An artist sitting at a digital easel, using a document as inspiration to paint a vibrant landscape. The document's text flows from the page and transforms into brushstrokes on the canvas, creating a beautiful scene. Small UI elements show the document being processed and prompts being generated. The scene is set in a bright, airy studio with natural light. The image should be in a digital painting style with clear outlines and rich colors, reminiscent of impressionism. The repository name 'Doc2Image' is subtly displayed on the easel."
    },
    {
        "id": 1004995740,
        "name": "claudia",
        "description": "A powerful GUI app and Toolkit for Claude Code - Create custom agents, manage interactive Claude Code sessions, run secure background agents, and more.",
        "url": "https://github.com/getAsterisk/claudia",
        "language": "TypeScript",
        "stars": 897,
        "forks": 66,
        "created_at": "2025-06-19T13:53:26Z",
        "updated_at": "2025-06-21T10:02:30Z",
        "topics": [
            "anthropic",
            "anthropic-claude",
            "claude",
            "claude-4",
            "claude-4-opus",
            "claude-4-sonnet",
            "claude-ai",
            "claude-code",
            "claude-code-sdk",
            "cursor",
            "ide",
            "llm",
            "llm-code",
            "rust",
            "tauri"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-06-19T14:24:00Z",
        "media_urls": [
            "https://opengraph.githubassets.com/c8da1e98f642e5c166ccd0d0ac258eb00d97dc01a6a321c063bb1da946ca6990/getAsterisk/claudia"
        ],
        "homepage": "https://claudia.asterisk.so",
        "readme_summary": "Claudia is a desktop application that provides a GUI for managing Claude Code sessions, creating custom AI agents, and tracking usage. It offers features like project management, advanced sandboxing, and usage analytics, aiming to bridge the gap between command-line tools and a visual experience for AI-assisted development.",
        "key_features": [
            "Project & Session Management",
            "Custom AI Agents",
            "Advanced Sandboxing",
            "Usage Analytics Dashboard",
            "MCP Server Management",
            "Timeline & Checkpoints",
            "CLAUDE.md Management"
        ],
        "primary_use_case": "GUI application and toolkit for managing Claude Code sessions and creating custom AI agents.",
        "open_issues": 11,
        "cover_image_prompt": "A skilled architect at a digital drafting table, designing and managing blueprints for a futuristic city made of code. The architect uses a GUI on a large screen to create custom AI agents represented as miniature robots, each with unique functions. The city's infrastructure glows with data streams, showing real-time usage analytics. The architect's table displays a timeline of project checkpoints and security protocols. The scene is set in a bright, modern studio with holographic displays. The image should be in a clean, 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 692417299,
        "name": "subs-share",
        "description": null,
        "url": "https://github.com/dcindia/subs-share",
        "language": "HTML",
        "stars": 2,
        "forks": 0,
        "created_at": "2023-09-16T12:14:31Z",
        "updated_at": "2025-06-20T17:21:30Z",
        "topics": [],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-06-15T17:12:51Z",
        "media_urls": [
            "https://opengraph.githubassets.com/b68b43d09913b54e638f91a1b29621db19fb64890b01a2983bfb85c7dd773c4e/dcindia/subs-share"
        ],
        "homepage": "https://subsshare.005552.xyz",
        "readme_summary": "This repository provides a way to share your YouTube channel subscriptions with others. It allows users to see, hide, group, and arrange their subscribed channels, and add custom descriptions. The primary use case is to facilitate the discovery of interesting YouTube channels among friends and the wider community.",
        "key_features": [
            "See subscribed channels",
            "Hide selected channels",
            "Group channels for better organisation",
            "Arrange your channels in order you like",
            "Add custom description for any channel"
        ],
        "primary_use_case": "Sharing and discovering YouTube channel subscriptions with friends and others.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a digital town square where people gather around a central 'YouTube Stage'. Individuals are handing over their 'Subscription Lists' (represented as glowing scrolls) to a curator. The curator organizes these lists, creating personalized 'Channel Guides' (illustrated as maps with highlighted routes) which are then displayed on the stage for others to discover. Small UI elements float around the stage, showing channel logos and subscriber counts. The scene is set in a bright, inviting digital space with a warm color scheme. The image should be in a flat design style with clear iconography and subtle digital particles."
    },
    {
        "id": 882401154,
        "name": "AirRemote-Frontend",
        "description": null,
        "url": "https://github.com/jugeekuz/AirRemote-Frontend",
        "language": "JavaScript",
        "stars": 49,
        "forks": 1,
        "created_at": "2024-11-02T18:15:15Z",
        "updated_at": "2025-06-21T08:31:00Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-04-25T19:48:37Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8fc97ef3ed7b4322739c2673bd56b406adcb501c5f5e2f633b1549a0e6f0279e/jugeekuz/AirRemote-Frontend"
        ],
        "homepage": null,
        "readme_summary": "AirRemote is a solution that transforms traditional IR-controlled devices into smart devices accessible via a web interface. It allows users to record IR signals from existing remotes, replay them remotely, and create automations for scheduled operations. The system also includes a captive portal for easy device setup and a web interface for managing connected devices.",
        "key_features": [
            "Record IR signals from existing remote controls.",
            "Replay stored signals via a web interface.",
            "Create automations for scheduled operations.",
            "Captive Portal interface for device initialization and credential provisioning.",
            "Manage, delete, and reorder devices through the web interface."
        ],
        "primary_use_case": "Modernizing legacy remote-controlled devices by making them smart and remotely accessible.",
        "open_issues": 1,
        "cover_image_prompt": "An elderly inventor in a cozy workshop, surrounded by vintage remote controls, magically transforming them into glowing, modern smartphone interfaces. The inventor holds a universal remote-like device that emits beams of light, connecting to various old appliances (TV, AC, heater), each now displaying a sleek, digital control panel. Subtle UI elements float around the scene, showing automation schedules and device management screens. The workshop is filled with wires, circuit boards, and a faint blue glow emanating from the connected devices. The image should be in a 3D isometric illustration style with warm lighting and vibrant colors, conveying a sense of nostalgia meeting innovation."
    },
    {
        "id": 991014182,
        "name": "Chain-Fox",
        "description": "Chain-Fox: An all-in-one platform with automatic security detection ability for blockchains and smart contracts",
        "url": "https://github.com/Chain-Fox/Chain-Fox",
        "language": "Rust",
        "stars": 559,
        "forks": 3,
        "created_at": "2025-05-27T02:07:28Z",
        "updated_at": "2025-06-21T05:46:23Z",
        "topics": [],
        "quality_score": 0.8,
        "contributors_count": 0,
        "last_commit_date": "2025-06-07T12:46:20Z",
        "media_urls": [
            "https://opengraph.githubassets.com/ae00d63aaeaedfcf4e99548c5ff4134e2a01e7673f91b2f42f6ceb1d430740a0/Chain-Fox/Chain-Fox"
        ],
        "homepage": null,
        "readme_summary": "Chain-Fox is an all-in-one platform designed to provide automated security detection for blockchains and smart contracts. It supports multiple languages and offers a range of checkers to identify various bug types, aiming to make blockchain security more accessible and affordable. The platform also focuses on integrating with CI/CD pipelines and the broader web3 ecosystem.",
        "key_features": [
            "Automatic security detection for blockchains and smart contracts",
            "Support for multiple languages (Rust, Go, Solidity, C++)",
            "Integration with CI/CD pipelines",
            "Rule engine for improved accuracy",
            "API for web3 ecosystem integration"
        ],
        "primary_use_case": "Automated security analysis of blockchain and smart contract projects.",
        "open_issues": 6,
        "cover_image_prompt": "A skilled detective fox wearing a magnifying glass examines a complex network of interconnected blocks, representing a blockchain. The fox carefully inspects each block for vulnerabilities, symbolized by cracks and glitches. Upon detecting a flaw, the fox highlights it with a beam of light, indicating a security issue. The background features subtle UI elements and code snippets, subtly connecting the scene to software. The scene is set in a futuristic, high-tech environment with a focus on clarity and precision. The composition is clean and focused with a blue and green color scheme. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 509970897,
        "name": "tailspin",
        "description": "ð A log file highlighter",
        "url": "https://github.com/bensadeh/tailspin",
        "language": "Rust",
        "stars": 6395,
        "forks": 110,
        "created_at": "2022-07-03T08:56:53Z",
        "updated_at": "2025-06-21T08:51:16Z",
        "topics": [
            "colorizer",
            "colors",
            "file",
            "follow",
            "highlighter",
            "less",
            "log",
            "log-file",
            "logfile",
            "syntax-highlighting",
            "tail"
        ],
        "quality_score": 0.8499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-06-16T05:04:58Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/509970897/880c8609-c430-4545-a1bc-e9d6bf142e78"
        ],
        "homepage": "",
        "readme_summary": "Tailspin is a log file highlighter that automatically identifies and color-codes key elements within log files, such as dates, numbers, and URLs. It requires no configuration and integrates seamlessly with existing command-line workflows, leveraging `less` for viewing. Tailspin enhances log readability and analysis by providing customizable highlighting for various data types.",
        "key_features": [
            "Views and tails any log file format",
            "Requires no setup or configuration",
            "Highlights numbers, dates, IP addresses, UUIDs, URLs, and more",
            "Offers customizable highlight groups",
            "Integrates easily with other commands",
            "Uses less under the hood"
        ],
        "primary_use_case": "Highlighting and viewing log files of any format without requiring configuration.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a skilled artisan meticulously highlighting sections of an ancient scroll with vibrant inks, transforming it into a beautifully illuminated manuscript. The scroll represents a complex log file, and the artisan's tools are digital, subtly incorporating UI elements and glowing data streams. The scene is set in a cozy, sunlit workshop filled with shelves of colorful inks and digital displays showing real-time log data. The composition is clean and focused, with a warm color scheme. The image should be in a detailed digital painting style, emphasizing clarity and visual appeal."
    }
]