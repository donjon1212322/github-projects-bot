[
    {
        "id": 441537080,
        "name": "shellfirm",
        "description": "Intercept any risky patterns (default or defined by you) and prompt you a small challenge for double verification",
        "url": "https://github.com/kaplanelad/shellfirm",
        "language": "Rust",
        "stars": 840,
        "forks": 25,
        "created_at": "2021-12-24T19:00:12Z",
        "updated_at": "2025-03-24T09:17:01Z",
        "topics": [
            "captcha",
            "devops",
            "devops-tools",
            "prompt",
            "rust",
            "shell",
            "terminal",
            "zsh"
        ],
        "quality_score": 1.1,
        "contributors_count": 0,
        "last_commit_date": "2025-03-24T09:16:57Z",
        "media_urls": [
            "https://opengraph.githubassets.com/25b1fb5fca9ae7a200933520bf49b2a4a096da13f930b937005442864f598fcb/kaplanelad/shellfirm"
        ],
        "homepage": "",
        "readme_summary": "Shellfirm is a security tool that intercepts potentially dangerous shell commands and prompts the user with a verification challenge before execution. It acts as a safety net, preventing accidental or malicious actions in the terminal. Shellfirm supports various shells and allows customization of risky command patterns.",
        "key_features": [
            "Intercepts risky shell commands.",
            "Prompts users with a challenge for verification.",
            "Provides a captcha-like system for the terminal.",
            "Supports multiple shells (Zsh, Bash, Fish).",
            "Uses customizable risky patterns."
        ],
        "primary_use_case": "Preventing accidental or malicious execution of dangerous shell commands.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a vigilant gatekeeper standing before a glowing terminal, preventing dangerous commands from executing. The gatekeeper holds a magnifying glass, examining lines of code flowing across the screen, identifying risky patterns. Safe commands pass through, visualized as a green light, while dangerous commands trigger a challenge prompt, represented by a puzzle icon. The scene is set in a futuristic command center with subtle UI elements displaying real-time command analysis. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    },
    {
        "id": 515232049,
        "name": "captcha-solver-on-Adroid",
        "description": "One CAPTCHA solving client on Android",
        "url": "https://github.com/lilerjee/captcha-solver-on-Adroid",
        "language": "Python",
        "stars": 17,
        "forks": 4,
        "created_at": "2022-07-18T15:05:03Z",
        "updated_at": "2025-03-23T14:50:10Z",
        "topics": [],
        "quality_score": 0.15,
        "contributors_count": 0,
        "last_commit_date": "2022-07-18T15:14:02Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4c843881b5c966c266a64e70e6c3a8591f706e99b6341ebdbadc96be5934cdcc/lilerjee/captcha-solver-on-Adroid"
        ],
        "homepage": "",
        "readme_summary": "This repository provides an Android client for solving CAPTCHAs, specifically reCAPTCHA and funCAPTCHA, by leveraging external CAPTCHA solving services like Deathbycaptcha and 2captcha. It aims to offer a user-friendly interface for Android users who need to automate CAPTCHA solving tasks, filling the gap where service providers only offer APIs.",
        "key_features": [
            "Android-based CAPTCHA solving client",
            "Supports reCAPTCHA and funCAPTCHA",
            "Uses CAPTCHA solving services like Deathbycaptcha and 2captcha",
            "Provides a user-friendly Android interface for CAPTCHA solving"
        ],
        "primary_use_case": "Solving CAPTCHAs on Android devices using external CAPTCHA solving services.",
        "open_issues": 0,
        "cover_image_prompt": "A skilled artisan meticulously assembling a complex puzzle, where each piece represents a CAPTCHA challenge. The artisan uses specialized tools (API keys) to connect the pieces, revealing a clear image (solved CAPTCHA). An Android device subtly displays the solved image, showcasing the client's functionality. The scene is set in a bright, organized workshop with a focus on precision and problem-solving. Small UI elements and code snippets are subtly incorporated into the background. The image should be in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 27954927,
        "name": "caffeine",
        "description": "A high performance caching library for Java",
        "url": "https://github.com/ben-manes/caffeine",
        "language": "Java",
        "stars": 16419,
        "forks": 1626,
        "created_at": "2014-12-13T08:45:11Z",
        "updated_at": "2025-03-24T09:06:35Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-03-07T03:39:42Z",
        "media_urls": [
            "https://opengraph.githubassets.com/51b9d688776ade79ae8dd097beea22f4540a01fa89c1dece16e9e469d1e05838/ben-manes/caffeine"
        ],
        "homepage": "",
        "readme_summary": "Caffeine is a high-performance caching library for Java that provides an in-memory cache with features like automatic loading, size-based eviction, time-based expiration, and asynchronous refresh. It offers flexible configuration options and extensions for JCache, Guava, and simulation, making it suitable for various caching scenarios in Java applications.",
        "key_features": [
            "In-memory cache",
            "Automatic loading of entries",
            "Size-based eviction",
            "Time-based expiration",
            "Asynchronous refresh",
            "Weak/soft references",
            "Eviction notifications",
            "Write propagation",
            "Statistics accumulation",
            "JSR-107 JCache",
            "Guava adapters",
            "Simulation"
        ],
        "primary_use_case": "High-performance, near-optimal caching of data in Java applications.",
        "open_issues": 1,
        "cover_image_prompt": "A master clockmaker meticulously crafting intricate clockwork gears, each representing a cached data entry. The gears are made of shimmering metal and fit perfectly together, ensuring smooth and efficient operation. Some gears are glowing faintly, indicating recent use, while others are dimming, showing expiration. Small UI elements displaying cache statistics and expiration times are subtly integrated into the clockwork. The scene is set in a clean, well-lit workshop with a blue and gold color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 527215876,
        "name": "osgint",
        "description": "OSINT tool to find informations about a github user (email2username, username2email, creation date ...) ",
        "url": "https://github.com/hippiiee/osgint",
        "language": "Python",
        "stars": 167,
        "forks": 15,
        "created_at": "2022-08-21T13:33:26Z",
        "updated_at": "2025-03-24T09:59:36Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-02-05T15:40:44Z",
        "media_urls": [
            "https://opengraph.githubassets.com/eb0a4e96b54587df3b7f9270659b0732bb43a6878678958c122e92b8e40b145a/hippiiee/osgint"
        ],
        "homepage": "",
        "readme_summary": "OSGINT is a Python tool designed for gathering information about GitHub users. It allows users to find a GitHub username given an email address, and attempt to find an email address given a username. It also retrieves various profile details such as account creation date, public gists, and public SSH keys.",
        "key_features": [
            "Find GitHub username from an email",
            "Find email from GitHub username",
            "Find information about a profile (account creation date, public gists, id, public pgp, public ssh)"
        ],
        "primary_use_case": "OSINT (Open Source Intelligence) gathering on GitHub users, specifically finding usernames from emails and vice versa, and retrieving profile information.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a detective meticulously piecing together a digital profile of a person using various online clues. The detective, illuminated by the glow of multiple monitors displaying social media feeds, email headers, and code repositories, connects scattered pieces of information with lines of light. A magnifying glass hovers over a GitHub profile, revealing hidden connections and details. The scene is set in a dimly lit, high-tech office filled with servers and data streams. Small UI elements show the OSGINT logo and data being processed. The image should be in a digital painting style with a focus on detail and a mysterious atmosphere."
    },
    {
        "id": 574162425,
        "name": "chatgpt-chrome-extension",
        "description": "A ChatGPT Chrome extension. Integrates ChatGPT into every text box on the internet.",
        "url": "https://github.com/gragland/chatgpt-chrome-extension",
        "language": "JavaScript",
        "stars": 2927,
        "forks": 504,
        "created_at": "2022-12-04T16:10:17Z",
        "updated_at": "2025-03-24T07:58:05Z",
        "topics": [],
        "quality_score": 0.55,
        "contributors_count": 0,
        "last_commit_date": "2023-02-11T17:30:28Z",
        "media_urls": [
            "https://opengraph.githubassets.com/e0cf8e7c4256e9d736477e79c302445dbcf6a426882ba61bf73a3e0a8ad574b6/gragland/chatgpt-chrome-extension"
        ],
        "homepage": "",
        "readme_summary": "This Chrome extension seamlessly integrates ChatGPT into any text box, enabling users to leverage its capabilities for various writing and editing tasks directly within their browser. It also features a plugin system, allowing for customized behavior and interaction with external APIs, extending its functionality.",
        "key_features": [
            "Integrates ChatGPT into every text box on the internet",
            "Plugin system for greater control over ChatGPT behavior",
            "Ability to interact with 3rd party APIs"
        ],
        "primary_use_case": "Enhancing text input across the internet using ChatGPT for tasks like writing, revising, and debugging.",
        "open_issues": 30,
        "cover_image_prompt": "A friendly robot sitting at a desk, extending its arm to seamlessly integrate into a text box on a computer screen. The robot is offering assistance to a user typing an email. The screen displays a chat bubble with the ChatGPT logo. The scene is set in a brightly lit, modern office. Small UI elements and code snippets float subtly around the robot. The composition is clean and focused with a blue and white color scheme. The image should be in a flat design style with clear iconography."
    },
    {
        "id": 904249963,
        "name": "clickclickclick",
        "description": "A framework to enable autonomous android and computer use using any LLM (local or remote)",
        "url": "https://github.com/BandarLabs/clickclickclick",
        "language": "Python",
        "stars": 412,
        "forks": 48,
        "created_at": "2024-12-16T14:28:26Z",
        "updated_at": "2025-03-24T06:50:07Z",
        "topics": [
            "agents",
            "ai-agents-framework",
            "android-automation",
            "antrophic",
            "computer-use",
            "framework",
            "gemini",
            "generative-ai",
            "molmo",
            "ollama",
            "openai",
            "operator",
            "python"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-02-27T06:02:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/dad4271e37b7961e4ab2b2c87ce8f2cf347dfc08cf526a3db2883e740b370cf1/BandarLabs/clickclickclick"
        ],
        "homepage": "",
        "readme_summary": "ClickClickClick is a framework that enables autonomous control of Android devices and computers using Large Language Models. It supports local and remote LLMs, including Ollama, Gemini, and GPT 4o. The framework can be used via a web interface (Gradio), a command-line interface, or through scripting, providing flexible options for automating various tasks.",
        "key_features": [
            "Autonomous Android and computer use",
            "LLM integration (local or remote)",
            "Web interface (Gradio)",
            "CLI tool",
            "API access",
            "Support for Ollama, Gemini, GPT 4o"
        ],
        "primary_use_case": "Automating tasks on Android and computers using LLMs.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled conductor orchestrating a symphony of devices – an Android phone, a laptop, and a smart home hub – all playing in perfect harmony. The conductor, representing the LLM, stands on a platform adorned with glowing circuits and neural network patterns. Each device responds flawlessly to the conductor's subtle gestures, performing complex tasks with ease. The scene is bathed in a soft, ethereal light, highlighting the seamless integration and autonomous operation. Small UI elements float around the devices, displaying snippets of code and task progress. The composition is clean and focused, emphasizing the conductor's control and the devices' responsiveness. The image should be in a 3D isometric illustration style with rich details and vibrant colors, subtly incorporating the 'clickclickclick' name into the platform design."
    },
    {
        "id": 180137089,
        "name": "FinanceToolkit",
        "description": "Transparent and Efficient Financial Analysis",
        "url": "https://github.com/JerBouma/FinanceToolkit",
        "language": "Python",
        "stars": 3325,
        "forks": 388,
        "created_at": "2019-04-08T11:44:25Z",
        "updated_at": "2025-03-24T06:11:33Z",
        "topics": [
            "commodities",
            "economics",
            "equities",
            "factor-analysis",
            "finance",
            "financial-analysis",
            "financial-data",
            "financial-statements",
            "fundamental-analysis",
            "fundamentals",
            "investing",
            "investments",
            "market-data",
            "openbb",
            "options",
            "performance-analysis",
            "risk-management",
            "sector-analysis",
            "stock-data",
            "technical-analysis"
        ],
        "quality_score": 0.95,
        "contributors_count": 0,
        "last_commit_date": "2025-03-18T10:58:47Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/180137089/9188f19e-d896-4f68-9571-5603de08e4da"
        ],
        "homepage": "https://www.jeroenbouma.com/projects/financetoolkit",
        "readme_summary": "FinanceToolkit is a Python library designed for transparent financial analysis. It provides a comprehensive set of tools for calculating financial ratios, retrieving historical data for various asset classes, and measuring performance and risk. The toolkit emphasizes transparency by providing clear methodologies for all calculations, allowing users to avoid reliance on opaque, proprietary data sources.",
        "key_features": [
            "Financial ratio calculations (150+)",
            "Historical data retrieval for various asset classes (Equities, Options, Currencies, Cryptocurrencies, ETFs, Mutual Funds, Indices, Money Markets, Commodities, Key Economic Indicators)",
            "Performance and risk measurements (Sharpe Ratio, Value at Risk)",
            "Integration with FinanceDatabase for competitive analysis",
            "Transparent calculation methods"
        ],
        "primary_use_case": "Transparent and efficient financial analysis, enabling users to calculate financial ratios and metrics with clear, auditable methodologies.",
        "open_issues": 1,
        "cover_image_prompt": "Imagine a skilled financial analyst, depicted as a meticulous artisan, carefully crafting a complex mosaic from scattered pieces of market data, financial statements, and economic indicators. Each piece represents a different data point, and the analyst meticulously fits them together, using transparent tools and clearly defined formulas etched onto the workbench. The final mosaic reveals a clear, insightful picture of a company's financial health. Subtle UI elements float around the artisan, displaying code snippets and ratio calculations. The scene is set in a bright, organized workshop with a focus on clarity and precision. The image should be in a clean, 3D isometric illustration style with labeled parts and a professional color scheme."
    },
    {
        "id": 902707659,
        "name": "minecraft",
        "description": "Minecraft clone from scratch with only OpenGL",
        "url": "https://github.com/GianlucaP106/minecraft",
        "language": "Go",
        "stars": 362,
        "forks": 19,
        "created_at": "2024-12-13T05:31:43Z",
        "updated_at": "2025-03-24T08:48:45Z",
        "topics": [
            "3d",
            "game",
            "go",
            "minecraft",
            "opengl",
            "voxel"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-03-11T13:08:22Z",
        "media_urls": [
            "https://opengraph.githubassets.com/43d4912bf32b2207118ec5a5632a7f95510026cbf0265868440bb1d4c4f838df/GianlucaP106/minecraft"
        ],
        "homepage": "",
        "readme_summary": "This repository provides a from-scratch implementation of Minecraft using Go and OpenGL. It features procedurally generated terrain, a physics engine, dynamic lighting, and block manipulation. The project demonstrates how to build a 3D voxel game engine from the ground up, focusing on performance and custom implementations.",
        "key_features": [
            "Infinite and procedurally generated terrain",
            "Physics engine with collision detection",
            "Day/night cycle",
            "Dynamic lighting",
            "Block placement and destruction",
            "Tree generation",
            "Basic cave systems",
            "Dynamic chunk loading/unloading",
            "Simple culling techniques",
            "Simple inventory system",
            "Flying mode"
        ],
        "primary_use_case": "Creating a Minecraft clone from scratch using OpenGL and Go, without relying on game engines or frameworks.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a child building a towering castle out of colorful blocks in a vast, sunlit sandbox. The sandbox stretches infinitely, revealing procedurally generated landscapes with rolling hills and deep caves. The child carefully places each block, shaping the world around them. A subtle UI overlay shows block selection and inventory. Digital particles float around the blocks, hinting at the underlying code. The repository name, 'Minecraft', is subtly etched into the side of a block. The scene is rendered in a vibrant, 3D isometric illustration style with soft, diffused lighting and a playful color palette."
    },
    {
        "id": 679304431,
        "name": "ophiuchi-desktop",
        "description": "A local https proxy server manager using docker",
        "url": "https://github.com/cheeselemon/ophiuchi-desktop",
        "language": "TypeScript",
        "stars": 1622,
        "forks": 60,
        "created_at": "2023-08-16T14:41:04Z",
        "updated_at": "2025-03-24T08:39:33Z",
        "topics": [],
        "quality_score": 0.65,
        "contributors_count": 0,
        "last_commit_date": "2024-12-11T03:26:04Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/679304431/3532db97-fb20-4836-9c36-2401933be995"
        ],
        "homepage": "",
        "readme_summary": "Ophiuchi Desktop is a tool for managing local HTTPS proxy servers. It leverages Docker to create and manage isolated proxy environments, providing a user-friendly interface for configuring and controlling these proxies.",
        "key_features": [
            "Local HTTPS proxy server management",
            "Docker-based proxy server creation and management",
            "GUI for managing proxy settings"
        ],
        "primary_use_case": "Managing local HTTPS proxy servers using Docker containers.",
        "open_issues": 9,
        "cover_image_prompt": "A lighthouse keeper managing a network of proxy servers represented as miniature lighthouses, each emitting a beam of secure, encrypted light. The keeper adjusts settings on a central control panel with a UI resembling the Ophiuchi desktop application. Docker containers float around the lighthouses, symbolizing the isolated environments. The scene is set on a rocky coastline under a starry night sky, with subtle digital particles connecting the lighthouses to the control panel. The image should be in a 3D isometric illustration style with vibrant colors and clear details."
    }
]