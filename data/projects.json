[
    {
        "id": 999831233,
        "name": "raycast-linux",
        "description": "Raycast-compatible launcher for Linux",
        "url": "https://github.com/ByteAtATime/raycast-linux",
        "language": "Svelte",
        "stars": 639,
        "forks": 28,
        "created_at": "2025-06-10T21:20:21Z",
        "updated_at": "2025-07-20T08:44:11Z",
        "topics": [],
        "quality_score": 0.5499999999999999,
        "contributors_count": 0,
        "last_commit_date": "2025-07-16T15:50:03Z",
        "media_urls": [
            "https://opengraph.githubassets.com/0f526102e29719f5882ec938215cf511a67d5c74c37ed963dad11495fe9b4a94/ByteAtATime/raycast-linux"
        ],
        "homepage": "",
        "readme_summary": "Raycast for Linux is an open-source application launcher designed to bring the functionality of Raycast to Linux users. It offers features such as an extensible command palette, extension support, a powerful calculator, clipboard history, snippets, and AI integration, aiming to provide a streamlined and efficient way to interact with your system.",
        "key_features": [
            "Extensible Command Palette",
            "Extension Support",
            "Powerful Calculator",
            "Clipboard History",
            "Snippets",
            "AI Integration"
        ],
        "primary_use_case": "A Raycast-inspired application launcher for Linux systems.",
        "open_issues": 6,
        "cover_image_prompt": "A skilled chef in a modern, open-source kitchen, expertly tossing ingredients (representing Linux applications and commands) into a sleek, silver Raycast-shaped wok. The wok glows with a soft, digital light, and the resulting dish is a beautifully organized menu of options presented on a holographic display. Subtle UI elements float around the chef, showing code snippets and search results. The kitchen is clean and minimalist, with the repository name subtly etched into the countertop. The image should be in a 3D isometric illustration style with vibrant colors and crisp details."
    },
    {
        "id": 583641182,
        "name": "favbox",
        "description": "ðŸ–¤ FavBox is a local-first experimental browser extension that enhances and simplifies bookmark management without cloud storage or third-party services.",
        "url": "https://github.com/dd3v/favbox",
        "language": "Vue",
        "stars": 186,
        "forks": 16,
        "created_at": "2022-12-30T12:19:53Z",
        "updated_at": "2025-07-19T20:05:33Z",
        "topics": [
            "bookmarks",
            "bookmarks-manager",
            "browser-extension",
            "chrome-extension",
            "experiment",
            "indexeddb",
            "pet-project",
            "productivity",
            "sideproject",
            "vue3"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-07-18T19:49:30Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/583641182/30395700-ac76-4b66-9416-2da389baca25"
        ],
        "homepage": "https://chrome.google.com/webstore/detail/favbox/eangbddipcghohfjefjmfihcjgjnnemj",
        "readme_summary": "FavBox is a local-first browser extension for enhanced bookmark management. It provides features like tag support, advanced search, duplicate detection, and local notes, all while keeping your data private and synced with your browser profile. It extends the browser's native bookmarking features without replacing them.",
        "key_features": [
            "Syncs with browser profile",
            "No data sent to third-party services",
            "Minimalist, clean UI",
            "Tag support for easy organization",
            "Advanced search, sorting, and filtering",
            "Multiple display modes",
            "Light and dark themes",
            "Detects broken and duplicate bookmarks",
            "Hotkeys for quick search access",
            "Local notes support",
            "Free and open source"
        ],
        "primary_use_case": "Enhances and simplifies bookmark management locally without cloud storage or third-party services.",
        "open_issues": 2,
        "cover_image_prompt": "Imagine a meticulous librarian in a cozy, sunlit study, carefully organizing scattered bookmarks into a beautifully structured card catalog. Each bookmark glows faintly with digital particles, representing extracted data like titles, descriptions, and tags. The librarian uses a magnifying glass that displays UI elements and code snippets, subtly connecting the scene to software. The card catalog drawers are labeled with tags and categories, making it easy to find the perfect bookmark. The scene is in a 3D isometric illustration style with warm colors and rich details."
    },
    {
        "id": 985046164,
        "name": "telepipe",
        "description": "A simple command-line utility to send messages to Telegram",
        "url": "https://github.com/Linuxmaster14/telepipe",
        "language": "Shell",
        "stars": 41,
        "forks": 4,
        "created_at": "2025-05-17T01:01:21Z",
        "updated_at": "2025-07-20T09:55:17Z",
        "topics": [
            "alerts",
            "bash",
            "bot",
            "cli",
            "command-line",
            "messaging",
            "monitoring",
            "notification",
            "shell",
            "telegram",
            "terminal",
            "utility"
        ],
        "quality_score": 0.44999999999999996,
        "contributors_count": 0,
        "last_commit_date": "2025-07-02T15:42:01Z",
        "media_urls": [
            "https://opengraph.githubassets.com/f4118c7ed9ee4424938bcd34ad46b55ddf2e2983e73e3e3b0958e901f1a7df81/Linuxmaster14/telepipe"
        ],
        "homepage": "",
        "readme_summary": "Telepipe is a command-line utility that allows users to send messages and files to Telegram directly from their terminal. It supports features like file uploads, video streaming, message formatting, and scheduled delivery, making it suitable for scripting, monitoring, and automated notifications.",
        "key_features": [
            "Send messages to Telegram from the command line",
            "File upload support",
            "Video streaming support",
            "Message formatting (Markdown, HTML)",
            "Scheduled message delivery",
            "Interactive shell mode",
            "Quiet/Silent mode"
        ],
        "primary_use_case": "Sending messages and files to Telegram channels, chats, or groups directly from the command line, enabling scripting and automation of notifications and alerts.",
        "open_issues": 0,
        "cover_image_prompt": "Imagine a skilled messenger bird, equipped with a tiny satchel labeled 'Telepipe,' soaring through the digital sky, delivering scrolls of messages directly to a glowing Telegram icon perched atop a cloud. The bird flies past servers represented by miniature, blinking data centers. The scrolls transform into neatly formatted messages as they reach the Telegram icon. Small UI elements showing command-line interfaces and code snippets float subtly in the background. The scene is set against a vibrant, stylized sky with a sense of speed and efficiency. The image should be in a flat design style with clear iconography and a bright, cheerful color scheme."
    },
    {
        "id": 657049902,
        "name": "hub",
        "description": "Merliot Device Hub",
        "url": "https://github.com/merliot/hub",
        "language": "Go",
        "stars": 152,
        "forks": 4,
        "created_at": "2023-06-22T07:53:55Z",
        "updated_at": "2025-07-20T09:22:31Z",
        "topics": [],
        "quality_score": 0.4,
        "contributors_count": 0,
        "last_commit_date": "2025-05-17T00:39:59Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8fea7b4f10f09a801a35853e3b7231c4a5d7b7c5015a5f09d9e01d2940a21d5c/merliot/hub"
        ],
        "homepage": "https://merliot.io",
        "readme_summary": "Merliot Device Hub is an AI-integrated platform that allows users to control custom-built devices using natural language. It emphasizes privacy through a distributed architecture and offers a web-based interface accessible from any device. The hub supports integration with LLMs via the Model Context Protocol and can be deployed using Docker for cloud readiness.",
        "key_features": [
            "Privacy-focused distributed architecture",
            "Web application interface accessible on any device",
            "AI-integration via Model Context Protocol (MCP)",
            "Docker-based deployment for cloud readiness",
            "Support for DIY devices built with Raspberry Pi, Arduino, and other hobbyist components"
        ],
        "primary_use_case": "AI-integrated device hub for controlling and interacting with custom-built physical devices using natural language via LLM hosts.",
        "open_issues": 4,
        "cover_image_prompt": "A skilled artisan meticulously crafting a complex clockwork device, representing the Merliot Device Hub, with gears symbolizing various connected physical devices. The artisan uses natural language commands displayed on a holographic screen to control the device's intricate mechanisms. AI assistants float nearby, offering suggestions and optimizing performance. The workshop is filled with tools and components, subtly blending the physical and digital worlds. The scene is bathed in warm, inviting light, creating a sense of innovation and control. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 895202100,
        "name": "everwilds",
        "description": "MMORPG prototype inspired by World of Warcraft.",
        "url": "https://github.com/nickyvanurk/everwilds",
        "language": "TypeScript",
        "stars": 67,
        "forks": 8,
        "created_at": "2024-11-27T18:42:34Z",
        "updated_at": "2025-07-20T08:02:42Z",
        "topics": [],
        "quality_score": 0.5,
        "contributors_count": 0,
        "last_commit_date": "2025-05-13T03:20:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/8e23adaf82be98a958c68bf228277908ac9ec1b9f1817333cdd9b8f0fedea15b/nickyvanurk/everwilds"
        ],
        "homepage": "http://everwilds.io/",
        "readme_summary": "Everwilds is a prototype MMORPG designed as a learning resource. It demonstrates key aspects of MMORPG architecture, particularly networking and player movement synchronization, using techniques similar to those found in World of Warcraft. The project includes a client-server architecture, character movement, combat, leveling, and a chat system.",
        "key_features": [
            "Client-server architecture",
            "Character movement with walk animation",
            "Basic combat system",
            "Simple leveling system",
            "Character nameplates toggle",
            "Chat system",
            "Player movement synchronization"
        ],
        "primary_use_case": "Learning resource for developers interested in MMORPG networking and netcode architecture.",
        "open_issues": 0,
        "cover_image_prompt": "A seasoned architect meticulously examining the blueprint of a grand, bustling city, representing a complex MMORPG world. The architect holds a glowing stylus, making annotations on the blueprint that subtly display network diagrams and data flow visualizations. Miniature figures representing players move seamlessly through the city, showcasing smooth synchronization. The city is rendered in a vibrant, stylized manner with floating UI elements displaying chat windows and character stats. The scene is bathed in warm, inviting light, suggesting a welcoming online environment. The \"Everwilds\" logo is subtly integrated into the city's skyline. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 667568594,
        "name": "quik",
        "description": "The most beautiful SMS messenger for Android - Revived",
        "url": "https://github.com/octoshrimpy/quik",
        "language": "Kotlin",
        "stars": 1516,
        "forks": 73,
        "created_at": "2023-07-17T20:06:54Z",
        "updated_at": "2025-07-20T09:21:15Z",
        "topics": [],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-18T23:05:27Z",
        "media_urls": [
            "https://opengraph.githubassets.com/7606506f1f3b6cc2714bb3a7766c6c18b11bac17cb792d8ddcf546ab9737391b/octoshrimpy/quik"
        ],
        "homepage": "",
        "readme_summary": "QUIK is an open-source Android SMS messenger app that aims to provide a more beautiful and feature-rich experience than the stock messaging app. It offers features such as scheduled messages, message backup, speech-to-text integration, message blocking, voice messages, and support for various attachments.",
        "key_features": [
            "Scheduled Messages",
            "Message Backup",
            "Speech to Text and Text to Speech",
            "Message Blocking and Archiving",
            "Voice Messages",
            "Attachments of any type of file",
            "Message Sorting",
            "Delayed Sending"
        ],
        "primary_use_case": "Replacement for the stock Android messaging app.",
        "open_issues": 163,
        "cover_image_prompt": "A skilled craftsman meticulously handcrafting SMS messages from raw digital materials in a bright, organized workshop. The craftsman uses specialized tools to shape and refine each message, ensuring it's perfectly tailored and beautiful. Finished messages glow with a soft light as they're carefully packaged for delivery. Subtle UI elements and code snippets float in the background, hinting at the underlying technology. The scene is set in a modern, minimalist workshop with a clean, focused composition and a vibrant color scheme. The image should be in 3D isometric illustration style with rich details and vibrant colors."
    }
]