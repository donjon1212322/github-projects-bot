[
    {
        "id": 912559512,
        "name": "sim",
        "description": "Sim Studio is an open-source AI agent workflow builder. Sim Studio's interface is a lightweight, intuitive way to quickly build and deploy LLMs that connect with your favorite tools.",
        "url": "https://github.com/simstudioai/sim",
        "language": "TypeScript",
        "stars": 6026,
        "forks": 824,
        "created_at": "2025-01-05T22:47:49Z",
        "updated_at": "2025-07-23T10:10:05Z",
        "topics": [
            "agent-workflow",
            "agentic-workflow",
            "agents",
            "ai",
            "aiagents",
            "anthropic",
            "artificial-intelligence",
            "automation",
            "chatbot",
            "deepseek",
            "gemini",
            "low-code",
            "nextjs",
            "no-code",
            "openai",
            "rag",
            "react",
            "typescript"
        ],
        "quality_score": 1.0000000000000002,
        "contributors_count": 0,
        "last_commit_date": "2025-07-23T09:20:55Z",
        "media_urls": [
            "https://opengraph.githubassets.com/5ecc51a8eb467b47e88c65bf64054ff18dc84776ae4bef1efc9aacf881815d45/simstudioai/sim"
        ],
        "homepage": "https://www.simstudio.ai",
        "readme_summary": "Sim Studio is an open-source AI agent workflow builder that provides a lightweight and intuitive interface for quickly building and deploying LLMs. It offers various self-hosting options and supports integration with local models, enabling users to create and manage AI agents for diverse applications.",
        "key_features": [
            "AI agent workflow builder",
            "Lightweight and intuitive interface",
            "Low-code/no-code platform",
            "Self-hosting options (NPM, Docker Compose, Dev Containers)",
            "Support for local models",
            "Integration with tools via AI agents"
        ],
        "primary_use_case": "Building and deploying AI agent workflows.",
        "open_issues": 21,
        "cover_image_prompt": "Imagine a skilled architect meticulously crafting intricate blueprints for a futuristic city, each building representing an AI agent. The architect uses a special interface that allows them to connect these buildings with various tools and resources, symbolized by pipelines and power lines. The city is vibrant and dynamic, showcasing the seamless integration of AI agents within a larger ecosystem. Small UI elements display agent workflows and data flows. The scene is set in a bright, airy studio with a holographic display. The image should be in 3D isometric illustration style with clean lines and vibrant colors."
    },
    {
        "id": 783343310,
        "name": "ConvertX",
        "description": "üíæ Self-hosted online file converter. Supports 1000+ formats ‚öôÔ∏è",
        "url": "https://github.com/C4illin/ConvertX",
        "language": "TypeScript",
        "stars": 5663,
        "forks": 229,
        "created_at": "2024-04-07T16:21:39Z",
        "updated_at": "2025-07-23T10:11:42Z",
        "topics": [
            "bun",
            "conversion",
            "convert",
            "converter",
            "document-conversion",
            "elysia",
            "file-conversion",
            "file-converter",
            "hacktoberfest",
            "pdf-converter",
            "self-hosted",
            "tailwindcss",
            "typescript"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-22T16:15:01Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/783343310/5c97fe6b-0ba3-4d51-b04c-704d93920842"
        ],
        "homepage": "",
        "readme_summary": "ConvertX is a self-hosted online file converter that supports over a thousand different formats. It allows users to convert files to different formats, process multiple files at once, and offers features like password protection and multiple accounts. The application is built using TypeScript, Bun, and Elysia.",
        "key_features": [
            "Convert files to different formats",
            "Process multiple files at once",
            "Password protection",
            "Multiple accounts"
        ],
        "primary_use_case": "Self-hosted online file conversion supporting a wide variety of formats.",
        "open_issues": 57,
        "cover_image_prompt": "A skilled artisan in a bright workshop meticulously transforming various raw materials (documents, images, videos) into polished, refined products using a complex array of tools and machines. The artisan carefully feeds a stack of papers into a device that outputs a beautifully typeset book, while another machine converts a blurry photo into a crisp, high-resolution image. Digital screens subtly display file format icons and progress bars. The workshop is filled with soft, diffused light, creating a sense of precision and craftsmanship. The image should be in a 3D isometric illustration style with vibrant colors and intricate details."
    },
    {
        "id": 1014961703,
        "name": "nvidia-driver-installer",
        "description": "ÊîØÊåÅÂ§öÁßç Linux ÂèëË°åÁâàÁöÑ‰∫§‰∫íÂºè/Ëá™Âä®Âåñ NVIDIA È©±Âä®ÂÆâË£ÖËÑöÊú¨",
        "url": "https://github.com/EM-GeekLab/nvidia-driver-installer",
        "language": "Shell",
        "stars": 29,
        "forks": 1,
        "created_at": "2025-07-06T18:38:10Z",
        "updated_at": "2025-07-23T07:06:09Z",
        "topics": [],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-07-20T15:39:43Z",
        "media_urls": [
            "https://opengraph.githubassets.com/4e84664caf8e4eae7d3917ff988f5a69c55baad981d8a0ab15f1b311d0639391/EM-GeekLab/nvidia-driver-installer"
        ],
        "homepage": null,
        "readme_summary": "The repository provides a universal NVIDIA driver installation script for multiple Linux distributions. It automates the installation process using package managers, eliminating the need for manual driver downloads and execution. The script aims to simplify and streamline NVIDIA driver installation across different Linux environments.",
        "key_features": [
            "Automated NVIDIA driver installation",
            "Supports multiple Linux distributions",
            "Uses package managers (dnf, apt, zypper) for installation",
            "Provides a highly automated installation experience"
        ],
        "primary_use_case": "Automating the installation of NVIDIA drivers on various Linux distributions.",
        "open_issues": 1,
        "cover_image_prompt": "A skilled mechanic in a futuristic garage, automatically installing a complex NVIDIA driver into a sleek, open-chassis computer. The mechanic uses a specialized wrench that glows with digital energy, seamlessly connecting the driver components. UI elements float around the computer, displaying progress bars and system information. Wires and cables are neatly organized, representing the various Linux distributions supported. The repository name is subtly displayed on a nearby monitor. The scene is well-lit and clean, in a 3D isometric illustration style with vibrant colors and sharp details."
    },
    {
        "id": 630196988,
        "name": "wl-kbptr",
        "description": "Control the mouse pointer with the keyboard on Wayland.",
        "url": "https://github.com/moverest/wl-kbptr",
        "language": "C",
        "stars": 327,
        "forks": 18,
        "created_at": "2023-04-19T21:53:26Z",
        "updated_at": "2025-07-23T10:12:22Z",
        "topics": [
            "hyprland",
            "mouse-pointer-control",
            "niri",
            "swaywm",
            "wayland"
        ],
        "quality_score": 0.75,
        "contributors_count": 0,
        "last_commit_date": "2025-07-19T00:32:52Z",
        "media_urls": [
            "https://opengraph.githubassets.com/438a0e88bde0bd7993bd221d9fdfbcc8dae300be616230fae736714fe038a02e/moverest/wl-kbptr"
        ],
        "homepage": "",
        "readme_summary": "The wl-kbptr utility enables users to control the mouse pointer with the keyboard on Wayland. It offers various modes like floating, tile, bisect, split, and click for precise pointer control. The floating mode can automatically detect target areas using OpenCV, and it supports compositors implementing the wlr-layer-shell-unstable-v1 and wlr-virtual-pointer-unstable-v1 protocols.",
        "key_features": [
            "Controls mouse pointer with keyboard",
            "Supports multiple modes: floating, tile, bisect, split, and click",
            "Floating mode supports auto-detection of areas using OpenCV",
            "Compatible with Wayland compositors supporting wlr-layer-shell-unstable-v1, wlr-virtual-pointer-unstable-v1, and optionally wlr-screencopy-unstable-v1"
        ],
        "primary_use_case": "Control the mouse pointer using the keyboard on Wayland compositors.",
        "open_issues": 11,
        "cover_image_prompt": "Imagine a skilled calligrapher using an ornate keyboard as their pen, precisely guiding a glowing cursor across a digital canvas. The canvas displays various application windows, each subtly reacting to the calligrapher's keystrokes. Digital particles emanate from the keyboard, forming the cursor's path with pinpoint accuracy. Small UI elements showing keyboard shortcuts and cursor coordinates float around the scene. The setting is a minimalist workspace with soft, ambient lighting. The image should be in a 3D isometric illustration style with clean lines and a vibrant color scheme."
    },
    {
        "id": 784546140,
        "name": "reader",
        "description": "Convert any URL to an LLM-friendly input with a simple prefix https://r.jina.ai/",
        "url": "https://github.com/jina-ai/reader",
        "language": "TypeScript",
        "stars": 8988,
        "forks": 705,
        "created_at": "2024-04-10T04:05:06Z",
        "updated_at": "2025-07-23T08:50:52Z",
        "topics": [
            "llm",
            "proxy"
        ],
        "quality_score": 0.7,
        "contributors_count": 0,
        "last_commit_date": "2025-05-08T03:47:39Z",
        "media_urls": [
            "https://repository-images.githubusercontent.com/784546140/b70d20c4-e318-441a-ab24-feebf7c58d75"
        ],
        "homepage": "https://jina.ai/reader",
        "readme_summary": "The 'Reader' repository provides a service to convert any URL into an LLM-friendly input, improving the performance of LLMs in tasks like RAG and agent systems. It offers both a URL-to-text conversion service and a web search service that returns the top 5 results in an LLM-friendly format. The service is provided via a free, stable, and scalable API.",
        "key_features": [
            "Converts URLs to LLM-friendly input",
            "Web search functionality with LLM-friendly output",
            "Free, stable, and scalable API",
            "Supports reading arbitrary PDFs from URLs",
            "Image captioning"
        ],
        "primary_use_case": "Converting web content and search results into a format easily digestible by Large Language Models (LLMs) for improved performance in tasks like RAG and agent systems.",
        "open_issues": 103,
        "cover_image_prompt": "Imagine a skilled librarian meticulously transforming messy stacks of books (representing URLs) into neatly organized, easily readable scrolls (LLM-friendly input). The librarian uses a special magnifying glass that cleans and formats the text as it's copied. In the background, a vast digital library stretches into the distance, symbolizing the web. Subtle UI elements float around the librarian, displaying code snippets and data visualizations. The scene is bathed in warm, inviting light, creating a sense of knowledge and accessibility. The image should be in a 3D isometric illustration style with rich details and vibrant colors."
    },
    {
        "id": 322484700,
        "name": "jj",
        "description": "A Git-compatible VCS that is both simple and powerful",
        "url": "https://github.com/jj-vcs/jj",
        "language": "Rust",
        "stars": 17835,
        "forks": 591,
        "created_at": "2020-12-18T04:05:27Z",
        "updated_at": "2025-07-23T09:57:44Z",
        "topics": [
            "cli",
            "git",
            "jj",
            "jujutsu",
            "mercurial",
            "vcs"
        ],
        "quality_score": 0.85,
        "contributors_count": 0,
        "last_commit_date": "2025-07-23T01:05:07Z",
        "media_urls": [
            "https://opengraph.githubassets.com/730497010398521932214750d3a25d01ae4cd1e398f442248abaff3efbc7fbf5/jj-vcs/jj"
        ],
        "homepage": "https://jj-vcs.github.io/jj/",
        "readme_summary": "Jujutsu is a Git-compatible version control system designed for ease of use and powerful history manipulation. It abstracts the user interface from the storage layer, allowing for different backends. It incorporates features from Git, Mercurial, and Darcs to provide a flexible and efficient version control experience.",
        "key_features": [
            "Git-compatible VCS",
            "Easy to use",
            "Abstracts user interface and version control algorithms from storage systems",
            "Mercurial-inspired features (revsets, anonymous branches)",
            "First-class conflict objects (inspired by Darcs)"
        ],
        "primary_use_case": "Version control for software projects",
        "open_issues": 533,
        "cover_image_prompt": "A skilled sculptor meticulously chiseling a complex statue from a single block of stone, representing a software project's history. The sculptor uses various tools inspired by Git, Mercurial, and Darcs, each subtly glowing with digital energy. The statue's layers reveal different versions and resolved conflicts, visualized as distinct strata within the stone. Small UI elements float around the sculptor, displaying code diffs and version control commands. The scene is set in a bright, modern studio with a clean, focused composition. The image should be in 3D isometric illustration style with rich details and a harmonious color scheme."
    }
]