[
    {
        "project_id": 858442303,
        "content": "𝗚𝗘𝗡𝗖𝗔𝗗 | Generating 3D CAD models from image inputs.  🔥 Super Hot!\n\n•••••••••••••••••••••••\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Generating 3D CAD models from image inputs.\n📅 Created: Sep 2024 • Updated: Jul 2025\n\n•••••••••••••••••••••••\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Image-conditioned CAD generation\n✅ Transformer-based contrastive representation\n✅ Diffusion priors\n✅ CSR model training\n✅ CCIP model training\n✅ Diffusion Prior training\n✅ STL visualization\n\n\n•••••••••••••••••••••••\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐ 228 𝘀𝘁𝗮𝗿𝘀\n🍴 21 𝗳𝗼𝗿𝗸𝘀\n🔍 8 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n•••••••••••••••••••••••\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nGenCAD is a project focused on generating Computer-Aided Design (CAD) models from image inputs. It utilizes transformer-based contrastive representation and diffusion priors to achieve this. The repository provides tools for training different models (CSR, CCIP, Diffusion Prior) and visualizing the generated STL models.\n\n•••••••••••••••••••••••\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/ferdous-alam/GenCAD\n\n•••••••••••••••••••••••\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n•••••••••••••••••••••••\n\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/0629a3dfa942170783121d88409fdea9c00f855a871157faa13a62078c3df98e/ferdous-alam/GenCAD"
        ],
        "processed_at": "2025-07-22T10:14:28.484403"
    },
    {
        "project_id": 1019360350,
        "content": "𝗚𝗥𝗢𝗞-𝗖𝗟𝗜 | Using natural language to interact with and manipulate files and execute shell commands in a terminal environment.  🌟 Rising Fast!\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 📘 TypeScript \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Using natural language to interact with and manipulate files and execute shell commands in a terminal environment.\n📅 Created: Jul 2025 • Updated: Jul 2025\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Conversational AI interface powered by Grok-3\n✅ Smart File Operations (view, create, edit)\n✅ Bash Integration (execute shell commands)\n✅ Automatic Tool Selection\n✅ Interactive Terminal UI\n✅ Global Installation via npm\n\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐ 633 𝘀𝘁𝗮𝗿𝘀\n🍴 71 𝗳𝗼𝗿𝗸𝘀\n🔍 7 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nGrok CLI is a conversational AI tool that allows users to interact with their file system and execute shell commands using natural language. It leverages the Grok AI model to provide intelligent file operations, bash integration, and automatic tool selection, all within an interactive terminal UI.\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/superagent-ai/grok-cli\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#agents #ai #cli #code #grok\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/b2ce9c91f723c44e07ce635ce643213d807fe2e6368f04ca080a51e968a52234/superagent-ai/grok-cli"
        ],
        "processed_at": "2025-07-22T10:14:28.484768"
    },
    {
        "project_id": 1006809025,
        "content": "𝗢𝗨𝗧𝗦𝗜𝗗𝗘 | Displaying weather information in the terminal.  🔥 Super Hot!\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🦀 Rust \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Displaying weather information in the terminal.\n📅 Created: Jun 2025 • Updated: Jul 2025\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Fetches weather data for a specified location or auto-detects location based on IP address\n✅ Supports metric and imperial units\n✅ Offers multiple output formats: TUI, simple, detailed, JSON, and Waybar\n✅ Provides streaming mode for continuous weather updates\n✅ Caches location and weather data to reduce API calls\n\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐ 62 𝘀𝘁𝗮𝗿𝘀\n🍴 2 𝗳𝗼𝗿𝗸𝘀\n🔍 2 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nThe 'outside' repository is a versatile terminal-based weather client written in Rust. It allows users to fetch and display weather information in various formats, including TUI, simple text, detailed reports, JSON, and Waybar-compatible output. The client supports specifying a location or automatically detecting it via IP address, and offers options for unit selection and continuous streaming updates.\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/BaconIsAVeg/outside\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃⁃\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#terminal_based #tui #utilities #weather_app\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/f9db20d95bdbcc56fea3557cfdb80c43f1ef145768edf5a911e2afa3a3143bdd/BaconIsAVeg/outside"
        ],
        "processed_at": "2025-07-22T10:14:28.485105"
    },
    {
        "project_id": 149890803,
        "content": "𝗡𝗢𝗩𝗘𝗟𝗪𝗥𝗜𝗧𝗘𝗥 | Writing novels assembled from smaller text documents with easy organization of text and notes.  🔥 Super Hot!\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Writing novels assembled from smaller text documents with easy organization of text and notes.\n📅 Created: Sep 2018 • Updated: Jul 2025\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Plain text editor for novels\n✅ Minimal formatting syntax inspired by Markdown\n✅ Meta data syntax for comments, synopsis, and cross-referencing\n✅ Project storage suitable for version control and file synchronization\n✅ Core project structure stored in a single XML file\n✅ Meta data primarily saved as JSON files\n\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 2.5K 𝘀𝘁𝗮𝗿𝘀\n🍴 148 𝗳𝗼𝗿𝗸𝘀\n🔍 113 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nnovelWriter is a plain text editor designed for novelists, enabling them to assemble novels from smaller text documents. It employs a minimal Markdown-inspired syntax and meta-data for comments and synopses. The project's structure is designed for version control, storing core data in XML and meta-data in JSON files.\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/vkbo/novelWriter\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#editor #linux #macos #meta_data #novels\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://repository-images.githubusercontent.com/149890803/f938d3c5-80d3-491b-9035-b11dc62f74c4"
        ],
        "processed_at": "2025-07-22T10:14:28.485419"
    },
    {
        "project_id": 248248401,
        "content": "𝗝𝗜𝗧𝗧𝗢𝗥 | High-performance deep learning model development and deployment.  🔥 Super Hot!\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: High-performance deep learning model development and deployment.\n📅 Created: Mar 2020 • Updated: Jul 2025\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ JIT compiling\n✅ Meta-operators\n✅ High-performance code generation\n✅ Model libraries (image recognition, detection, segmentation, etc.)\n✅ Python front-end\n✅ CUDA/C++ back-end\n\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 3.2K 𝘀𝘁𝗮𝗿𝘀\n🍴 318 𝗳𝗼𝗿𝗸𝘀\n🔍 249 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nJittor is a deep learning framework that utilizes JIT compiling and meta-operators to achieve high performance. It offers a Python front-end and a CUDA/C++ back-end, along with a collection of pre-built models for various tasks like image recognition and segmentation. Jittor aims to provide a flexible and efficient platform for developing and deploying deep learning applications.\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/Jittor/jittor\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#cuda #deep_learning #gpu #jittor #python\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/0b47e3eb6ff6d90ea747940ba5b08d800fe7968409bf7e4e420cff623424616d/Jittor/jittor"
        ],
        "processed_at": "2025-07-22T10:14:28.485726"
    },
    {
        "project_id": 299443676,
        "content": "𝗦𝗡𝗡𝗧𝗢𝗥𝗖𝗛 | Gradient-based learning with spiking neural networks.  📈 Growing!\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Gradient-based learning with spiking neural networks.\n📅 Created: Sep 2020 • Updated: Jul 2025\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Spiking neuron library integrated with PyTorch autograd\n✅ NIR export and import for interoperability with other SNN libraries\n✅ Functional operations for spike-based arithmetic\n✅ Spike generation and data conversion tools\n✅ Visualization tools for spike-based data\n✅ Surrogate gradient functions\n✅ Dataset utility functions\n\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 1.6K 𝘀𝘁𝗮𝗿𝘀\n🍴 265 𝗳𝗼𝗿𝗸𝘀\n🔍 43 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nsnnTorch is a Python package built on PyTorch for developing and training spiking neural networks. It provides pre-designed spiking neuron models that can be seamlessly integrated into PyTorch workflows, enabling GPU-accelerated computation for SNNs. The library also supports interoperability with other SNN frameworks through NIR, and offers tools for spike generation, visualization, and functional operations.\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/jeshraghian/snntorch\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿✿\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#machine_learning #neural_networks #neuron_models #neuroscience #python\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://repository-images.githubusercontent.com/299443676/10f1de80-dd79-11eb-9f79-228a8b63b03f"
        ],
        "processed_at": "2025-07-22T10:14:28.486054"
    },
    {
        "project_id": 156187,
        "content": "𝗗𝗨𝗟𝗪𝗜𝗖𝗛 | Providing a pure-Python interface to Git repositories for environments where Git is unavailable or a pure Python implementation is required.  📈 Growing!\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Providing a pure-Python interface to Git repositories for environments where Git is unavailable or a pure Python implementation is required.\n📅 Created: Mar 2009 • Updated: Jul 2025\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Pure Python Git implementation\n✅ Standalone package with no Git dependency\n✅ Optional Rust bindings for performance improvement\n✅ Lower-level API and higher-level plumbing (porcelain)\n\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 2.1K 𝘀𝘁𝗮𝗿𝘀\n🍴 407 𝗳𝗼𝗿𝗸𝘀\n🔍 34 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nDulwich is a pure-Python Git implementation that provides an interface to Git repositories without relying on the Git executable. It offers both a lower-level API and higher-level plumbing, making it suitable for environments where Git is not available or a pure Python solution is preferred. Optional Rust bindings are available to improve performance for low-level operations.\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/jelmer/dulwich\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈◈\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#cpython #dulwich #git #pypy #python\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/05ffd4abbeb29f9509495e795916ae8ade840d80ad2bbb7ce772edacce1c09de/jelmer/dulwich"
        ],
        "processed_at": "2025-07-22T10:14:28.486353"
    }
]