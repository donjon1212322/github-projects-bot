[
    {
        "project_id": 745749489,
        "content": "𝗔𝗨𝗧𝗢𝗠𝗔𝗧𝗘 | AI-driven local automation assistant that uses natural language to automate computer tasks and workflows.  🌟 Rising Fast!\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: AI-driven local automation assistant that uses natural language to automate computer tasks and workflows.\n📅 Created: Jan 2024 • Updated: Mar 2025\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ No-Code Automation using natural language\n✅ Full Interface Control\n✅ Simplified Installation\n✅ Local Operation for data security\n✅ Multi-Model Support for LLMs\n✅ Continuous Learning and Adaptation\n\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 1.4K 𝘀𝘁𝗮𝗿𝘀\n🍴 181 𝗳𝗼𝗿𝗸𝘀\n🔍 14 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nautoMate is an AI-powered local automation tool that allows users to automate complex computer tasks using natural language. It leverages large language models to understand task descriptions and operate the computer interface, simulating human vision and actions. The tool supports local deployment to ensure data security and aims to free users from repetitive work.\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/yuruotong1/autoMate\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#agent #ai #deepseek #ollama #omniparser\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/a45bcc1db27518127df2be118a98cf09e78726581fa6d48c3eba4d37ea8ea6ef/yuruotong1/autoMate",
            "https://i.ibb.co/Z118jmYw/745749489.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.850623"
    },
    {
        "project_id": 930391165,
        "content": "𝗠𝗘𝗠𝗢𝗥𝗬 | Simple, efficient note-taking and organization.  🔥 Super Hot!\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 📜 JavaScript \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Simple, efficient note-taking and organization.\n📅 Created: Feb 2025 • Updated: Mar 2025\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Simple UI\n✅ Folder and note creation with\n✅ Keyboard shortcuts\n✅ Instant URL formatting\n✅ Local media storage\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐ 187 𝘀𝘁𝗮𝗿𝘀\n🍴 7 𝗳𝗼𝗿𝗸𝘀\n🔍 1 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nMemory is a minimalist, open-source note-taking application designed for simplicity and efficiency. It provides a straightforward interface for taking and organizing notes in folders, featuring keyboard shortcuts, instant URL formatting, and local media storage. The goal is to offer a frictionless note-taking experience without unnecessary features.\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/yousboot/Memory\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/eda6089f0ab2175999e915f52a37d56424fbe52703d30acc6afae6fe55bf8759/yousboot/Memory",
            "https://i.ibb.co/zV7tGrFd/930391165.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.850942"
    },
    {
        "project_id": 906150015,
        "content": "𝗩𝗔𝗟𝗜𝗗𝗢𝗢𝗣𝗦𝗜𝗘 | Validating data using a simple and chainable API.  \n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Validating data using a simple and chainable API.\n📅 Created: Dec 2024 • Updated: Mar 2025\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Data validation\n✅ BYOD (Bring Your Own DataFrame) concept\n✅ Easy to use syntax\n✅ Chainable validation methods\n\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐ 55 𝘀𝘁𝗮𝗿𝘀\n🍴 0 𝗳𝗼𝗿𝗸𝘀\n🔍 1 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nValidoopsie is a Python data validation library designed for ease of use and flexibility. It allows users to define validation rules and chain them together in a manner similar to DataFrame libraries. The library incorporates the 'Bring Your Own DataFrame' concept, supporting various DataFrame types for data validation tasks.\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/akmalsoliev/Validoopsie\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#data_contracts #data_engineering #data_testing #data_validation #python\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/e89d93cfcdfae55396b208311166334c625a84ef6ebb1f663616e1d07d15a70b/akmalsoliev/Validoopsie",
            "https://i.ibb.co/R47Kq245/906150015.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.851247"
    },
    {
        "project_id": 5764651,
        "content": "𝗧𝗭𝗟𝗢𝗖𝗔𝗟 | Determining the local timezone of a system, even when the system's configuration is incomplete or non-standard.  ✨ Notable!\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Determining the local timezone of a system, even when the system's configuration is incomplete or non-standard.\n📅 Created: Sep 2012 • Updated: Mar 2025\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Returns the IANA time zone name for the local time zone.\n✅ Provides a tzinfo object with local timezone information.\n✅ Works on Unix and Windows systems.\n✅ Attempts to fix the lack of local timezone detection in pytz and zoneinfo.\n✅ Provides get_localzone_name() to get only the timezone name.\n\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐ 196 𝘀𝘁𝗮𝗿𝘀\n🍴 58 𝗳𝗼𝗿𝗸𝘀\n🔍 2 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nThe tzlocal Python module aims to provide a reliable way to determine the local timezone of a system, regardless of the underlying operating system (Windows or Unix-like). It addresses the challenge of accurately identifying the local timezone when standard libraries like pytz and zoneinfo fall short due to incomplete system configurations, offering both the timezone name and a tzinfo object.\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/regebro/tzlocal\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/c2928aa67f8afa6d7dc4f735017b1f3b8cb75a260b3ab2b4125bc26b2a77d670/regebro/tzlocal",
            "https://i.ibb.co/mrfmF6d8/5764651.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.851544"
    },
    {
        "project_id": 689299900,
        "content": "𝗟𝗔𝗡𝗚𝗪𝗔𝗧𝗖𝗛 | LLM monitoring, experimentation, measurement, and improvement of LLM pipelines.  🔥 Super Hot!\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 📘 TypeScript \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: LLM monitoring, experimentation, measurement, and improvement of LLM pipelines.\n📅 Created: Sep 2023 • Updated: Mar 2025\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Optimization Studio (Drag-and-drop interface, DSPy framework, Prompt and few-shot generation, Experiment tracking)\n✅ Quality Assurance (30+ evaluators, Custom evaluation builder, Dataset management, Compliance and safety checks, DSPy Visualizer)\n✅ Monitoring & Analytics (Cost and performance tracking, Real-time debugging, User analytics, Custom dashboards and alerts)\n\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 1.2K 𝘀𝘁𝗮𝗿𝘀\n🍴 69 𝗳𝗼𝗿𝗸𝘀\n🔍 16 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nLangWatch is an LLM Ops platform designed to monitor, experiment with, and optimize LLM pipelines. It offers features such as a drag-and-drop optimization studio, quality assurance tools with evaluators and dataset management, and monitoring and analytics dashboards for cost, performance, and user behavior. It supports integration with both Python and TypeScript.\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/langwatch/langwatch\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#ai #analytics #datasets #dspy #evaluation\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/ea19d65a16b6ff0768b07b82866d75a40841ab9d63db34fc9d787aa953c2d758/langwatch/langwatch",
            "https://i.ibb.co/x8cDYPtV/689299900.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.851866"
    },
    {
        "project_id": 285134677,
        "content": "𝗩𝗜𝗭𝗧𝗥𝗔𝗖𝗘𝗥 | Debugging and profiling Python code execution.  🔥 Super Hot!\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐍 Python \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Debugging and profiling Python code execution.\n📅 Created: Aug 2020 • Updated: Mar 2025\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Detailed function entry/exit information on timeline with source code\n✅ Easy to use, no source code change for most features, no package dependency\n✅ Low overhead\n✅ Supports threading, multiprocessing, subprocess, async and PyTorch\n✅ Powerful front-end, able to render GB-level trace smoothly\n✅ Works on Linux/MacOS/Windows\n\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 6.2K 𝘀𝘁𝗮𝗿𝘀\n🍴 423 𝗳𝗼𝗿𝗸𝘀\n🔍 10 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nVizTracer is a low-overhead debugging and profiling tool for Python code. It provides detailed function-level tracing with a powerful front-end for visualization, supporting various execution models like threading, multiprocessing, and async. It aims to be easy to use with minimal overhead.\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/gaogaotiantian/viztracer\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#debugging #flamegraph #logging #profiling #python\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/866599b00218a9d4b352604a221004460e26d0b7e7a5e60993c573a510b381fd/gaogaotiantian/viztracer",
            "https://i.ibb.co/20kRBz7Z/285134677.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.852170"
    },
    {
        "project_id": 93882897,
        "content": "𝗦𝗟𝗔𝗡𝗚 | Building and maintaining large shader codebases in a modular and extensible fashion while maintaining high performance across various platforms.  🔥 Super Hot!\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🔨 C++ \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Building and maintaining large shader codebases in a modular and extensible fashion while maintaining high performance across various platforms.\n📅 Created: Jun 2017 • Updated: Mar 2025\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Cross-platform shader compilation (D3D12, Vulkan, Metal, D3D11, OpenGL, CUDA, CPU)\n✅ Automatic differentiation for neural graphics\n✅ Module system for scalable shader development\n✅ Generics and interfaces for code specialization\n✅ HLSL and GLSL compatibility\n✅ Capability system for managing feature set differences across platforms\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 3.7K 𝘀𝘁𝗮𝗿𝘀\n🍴 259 𝗳𝗼𝗿𝗸𝘀\n🔍 322 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nSlang is a shading language designed to simplify the development and maintenance of large-scale shader codebases. It offers cross-platform compilation, automatic differentiation, a module system, and generics, enabling developers to write shaders once and run them on multiple platforms like D3D12, Vulkan, and CUDA. Slang also provides compatibility with HLSL and GLSL, facilitating easier adoption for existing projects.\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/shader-slang/slang\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#cuda #d3d12 #glsl #hlsl #shaders\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/37455275c3b62bfc140ed214cac2109992324840d3989a047350885a39c40344/shader-slang/slang",
            "https://i.ibb.co/nq9pD2ZR/93882897.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.852478"
    },
    {
        "project_id": 603535454,
        "content": "𝗟𝗔𝗡𝗚𝗖𝗛𝗔𝗜𝗡𝗚𝗢 | Building applications with LLMs using Go.  🌟 Rising Fast!\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n𝗧𝗘𝗖𝗛 𝗦𝗧𝗔𝗖𝗞: 🐹 Go \n🎯 𝗨𝗦𝗘 𝗖𝗔𝗦𝗘: Building applications with LLMs using Go.\n📅 Created: Feb 2023 • Updated: Mar 2025\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n✨ 𝗞𝗘𝗬 𝗙𝗘𝗔𝗧𝗨𝗥𝗘𝗦 ✨\n\n✅ Go language implementation of LangChain\n✅ Building applications with LLMs through composability\n✅ Examples provided for usage\n\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n📊 𝗣𝗥𝗢𝗝𝗘𝗖𝗧 𝗦𝗧𝗔𝗧𝗦\n\n⭐⭐⭐⭐ 6K 𝘀𝘁𝗮𝗿𝘀\n🍴 750 𝗳𝗼𝗿𝗸𝘀\n🔍 188 𝗼𝗽𝗲𝗻 𝗶𝘀𝘀𝘂𝗲𝘀\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n📝 𝗔𝗕𝗢𝗨𝗧 𝗧𝗛𝗜𝗦 𝗣𝗥𝗢𝗝𝗘𝗖𝗧\n\nLangChain Go is a Go language implementation of LangChain, designed to facilitate the creation of LLM-powered applications through composable components. The repository provides examples to help developers get started with building their own applications.\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n🔗 𝗟𝗜𝗡𝗞𝗦\n• 𝗚𝗶𝘁𝗛𝘂𝗯: https://github.com/tmc/langchaingo\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n🔥 𝗙𝗼𝗹𝗹𝗼𝘄 𝘂𝘀 for daily GitHub projects!\n👉 GitHub Open Source: https://t.me/GitHub_Open_Source\n\n❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖\n\n\n🏷️ 𝗧𝗔𝗚𝗦\n#ai #go #golang #langchain\n\n\n© 2025 - Curated with ❤️ for developers",
        "platform": "facebook",
        "media_urls": [
            "https://opengraph.githubassets.com/74c8c5e65adcf3c0a0d147393f26f60d46aceedb26eff892563efaee180ed3c9/tmc/langchaingo",
            "https://i.ibb.co/KcCxsqzN/603535454.jpg"
        ],
        "processed_at": "2025-03-12T10:12:23.852784"
    }
]