[
    {
        "project_id": 956112390,
        "content": "ðŸ”¥ <b>ClockTemp</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDisplaying time, date, and temperature information in a terminal-based user interface with customizable options.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ TUI clock\nâ€¢ Displays time and date\nâ€¢ Displays temperature\nâ€¢ Customizable time and date formats\nâ€¢ Customizable temperature units\n<br>\nðŸ“– <b>Summary:</b>\nClockTemp is a TUI clock application written in Python that displays the current time, date, and temperature in the terminal. It allows users to customize the display format, temperature units, and colors. The application also fetches weather data based on user-specified latitude and longitude using the Open-Meteo API.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/arthur-dnts/ClockTemp?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/026e916b8d4dd6f3e07016852a3f4ff8de3b1d97f6ff814a1917521dc0c45345/arthur-dnts/ClockTemp",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 994135102,
        "content": "âœ¨ <b>trmt</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSimulating 2D Turing machines (turmites) in the terminal.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Full Unicode support\nâ€¢ Up to 256 simultaneous heads\nâ€¢ Full color support (16-color, 256-color, and RGB/hex)\nâ€¢ Randomized rule generator\nâ€¢ Deterministic seed-based simulation\n<br>\nðŸ“– <b>Summary:</b>\nThe `trmt` repository provides a terminal-based 2D Turing machine (turmite) simulator. It allows users to simulate multiple turmites simultaneously with customizable rules, colors, and characters. The simulator offers features like Unicode support, configurable parameters, real-time interaction, and deterministic seed-based simulations.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/cenonym/trmt?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/51606e2539bd5b41971d450a868ea5eeabb6d4c8543e39705177a9fd081ec8ab/cenonym/trmt",
        "platform": "telegram",
        "quality_score": 0.6499999999999999
    },
    {
        "project_id": 901034542,
        "content": "ðŸ”¥ <b>gazelle</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEstimating gaze targets in images using a transformer-based approach with pretrained visual encoders.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Gaze target estimation using a transformer architecture\nâ€¢ Leverages pretrained visual foundation models (DINOv2)\nâ€¢ Lightweight gaze decoder with frozen visual encoder\nâ€¢ Multi-person inference\n<br>\nðŸ“– <b>Summary:</b>\nThe Gaze-LLE repository provides an implementation for gaze target estimation using a transformer architecture. It leverages pretrained visual foundation models like DINOv2 and learns a lightweight gaze decoder. The repository offers pretrained models and a PyTorch Hub integration for easy use in multi-person gaze prediction scenarios.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/fkryan/gazelle?embed=0\">View Project</a>\nâ€¢ <a href=\"https://arxiv.org/abs/2412.09586?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/68d1d65c02fa85484115f9eaa31368225b25ae948d5d5da806714466888fd6f2/fkryan/gazelle",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 850510466,
        "content": "ðŸ”¥ <b>Kraken</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCentralized brute-force attack tool for cybersecurity professionals.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ FTP Brute Force\nâ€¢ Kubernetes Brute Force\nâ€¢ LDAP Brute Force\nâ€¢ VOIP Brute Force\nâ€¢ SSH Brute Force\n<br>\nðŸ“– <b>Summary:</b>\nKraken is a Python-based tool designed to centralize and streamline various brute-forcing tasks. It provides a suite of tools for performing brute-force attacks across a range of network protocols, web applications, and directory/subdomain discovery.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/jasonxtn/Kraken?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/7b75ed23bc1c0db76d021f3103264adb091bd803601b0f887362229a7aa016bf/jasonxtn/Kraken",
        "platform": "telegram",
        "quality_score": 0.25
    },
    {
        "project_id": 749765499,
        "content": "ðŸ’¡ <b>gocheck</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAiding red teams in malware development by identifying bytes flagged by security solutions.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Identifies malicious bytes in malware\nâ€¢ Uses Windows Defender for scanning\nâ€¢ Uses AMSI for scanning\nâ€¢ Supports Kaspersky's AV Engine for scanning\nâ€¢ Allows concurrent scanning using multiple AV engines\n<br>\nðŸ“– <b>Summary:</b>\nGocheck is a Go-based tool designed to assist red teams in identifying malicious bytes within their malware. It leverages various scanning engines, including Windows Defender, AMSI, and Kaspersky, to pinpoint the specific code segments that trigger security alerts. The tool supports concurrent scanning and offers a debug mode for detailed analysis, making it a valuable asset for malware development and evasion testing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gatariee/gocheck?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9759a90215620befed780a3df65c03ef7e21f850305a3445706a12e88a36146f/gatariee/gocheck",
        "platform": "telegram",
        "quality_score": 0.15
    },
    {
        "project_id": 180380156,
        "content": "ðŸŒŸ <b>DefenderCheck</b> | C#\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nIdentifying problematic code segments in a binary that are flagged by Microsoft Defender, aiding in evasion and payload development.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Identifies specific bytes flagged by Microsoft Defender\nâ€¢ Splits a binary to pinpoint offending bytes\nâ€¢ Prints flagged bytes to the screen\n<br>\nðŸ“– <b>Summary:</b>\nDefenderCheck is a C# tool designed to identify the specific bytes within a binary that trigger Microsoft Defender's detection. It takes a binary as input, iteratively splits it, and isolates the exact byte sequences that are flagged, printing these bytes to the screen. This functionality assists in understanding and evading Defender's detection mechanisms during payload development and security research.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/matterpreter/DefenderCheck?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9c24cb2c454ef97ee37415adf76ee469a0a77f0a74d7e183bcddafa4d76e5606/matterpreter/DefenderCheck",
        "platform": "telegram",
        "quality_score": 0.25
    },
    {
        "project_id": 674306868,
        "content": "ðŸ”¥ <b>hawk-eye</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nScanning various data sources for Personally Identifiable Information (PII) and secrets to prevent data breaches and cyber threats.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Scans Filesystem for PII and sensitive data\nâ€¢ Scans S3 for PII and sensitive data\nâ€¢ Scans MySQL for PII and sensitive data\nâ€¢ Scans Redis for PII and sensitive data\nâ€¢ Scans Google Cloud Storage for PII and sensitive data\n<br>\nðŸ“– <b>Summary:</b>\nHawk-eye is a command-line tool that scans various data sources, including file systems, cloud storage (S3, GCS, Firebase), and databases (MySQL, Redis), for PII and secrets. It uses advanced text analysis and OCR to delve into various document formats, providing comprehensive data protection across platforms.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rohitcoder/hawk-eye?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/674306868/d6ef7cae-fd1a-4800-b1c1-90e0808dba52",
        "platform": "telegram",
        "quality_score": 0.8500000000000001
    }
]