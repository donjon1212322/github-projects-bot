[
    {
        "project_id": 1008866688,
        "content": "ðŸŒŸ <b>oh-my-logo</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDisplaying giant ASCII-art logos with colorful gradients in the terminal.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Two Rendering Modes: Outlined ASCII art or filled block characters\nâ€¢ 13 Beautiful Palettes: From sunset gradients to matrix green\nâ€¢ Gradient Directions: Vertical, horizontal, and diagonal gradients\n<br>\nðŸ“– <b>Summary:</b>\nOh-my-logo is a TypeScript-based tool for generating visually appealing ASCII art logos with gradient colors in the terminal. It offers features like outlined or filled rendering modes, a variety of color palettes, customizable gradient directions, and multi-line support, all without requiring any dependencies. It can be used as a CLI tool or integrated as a library.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/shinshin86/oh-my-logo?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.npmjs.com/package/oh-my-logo?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/1008866688/2a712ee4-0181-4ba4-949c-404a60267d59",
        "platform": "telegram",
        "quality_score": 0.6
    },
    {
        "project_id": 1009048253,
        "content": "ðŸ’¡ <b>image_to_pixel_art_wasm</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nImage-to-pixel-art conversions in the browser.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ K-means palette extraction with user-selectable color count or supply your own palette\nâ€¢ Transparency is kept intact\nâ€¢ Down-samples to a fixed tile grid using nearest-neighbour then scales back up, aspect-ratio preserved\nâ€¢ Pure client-side WASM processing\n<br>\nðŸ“– <b>Summary:</b>\nThis Rust-based WebAssembly library converts raster images into low-color pixel art directly in the browser. It features k-means palette extraction, transparency handling, and downsampling with aspect ratio preservation, all processed client-side via WASM.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gametorch/image_to_pixel_art_wasm?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/346a2c3099d5814b4ab55c3f4556cf23c74aa62e81de3f95aafe27f4d01c2087/gametorch/image_to_pixel_art_wasm",
        "platform": "telegram",
        "quality_score": 0.6
    },
    {
        "project_id": 769564277,
        "content": "âœ¨ <b>code2prompt</b> | MDX\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nConvert codebases into LLM prompts for code analysis, generation, and other tasks.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Automatic Code Processing\nâ€¢ Smart Filtering\nâ€¢ Flexible Templating\nâ€¢ Token Tracking\nâ€¢ Git Integration\n<br>\nðŸ“– <b>Summary:</b>\nCode2prompt is a CLI tool and SDK that transforms codebases into structured prompts for Large Language Models. It offers features like automatic code processing, smart filtering using glob patterns and .gitignore, flexible templating with Handlebars, token tracking, and Git integration. It streamlines the process of creating LLM prompts for code analysis, generation, and automation.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/mufeedvh/code2prompt?embed=0\">View Project</a>\nâ€¢ <a href=\"https://code2prompt.dev?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/4299bdcf814ac518ecb6aecc9016b4f7759ad0ee923536f41e0865f70282a9aa/mufeedvh/code2prompt",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 861892731,
        "content": "ðŸ’¡ <b>pyspur</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nVisually iterating and debugging AI agent workflows to improve reliability and reduce development time.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Human in the Loop\nâ€¢ Loops\nâ€¢ File Upload\nâ€¢ Structured Outputs\nâ€¢ RAG\n<br>\nðŸ“– <b>Summary:</b>\nPySpur is a visual playground for AI agent workflows, designed to help AI engineers iterate faster. It offers features like human-in-the-loop, looping, file upload, structured outputs, RAG, multimodal support, tracing, evals, and one-click deployment, supporting various LLM vendors and Python-based extensions.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/PySpur-Dev/pyspur?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pyspur.dev?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/861892731/c772225b-4648-4218-b944-e08a3f913a52",
        "platform": "telegram",
        "quality_score": 0.6
    },
    {
        "project_id": 1051476,
        "content": "âœ¨ <b>plantuml</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating diagrams from textual descriptions, particularly UML diagrams, but also supporting other diagram types.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Generates UML diagrams from textual descriptions\nâ€¢ Supports various UML diagram types (Sequence, Use case, Class, Object, Activity, Component, Deployment, State, Timing)\n<br>\nðŸ“– <b>Summary:</b>\nPlantUML is a tool that generates diagrams from textual descriptions. It primarily focuses on UML diagrams, supporting a wide range of UML diagram types. Additionally, it extends its capabilities to non-UML diagrams like JSON, YAML, and network diagrams, providing a versatile solution for visualizing various systems and data structures.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/plantuml/plantuml?embed=0\">View Project</a>\nâ€¢ <a href=\"https://plantuml.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/380d4b8c727f68cb79ae564fb9342b54c9ba5f5242e758c7898a1a0fa0ff5b05/plantuml/plantuml",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 771350543,
        "content": "âœ¨ <b>WrenAI</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nQuerying databases with natural language to generate SQL, charts, and AI-driven insights.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Natural language to SQL conversion\nâ€¢ AI-generated charts and reports\nâ€¢ Semantic layer for accurate LLM outputs\nâ€¢ API for embedding queries and charts in applications\n<br>\nðŸ“– <b>Summary:</b>\nWren AI is an open-source GenBI agent that allows users to query databases using natural language. It translates natural language into SQL, generates charts, and provides AI-driven insights. The platform also offers an API for embedding these capabilities into other applications.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Canner/WrenAI?embed=0\">View Project</a>\nâ€¢ <a href=\"https://getwren.ai/oss?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/abd42f7fb868fce51a873b51a3d83be80d491dd1c0b484c675adcd5d09c82326/Canner/WrenAI",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 919276446,
        "content": "ðŸ”¥ <b>starskey</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFast persistent, transactional, and embedded key-value storage.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Leveled partial merge compaction\nâ€¢ ACID transactions\nâ€¢ Configurable options\nâ€¢ WAL with recovery\nâ€¢ Key value separation\n<br>\nðŸ“– <b>Summary:</b>\nStarskey is a Go package for fast, persistent, transactional, and embedded key-value storage. It implements a multi-level, durable log-structured merge tree with features like ACID transactions, configurable options, WAL recovery, key-value separation, bloom filters, and compression. It's designed for high-performance OLTP applications.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/starskey-io/starskey?embed=0\">View Project</a>\nâ€¢ <a href=\"https://starskey.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/a8fc18b1cd188c796e19fc06f24303f6301b50d653b5df0399bd115ec06f6ec6/starskey-io/starskey",
        "platform": "telegram",
        "quality_score": 0.6
    }
]