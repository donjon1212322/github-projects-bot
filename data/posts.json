[
    {
        "project_id": 758197374,
        "content": "ðŸš€ <b>parlant</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding and deploying LLM agents that reliably follow instructions in real-world applications.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Guaranteed compliance with instructions\nâ€¢ Principle-based AI agent development\nâ€¢ Easy deployment (60 seconds)\nâ€¢ Tools for defining agent behavior\nâ€¢ React widget integration\n<br>\nðŸ“– <b>Summary:</b>\nParlant is a Python framework for building LLM agents designed for control and real-world use. It ensures agents follow instructions by using a principle-based approach rather than relying on system prompts. Parlant allows developers to define agent behavior with natural language and deploy agents quickly, offering guaranteed compliance and easy integration.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/emcie-co/parlant?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.parlant.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/930d553f895889eceddd71d16834d65b4f08b78d937bbb3b3a12bca2f2f9f033/emcie-co/parlant",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 993676621,
        "content": "âœ¨ <b>PolymarketViewer</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBrowsing and interacting with Polymarket prediction markets on Android devices.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Browse active prediction market events\nâ€¢ Filter and search events\nâ€¢ Sort events by various criteria\nâ€¢ View detailed event information\nâ€¢ Display interactive price history charts\n<br>\nðŸ“– <b>Summary:</b>\nPolymarket Viewer is an Android application that allows users to browse, filter, and interact with prediction markets on Polymarket.com. It provides features such as detailed event information, interactive price charts, and a comment system, all within a Material 3 designed interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Streamatico/PolymarketViewer?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1fd5dbdd4dbe5ce9dec0725c709873b7b891b60912fa1465405ffe33b542beda/Streamatico/PolymarketViewer",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 1031165657,
        "content": "ðŸŒŸ <b>EntangleMe</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDemonstrates quantum teleportation as a message transfer system.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Simulates quantum teleportation for message transfer\nâ€¢ Uses Qiskit for quantum circuit simulation\nâ€¢ Web interface for sending and receiving bits\nâ€¢ Frontend built with React\nâ€¢ Backend built with FastAPI\n<br>\nðŸ“– <b>Summary:</b>\nEntangleMe simulates quantum teleportation for secure message transfer using Qiskit. It provides a web interface built with React and FastAPI, allowing users to send and receive bits, demonstrating the principles of quantum communication. The project serves as a practical example of applying quantum computing to real-world communication systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/dev-Ninjaa/EntangleMe?embed=0\">View Project</a>\nâ€¢ <a href=\"https://entangleme.vercel.app?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8e86c416c48d1032835efea33165f7aced75fc49cd4ea7f795c5c9b248593ca9/dev-Ninjaa/EntangleMe",
        "platform": "telegram",
        "quality_score": 0.8
    },
    {
        "project_id": 512188824,
        "content": "ðŸŒŸ <b>cdimage</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBurning visible images onto CD-R media using custom software and algorithms.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Burns visible pictures onto a compact disc surface\nâ€¢ GUI with visual preview mode\nâ€¢ Coordinate conversion code based on unDEFER's implementation\nâ€¢ Ported to modern Qt6\nâ€¢ Windows binary build available\n<br>\nðŸ“– <b>Summary:</b>\nThe CDImage repository provides a tool for burning visible pictures onto the surface of a compact disc. It includes a GUI with a visual preview mode and utilizes coordinate conversion code inspired by previous similar projects. The project has been ported to Qt6 and a Windows binary build is available, offering a way to create unique, visually customized CDs.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/arduinocelentano/cdimage?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ef72846ddacb6893ce3c878417af6fa452f093bd401f08e8e5f0155d5131860e/arduinocelentano/cdimage",
        "platform": "telegram",
        "quality_score": 0.25
    },
    {
        "project_id": 319029846,
        "content": "ðŸŒŸ <b>Depixelization_poc</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRecovering obscured text from pixelized images, particularly those pixelized using a linear box filter.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Recovers plaintext from pixelized screenshots\nâ€¢ Works on images pixelized with a linear box filter\nâ€¢ Includes tools for showing box detection and generating pixelated images\n<br>\nðŸ“– <b>Summary:</b>\nThe Depix repository provides a proof-of-concept technique for recovering plaintext from pixelized screenshots. It focuses on images pixelized with a linear box filter and includes tools for visualizing box detection and generating pixelated images. The repository offers example usages demonstrating how to recover text from images pixelized with different software and settings.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/spipm/Depixelization_poc?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/aad79a62d50511fdeb440981adb20dfb38b97afc623ef3e5ac4f00925e08dded/spipm/Depixelization_poc",
        "platform": "telegram",
        "quality_score": 0.35
    },
    {
        "project_id": 23044617,
        "content": "ðŸ”¥ <b>popmotion</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating delightful user interfaces with simple animation libraries.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Keyframe and spring animations for numbers, colors, and complex strings\nâ€¢ Composable and portable design for various JavaScript environments\nâ€¢ TypeScript codebase with high test coverage\n<br>\nðŸ“– <b>Summary:</b>\nPopmotion is a JavaScript animation library designed for creating smooth and engaging user interfaces. It supports keyframe and spring animations for a variety of data types, including numbers, colors, and complex strings. Its composable and portable design makes it suitable for various JavaScript environments, and its small size ensures minimal impact on application performance.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Popmotion/popmotion?embed=0\">View Project</a>\nâ€¢ <a href=\"https://popmotion.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/46249a3ea2ac563954f51ead88f85487bf5f477b394d2f13455139e38282e64f/Popmotion/popmotion",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 9114826,
        "content": "ðŸ”¥ <b>Medoo</b> | PHP\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAccelerating database development in PHP projects.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Lightweight framework with minimal dependencies\nâ€¢ Simple and intuitive API\nâ€¢ Supports complex SQL queries and data mapping\nâ€¢ Compatible with multiple database systems (MySQL, MariaDB, PostgreSQL, SQLite, MSSQL, Oracle, Sybase)\nâ€¢ Integrates with popular PHP frameworks\n<br>\nðŸ“– <b>Summary:</b>\nMedoo is a lightweight PHP database framework designed to accelerate development by providing a simple and intuitive API for interacting with various database systems. It supports complex SQL queries, data mapping, and integrates seamlessly with popular PHP frameworks, making it a versatile tool for database-driven applications.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/catfan/Medoo?embed=0\">View Project</a>\nâ€¢ <a href=\"https://medoo.in?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/9114826/74410600-f77a-11e9-9994-04de808acc47",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 453068084,
        "content": "ðŸš€ <b>risingwave</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReal-time processing, analysis, and management of event data.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time event streaming platform\nâ€¢ PostgreSQL compatibility\nâ€¢ S3 as primary storage\nâ€¢ Apache Iceberg integration\nâ€¢ SQL and Python interfaces\n<br>\nðŸ“– <b>Summary:</b>\nRisingWave is a real-time event streaming platform that offers a simple and cost-effective way to process, analyze, and manage real-time event data. It features PostgreSQL compatibility, S3 storage, and Apache Iceberg integration. RisingWave supports both SQL and Python interfaces for interacting with streaming data.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/risingwavelabs/risingwave?embed=0\">View Project</a>\nâ€¢ <a href=\"https://go.risingwave.com/slack?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/453068084/5f79d6ef-c316-48ef-abac-ea202138d0da",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    }
]