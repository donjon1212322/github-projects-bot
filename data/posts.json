[
    {
        "project_id": 704776837,
        "content": "ðŸŒŸ <b>SunnyCapturer</b> | HTML\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCapturing and annotating screenshots with additional functionalities like OCR and image translation.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Screenshot capture\nâ€¢ OCR (Optical Character Recognition)\nâ€¢ Image translation\nâ€¢ Sticker support\nâ€¢ Image pinning\n<br>\nðŸ“– <b>Summary:</b>\nSunnyCapturer is a cross-platform screenshot tool with features like OCR, image translation, sticker support, and image pinning. It aims to provide a simple and beautiful interface for capturing and manipulating screen content across different operating systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/XMuli/SunnyCapturer?embed=0\">View Project</a>\nâ€¢ <a href=\"http://sunnycapturer.xmuli.tech/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3f1f62f9042db76c94bc80c7fff099d8c808f83880265602b9426f3167aa3bc2/XMuli/SunnyCapturer",
        "platform": "telegram",
        "quality_score": 0.9
    },
    {
        "project_id": 960420129,
        "content": "ðŸŒŸ <b>winboat</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRunning Windows applications on Linux systems.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Elegant Interface\nâ€¢ Automated Installs\nâ€¢ Run Any App\nâ€¢ Full Windows Desktop\nâ€¢ Filesystem Integration\n<br>\nðŸ“– <b>Summary:</b>\nWinBoat allows users to run Windows applications on Linux with seamless integration. It leverages containerization and remote desktop technologies to provide a native-like experience for Windows apps within a Linux environment, including filesystem integration and access to the full Windows desktop.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/TibixDev/winboat?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.winboat.app/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/960420129/699936fe-eb73-47d1-aa22-e6fd0837066b",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 75785240,
        "content": "ðŸ”¥ <b>authelia</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSecuring web applications with SSO and MFA.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Single Sign-On (SSO)\nâ€¢ Multi-Factor Authentication (MFA)\nâ€¢ TOTP support\nâ€¢ WebAuthn support\nâ€¢ LDAP integration\n<br>\nðŸ“– <b>Summary:</b>\nAuthelia is an open-source Single Sign-On (SSO) and multi-factor authentication (MFA) server. It protects web applications by requiring users to authenticate through its portal, supporting various 2FA methods like TOTP, WebAuthn, and push notifications, enhancing security for web services.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/authelia/authelia?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.authelia.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/75785240/724ca480-396f-11ea-874f-d39c6900e14d",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 7951393,
        "content": "ðŸ’¡ <b>handlers</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnhancing Go HTTP services and web applications with commonly used middleware functionalities.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Logging HTTP requests (Common Log Format, Combined Log Format)\nâ€¢ Gzipping responses\nâ€¢ Validating request content types\nâ€¢ Matching HTTP methods to handlers\nâ€¢ Populating request information from proxy headers\n<br>\nðŸ“– <b>Summary:</b>\nThe `gorilla/handlers` repository provides a collection of HTTP middleware for Go web applications, designed to enhance request logging, response compression, content type validation, and other common web server functionalities. It offers pre-built handlers for tasks like logging requests in standard formats, compressing responses with gzip, and handling different HTTP methods.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gorilla/handlers?embed=0\">View Project</a>\nâ€¢ <a href=\"https://gorilla.github.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/177687ed13c052b73020ef01ba6b18739173f15b7e7bb6e83d1c6f3b3f54a234/gorilla/handlers",
        "platform": "telegram",
        "quality_score": 0.7000000000000001
    },
    {
        "project_id": 457435290,
        "content": "ðŸš€ <b>go-whatsapp-web-multidevice</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding a REST API for interacting with WhatsApp, enabling automation and integration with other applications and services, particularly AI agents through MCP.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Send WhatsApp messages via HTTP API\nâ€¢ MCP (Model Context Protocol) Server Support\nâ€¢ Mention someone in messages\nâ€¢ Post WhatsApp Status\nâ€¢ Image and video compression before sending\n<br>\nðŸ“– <b>Summary:</b>\nGOWA is a WhatsApp REST API built with Golang, designed for efficient memory usage. It supports UI, Webhooks, and MCP (Model Context Protocol), enabling integration with AI agents and tools. The project provides a comprehensive solution for sending WhatsApp messages, managing statuses, and receiving messages with webhook notifications.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/aldinokemal/go-whatsapp-web-multidevice?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/457435290/70c0c823-04d7-4410-9f7d-8b8331498061",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 919456166,
        "content": "ðŸ’¡ <b>wordpecker-app</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nPersonalized language learning and vocabulary building.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Duolingo-style lessons\nâ€¢ Custom vocabulary lists\nâ€¢ Interactive quizzes\nâ€¢ LLM-generated lessons\nâ€¢ Vocabulary discovery feature (Vision Garden)\n<br>\nðŸ“– <b>Summary:</b>\nThe WordPecker App is a personalized language-learning tool that combines Duolingo-style lessons with custom vocabulary lists. Users can add words from various sources like books and videos, then practice them through interactive quizzes and LLM-generated lessons. The app aims to make vocabulary acquisition more efficient and personalized.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/baturyilmaz/wordpecker-app?embed=0\">View Project</a>\nâ€¢ <a href=\"https://wordpeckerapp.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d34de70846e54ce70c8b9405b1284fb2a75d31b4c5c34b54936fbae967849a48/baturyilmaz/wordpecker-app",
        "platform": "telegram",
        "quality_score": 0.65
    }
]