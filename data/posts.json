[
    {
        "project_id": 94889537,
        "content": "ðŸŒŸ <b>webscrapbook</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCapturing and archiving web pages for offline access, organization, and annotation.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Web page capture\nâ€¢ Archive formats\nâ€¢ Customizable configurations\nâ€¢ Future retrieval\nâ€¢ Organization\n<br>\nðŸ“– <b>Summary:</b>\nWebScrapBook is a browser extension for capturing web pages with customizable archive formats. It allows users to save web content locally or on a server for future retrieval, organization, annotation, and editing. The project is based on the legacy Firefox add-on ScrapBook X.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/danny0838/webscrapbook?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d4b66b81353c691588b2a902002687f50e741c0298d64d1e2e78029fd9c8dbb1/danny0838/webscrapbook",
        "platform": "telegram",
        "quality_score": 1.0
    },
    {
        "project_id": 738314904,
        "content": "âœ¨ <b>wrtag</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomated music tagging and organization based on the MusicBrainz database.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fast music tagging using Go\nâ€¢ Filesystem organization of music files\nâ€¢ Cover art fetching from Cover Art Archive\nâ€¢ Concurrent processing with filesystem locking\nâ€¢ Addons for lyrics, ReplayGain, and subprocesses\n<br>\nðŸ“– <b>Summary:</b>\nwrtag is a fast and automated music tagging and organization tool built in Go, leveraging the MusicBrainz database. It provides a suite of tools for various use cases, including tagging, organizing, and fetching cover art, with a focus on speed and composability. The tool supports addons for extended functionality and offers a web interface for remote importing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/sentriz/wrtag?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/244c67327bbde91fb798864ca8139ee63a11afe4ea0ad65f0af604bf223adc86/sentriz/wrtag",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 529956444,
        "content": "ðŸ”¥ <b>SubSeven</b> | Pascal\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRemote access and control, reminiscent of the original SubSeven Backdoor but without malicious features, primarily for nostalgic or educational purposes.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ SubSeven 2.2.X branch UX theme in pure VCL/WinAPI\nâ€¢ Pure Socket API with support of latest OpenSSL version\nâ€¢ Multi-Threaded / Concurrency\nâ€¢ File Manager (Reactive)\n<br>\nðŸ“– <b>Summary:</b>\nSubSeven Legacy is a Delphi-based project recreating the look and feel of the original SubSeven remote access tool. It provides features like file and process management, remote terminal access, and Windows session management, all within a classic SubSeven 2.2.X themed interface. The project aims to evoke nostalgia and demonstrate remote access capabilities without including any malicious functionalities.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/DarkCoderSc/SubSeven?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/059e8e53b12e28e5e7c9e15b7387f11c83d2accd4f7a73da7c88487611025d76/DarkCoderSc/SubSeven",
        "platform": "telegram",
        "quality_score": 0.15
    },
    {
        "project_id": 886008786,
        "content": "ðŸš€ <b>fileserver</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nServing static files and Single-Page Applications (SPAs) with features like ETag generation and gzip compression.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ ETag header generation\nâ€¢ gzip compression\nâ€¢ Static file serving\nâ€¢ SPA serving\n<br>\nðŸ“– <b>Summary:</b>\nThe fileserver repository provides a simple way to serve static files and SPAs in Go applications. It enhances file serving with features like ETag header generation for efficient caching and gzip compression to reduce file sizes. The repository offers convenient methods for mounting the file server to existing HTTP routers.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ffss92/fileserver?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/709db72429c2a148e02919ba786a3481215f0d302faa8ece51332bb8155fff71/ffss92/fileserver",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 690120202,
        "content": "ðŸ’¡ <b>misconfig-mapper</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDetecting security misconfigurations in third-party services used by companies and bug bounty targets.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Template-based CLI tool for detecting misconfigurations\nâ€¢ Automatic permutation generation based on company name for service discovery\n<br>\nðŸ“– <b>Summary:</b>\nMisconfig Mapper is a Go-based tool designed to identify and resolve common security misconfigurations in various services and SaaS solutions. It utilizes a template-based CLI tool to automate the testing process, allowing users to detect service presence, generate permutations for company-specific service discovery, and perform detailed misconfiguration checks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/intigriti/misconfig-mapper?embed=0\">View Project</a>\nâ€¢ <a href=\"https://bugology.intigriti.io/misconfig-mapper-docs?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f88ed3d2bee22a259f67a8525af1b23241e408fc97d34b96a664614e26062873/intigriti/misconfig-mapper",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 930466730,
        "content": "ðŸš€ <b>go-tmdb-cli</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFetching and displaying movie data from TMDB via a command-line interface.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fetches movie data from TMDB\nâ€¢ Displays data in a command-line interface\nâ€¢ Supports filtering by language, year, genres, rating, etc.\nâ€¢ Provides curated lists (now playing, popular, top rated, upcoming)\n<br>\nðŸ“– <b>Summary:</b>\nThe go-tmdb-cli is a command-line tool for fetching and displaying movie data from The Movie Database (TMDB). It allows users to retrieve curated lists of movies and filter results based on various criteria like language, year, and genre. The tool is designed to provide a simple interface for accessing TMDB data directly from the terminal.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/alnah/go-tmdb-cli?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e82f7127cf7698e798e8ac79cfd972932340bef059897cdb5696dacee6147258/alnah/go-tmdb-cli",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 905998319,
        "content": "ðŸš€ <b>pixie</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSimplifying Java object creation and configuration using annotations and a properties-based or builder API.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Configuration\nâ€¢ Dependency Injection\nâ€¢ Events\nâ€¢ Constructor Injection\n<br>\nðŸ“– <b>Summary:</b>\nPixie is a lightweight Java library designed to streamline object creation and configuration. It offers dependency injection, configuration management, and event handling capabilities within a small 100k jar. Pixie utilizes constructor injection with annotations and can be configured via properties files or a fluent builder API.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/tomitribe/pixie?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/077158ee9fe3fd08a825b948e70fa27caa935b7959db1325bbd48fead2f0bc57/tomitribe/pixie",
        "platform": "telegram",
        "quality_score": 0.75
    },
    {
        "project_id": 844920178,
        "content": "âœ¨ <b>reactify-core</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDeveloping reactive backend systems in microservices using Java and Spring Boot.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Reactive programming with reactor-core\nâ€¢ Keycloak integration for security\nâ€¢ Trace logging\nâ€¢ Caching (Redis)\nâ€¢ MinIO server support\n<br>\nðŸ“– <b>Summary:</b>\nReactify-core is a Java library designed to simplify the development of reactive microservices using Spring Boot and reactor-core. It provides features such as Keycloak integration, trace logging, caching, and MinIO server support, enabling developers to build robust and scalable backend systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/hoangtien2k3/reactify-core?embed=0\">View Project</a>\nâ€¢ <a href=\"https://reactify-sand.vercel.app?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/7b9fb09e21e1b5f68ed2f8545700930c8602f467f54f142b825730db8c7b4fa0/hoangtien2k3/reactify-core",
        "platform": "telegram",
        "quality_score": 0.9500000000000001
    },
    {
        "project_id": 910583288,
        "content": "ðŸš€ <b>openldk</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nIntegrating Java libraries into a Lisp-based workflow without the need for an out-of-process Java runtime environment.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Java Bytecode to Lisp Translation\nâ€¢ Native Machine Code Compilation\nâ€¢ CLOS Integration\nâ€¢ OpenJDK Runtime Libraries\n<br>\nðŸ“– <b>Summary:</b>\nOpenLDK is a JIT compiler and runtime for Java implemented in Common Lisp. It translates Java bytecode into Lisp code, which is then compiled into native machine code. This allows for seamless integration of Java libraries into Lisp projects, mapping Java classes to CLOS classes.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/atgreen/openldk?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/b68cccc7b2f4439667c20fdc2b31f5488f648cacb76943d2e8d24166284581e7/atgreen/openldk",
        "platform": "telegram",
        "quality_score": 0.65
    }
]