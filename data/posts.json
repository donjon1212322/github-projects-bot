[
    {
        "project_id": 952822080,
        "content": "ðŸŒŸ <b>vibe-draw</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating 3D models and worlds from 2D sketches.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ 2D sketching to 3D model conversion\nâ€¢ AI-powered drawing enhancement\nâ€¢ 3D world building\nâ€¢ Real-time updates\nâ€¢ glTF export\n<br>\nðŸ“– <b>Summary:</b>\nVibe Draw allows users to create 3D models and worlds by sketching on a 2D canvas. It uses AI to enhance drawings and convert them into 3D models, which can then be added to a 3D world. The tool supports real-time updates and glTF export for integration with existing 3D workflows.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/martin226/vibe-draw?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3667d4f127302f776289b861602de188eca364793ce29192c1b1ae649925d43e/martin226/vibe-draw",
        "platform": "telegram",
        "quality_score": 0.75
    },
    {
        "project_id": 79317191,
        "content": "ðŸ’¡ <b>typesense</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding delightful search experiences with typo-tolerance and speed.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Typo Tolerance\nâ€¢ Simple and Delightful\nâ€¢ Blazing Fast\nâ€¢ Tunable Ranking\nâ€¢ Sorting\n<br>\nðŸ“– <b>Summary:</b>\nTypesense is a fast, typo-tolerant search engine designed as an open-source alternative to Algolia and a more user-friendly alternative to Elasticsearch. It's built in C++ and architected for low-latency instant searches. Key features include typo tolerance, simple setup and operation, blazing fast speed, tunable ranking, and sorting capabilities.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/typesense/typesense?embed=0\">View Project</a>\nâ€¢ <a href=\"https://typesense.org?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d200bf2c55784bc96e5c22e9cf009c377ab31fe05bad91b869f6a27beaf6f2e1/typesense/typesense",
        "platform": "telegram",
        "quality_score": 1.1
    },
    {
        "project_id": 339533345,
        "content": "âœ¨ <b>assembly-tutorial</b> | Assembly\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLearning assembly language programming, specifically for AMD64/Intel 64-bit architectures.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AMD64/Intel 64 bit programming tutorial\nâ€¢ Covers instruction sets, registers, stacks\nâ€¢ Explains bits, bytes, words, number bases, math, boolean algebra, bit shifting\nâ€¢ Details memory management, ELF files, MMU, exceptions\n<br>\nðŸ“– <b>Summary:</b>\nThis repository provides a comprehensive tutorial for learning assembly language programming on AMD64/Intel 64-bit architectures. It covers fundamental concepts like registers, instruction sets, memory management, and assembler directives. The tutorial is aimed at novices and beginners, providing practical examples and explanations to help them understand low-level programming.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/mschwartz/assembly-tutorial?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9f8f51c8fe3e29da3bfb6bd72e73bdb8766bda828848eb6fd51e5685f70e5c1f/mschwartz/assembly-tutorial",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 60436054,
        "content": "ðŸ”¥ <b>cute_headers</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding self-contained, easy-to-integrate libraries for game development and other applications.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Single-file header libraries\nâ€¢ Cross-platform compatibility\nâ€¢ No dependencies\nâ€¢ 2D collision detection\nâ€¢ Networking library with security\n<br>\nðŸ“– <b>Summary:</b>\nThe cute_headers repository offers a collection of single-file, cross-platform C/C++ header libraries designed for easy integration into projects without external dependencies. These libraries cover a range of functionalities, including collision detection, networking, audio processing, image handling, and more, making them particularly useful for game development.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/RandyGaul/cute_headers?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/6068f7f92a45ddb2b9abc37b09e85bc1c3309bd9f6108f2610f6d94a078797fc/RandyGaul/cute_headers",
        "platform": "telegram",
        "quality_score": 0.7000000000000001
    },
    {
        "project_id": 264764016,
        "content": "ðŸ”¥ <b>axiom</b> | Shell\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDistributing and managing offensive and defensive security scans across multiple cloud instances.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Dynamic infrastructure framework\nâ€¢ Multi-cloud environment support (DigitalOcean, IBM Cloud, Linode, Azure, AWS)\nâ€¢ Distributed scanning with tools like nmap, ffuf, masscan, nuclei, meg\n<br>\nðŸ“– <b>Summary:</b>\nAxiom is a dynamic infrastructure framework designed to simplify the deployment and management of security scanning tools across multiple cloud environments. It enables users to easily distribute scans using tools like Nmap, ffuf, and Nuclei across numerous instances, accelerating vulnerability assessments and penetration testing. Axiom supports various cloud providers, including DigitalOcean, IBM Cloud, Linode, Azure, and AWS.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/pry0cc/axiom?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9222283b214007c2d6ae81d0fd4fda349bc0df85a28f3466001da67d1948c33a/pry0cc/axiom",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 920866025,
        "content": "ðŸ”¥ <b>WinVisor</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEmulating and virtualizing Windows x64 user-mode executables within a controlled environment.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Hypervisor-based emulation of Windows x64 user-mode executables\nâ€¢ Uses Windows Hypervisor Platform (WHP) API\nâ€¢ Clones address space of a suspended process into the virtual environment\nâ€¢ Forwards syscalls to the host OS\n<br>\nðŸ“– <b>Summary:</b>\nWinVisor is a hypervisor-based emulator for Windows x64 user-mode executables, leveraging the Windows Hypervisor Platform API. It creates a virtual environment by cloning the address space of a suspended process, allowing for the execution and monitoring of applications in a virtualized setting. The emulator forwards syscalls to the host OS and provides a framework for implementing custom syscall hooks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/x86matthew/WinVisor?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/bfc0ed8ff1af236aaea4b2e1acdcabec53ce6700be193d60ceb5a77fe64363e2/x86matthew/WinVisor",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 95876775,
        "content": "ðŸš€ <b>project-guidelines</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding a set of best practices and guidelines for JavaScript project development and maintenance.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Git workflow guidelines\nâ€¢ Documentation standards\nâ€¢ Environment consistency\nâ€¢ Dependency management\nâ€¢ Testing practices\n<br>\nðŸ“– <b>Summary:</b>\nThe project-guidelines repository offers a comprehensive collection of best practices for JavaScript projects, covering various aspects from Git workflow to API security. It aims to improve project maintainability, code quality, and overall development efficiency by providing actionable guidelines and recommendations.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/elsewhencode/project-guidelines?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/2feb420d48c397dd654a396765734edd715fb863a05201a8dee4b27fe77c9e87/elsewhencode/project-guidelines",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 906422044,
        "content": "âœ¨ <b>cudacodes</b> | Cuda\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLearning and experimenting with CUDA programming.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Practical CUDA code examples\nâ€¢ CUDA optimization techniques\nâ€¢ Well-commented code for learning\nâ€¢ Specific implementations like softmax, matrix multiplication, and matrix-vector multiplication\n<br>\nðŸ“– <b>Summary:</b>\nThis repository provides a collection of CUDA code examples and optimizations, primarily focusing on C/C++. It serves as a learning resource for individuals looking to understand and improve their CUDA skills through practical implementations and extensively commented code. The repository covers various topics, including softmax, matrix multiplication, and device information retrieval.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Maharshi-Pandya/cudacodes?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/bfd641646cbbf7dd03e22c27b3b666f63ceea30cc5e1499c1f74d8aba7fdfc5f/Maharshi-Pandya/cudacodes",
        "platform": "telegram",
        "quality_score": 0.7000000000000001
    }
]