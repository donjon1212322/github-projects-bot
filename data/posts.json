[
    {
        "project_id": 957959030,
        "content": "ðŸŒŸ <b>ghostmark</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLeak detection in confidential messages by embedding subtle watermarks using language variations.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Generates unique language variants of text for each recipient.\nâ€¢ Embeds watermarks into text using subtle wording changes powered by Gemini.\nâ€¢ Enables tracing leaks back to the source by comparing leaked text to generated variants.\n<br>\nðŸ“– <b>Summary:</b>\nGhostmark is a tool for detecting leaks in confidential messages. It generates unique language variants of a message for each recipient, embedding subtle watermarks powered by Gemini. By comparing leaked text to the generated variants, the source of the leak can be identified.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/adrian-kong/ghostmark?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ad1a5b711ae3bc7c670582754a724654923e12a74bfdbe671dfd5ad730cceab5/adrian-kong/ghostmark",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 873617127,
        "content": "ðŸ’¡ <b>igatha</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nOffline emergency communication in war zones and disaster areas where traditional networks are unavailable.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Offline SOS signaling using Bluetooth Low Energy (BLE)\nâ€¢ Disaster detection using device sensors (accelerometer, gyroscope, barometer)\nâ€¢ Manual and automatic SOS signal sending\nâ€¢ Recovery mode for helping others\nâ€¢ Audible siren generation\n<br>\nðŸ“– <b>Summary:</b>\nIgatha is an open-source SOS signaling and recovery app designed for offline emergency communication. It utilizes Bluetooth Low Energy and device sensors for distress detection and signaling, enabling users to send SOS signals and assist others in war zones and disaster areas without relying on traditional networks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/nizarmah/igatha?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/873617127/2a869e32-2e16-488a-9d69-ca799e7a2491",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 872380225,
        "content": "ðŸ’¡ <b>aya</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nControlling Android devices from a desktop environment\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Screen mirror\nâ€¢ File explorer\nâ€¢ Application manager\nâ€¢ Process monitor\nâ€¢ Layout inspector\n<br>\nðŸ“– <b>Summary:</b>\nAYA is a desktop application that provides a GUI wrapper for ADB, allowing users to easily control Android devices. It offers features such as screen mirroring, file exploration, application management, and performance monitoring. The application supports Windows, macOS, and Linux.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/liriliri/aya?embed=0\">View Project</a>\nâ€¢ <a href=\"https://aya.liriliri.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/defe064c2318a4dfb0d78e2ee8874f56d823c25f67ab055db8feb7819f7493b8/liriliri/aya",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 906490557,
        "content": "ðŸŒŸ <b>telegram-files</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomated and unattended downloading of files from Telegram channels and groups.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Downloads files from Telegram channels and groups\nâ€¢ Supports multiple Telegram accounts\nâ€¢ Supports suspending and resuming downloads\nâ€¢ Auto-transfers files to other destinations\nâ€¢ Provides preview of downloaded videos and pictures\n<br>\nðŸ“– <b>Summary:</b>\nThe telegram-files repository provides a self-hosted solution for automatically downloading files from Telegram channels and groups. It supports multiple accounts, allows pausing and resuming downloads, and can automatically transfer files to other locations. The application also offers a responsive design with preview capabilities for downloaded media.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/jarvis2f/telegram-files?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ab0740633050711cdf7d2ec33756e46f741fa4577e81c0691cebdd72693c2688/jarvis2f/telegram-files",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 626145619,
        "content": "ðŸš€ <b>textual-paint</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nTerminal-based image editing inspired by MS Paint.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Open and save images\nâ€¢ MS Paint toolset\nâ€¢ Color palette\nâ€¢ Efficient screen updates and undo/redo history\nâ€¢ SSH compatibility\n<br>\nðŸ“– <b>Summary:</b>\nTextual Paint is a terminal-based image editor that brings the classic MS Paint experience to the command line. It offers a comprehensive set of tools, file format support, and features like undo/redo, localization, and dark mode, enabling users to create and edit images directly within their terminal.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/1j01/textual-paint?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pypi.org/project/textual-paint/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/626145619/c71d0c14-c3e4-42ec-9ed5-512d8babc664",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 924856571,
        "content": "ðŸŒŸ <b>deepseek-r1-chat</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAI-powered coding assistance, debugging help, and programming guidance running locally.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Python Expert\nâ€¢ Debugging Assistant\nâ€¢ Code Documentation\nâ€¢ Solution Design\nâ€¢ Runs 100% locally\n<br>\nðŸ“– <b>Summary:</b>\nDeepSeek Code Companion is an AI-powered coding assistant that runs completely locally. It leverages the DeepSeek-r1 language model through Ollama and provides features such as Python expertise, debugging assistance, code documentation, and solution design, all while ensuring privacy.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Rizwankaka/deepseek-r1-chat?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1c658ed6c0769da4b87a84176528e7665a8415a4e2ebcb38457f59776bb9e87f/Rizwankaka/deepseek-r1-chat",
        "platform": "telegram",
        "quality_score": 0.5
    },
    {
        "project_id": 598667202,
        "content": "âœ¨ <b>browser</b> | Zig\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFast web automation for AI agents, LLM training, scraping and testing.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Javascript execution\nâ€¢ Support of Web APIs (partial, WIP)\nâ€¢ Compatible with Playwright, Puppeteer through CDP (WIP)\nâ€¢ Ultra-low memory footprint\nâ€¢ Exceptionally fast execution\n<br>\nðŸ“– <b>Summary:</b>\nLightpanda Browser is an open-source, headless browser designed for AI and automation tasks. It emphasizes fast execution, low memory footprint, and compatibility with tools like Playwright and Puppeteer through the Chrome DevTools Protocol (CDP). It's intended for use cases such as AI agent development, LLM training, web scraping, and testing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/lightpanda-io/browser?embed=0\">View Project</a>\nâ€¢ <a href=\"https://lightpanda.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3fa3a38f7639e411a9c58008ac14857a586df0ff4c37cf48f9ab1ec5464b1b72/lightpanda-io/browser",
        "platform": "telegram",
        "quality_score": 1.05
    },
    {
        "project_id": 646480766,
        "content": "âœ¨ <b>roop</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReplacing faces in videos with a face of the user's choice.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ One-click face swapping\nâ€¢ No dataset or training required\nâ€¢ Headless mode support\nâ€¢ Various frame processors (face_swapper, face_enhancer)\nâ€¢ Options for controlling output video quality and encoding\n<br>\nðŸ“– <b>Summary:</b>\nRoop is a one-click face-swapping tool that allows users to replace faces in videos with a single image, eliminating the need for datasets or training. It supports various frame processors and offers options to control output video quality and encoding. The tool can be used in headless mode for automated processing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/s0md3v/roop?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d55690fce8a75edb3c4342df17e65745e55dfae6784454f98842bccdcd2f6986/s0md3v/roop",
        "platform": "telegram",
        "quality_score": 0.65
    }
]