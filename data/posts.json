[
    {
        "project_id": 1060418895,
        "content": "ðŸš€ <b>ffclipper</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nClipping sections from video files using ffmpeg with a user-friendly interface and sensible defaults.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ CLI and Qt-based GUI\nâ€¢ Stream copy and transcode output modes\nâ€¢ Automatic hardware acceleration (NVENC)\nâ€¢ Tonemapping\nâ€¢ Two-pass encoding for target file size\n<br>\nðŸ“– <b>Summary:</b>\nffclipper is a lightweight frontend for ffmpeg designed for convenient video clipping. It offers both a CLI and a Qt-based GUI, supporting features like stream copying, transcoding, automatic hardware acceleration (NVENC), tonemapping, two-pass encoding for target file sizes, and subtitle handling.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Jonny-GM/ffclipper?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/885383c4472c6dab258905a40c2c7bc9f3aaa1fd9f4cccc3f72ed1f579ffa8a0/Jonny-GM/ffclipper",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 1043516507,
        "content": "âœ¨ <b>port-kill</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFinding and freeing up blocked ports to facilitate development workflows.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time process detection on specific ports or ranges\nâ€¢ One-shot cleanup (--reset)\nâ€¢ Smart filtering and ignore lists\nâ€¢ Port Guard Mode (watch/reserve/auto-resolve)\nâ€¢ Security Audit Mode (suspicious ports, risk score, JSON)\n<br>\nðŸ“– <b>Summary:</b>\nPort Kill is a Rust-based tool designed to identify and free ports that are blocking development work. It supports macOS, Linux, and Windows, offering a CLI, status bar integration, and an optional dashboard for managing port usage locally or over SSH.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/kagehq/port-kill?embed=0\">View Project</a>\nâ€¢ <a href=\"https://portkill.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f1bf970e0f44b5f3c84befbc44f8d4c1e413fefbe146131ccfdc83769b6810b0/kagehq/port-kill",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 756867260,
        "content": "âœ¨ <b>Trayy</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMinimizing applications to the system tray for a clutter-free workspace.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Send to Tray\nâ€¢ Hide applications from the taskbar\nâ€¢ App Support for PWAs and other apps\nâ€¢ Quick Actions via right-click\nâ€¢ Windows 10 and 11 compatibility\n<br>\nðŸ“– <b>Summary:</b>\nTrayy is a Windows application written in C++ that allows users to minimize specified applications to the system tray, effectively hiding them from the taskbar. It supports various application types, including PWAs and traditional desktop applications, and offers features like quick actions via right-click menus and compatibility with Windows 10 and 11.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/alirezagsm/Trayy?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/b9edba0a91e68974f771dad914843790e2dcf58e4273e6e932babbbc206c7594/alirezagsm/Trayy",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 282944472,
        "content": "âœ¨ <b>pynguin</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomated generation of unit tests for Python code.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Automated unit test generation for Python\nâ€¢ Support for Python 3.10 (experimental support for 3.11, 3.12 and 3.13)\nâ€¢ Compatibility with Linux/macOS/Windows\n<br>\nðŸ“– <b>Summary:</b>\nPynguin is a tool for automatically generating unit tests for Python programs. It addresses the gap in fully-automated test generation for dynamically typed languages, offering a way to reduce the tediousness of software testing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/se2p/pynguin?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.pynguin.eu?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/282944472/d7426a00-7b31-11eb-8b11-39c4b4fb71bd",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 807512074,
        "content": "ðŸ’¡ <b>MegaParse</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nParsing various document types (PDF, Powerpoint, Word, etc.) for ingestion into LLMs while minimizing information loss.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Versatile Parser\nâ€¢ No Information Loss\nâ€¢ Fast and Efficient\nâ€¢ Wide File Compatibility\nâ€¢ Open Source\n<br>\nðŸ“– <b>Summary:</b>\nMegaParse is a versatile file parser optimized for LLM ingestion, designed to minimize information loss. It supports various document types, including PDFs, Powerpoint presentations, and Word documents, making it suitable for processing data for language models.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/QuivrHQ/MegaParse?embed=0\">View Project</a>\nâ€¢ <a href=\"https://megaparse.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/807512074/27c558a0-0db1-48cf-8101-8ac15cf58899",
        "platform": "telegram",
        "quality_score": 0.7000000000000001
    },
    {
        "project_id": 184809315,
        "content": "ðŸ’¡ <b>stumpy</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nTime series data mining and analysis\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Matrix profile computation\nâ€¢ Pattern/motif discovery\nâ€¢ Anomaly/novelty detection\nâ€¢ Shapelet discovery\nâ€¢ Semantic segmentation\n<br>\nðŸ“– <b>Summary:</b>\nSTUMPY is a Python library for time series analysis, primarily focused on efficiently computing the matrix profile. This matrix profile can then be used for various time series data mining tasks, including pattern discovery, anomaly detection, and time series segmentation.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/stumpy-dev/stumpy?embed=0\">View Project</a>\nâ€¢ <a href=\"https://stumpy.readthedocs.io/en/latest/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f4edc83b752f4e9037c4d04d4f4027602381599e0cb18c3713749b27f8c4a781/stumpy-dev/stumpy",
        "platform": "telegram",
        "quality_score": 0.95
    }
]