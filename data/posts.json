[
    {
        "project_id": 1033999973,
        "content": "ðŸŒŸ <b>sourcerer-mcp</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnabling AI agents to efficiently search and navigate codebases by providing semantic understanding and reducing token consumption.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Semantic code search\nâ€¢ Code navigation\nâ€¢ Token usage reduction for AI agents\nâ€¢ Code parsing and chunking using Tree-sitter\nâ€¢ File system integration with `.gitignore` support\n<br>\nðŸ“– <b>Summary:</b>\nSourcerer MCP is a tool for semantic code search and navigation, designed to reduce token usage for AI agents. It builds a semantic index of a codebase, allowing agents to search conceptually and jump directly to relevant code chunks instead of reading entire files.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/st3v3nmw/sourcerer-mcp?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d3be0be15b7fb8755ec8d7eb59c5f93ee5f70676d570614b32af1ecf58a59a3c/st3v3nmw/sourcerer-mcp",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 496233655,
        "content": "âœ¨ <b>MarkFlowy</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating and editing Markdown documents with AI-powered features and customizability.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Built-in AI (DeepSeek, ChatGPT)\nâ€¢ Lightweight (less than 10MB)\nâ€¢ High availability (remiirror editor)\nâ€¢ Multiple editing modes (source code, WYSIWYG)\nâ€¢ Custom Theme support\n<br>\nðŸ“– <b>Summary:</b>\nMarkFlowy is a lightweight and intelligent Markdown editor built with Rust and Tauri, offering features like AI assistance (DeepSeek, ChatGPT), custom themes, and multiple editing modes (source code, WYSIWYG). It aims to provide an efficient, beautiful, and data-safe Markdown editing experience across Linux, macOS, and Windows.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/drl990114/MarkFlowy?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.markflowy.cc?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/b564aad3e456931ab0d96df4c44420c10f47576f352fef05308c91bb03e02c86/drl990114/MarkFlowy",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 431446432,
        "content": "ðŸ”¥ <b>gravity_defied_cpp</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRecreating and playing Gravity Defied on modern systems using C++ and SDL2.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ C++ port of Gravity Defied\nâ€¢ SDL2 implementation\nâ€¢ Replicates original game features\n<br>\nðŸ“– <b>Summary:</b>\nThe repository is a C++ and SDL2 port of the mobile game Gravity Defied, originally developed for the J2ME platform. It aims to recreate all the features of the original game using C++ and the SDL2 library.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rgimad/gravity_defied_cpp?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/34a9963808d0b21137ef214c33c5db32d064d706ac68d81bb6e3bc1c05a85aa8/rgimad/gravity_defied_cpp",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 47767967,
        "content": "ðŸŒŸ <b>bootique</b> | Java\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding runnable Java applications and microservices.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Dependency Injection\nâ€¢ Module-based architecture\nâ€¢ Container-less execution\nâ€¢ Support for REST services, web apps, jobs, and DB migration tasks\n<br>\nðŸ“– <b>Summary:</b>\nBootique is a platform for building runnable Java applications without requiring a JavaEE container. It allows developers to create REST services, web apps, jobs, and DB migration tasks that can be run as simple commands, making it suitable for building microservices.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/bootique/bootique?embed=0\">View Project</a>\nâ€¢ <a href=\"https://bootique.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8b6466ef81864a98a773f02c5a09138e6636ea2f7d2c01521f0d3bbbced951e0/bootique/bootique",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 2788710,
        "content": "ðŸš€ <b>jclasslib</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAnalyzing, editing, and understanding Java bytecode.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Visualizes Java class files and bytecode\nâ€¢ Edits class file aspects in the UI\nâ€¢ Provides a Kotlin Multiplatform library for reading and writing class files\nâ€¢ Supports editing constant pool entries and bytecode instructions\nâ€¢ Offers a dark mode\n<br>\nðŸ“– <b>Summary:</b>\njclasslib bytecode editor is a tool for visualizing and editing compiled Java class files and bytecode. It also includes a Kotlin Multiplatform library for reading and writing Java class files, available on Maven Central.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ingokegel/jclasslib?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/77852238dc3ae383e72781304015ab3883f9f187fb30ebdb4f9225db82d86a98/ingokegel/jclasslib",
        "platform": "telegram",
        "quality_score": 0.7500000000000001
    },
    {
        "project_id": 107745806,
        "content": "ðŸ”¥ <b>kotlin-result</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nModeling operations that can result in either a successful value or an error, providing a clear and type-safe way to handle potential failures in Kotlin applications across multiple platforms.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multiplatform support (JVM, JS, Native)\nâ€¢ Result monad for handling success/failure\nâ€¢ Railway Oriented Programming support\n<br>\nðŸ“– <b>Summary:</b>\nThe kotlin-result repository provides a multiplatform Result monad for Kotlin, enabling developers to model operations that can either succeed with a value or fail with an error. It promotes functional programming principles like Railway Oriented Programming by clearly separating success and failure paths, and it's designed to minimize overhead through inline value classes.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/michaelbull/kotlin-result?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ac0030758defbbdbadd36f42466631adeea390104e8ae475e6f6817c5c3a9ef7/michaelbull/kotlin-result",
        "platform": "telegram",
        "quality_score": 0.6
    }
]