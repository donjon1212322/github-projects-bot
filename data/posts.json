[
    {
        "project_id": 284358500,
        "content": "ðŸŒŸ <b>mpvpaper</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSetting videos as wallpaper on Wayland compositors.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Plays videos as wallpaper on wlroots-based Wayland compositors\nâ€¢ Supports mpv options forwarding\nâ€¢ Allows control via keyboard bindings or mpv input-ipc-server\n<br>\nðŸ“– <b>Summary:</b>\nmpvpaper is a wallpaper program designed for wlroots-based Wayland compositors, enabling users to play videos as their desktop background. It leverages mpv for video playback and offers functionalities such as forwarding mpv options and control through keyboard bindings or an mpv input-ipc-server, providing a dynamic and customizable wallpaper experience.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/GhostNaN/mpvpaper?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/721293dbcc7ff61a2147363504841751b30474d2002ee2110262fdbf682fa86b/GhostNaN/mpvpaper",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 221912385,
        "content": "ðŸ”¥ <b>nemu</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nNcurses-based terminal UI management of QEMU virtual machines.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Install/delete/clone/rename VM\nâ€¢ Show VM status, CPU usage\nâ€¢ Start/stop/shutdown/reset VM\nâ€¢ Connect to VM via VNC or SPICE protocol\nâ€¢ Full VM snapshots\n<br>\nðŸ“– <b>Summary:</b>\nnEMU is a terminal-based user interface for managing QEMU virtual machines. It provides a curses-based interface to perform common VM operations such as installing, deleting, starting, stopping, and configuring VMs. It supports features like snapshots, USB, networking, VirtFS, OVA import, and remote control via D-Bus.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/nemuTUI/nemu?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/221912385/fa1f0280-07b6-11ea-895d-178b16c42c41",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 820087727,
        "content": "ðŸ’¡ <b>onlook</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nVisually building, styling, and editing React applications with AI assistance.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Visual editing of React apps\nâ€¢ AI-powered design suggestions\nâ€¢ Real-time code editor\nâ€¢ Next.js and Tailwind CSS support\nâ€¢ Rapid prototyping and deployment\n<br>\nðŸ“– <b>Summary:</b>\nOnlook is an open-source, visual-first code editor designed for building websites, prototypes, and designs with AI in Next.js and Tailwind CSS. It allows users to make edits directly in the browser DOM with a visual editor, offering a design-in-realtime experience with code and serving as an open-source alternative to tools like Bolt.new and Webflow.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/onlook-dev/onlook?embed=0\">View Project</a>\nâ€¢ <a href=\"https://onlook.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/37da6e3c4eac2e31f5299075d6b2ffc553676e390ae1099b08d184c92b426559/onlook-dev/onlook",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 1012154922,
        "content": "ðŸš€ <b>openrouter-bot</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLaunching a Telegram bot to interact with AI models through OpenRouter or local LLMs.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Telegram bot integration\nâ€¢ Communication with free and paid AI models via OpenRouter\nâ€¢ Support for local LLMs (e.g., via LM Studio)\nâ€¢ Model switching\n<br>\nðŸ“– <b>Summary:</b>\nThe openrouter-bot repository provides a way to quickly deploy a Telegram bot that can communicate with various AI models via the OpenRouter API or local setups like LM Studio. It supports features like model switching and Markdown formatting, offering a streamlined experience for interacting with AI models through Telegram. The project also optimizes the container startup process for faster deployment.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Lifailon/openrouter-bot?embed=0\">View Project</a>\nâ€¢ <a href=\"https://hub.docker.com/r/lifailon/openrouter-bot?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/fe99c0abc99e2192056bd64fd939c8c549cc05e35a232cf9d5b2d0bc78a07154/Lifailon/openrouter-bot",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 1010271930,
        "content": "ðŸš€ <b>drinfo</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMonitoring disk usage on Linux systems.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Physical Drive, Network (cloud) Drive Detection\nâ€¢ Colorful Progress Bars\nâ€¢ Human-Readable Sizes\nâ€¢ Terminal Responsive\nâ€¢ Detailed Information (mount point, filesystem type, device path, UUID, label, mount options, used, available, inodes, SMART status)\n<br>\nðŸ“– <b>Summary:</b>\nDrinfo is a Linux command-line tool designed to monitor disk usage. It provides detailed information about physical and network drives, including cloud drives, presenting the data with colorful progress bars and human-readable sizes. The tool adapts to terminal width and displays mount point, filesystem type, device path, UUID, label, mount options, used space, available space, inodes, and SMART status.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Lennart1978/drinfo?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/1010271930/d9712d60-c6fe-427d-b01d-69efe20d8016",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 1002125012,
        "content": "ðŸš€ <b>vibe-kanban</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nManaging and orchestrating AI coding agents to streamline software development.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Switching between different coding agents\nâ€¢ Orchestrating execution of multiple coding agents in parallel or sequence\nâ€¢ Reviewing work and starting dev servers\nâ€¢ Tracking task status\nâ€¢ Centralizing configuration of coding agent MCP configs\n<br>\nðŸ“– <b>Summary:</b>\nVibe Kanban is a Kanban board designed to manage AI coding agents. It allows users to easily switch between agents, orchestrate their execution, review their work, track task status, and centralize configuration. The primary use case is to streamline the software development process by effectively managing AI-powered coding assistance.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/BloopAI/vibe-kanban?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.vibekanban.com/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cc98688a2aaf8f6af5d7c6db7b30ec90171f1bf6117082244c030e185bfb7564/BloopAI/vibe-kanban",
        "platform": "telegram",
        "quality_score": 0.85
    }
]