[
    {
        "project_id": 1043937336,
        "content": "ðŸš€ <b>doomscroll-detector</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDetecting and discouraging doomscrolling behavior.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ YOLOv11 pose estimation for keypoint tracking\nâ€¢ YOLO object detection for phone detection\nâ€¢ Heuristic-based reclined posture detection (hip/shoulder alignment)\nâ€¢ Wrist proximity to phone detection\nâ€¢ Spoofed penalty counter\n<br>\nðŸ“– <b>Summary:</b>\nThe Doomscrolling Detector is a computer vision pipeline designed to identify and discourage excessive phone usage while in a reclined position. It uses pose estimation and object detection to determine when a user is likely doomscrolling, and then applies a spoofed penalty counter as a deterrent.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/andrew-noble/doomscroll-detector?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ecdb8c69b6d760cfa2c8bca2fd662653e100ad875ed7b8875cb7a630f661f659/andrew-noble/doomscroll-detector",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 819751459,
        "content": "ðŸŒŸ <b>Air-Guard</b> | Jupyter Notebook\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMonitoring and analyzing wireless communication data to detect and prevent Wi-Fi intrusions and attacks.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time WiFi packet capture using ESP32\nâ€¢ Graphical user interface for easy interaction\nâ€¢ Live packet statistics and visualization\nâ€¢ Detection of deauthentication attacks and Evil_Twin attacks\nâ€¢ Machine learning-based detection of Kr00k vulnerability and web spoofing attacks\n<br>\nðŸ“– <b>Summary:</b>\nAir-Guard is an ESP32-based Wi-Fi Intrusion Detection System that captures and analyzes wireless communication data in real-time. It provides a graphical interface for data visualization, detects various attacks like deauthentication and Evil Twin, and uses machine learning for advanced threat detection.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/razvan-radutoiu/Air-Guard?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/fca6f68d6f7c897489cc2929c207303a5a0b2c1b91bc6a30b53d438bf41231d7/razvan-radutoiu/Air-Guard",
        "platform": "telegram",
        "quality_score": 0.15
    },
    {
        "project_id": 1044117453,
        "content": "âœ¨ <b>pageindex-mcp</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnabling users to interact with long PDFs on Claude and other MCP-compatible clients by providing a reasoning-based RAG system.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Chat with long PDFs\nâ€¢ Reasoning-based RAG system\nâ€¢ Local and online PDF support\nâ€¢ Free usage (1000 pages)\nâ€¢ Unlimited conversations\n<br>\nðŸ“– <b>Summary:</b>\nThe PageIndex MCP repository provides a Multi-Client Protocol (MCP) server that allows users to chat with long PDFs using Claude, even when they encounter limit restrictions. It leverages a reasoning-based RAG system to provide human-like interactions with documents, offering features like local and online PDF support and unlimited conversations.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/VectifyAI/pageindex-mcp?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pageindex.ai/mcp?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f61b4296d5d05f3c01700976da2efee3bd6db1a30b3b0fc63965e7337cf9069e/VectifyAI/pageindex-mcp",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 707614074,
        "content": "ðŸ”¥ <b>link-extractor</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEfficiently extracting and managing links from web pages within a browser environment.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Extracting links from web pages\nâ€¢ Parsing links\nâ€¢ Opening links\nâ€¢ Filtering links\n<br>\nðŸ“– <b>Summary:</b>\nThe 'link-extractor' repository provides a web extension designed to extract, parse, and open links from web pages. It supports filtering links based on user-defined criteria, enhancing the user's ability to manage and interact with web content efficiently across multiple browsers.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/cssnr/link-extractor?embed=0\">View Project</a>\nâ€¢ <a href=\"https://link-extractor.cssnr.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/707614074/5ce6c147-4b15-4715-a78f-89faff8697dd",
        "platform": "telegram",
        "quality_score": 0.6
    },
    {
        "project_id": 1013031861,
        "content": "ðŸ”¥ <b>ssh-bot</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRemotely executing commands on servers or devices within a home network via Telegram.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Executing commands on local or remote hosts via SSH\nâ€¢ Parallel (asynchronous) command execution\nâ€¢ SSH connection manager with host availability check\nâ€¢ Support for directory navigation\nâ€¢ Combined access to remote hosts by key and/or password\n<br>\nðŸ“– <b>Summary:</b>\nThe ssh-bot is a Telegram bot written in Go that allows users to execute commands on remote hosts via SSH. It eliminates the need for VPNs or external IPs by providing asynchronous command execution and a connection manager with host availability checks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Lifailon/ssh-bot?embed=0\">View Project</a>\nâ€¢ <a href=\"https://hub.docker.com/r/lifailon/ssh-bot?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/302fee52fab0871791c16e0b3cba7ac6a124c4d4b86c8a7d67f150499d3975c9/Lifailon/ssh-bot",
        "platform": "telegram",
        "quality_score": 0.4
    },
    {
        "project_id": 831373509,
        "content": "ðŸš€ <b>uncloud</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDeploying and managing web applications across a network of Docker hosts with minimal cluster management overhead.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Deploy anywhere (cloud VMs, bare metal)\nâ€¢ Docker Compose support\nâ€¢ Zero-downtime deployments (rolling updates)\nâ€¢ Service discovery\nâ€¢ Persistent storage\n<br>\nðŸ“– <b>Summary:</b>\nUncloud is a lightweight container orchestration tool designed to simplify the deployment and management of containerized applications across multiple Docker hosts. It aims to provide the power of multi-machine deployments with the simplicity of Docker, bridging the gap to Kubernetes by offering features like service discovery, load balancing, and automatic HTTPS without the complexity of a central control plane.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/psviderski/uncloud?embed=0\">View Project</a>\nâ€¢ <a href=\"https://uncloud.run?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/70a740c6da965615e4ba6bb80fb826731b0241122ba19d0ebb614f0ecccb94af/psviderski/uncloud",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 876611731,
        "content": "ðŸš€ <b>pinguem</b> | Vue\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMonitoring the availability of hosts and subnets through a web interface and providing metrics for Prometheus.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Asynchronous host/subnet availability checking\nâ€¢ Web interface built with Vue\nâ€¢ Dynamic address input fields with client-side storage\nâ€¢ Subnet scanning capability\nâ€¢ Docker deployment support\n<br>\nðŸ“– <b>Summary:</b>\nPinguem is a web interface built with Vue that allows users to asynchronously check the availability of hosts or subnets. It utilizes the node-ping library for pinging and provides a Prometheus exporter for monitoring ping results. The application can be deployed using Docker or built from source using npm.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Lifailon/pinguem?embed=0\">View Project</a>\nâ€¢ <a href=\"https://hub.docker.com/r/lifailon/pinguem?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cd3c43099aed1b5f124ea1fdbc9a8603afc4c64751220239b4774bd114bc54c1/Lifailon/pinguem",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 796010781,
        "content": "ðŸ”¥ <b>plutoprint</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating reports, invoices, and visual snapshots from HTML content.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Generates PDFs from HTML\nâ€¢ Generates images from HTML\nâ€¢ Command-line interface for PDF generation\nâ€¢ Python API for PDF and image generation\nâ€¢ QR code generation support\n<br>\nðŸ“– <b>Summary:</b>\nPlutoPrint is a Python library that generates PDFs and images from HTML content. It leverages PlutoBook's rendering engine to provide a simple API for converting HTML into PDF documents or image files, making it suitable for generating reports, invoices, and visual snapshots.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/plutoprint/plutoprint?embed=0\">View Project</a>\nâ€¢ <a href=\"https://plutoprint.readthedocs.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8e27c5e30b5e24613c1bd1aa7d005bdbbb88da63c530192ead71f411ab398dc7/plutoprint/plutoprint",
        "platform": "telegram",
        "quality_score": 0.6499999999999999
    }
]