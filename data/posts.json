[
    {
        "project_id": 958273723,
        "content": "ðŸš€ <b>every-pdf</b> | HTML\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nComprehensive desktop application for everyday document tasks and professional-level PDF editing.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ PDF Editor (Add Text, Signature, Image, Checkbox)\nâ€¢ Split PDF files\nâ€¢ Merge PDF documents\nâ€¢ Add Watermark\nâ€¢ Rotate & Reorder pages\n<br>\nðŸ“– <b>Summary:</b>\nEvery PDF is a desktop application designed for comprehensive PDF management. It offers features such as editing, splitting, merging, watermarking, rotating, and reordering PDF documents. The application aims to provide a one-stop solution for both basic and advanced PDF-related tasks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/DDULDDUCK/every-pdf?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d5667d91420ebcb5fdb93e17b2857f9f1829541d0985a40415804aa2f97ef632/DDULDDUCK/every-pdf",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 1032006359,
        "content": "ðŸ’¡ <b>ranni</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nConverting images to ASCII art for terminal display or other text-based applications.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Image to ASCII conversion\nâ€¢ Scalable ASCII art output\nâ€¢ Supports image formats provided by the 'image' crate\n<br>\nðŸ“– <b>Summary:</b>\nThe 'ranni' repository is a Rust-based tool for converting images into ASCII art. It allows users to specify the scale of the output and supports various image formats through the 'image' crate. The primary use case is generating ASCII representations of images for display in environments where graphical interfaces are limited or unavailable.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Krak9n/ranni?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c32f615bf1ae53016482342916b771db51612df9a0248e3b8cfe61bd40ea46d1/Krak9n/ranni",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 60667730,
        "content": "âœ¨ <b>lvgl</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating embedded graphical user interfaces (GUIs) for microcontrollers (MCUs) and microprocessors (MPUs).\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Free and portable C library\nâ€¢ 30+ built-in widgets\nâ€¢ Flexible style system\nâ€¢ Flexbox and Grid layouts\nâ€¢ UTF-8 text rendering with CJK support\n<br>\nðŸ“– <b>Summary:</b>\nLVGL is a free and open-source embedded graphics library written in C, designed for creating user interfaces on resource-constrained devices. It offers a wide range of features including widgets, styling, layouts, and text rendering, making it suitable for various display types and input methods. LVGL aims to provide a comprehensive solution for developing modern and visually appealing GUIs on embedded systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/lvgl/lvgl?embed=0\">View Project</a>\nâ€¢ <a href=\"https://lvgl.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9ba60747545e13d41f6e7b91787195de490674e618c19e274eac39fc471a00be/lvgl/lvgl",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 998699154,
        "content": "ðŸŒŸ <b>Self-Forcing</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReal-time, streaming video generation using autoregressive video diffusion models.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Simulates inference during training\nâ€¢ Autoregressive rollout with KV caching\nâ€¢ Real-time, streaming video generation\nâ€¢ Matches quality of state-of-the-art diffusion models\n<br>\nðŸ“– <b>Summary:</b>\nThe Self-Forcing repository trains autoregressive video diffusion models by simulating the inference process during training, using autoregressive rollout with KV caching. This approach addresses the train-test distribution mismatch, enabling real-time, streaming video generation. It achieves performance comparable to state-of-the-art diffusion models, even on a single RTX 4090.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/guandeh17/Self-Forcing?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/22566198bdbb03bac4367148c0d91bb2497ec627645ff4e92917e19bc1a481d3/guandeh17/Self-Forcing",
        "platform": "telegram",
        "quality_score": 0.6499999999999999
    },
    {
        "project_id": 426848256,
        "content": "ðŸ’¡ <b>quadratic</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nData analysis and manipulation with AI and code integration within a spreadsheet environment.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Spreadsheet functionality\nâ€¢ AI integration\nâ€¢ Code execution within cells\nâ€¢ Data connections (SQL, ETL)\nâ€¢ Collaboration\n<br>\nðŸ“– <b>Summary:</b>\nQuadratic is a spreadsheet application that integrates AI and code execution directly into cells, enabling users to perform advanced data analysis and manipulation. It supports data connections and facilitates collaborative work, making it suitable for data science, data engineering, and general data analysis tasks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/quadratichq/quadratic?embed=0\">View Project</a>\nâ€¢ <a href=\"https://QuadraticHQ.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/de07d0b3a943d0c9d116b36ccf81ab09432a4ceade5ed4bdfaa486ddf842b110/quadratichq/quadratic",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 571613891,
        "content": "ðŸš€ <b>supervision</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReusable computer vision tools for tasks like object detection, instance segmentation, and tracking.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Model agnostic design\nâ€¢ Connectors for popular libraries (Ultralytics, Transformers, MMDetection)\nâ€¢ Customizable annotators\nâ€¢ Tools for loading datasets, drawing detections, and counting objects\n<br>\nðŸ“– <b>Summary:</b>\nSupervision is a Python package providing reusable computer vision tools. It offers model-agnostic connectors for popular libraries and customizable annotators, simplifying tasks such as loading datasets, visualizing detections, and counting objects in images and videos. It aims to streamline computer vision workflows.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/roboflow/supervision?embed=0\">View Project</a>\nâ€¢ <a href=\"https://supervision.roboflow.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8c7a6d56c9f60ebd6b09b00d77b0c79ba8a6e3eab98d0bc0a9ec793fe896e3f6/roboflow/supervision",
        "platform": "telegram",
        "quality_score": 0.85
    }
]