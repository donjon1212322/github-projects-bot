[
    {
        "project_id": 942369670,
        "content": "âœ¨ <b>clippy</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRunning large language models locally with a retro-style interface.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Simple chat interface\nâ€¢ Pre-packaged with Llama.cpp for efficient model execution\nâ€¢ Supports custom models, prompts, and parameters\nâ€¢ Offline and local operation\n<br>\nðŸ“– <b>Summary:</b>\nClippy is an Electron-based application that allows users to run large language models (LLMs) locally on their computers using a 1990s-inspired user interface. It leverages Llama.cpp for efficient model execution and supports various GGUF models, offering a nostalgic yet functional way to interact with modern AI technology.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/felixrieseberg/clippy?embed=0\">View Project</a>\nâ€¢ <a href=\"https://felixrieseberg.github.io/clippy/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ff4427ec4a8ac71251201740d46c638926eba05a0ce659cb7131307145018733/felixrieseberg/clippy",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 967455814,
        "content": "ðŸŒŸ <b>dnsanity</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nValidating DNS resolvers for security reconnaissance and DNS brute-forcing.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fast DNS resolver validation\nâ€¢ Customizable validation templates\nâ€¢ Concurrency for testing at scale\nâ€¢ Global and per-server rate limiting\nâ€¢ Automatic template re-validation\n<br>\nðŸ“– <b>Summary:</b>\nDNSanity is a high-performance DNS validator written in Go that uses template-based verification to quickly validate DNS servers at scale. It offers features such as customizable validation templates, concurrency, and rate limiting, making it suitable for security reconnaissance and DNS brute-forcing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/nil0x42/dnsanity?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/967455814/8cbde83d-9eb0-4750-a70a-bc735f7c51ad",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 904947981,
        "content": "âœ¨ <b>ShortMoji</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nQuick insertion of emojis and special characters using keyboard shortcuts in any application.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Emoji insertion via keyboard shortcuts\nâ€¢ Special character insertion via keyboard shortcuts\nâ€¢ Lightweight python program\nâ€¢ Similar to Discord's emoji system\n<br>\nðŸ“– <b>Summary:</b>\nShortMoji is a lightweight Python application that allows users to quickly insert emojis and special characters using simple keyboard shortcuts, similar to Discord's emoji system. It provides a convenient way to enhance text input with visual elements without needing to browse through extensive emoji libraries or character maps. The application supports a wide range of emojis and special characters, accessible through easy-to-remember shortcuts.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/TooFuW/ShortMoji?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/6ee14f51751b442dcd36599fd030aa39258f83cddf8ebcffbbd8c7347bb3a5d9/TooFuW/ShortMoji",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 915933343,
        "content": "ðŸš€ <b>beforeafter</b> | HTML\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nComparing and combining before/after images in a browser.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Combine before/after images side by side or vertically\nâ€¢ Visual diff tool to highlight changes between images\nâ€¢ Paste images directly from clipboard\nâ€¢ Drag and drop support\nâ€¢ Customizable appearance\n<br>\nðŸ“– <b>Summary:</b>\nBeforeAfter is a browser-based tool for comparing and combining images, particularly useful for visualizing changes. It offers features like side-by-side comparison, visual diff highlighting, clipboard pasting, drag-and-drop support, and customizable appearance. The tool requires no installation and runs entirely in the browser.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/yani-/beforeafter?embed=0\">View Project</a>\nâ€¢ <a href=\"https://yani-.github.io/beforeafter/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/7c1600f7f186372a20261fe1abce17f942ef4940ee4910d6d5740d1bbc82d5e4/yani-/beforeafter",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 913468419,
        "content": "ðŸš€ <b>LLaVA-Mini</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEfficient image and video understanding with reduced computational cost and memory usage.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Efficient image, high-resolution image, and video understanding using a single vision token.\nâ€¢ 77% FLOPs reduction compared to previous methods.\nâ€¢ Low-latency responses (40 milliseconds).\n<br>\nðŸ“– <b>Summary:</b>\nLLaVA-Mini is a large multimodal model designed for efficient image, high-resolution image, and video understanding. It achieves this efficiency by representing images with only one vision token, significantly reducing computational effort, response latency, and memory usage. The model maintains performance comparable to previous LLaVA versions while offering substantial improvements in efficiency and resource utilization.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ictnlp/LLaVA-Mini?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/83b0d6bac88fa3b734518857da362b04d258dbad5f072cb4828fa28028a8617f/ictnlp/LLaVA-Mini",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 915772200,
        "content": "ðŸŒŸ <b>Days-Left-Reminder</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding a daily reminder of the limited time remaining in one's life to encourage more meaningful actions.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Calculates remaining days based on a target date.\nâ€¢ Sends daily reminders via email.\nâ€¢ Customizable target date and email address.\nâ€¢ Runs as an App Script.\n<br>\nðŸ“– <b>Summary:</b>\nThe Days-Left-Reminder repository is a JavaScript-based tool designed to provide a daily reminder of the user's remaining days, calculated from a specified target date. It sends daily email notifications to encourage users to focus on meaningful activities and avoid wasting time. The script is intended to be run in App Script and requires customization with the user's email address and target date.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gieoon/Days-Left-Reminder?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cce7296ae3fc2e7761729336ec284d1570a9efb1c6632fbfff73471d966e0ea1/gieoon/Days-Left-Reminder",
        "platform": "telegram",
        "quality_score": 0.15
    },
    {
        "project_id": 895245856,
        "content": "âœ¨ <b>videoseal</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nOpen and efficient video watermarking for protecting video content.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Image and video watermarking\nâ€¢ Pre-trained models\nâ€¢ Training code\nâ€¢ Inference code\nâ€¢ Evaluation tools\n<br>\nðŸ“– <b>Summary:</b>\nThe Video Seal repository provides an open and efficient solution for video watermarking. It includes pre-trained models, training and inference code, and evaluation tools for both image and video watermarking. The repository also offers baselines of state-of-the-art image watermarking models adapted for video, enabling users to easily implement and experiment with video watermarking techniques.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/facebookresearch/videoseal?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e2ec62aeccf90c71f0083f168f4cbfc04f67c5032855f992f82feb068462f034/facebookresearch/videoseal",
        "platform": "telegram",
        "quality_score": 0.5
    },
    {
        "project_id": 67834502,
        "content": "ðŸ’¡ <b>mimesis</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating fake data for software development, testing, and data science.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multilingual support (46 locales)\nâ€¢ Extensible with custom data providers and field handlers\nâ€¢ Easy to use with simple design and clear documentation\nâ€¢ High performance\nâ€¢ Variety of data providers\n<br>\nðŸ“– <b>Summary:</b>\nMimesis is a Python library for generating fake data in various languages. It offers a wide range of data providers, schema-based data generation, and supports custom extensions. Mimesis is designed for ease of use, performance, and multilingual support, making it suitable for testing, development, and data science projects.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/lk-geimfari/mimesis?embed=0\">View Project</a>\nâ€¢ <a href=\"https://mimesis.name?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/67834502/89fdbd6f-8093-46fa-a4f4-1238bbc942f2",
        "platform": "telegram",
        "quality_score": 1.1000000000000003
    }
]