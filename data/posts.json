[
    {
        "project_id": 679066208,
        "content": "âœ¨ <b>systemctl-tui</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nManaging and monitoring systemd services in a Linux environment through a terminal user interface.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Browse service status and logs\nâ€¢ Start, stop, restart, and reload services\nâ€¢ View and edit unit files\nâ€¢ Installation via binary release, Rust (cargo), and distro packages (Arch Linux, Nix)\n<br>\nðŸ“– <b>Summary:</b>\nsystemctl-tui is a terminal user interface (TUI) tool written in Rust for interacting with systemd services and their logs on Linux systems. It provides a fast and simple way to browse service status and logs, start/stop/restart/reload services, and view/edit unit files.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rgwood/systemctl-tui?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/6b52d41429b59c22f9035044921168d7872809fb2208e18efe92c7542746facf/rgwood/systemctl-tui",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 828545665,
        "content": "âœ¨ <b>ai-captcha-bypass</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomated CAPTCHA solving for bypassing security measures.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multiple AI Providers (OpenAI, Google Gemini)\nâ€¢ Multiple CAPTCHA Types (text, complicated text, reCAPTCHA v2, puzzle, audio)\nâ€¢ Browser Automation (Selenium)\nâ€¢ Extensible design\nâ€¢ Benchmarking script\n<br>\nðŸ“– <b>Summary:</b>\nThe AI Captcha Bypass repository provides a Python-based command-line tool that leverages large multimodal models (LMMs) like OpenAI's GPT-4o and Google's Gemini to automatically solve various types of CAPTCHAs. It uses Selenium for web browser automation to interact with web pages and solve CAPTCHAs in real-time, supporting multiple AI providers and CAPTCHA types.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/aydinnyunus/ai-captcha-bypass?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/5acd16155a8cad63954b19b7be84db36499f829a26ca2a73dc24c5eb53952239/aydinnyunus/ai-captcha-bypass",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 682827276,
        "content": "ðŸ’¡ <b>seedit</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating and participating in decentralized, censorship-resistant online communities.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Decentralized social network client\nâ€¢ Serverless and adminless operation\nâ€¢ GUI and CLI options for community management\nâ€¢ Desktop, web, and mobile versions available\nâ€¢ P2P communication using the Plebbit protocol\n<br>\nðŸ“– <b>Summary:</b>\nSeedit is a decentralized Reddit alternative client (interface) for the Plebbit protocol, enabling users to create and own unstoppable communities. It offers both web and desktop versions, with the desktop version functioning as a full P2P Plebbit node, and allows users to create and manage communities (subplebbits) either through a GUI or a command-line interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/plebbit/seedit?embed=0\">View Project</a>\nâ€¢ <a href=\"https://seedit.app?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/a1e14d07fab1c6df76b05b460a49aa2814e404eab9185e67194f5c8a7dd114f0/plebbit/seedit",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 838212912,
        "content": "âœ¨ <b>chartdb</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDatabase schema visualization and design, including schema migration between different database systems.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Instant Schema Import\nâ€¢ AI-Powered Export for Easy Migration\nâ€¢ Interactive Editing\nâ€¢ Support for multiple database systems (PostgreSQL, MySQL, SQL Server, MariaDB, SQLite, CockroachDB, ClickHouse)\n<br>\nðŸ“– <b>Summary:</b>\nChartDB is an open-source, web-based database diagram editor that allows users to visualize and design their database schema using a single query. It supports multiple database systems and offers features like instant schema import, AI-powered export for schema migration, and interactive editing capabilities, all without requiring an account.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/chartdb/chartdb?embed=0\">View Project</a>\nâ€¢ <a href=\"https://chartdb.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/838212912/3063460a-4c7c-4b4d-aea5-1e9760aa7a37",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 914964527,
        "content": "ðŸŒŸ <b>solace-agent-mesh</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding and orchestrating multi-agent AI systems for solving complex problems.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multi-Agent Event-Driven Architecture\nâ€¢ Agent Orchestration\nâ€¢ Flexible Interfaces\nâ€¢ Extensible\nâ€¢ Agent-to-Agent Communication\n<br>\nðŸ“– <b>Summary:</b>\nSolace Agent Mesh is a framework for building event-driven multi-agent AI systems. It enables the creation of AI agent teams that can delegate tasks, share data, and connect with external systems through a standardized communication layer built on Solace Platform's event messaging.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/SolaceLabs/solace-agent-mesh?embed=0\">View Project</a>\nâ€¢ <a href=\"https://solacelabs.github.io/solace-agent-mesh/docs/documentation/getting-started/introduction?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/dd400859bf8e4826d5508f89a22acf8da699647707847bd829a8e25b1e88c2fb/SolaceLabs/solace-agent-mesh",
        "platform": "telegram",
        "quality_score": 1.1000000000000003
    },
    {
        "project_id": 1037244554,
        "content": "ðŸ”¥ <b>dnSurfer</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBrowsing text-based web content in environments where HTTP/HTTPS is blocked, such as captive portals.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ DNS-only web browsing\nâ€¢ Text-only content retrieval\nâ€¢ Electron-based desktop client\nâ€¢ Custom DNS server (Node.js)\nâ€¢ Circumvents HTTP/HTTPS blocking\n<br>\nðŸ“– <b>Summary:</b>\ndnSurfer is a proof-of-concept web browser that operates entirely over the DNS protocol. It includes a desktop client built with Electron and a custom DNS server implemented in Node.js, allowing users to browse text-only web content even when HTTP/HTTPS is blocked.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/nadchif/dnSurfer?embed=0\">View Project</a>\nâ€¢ <a href=\"https://dev.to/dchif/making-a-browser-that-slips-past-wi-fi-captive-portals-and-why-this-loophole-isnt-worth-it-13o?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f369544ac367ffb85d5dd616b4cb8d5ac8a47760f33b739f757daa871ce05136/nadchif/dnSurfer",
        "platform": "telegram",
        "quality_score": 0.3
    }
]