[
    {
        "project_id": 591273534,
        "content": "âœ¨ <b>carbonyl</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRunning a fully-featured web browser in a terminal environment, suitable for remote access, resource-constrained systems, or situations where a graphical interface is unavailable.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Chromium-based rendering\nâ€¢ Terminal-based interface\nâ€¢ Support for WebGL, WebGPU, audio, and video\nâ€¢ Low resource usage (low CPU, fast startup)\nâ€¢ No window server requirement\n<br>\nðŸ“– <b>Summary:</b>\nCarbonyl is a Chromium-based browser that runs inside a terminal. It supports modern web standards like WebGL, WebGPU, and media playback, offering a lightweight and efficient alternative to traditional graphical browsers, especially in environments without a window server or over SSH.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/fathyb/carbonyl?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e5bb420e56dc8ee056ccabbf5ba12b05449d6822456a2cf93a1e167b73396079/fathyb/carbonyl",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 795821853,
        "content": "ðŸš€ <b>cheatshh</b> | Shell\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nStoring and accessing command-line cheatsheets for quick reference and execution.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Comprehensive cheatsheets for various command-line utilities and tools\nâ€¢ Easy-to-use interface for quickly accessing and executing commands\nâ€¢ Customizable cheatsheets and groups\nâ€¢ TLDR and MAN pages visible in the preview\nâ€¢ Easy to add, edit, delete commands & groups\n<br>\nðŸ“– <b>Summary:</b>\nCheatshh is a command-line tool designed to help users manage and access their command-line cheatsheets. It allows users to store commands and their descriptions, group them into libraries, and quickly access them via an interactive CLI. It supports features like bookmarking, viewing TLDR and MAN pages, and customization.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/AnirudhG07/cheatshh?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e2e03603e33827e9279f7764e14d7bfa062452d233a507324d5eb6ab34357411/AnirudhG07/cheatshh",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 18199420,
        "content": "ðŸ’¡ <b>durdraw</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating and editing ASCII, ANSI, and Unicode art in a terminal environment.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ ASCII, Unicode, and ANSI art editing\nâ€¢ Frame-based animation\nâ€¢ Custom themes\nâ€¢ 256 and 16 color modes\nâ€¢ Terminal mouse input\n<br>\nðŸ“– <b>Summary:</b>\nDurdraw is a versatile ASCII and ANSI art text editor designed for Linux, macOS, and other Unix-like systems. It allows users to create and edit text-based art with features like animation support, 256 and 16 color modes, Unicode and CP437 character sets, and customizable themes, drawing inspiration from classic DOS-based editors while providing a modern, terminal-based experience.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/cmang/durdraw?embed=0\">View Project</a>\nâ€¢ <a href=\"http://durdraw.org?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/18199420/8c1f2d58-79ef-48f8-8611-e191bd07ed56",
        "platform": "telegram",
        "quality_score": 0.6000000000000001
    },
    {
        "project_id": 1058593350,
        "content": "ðŸ”¥ <b>elementBlur</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nHiding sensitive information on webpages and improving focus by blurring distracting elements.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Blur any element on a webpage with a click\nâ€¢ Easy-to-use toolbar interface\nâ€¢ Customizable blur intensity\nâ€¢ Lightweight and privacy-friendly\n<br>\nðŸ“– <b>Summary:</b>\nThe elementBlur repository provides a browser extension that allows users to blur elements on any webpage. This is useful for hiding sensitive information or focusing on specific content by reducing distractions. The extension offers a simple toolbar interface and customizable blur intensity.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/hongvin/elementBlur?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cbf63e7f343a6ee51a52e283c420c1215cddec3dff06214be6bd83d14e903e89/hongvin/elementBlur",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 1007406267,
        "content": "âœ¨ <b>coze-loop</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEfficiently develop, debug, evaluate, monitor, and operate AI Agents.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Prompt development (Playground debugging, version management)\nâ€¢ Evaluation (Manage evaluation sets, evaluators, experiments)\nâ€¢ Observability (SDK trace reporting, trace data observation)\nâ€¢ Model integration (OpenAI, Volcengine Ark)\n<br>\nðŸ“– <b>Summary:</b>\nCoze Loop is an open-source AI agent optimization platform that provides full lifecycle management capabilities for AI agents, from development and debugging to evaluation and monitoring. It offers features like prompt engineering, AI agent evaluation, and observability to simplify the development process and enhance operational performance.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/coze-dev/coze-loop?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/0a7af80f85daf789e14ed94ca24416aedb64a7e5c206f6a1c05e4effd4631fb4/coze-dev/coze-loop",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 3961068,
        "content": "ðŸ’¡ <b>metadata_parser</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nExtracting metadata from web documents.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Pulls as much metadata out of a document as possible\nâ€¢ Allows setting a 'strategy' for finding metadata (e.g., only accept opengraph or page attributes)\nâ€¢ Lightweight but functional URL validation\nâ€¢ Verbose logging\n<br>\nðŸ“– <b>Summary:</b>\nMetadataParser is a Python library designed to extract metadata from web documents. It relies on BeautifulSoup for parsing, Requests for fetching documents, and tldextract for domain parsing (which can be disabled). The library has been used in production for parsing billions of documents.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/jvanasco/metadata_parser?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/303b093624aed999080a5969fd44a6183b604daa029ea2045c40d3d144451495/jvanasco/metadata_parser",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 826168160,
        "content": "ðŸ”¥ <b>docling</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nPreparing documents for use with GenAI models by parsing and converting them into a unified format.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Parsing of multiple document formats (PDF, DOCX, PPTX, XLSX, HTML, etc.)\nâ€¢ Advanced PDF understanding (page layout, reading order, table structure, etc.)\nâ€¢ Unified DoclingDocument representation format\nâ€¢ Various export formats (Markdown, HTML, DocTags, JSON)\n<br>\nðŸ“– <b>Summary:</b>\nDocling is a Python library designed to simplify document processing and parsing of various formats, including PDFs, DOCX, PPTX, XLSX, and HTML. It provides advanced PDF understanding capabilities, seamless integrations with the gen AI ecosystem, and supports local execution for sensitive data.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/docling-project/docling?embed=0\">View Project</a>\nâ€¢ <a href=\"https://docling-project.github.io/docling?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/826168160/d3c8a8f9-af99-449f-856b-4ab9c897cce2",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 911980,
        "content": "ðŸ’¡ <b>tarantool</b> | Lua\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nData-enriched components of scalable web architecture (queue servers, caches, stateful web applications).\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Heavily optimized Lua interpreter with tracing JIT compiler\nâ€¢ Cooperative multitasking, non-blocking IO\nâ€¢ Persistent queues\nâ€¢ Sharding\n<br>\nðŸ“– <b>Summary:</b>\nTarantool is an in-memory computing platform that combines a database and an application server. It's designed for high performance and is suitable for data-enriched components of scalable web architectures, such as queue servers, caches, and stateful web applications. It supports both in-memory and disk-based data storage with features like transactions, replication, and a Lua-based application server.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/tarantool/tarantool?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.tarantool.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/9ded6988ed4099b5ca80442989b2dc0866aa8a23a83404cb506d4d3836936185/tarantool/tarantool",
        "platform": "telegram",
        "quality_score": 0.85
    }
]