[
    {
        "project_id": 987670088,
        "content": "âœ¨ <b>crush</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAI-assisted coding in the terminal\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multi-Model LLM support\nâ€¢ Flexible LLM switching\nâ€¢ Session-based context management\nâ€¢ LSP-enhanced context\nâ€¢ Extensible capabilities via MCPs\n<br>\nðŸ“– <b>Summary:</b>\nCrush is an AI coding agent designed to enhance the developer experience within the terminal. It offers features such as multi-model LLM support, session-based context management, and LSP integration to provide intelligent code suggestions and assistance. Crush aims to streamline coding workflows and improve developer productivity across various operating systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/charmbracelet/crush?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/987670088/9247ccb4-650d-4811-ba21-a1b5b47b4e70",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 1010007564,
        "content": "ðŸ’¡ <b>erys</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nInteracting with Jupyter Notebooks directly from the terminal.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Opening existing Jupyter Notebooks\nâ€¢ Creating, editing, and saving Jupyter Notebooks\nâ€¢ Executing Python code within code cells in the terminal\nâ€¢ Directory tree navigation for file management\nâ€¢ Saving notebooks in format version 4.5\n<br>\nðŸ“– <b>Summary:</b>\nErys is a terminal interface for Jupyter Notebooks, enabling users to open, create, edit, run, and save notebooks and other text files directly from the terminal. It leverages Textual for the interface and jupyter_client for code execution, providing a streamlined workflow for developers who prefer a terminal-based environment.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/natibek/erys?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pypi.org/project/erys/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/62b29fdf7a3cd412bed92b51d30c033b9fd22c0eab9a15a172d17fa8c7c7904b/natibek/erys",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 995113401,
        "content": "ðŸ”¥ <b>unregistry</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDeploying Docker images to remote servers without the overhead of managing a container registry.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Directly pushes Docker images to remote servers\nâ€¢ Eliminates the need for an external registry\nâ€¢ Transfers only missing layers for efficiency\nâ€¢ Uses SSH for secure transfer\n<br>\nðŸ“– <b>Summary:</b>\nUnregistry allows users to push Docker images directly to remote servers over SSH, bypassing the need for a container registry. It efficiently transfers only the missing layers, making the process faster and more resource-friendly than traditional methods like save/load or rebuilding remotely. This tool simplifies image deployment for scenarios where a full-fledged registry is unnecessary.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/psviderski/unregistry?embed=0\">View Project</a>\nâ€¢ <a href=\"https://uncloud.run?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e159cdf2fbd2ae68cd04a908fae262e890348d8b111400cbad5546f5c97b04c1/psviderski/unregistry",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 948904124,
        "content": "ðŸš€ <b>Skywork-R1V</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMultimodal reasoning and understanding, particularly for vision-language tasks.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multimodal reasoning\nâ€¢ Vision-language understanding\nâ€¢ Reinforcement learning fine-tuning\nâ€¢ Quantized versions for efficient inference (AWQ, GGUF)\nâ€¢ State-of-the-art performance on multimodal reasoning benchmarks\n<br>\nðŸ“– <b>Summary:</b>\nSkywork-R1V is a multimodal AI model series specializing in vision-language reasoning. It leverages reinforcement learning for fine-tuning and achieves state-of-the-art performance on various multimodal reasoning benchmarks. Quantized versions are available for efficient inference on different hardware configurations.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/SkyworkAI/Skywork-R1V?embed=0\">View Project</a>\nâ€¢ <a href=\"https://arxiv.org/abs/2507.06167?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/50dae545e87a81517fd6a9a8c53d55865e19e5bc49c73597cd19c41ce83c684b/SkyworkAI/Skywork-R1V",
        "platform": "telegram",
        "quality_score": 0.8
    },
    {
        "project_id": 924722083,
        "content": "ðŸ’¡ <b>ui-experiments</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding developers with ready-to-use UI layouts and experiments built with Origin UI and shadcn/ui to accelerate development and inspire design.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Pre-designed layouts\nâ€¢ UI experiments\nâ€¢ shadcn/ui monorepo template\nâ€¢ Origin UI components\n<br>\nðŸ“– <b>Summary:</b>\nThe ui-experiments repository offers a collection of beautifully designed, open-source UI layouts and experiments. It leverages Origin UI and shadcn/ui components, providing developers with practical examples and starting points for their projects. The repository also includes a shadcn/ui monorepo template for streamlined development.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/origin-space/ui-experiments?embed=0\">View Project</a>\nâ€¢ <a href=\"https://originui.com/layouts?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1852fcc6ca32fb65bbf3f68c4bbdf08e504bee321b64a98ab330f344d104e5ec/origin-space/ui-experiments",
        "platform": "telegram",
        "quality_score": 0.4
    },
    {
        "project_id": 994310603,
        "content": "ðŸ’¡ <b>gmail-tui</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nManaging Gmail within a terminal interface for increased efficiency and keyboard-centric workflow.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Full email management in the terminal\nâ€¢ Secure OAuth2 authentication\nâ€¢ Keyboard-driven navigation\nâ€¢ Rich text composition with attachments\nâ€¢ Gmail label integration\n<br>\nðŸ“– <b>Summary:</b>\nGmail TUI is a terminal-based Gmail client that allows users to manage their email directly from the command line. It offers features like composing emails, managing labels, searching, and handling attachments, all with a focus on keyboard navigation and efficiency. The application uses OAuth2 for secure authentication and provides a lightweight alternative to the web-based Gmail interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rdx40/gmail-tui?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cb4fcbbe16d7fd3adef16eb171c69c29113e783b911701f29f7716a96f069ebb/rdx40/gmail-tui",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    }
]