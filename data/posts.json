[
    {
        "project_id": 963573800,
        "content": "ðŸŒŸ <b>ml-matrix3d</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nUnified photogrammetry model for pose estimation, depth prediction, and novel view synthesis.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Pose estimation\nâ€¢ Depth prediction\nâ€¢ Novel view synthesis\nâ€¢ 3D reconstruction pipeline\nâ€¢ Masked inference for various photogrammetry tasks\n<br>\nðŸ“– <b>Summary:</b>\nThe Matrix3D repository provides a unified model for performing multiple photogrammetry subtasks, including pose estimation, depth prediction, and novel view synthesis. It includes the model inference pipeline and a modified 3DGS reconstruction pipeline. The model supports various photogrammetry tasks via masked inference.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/apple/ml-matrix3d?embed=0\">View Project</a>\nâ€¢ <a href=\"https://nju-3dv.github.io/projects/matrix3d/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d3e688fba82a1d776d76cb42b24493d6798d549aabc14f547d5e7c7362dc5336/apple/ml-matrix3d",
        "platform": "telegram",
        "quality_score": 0.25
    },
    {
        "project_id": 878813491,
        "content": "âœ¨ <b>yt-history</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nVisualize and analyze YouTube watch history.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Import YouTube history data from Google Takeout\nâ€¢ Visualize watching patterns and trends\nâ€¢ Filter and search through watch history\nâ€¢ Generate insights about most-watched channels and categories\nâ€¢ Track time spent watching different types of content\n<br>\nðŸ“– <b>Summary:</b>\nThe YouTube History Analyzer is a web application that allows users to import their YouTube history data from Google Takeout and visualize their watching patterns and trends. It provides features to filter and search through watch history, generate insights about most-watched channels and categories, and track time spent watching different types of content.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ronething/yt-history?embed=0\">View Project</a>\nâ€¢ <a href=\"https://youtubestats.forgetimer.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/0eeccaba790d7fd2deef21a8f4a4fd288b03c3089bd2e2abfbb168e03c629f4e/ronething/yt-history",
        "platform": "telegram",
        "quality_score": 0.6499999999999999
    },
    {
        "project_id": 91253698,
        "content": "ðŸ’¡ <b>ccxt</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nConnecting and trading with cryptocurrency exchanges and payment processing services worldwide.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Support for many cryptocurrency exchanges\nâ€¢ Fully implemented public and private APIs\nâ€¢ Optional normalized data for cross-exchange analytics and arbitrage\nâ€¢ Unified API for easy integration\nâ€¢ Works in Node.js, Python, PHP, C#, Go, and web browsers\n<br>\nðŸ“– <b>Summary:</b>\nCCXT is a cryptocurrency trading library that provides a unified API for accessing various cryptocurrency exchanges. It supports multiple programming languages and offers features like normalized data for arbitrage and easy integration. It's intended for developers, traders, and analysts building trading algorithms and related software.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ccxt/ccxt?embed=0\">View Project</a>\nâ€¢ <a href=\"https://docs.ccxt.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/91253698/ea8e3c00-171a-11ea-9a81-e79b426fe455",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 961948787,
        "content": "ðŸ”¥ <b>weather-mcp-server</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnabling AI assistants like Claude to access real-time weather data through the Model Context Protocol (MCP).\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Lightweight Model Context Protocol (MCP) server\n<br>\nðŸ“– <b>Summary:</b>\nThe weather-mcp-server is a lightweight Go-based server that implements the Model Context Protocol (MCP) to provide AI assistants with real-time weather data. It supports both local and remote deployment, includes a Dockerfile for easy containerization, and offers a 'current_weather' tool for querying weather information by city. The server is designed to be easily integrated with AI platforms like Claude, allowing them to access and interpret up-to-date weather conditions.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/TuanKiri/weather-mcp-server?embed=0\">View Project</a>\nâ€¢ <a href=\"https://news.ycombinator.com/item?id=43614582?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/19d2e21f7079c00681e55ab0e8adf35a53b9a17badb6481a72fd8a9b9d62b338/TuanKiri/weather-mcp-server",
        "platform": "telegram",
        "quality_score": 0.7999999999999999
    },
    {
        "project_id": 361178225,
        "content": "ðŸš€ <b>ninjabot</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating and testing custom cryptocurrency trading strategies on Binance.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Paper Wallet (Live Simulation)\nâ€¢ Backtesting (Simulation with historical data)\nâ€¢ Real Account (Binance)\nâ€¢ CLI tool for downloading historical data\n<br>\nðŸ“– <b>Summary:</b>\nNinjabot is a fast cryptocurrency trading bot framework implemented in Go, designed for Binance. It allows users to develop, backtest, and deploy custom trading strategies for spot and futures markets. The platform includes features for live simulation with paper wallets, backtesting with historical data, and real account trading, along with a CLI tool for downloading market data.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rodrigo-brito/ninjabot?embed=0\">View Project</a>\nâ€¢ <a href=\"https://rodrigo-brito.github.io/ninjabot/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/361178225/b73e29ab-8022-4f21-ae38-879e9c3495a1",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 956310963,
        "content": "ðŸ’¡ <b>no-ghibli</b> | Jupyter Notebook\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFiltering Studio Ghibli-related content from Twitter.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time detection of Studio Ghibli-related images on Twitter\nâ€¢ Hides tweets containing Studio Ghibli-related images/videos\nâ€¢ User-friendly popup interface for controlling the extension\nâ€¢ Efficient image classification using a trained Keras model\n<br>\nðŸ“– <b>Summary:</b>\nThe No Ghibli Chrome extension detects and filters out Studio Ghibli-related content from Twitter in real-time. It utilizes a Flask backend with a Keras model for image classification and a Chrome extension to hide tweets containing identified Ghibli content, providing a user-friendly experience through a popup interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/faisalsayed10/no-ghibli?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c5266d676711825fc6157d5daace335e1f5846150a828629c8f716fed3c126c0/faisalsayed10/no-ghibli",
        "platform": "telegram",
        "quality_score": 0.3
    },
    {
        "project_id": 204796113,
        "content": "ðŸŒŸ <b>neural-structured-learning</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nTraining neural networks with structured signals (graphs and adversarial perturbations) to improve accuracy and robustness, especially with limited labeled data.\n<br>\nâœ¨ <b>Key Features:</b>\n<br>\nðŸ“– <b>Summary:</b>\nThe neural-structured-learning repository provides tools and APIs for training neural networks using structured signals, such as graphs and adversarial perturbations. This approach enhances model accuracy, particularly when labeled data is scarce, and improves robustness against malicious attacks. The framework offers Keras APIs, TensorFlow ops, and graph building tools for flexible integration with various neural network architectures.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/tensorflow/neural-structured-learning?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.tensorflow.org/neural_structured_learning?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ac8d0d322c534166ed6fe1152089116ef5015668e342b6762254cc668cd366cf/tensorflow/neural-structured-learning",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 957617467,
        "content": "ðŸ’¡ <b>pokemon-gym</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEvaluating AI agents on Pokemon Red gameplay.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Evaluator: Evaluation metrics and scoring system for Pokemon Red gameplay\nâ€¢ Server: FastAPI server that controls Pokemon Red emulation and exposes game state via API\nâ€¢ Agents: Implementation of AI and human agents that interact with the evaluator server\nâ€¢ Results: Evaluation results comparing different AI models playing Pokemon Red\n<br>\nðŸ“– <b>Summary:</b>\nPokemonGym is a platform for evaluating AI agents in Pokemon Red. It provides a server-client architecture with evaluation metrics, a FastAPI server for game state, and implementations for both AI and human agents. The platform also includes tools for visualizing and comparing the performance of different AI models.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/benchflow-ai/pokemon-gym?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c0c01d96d3c11db5be239f2b08a389159f70fdcccee35ca955882d9e5fd6689a/benchflow-ai/pokemon-gym",
        "platform": "telegram",
        "quality_score": 0.6499999999999999
    }
]