[
    {
        "project_id": 748568485,
        "content": "ðŸ’¡ <b>whoBIRD</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nIdentifying bird sounds in real-time using an Android app, without requiring an internet connection.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time bird sound identification\nâ€¢ Offline functionality (no internet required)\nâ€¢ Extensive database of over 6,000 bird species\nâ€¢ Customization options (ignore date/place, show images, audio source selection, high pass filter, threshold setting, save .wav files)\n<br>\nðŸ“– <b>Summary:</b>\nwhoBIRD is an Android application that identifies bird sounds in real-time using the BirdNET framework. It boasts an extensive database of over 6,000 bird species and operates offline. The app provides various customization options, including audio source selection, noise filtering, and threshold adjustments for detection sensitivity.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/woheller69/whoBIRD?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/446ab1e132a74a8113d95bd7c138afc71293fe4cdeecd8ad3f6c9fd5b6c9a28b/woheller69/whoBIRD",
        "platform": "telegram",
        "quality_score": 0.9000000000000001
    },
    {
        "project_id": 94530674,
        "content": "ðŸš€ <b>nvtop</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nMonitoring GPU and accelerator usage and processes on Linux systems.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Monitors GPU and accelerator processes\nâ€¢ Supports multiple GPUs\nâ€¢ Provides htop-like interface\nâ€¢ Supports AMD, Apple, Huawei, Intel, NVIDIA, Qualcomm, and Broadcom GPUs\nâ€¢ Interactive setup utility\n<br>\nðŸ“– <b>Summary:</b>\nNVTOP is a command-line tool that provides a real-time, htop-like interface for monitoring GPU and accelerator processes. It supports a wide range of vendors, including AMD, Apple, Huawei, Intel, NVIDIA, and Qualcomm. NVTOP allows users to monitor multiple GPUs, customize the interface, and save preferences for future use.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Syllo/nvtop?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ee7f2b8eab3234d4203b79a645a6fe3d458c5a12f4b57e218bbbe2c72b33893b/Syllo/nvtop",
        "platform": "telegram",
        "quality_score": 1.05
    },
    {
        "project_id": 319112812,
        "content": "âœ¨ <b>privtracker</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nPrivate file sharing among trusted groups, avoiding public networks and centralized services.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Private BitTorrent tracker generation\nâ€¢ Peer sharing within a defined group\nâ€¢ Simplified setup with one-click generation\nâ€¢ Automatic TLS/HTTPS support via Let's Encrypt\nâ€¢ Docker Compose support\n<br>\nðŸ“– <b>Summary:</b>\nPrivTracker is a tool for generating private BitTorrent trackers, enabling users to share files exclusively within a defined group. It simplifies the process of creating a private tracker, offering features like automatic TLS/HTTPS support and Docker Compose integration. This allows for secure and efficient file sharing without relying on public trackers or centralized services.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/meehow/privtracker?embed=0\">View Project</a>\nâ€¢ <a href=\"https://privtracker.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1f0202197a7288457cc740ae00de5ad48cbd5a0b56e20ec5d2c886314067b898/meehow/privtracker",
        "platform": "telegram",
        "quality_score": 0.6
    },
    {
        "project_id": 880240067,
        "content": "ðŸ’¡ <b>lada</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRestoring pixelated or mosaic scenes in adult videos to improve visual quality.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Recover Pixelated Videos\nâ€¢ Watch/Export Videos (CLI or GUI)\n<br>\nðŸ“– <b>Summary:</b>\nLada is a tool designed to recover pixelated adult videos. It offers features to restore mosaic scenes and allows users to watch or export the restored videos using either a command-line interface or a graphical user interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ladaapp/lada?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/6d8714ec49d94cd77cf0d76737d2e92364fe50af8bbd139ace3f392c13295a58/ladaapp/lada",
        "platform": "telegram",
        "quality_score": 0.75
    },
    {
        "project_id": 681566005,
        "content": "ðŸ”¥ <b>magika</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDetecting file content types for improved security and content policy enforcement.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AI-powered file type detection\nâ€¢ Deep learning model for accurate detection\nâ€¢ Small model size (a few MBs)\nâ€¢ Fast identification (milliseconds on a single CPU)\nâ€¢ Trained on ~100M samples across 200+ content types\n<br>\nðŸ“– <b>Summary:</b>\nMagika is an AI-powered file type detection tool that uses a deep learning model to accurately identify file types within milliseconds. It is trained on a large dataset and achieves high accuracy, making it suitable for improving security and content policy enforcement in applications like email, cloud storage, and web browsing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/google/magika?embed=0\">View Project</a>\nâ€¢ <a href=\"https://google.github.io/magika/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/a95cdc02aa40658f7dd3f73659936121bbc6fe1476d7afd825f8517d858c4366/google/magika",
        "platform": "telegram",
        "quality_score": 0.9500000000000001
    },
    {
        "project_id": 270910423,
        "content": "ðŸ”¥ <b>FlareSolverr</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBypassing Cloudflare and DDoS-GUARD protection for web scraping and automation tasks.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Bypasses Cloudflare and DDoS-GUARD protection\nâ€¢ Uses Selenium and undetected-chromedriver to solve challenges\nâ€¢ Provides HTML code and cookies for bypassing Cloudflare\nâ€¢ Supports Docker installation\n<br>\nðŸ“– <b>Summary:</b>\nFlareSolverr is a proxy server designed to bypass Cloudflare and DDoS-GUARD protection. It utilizes Selenium and undetected-chromedriver to solve challenges, providing HTML code and cookies that can be used to access protected resources. The project offers Docker installation, precompiled binaries, and source code installation options, catering to various user preferences and system architectures.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/FlareSolverr/FlareSolverr?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/df8d02eb503d83e3d38e0ee70eb601f477158226eaf09d96a0f2ae82f185044d/FlareSolverr/FlareSolverr",
        "platform": "telegram",
        "quality_score": 0.8
    },
    {
        "project_id": 783044221,
        "content": "ðŸ”¥ <b>tryharder</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLoading and executing shellcode with evasion techniques, primarily intended for use with the Sliver C2 framework but adaptable to other shellcode sources.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Staged shellcode loading\nâ€¢ Evasion capabilities\nâ€¢ Compatibility with Sliver C2 framework\nâ€¢ Cobalt Strike shellcode compatibility\n<br>\nðŸ“– <b>Summary:</b>\nThe tryharder repository provides a C++ staged shellcode loader with evasion capabilities. It is designed to work seamlessly with the Sliver C2 framework, allowing for the execution of shellcode on target systems while bypassing security measures. The loader is also demonstrated to be compatible with Cobalt Strike shellcode, offering flexibility in payload selection.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/tehstoni/tryharder?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/4f27a9828b8696a70f36a958125251977f66ed3e733c5392a3a673c2db04db84/tehstoni/tryharder",
        "platform": "telegram",
        "quality_score": 0.15
    }
]