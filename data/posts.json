[
    {
        "project_id": 834082440,
        "content": "ðŸ”¥ <b>camoufox</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nWeb scraping with anti-bot evasion and fingerprint spoofing.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Invisible to anti-bot systems\nâ€¢ Fingerprint injection & rotation (without JS injection)\nâ€¢ Human-like mouse movement\nâ€¢ Ad blocking & circumvention\nâ€¢ Memory efficiency\n<br>\nðŸ“– <b>Summary:</b>\nCamoufox is an open-source anti-detect browser based on Firefox, designed for web scraping and anti-bot evasion. It focuses on fingerprint injection and rotation at the C++ level, aiming to be undetectable by anti-bot systems and outperform commercial anti-bot browsers.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/daijro/camoufox?embed=0\">View Project</a>\nâ€¢ <a href=\"https://camoufox.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3224035a54453f1a9f979fe53c4e8080c7bb8dbeb49b2fd4df9cae91958056f6/daijro/camoufox",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 116322814,
        "content": "ðŸš€ <b>howdy</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nPassword-free authentication on Linux systems using facial recognition.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Facial recognition authentication\nâ€¢ PAM integration\nâ€¢ IR emitter and camera support\nâ€¢ Package availability for Debian/Ubuntu, Arch Linux, Fedora, and openSUSE\n<br>\nðŸ“– <b>Summary:</b>\nHowdy provides Windows Hello-style facial authentication for Linux systems. It leverages built-in IR emitters and cameras for facial recognition, enabling password-free authentication for login, screen lock, sudo, and other PAM-integrated functions.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/boltgolt/howdy?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/116322814/14ef1700-65da-11e9-9ef0-e720d09a7731",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 1030990993,
        "content": "âœ¨ <b>hexora</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nStatic analysis of Python code to identify potentially malicious or harmful patterns.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Audit project dependencies for supply-chain attacks\nâ€¢ Detect malicious scripts from various sources\nâ€¢ Analyze IoC files from security incidents\nâ€¢ Audit new packages uploaded to PyPi\nâ€¢ Provides rule-based static analysis with configurable confidence levels\n<br>\nðŸ“– <b>Summary:</b>\nHexora is a static analysis tool written in Rust designed to detect malicious patterns in Python code. It can be used to audit project dependencies, detect malicious scripts, analyze IoC files, and audit new PyPi packages.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/rushter/hexora?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/a8779a7bb176439bc8faf9366e6e8c770cb4cf4f08a4db9b5fcf16d2add9e7dc/rushter/hexora",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 928102730,
        "content": "ðŸš€ <b>index-tts</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nVideo dubbing and other applications requiring strict audio-visual synchronization, as well as applications needing controllable emotional expression in synthesized speech.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Precise speech duration control\nâ€¢ Disentanglement of emotional expression and speaker identity\nâ€¢ Zero-shot voice cloning\nâ€¢ Emotional tone control via text descriptions\nâ€¢ Improved speech clarity in emotional expressions\n<br>\nðŸ“– <b>Summary:</b>\nIndexTTS2 is an autoregressive zero-shot text-to-speech system focused on controllable speech duration and emotional expression. It allows for precise control over the length of generated speech, independent control over timbre and emotion, and improved speech clarity in highly emotional expressions.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/index-tts/index-tts?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f55436d1b150df8cb5be8b4a01c1712f98704977a9f9c6eeedfb71e46bf91b93/index-tts/index-tts",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 533087958,
        "content": "ðŸ”¥ <b>d2</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating diagrams from text descriptions for software architecture, system design, and other technical documentation purposes.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Text-to-diagram conversion\nâ€¢ Diagram scripting language\nâ€¢ Multiple export file types (e.g., SVG)\nâ€¢ Themes\nâ€¢ Fonts\n<br>\nðŸ“– <b>Summary:</b>\nD2 is a modern diagram scripting language that converts text descriptions into diagrams. It allows users to define diagrams using a text-based syntax and then renders them into various output formats like SVG. D2 aims to simplify the process of creating and maintaining diagrams, especially for software architecture and other technical documentation.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/terrastruct/d2?embed=0\">View Project</a>\nâ€¢ <a href=\"https://d2lang.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/533087958/9449b2c9-1509-476d-8d26-48d8c98380c3",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 362234372,
        "content": "ðŸ’¡ <b>cariddi</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nWeb reconnaissance and security auditing to identify potential vulnerabilities and sensitive information exposure.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Crawls domains for URLs\nâ€¢ Scans for endpoints\nâ€¢ Detects secrets and API keys\nâ€¢ Identifies file extensions\nâ€¢ Supports custom endpoint and secret files\n<br>\nðŸ“– <b>Summary:</b>\nCariddi is a Go-based tool designed for comprehensive web reconnaissance. It crawls domains to discover URLs and scans them for sensitive information such as API keys, secrets, file extensions, and endpoints. It supports various installation methods and offers extensive scan customization options.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/edoardottt/cariddi?embed=0\">View Project</a>\nâ€¢ <a href=\"https://edoardottt.com/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ca7043538ac689d2203347f25a80e493d60e30f7a977ebc79bed90a482aad0f6/edoardottt/cariddi",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    }
]