[
    {
        "project_id": 200275124,
        "content": "ðŸ”¥ <b>dicio-android</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding a private and versatile voice assistant experience on Android devices.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Voice assistant\nâ€¢ On-device processing\nâ€¢ Multilanguage support\nâ€¢ Speech and graphical feedback\nâ€¢ Vosk STT engine\n<br>\nðŸ“– <b>Summary:</b>\nDicio is a free and open-source voice assistant for Android that operates on-device for privacy. It supports multiple languages and skills, providing both speech and graphical feedback. It utilizes Vosk for speech-to-text and offers various functionalities like searching, weather updates, lyrics, app opening, calculations, contact management, timers, time queries, navigation, and media control.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Stypox/dicio-android?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/200275124/34b32b65-7ea6-4a22-94b4-1b2e06f7b046",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 1055153288,
        "content": "ðŸ’¡ <b>onion-vanity-address</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating custom Tor Onion Service addresses with a desired prefix for improved memorability or branding.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fast vanity address generation for Tor Onion Services\nâ€¢ Supports prefix-based searching\nâ€¢ Offers local installation via `go install`\nâ€¢ Provides a Docker image for containerized usage\nâ€¢ Includes Kubernetes deployment manifest for distributed searching\n<br>\nðŸ“– <b>Summary:</b>\nThe `onion-vanity-address` repository provides a tool written in Go for generating Tor Onion Service v3 vanity addresses with a specified prefix. It boasts a fast search algorithm and offers both local installation and Docker image usage, including Kubernetes deployment for distributed searching.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/AlexanderYastrebov/onion-vanity-address?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/054e3d3cbc65a3339e0305bf498ff6d077a11d8c307aefad3abaccf32bc58050/AlexanderYastrebov/onion-vanity-address",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 157766521,
        "content": "ðŸš€ <b>broot</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEfficiently navigating and exploring directory structures, finding files, and executing commands within those directories.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Directory tree overview with unlisted items\nâ€¢ Fuzzy search for files and directories\nâ€¢ Navigation with minimal keystrokes\nâ€¢ Toggling visibility of hidden and gitignored files\nâ€¢ Regular expression and content-based search\n<br>\nðŸ“– <b>Summary:</b>\nBroot is a command-line tool written in Rust that provides a better way to navigate directory trees, find files, and launch commands. It aims to improve upon traditional tools like `tree` by offering features like fuzzy search, directory overview with unlisted items, and easy `cd` functionality.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Canop/broot?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/157766521/1ba51500-61fb-11e9-8dff-9189928d6dbb",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 716785366,
        "content": "ðŸ”¥ <b>slog-context</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nIntegrating structured logging with Go's context package for enhanced log enrichment and context-aware logging.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Adding and retrieving loggers to/from context.\nâ€¢ Adding attributes to context for automatic inclusion in log lines.\nâ€¢ Extracting custom context values (e.g., OpenTelemetry TraceID) for logging.\nâ€¢ Compatibility with both standard library slog and logr.\n<br>\nðŸ“– <b>Summary:</b>\nThe `slog-context` Go library provides utilities for integrating structured logging (slog) with Go's context package. It allows adding and retrieving loggers from contexts, adding attributes to contexts for automatic inclusion in log lines, and extracting custom context values like OpenTelemetry TraceIDs for logging.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/veqryn/slog-context?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c4121140161c17ab9ec9c57bc12977e35970b9c1e45ed0cf686fb9d3d259dfd8/veqryn/slog-context",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 104261253,
        "content": "ðŸŒŸ <b>mage</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomating build processes and other development tasks using Go instead of Makefiles or similar tools.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Uses Go for build scripts\nâ€¢ No external dependencies (besides Go)\nâ€¢ Supports multiple magefiles\nâ€¢ Customizable for different operating systems\nâ€¢ Can be used as a library\n<br>\nðŸ“– <b>Summary:</b>\nMage is a build tool similar to Make or Rake, but uses Go for writing build scripts. It allows developers to define build tasks as plain Go functions, which Mage then executes as targets, simplifying build processes and eliminating the complexities of traditional Makefiles.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/magefile/mage?embed=0\">View Project</a>\nâ€¢ <a href=\"https://magefile.org?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/104261253/9b12d380-7570-11e9-9bab-1bf0e44fa7ee",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 1018413020,
        "content": "ðŸ’¡ <b>GopherTube</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSearching and watching YouTube videos from the terminal.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fast YouTube search (scrapes YouTube directly)\nâ€¢ Play videos with mpv\nâ€¢ Minimal terminal UI (fzf)\nâ€¢ Keyboard navigation\nâ€¢ TOML config\n<br>\nðŸ“– <b>Summary:</b>\nGopherTube is a terminal-based YouTube client written in Go. It allows users to search and watch YouTube videos directly from their terminal using `mpv` for playback and `yt-dlp` for downloading. The UI is minimal and keyboard-driven, leveraging `fzf` for a streamlined experience.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/KrishnaSSH/GopherTube?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/1018413020/bd95d8b3-9b5a-419a-b037-0468ab03a231",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 964567893,
        "content": "ðŸš€ <b>MIRIX</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding a personal AI assistant with advanced memory capabilities.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multi-Agent Memory System\nâ€¢ Screen Activity Tracking\nâ€¢ Privacy-First Design\nâ€¢ Advanced Search\nâ€¢ Multi-Modal Input\n<br>\nðŸ“– <b>Summary:</b>\nMIRIX is a multi-agent personal assistant that learns and remembers user interactions by tracking on-screen activities and natural language conversations. It consolidates visual and textual data into a structured knowledge base, enabling intelligent responses and personalized assistance.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Mirix-AI/MIRIX?embed=0\">View Project</a>\nâ€¢ <a href=\"https://mirix.io/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3de28689cb9db94fd548687452b1130d33d59a078022b49da9a6efe228402d0a/Mirix-AI/MIRIX",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 847453935,
        "content": "ðŸ’¡ <b>cli</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomating and scaling QA processes for web and desktop applications.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AI-powered vision and control\nâ€¢ End-to-end testing of web and desktop applications\nâ€¢ Black-box testing approach\nâ€¢ Natural language test instruction\nâ€¢ Integration with CI/CD via GitHub Actions\n<br>\nðŸ“– <b>Summary:</b>\nTestDriver.ai is an autonomous AI agent designed for end-to-end testing of web and desktop applications. It uses AI vision and emulated mouse/keyboard actions to automate QA processes, offering advantages like easier setup, reduced maintenance, and broader application testing capabilities compared to traditional test frameworks.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/testdriverai/cli?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/5939430de2f98ae69767632e7fa319300025bb86208c0dc95f1d9206508453f8/testdriverai/cli",
        "platform": "telegram",
        "quality_score": 0.85
    }
]