[
    {
        "project_id": 867192625,
        "content": "ðŸ’¡ <b>microsandbox</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nSecure execution of untrusted user/AI code.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Bulletproof Security with true VM isolation\nâ€¢ Instant Startup with boot times under 200ms\nâ€¢ Self-hosted infrastructure with complete control\nâ€¢ OCI Compatible with standard container images\nâ€¢ AI-Ready with built-in MCP server\n<br>\nðŸ“– <b>Summary:</b>\nmicrosandbox is a self-hosted platform for securely executing untrusted code, such as AI-generated code or user submissions. It combines the security of traditional VMs with the speed of containers, offering bulletproof security, instant startup times, and complete control over your infrastructure. It is OCI compatible and includes a built-in MCP server for seamless AI integration.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/microsandbox/microsandbox?embed=0\">View Project</a>\nâ€¢ <a href=\"https://docs.microsandbox.dev?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/d18a97a8d4e3786412861a3687b42224704ae029242dee95a0fc5d1f552cb037/microsandbox/microsandbox",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 972735507,
        "content": "ðŸš€ <b>tablecruncher</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEditing and viewing large CSV files\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Opens huge CSV files effortlessly\nâ€¢ Built-in JavaScript macro language\nâ€¢ Supports multiple encodings: UTF-8, UTF-16LE, UTF-16BE, Latin-1 (ISO-8859-1), and Windows 1252\nâ€¢ Four color themes\n<br>\nðŸ“– <b>Summary:</b>\nTablecruncher is a cross-platform CSV editor designed to handle massive files with ease. It features a built-in JavaScript macro language, supports multiple encodings, and offers a user-friendly interface with color themes. It is suitable for users who need to quickly open, view, and edit large CSV files on macOS, Windows, or Linux.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Tablecruncher/tablecruncher?embed=0\">View Project</a>\nâ€¢ <a href=\"https://tablecruncher.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/972735507/cd4b9698-4eda-4a4c-b513-fddf76991d94",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 161323362,
        "content": "ðŸ’¡ <b>retrogram-plutosdr</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReal-time spectrum analysis using a PlutoSDR and displaying the results in an ASCII art format on a terminal.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Wideband spectrum analysis\nâ€¢ ASCII art visualization in terminal\nâ€¢ Keyboard controls for pan and zoom\nâ€¢ Adjustable center frequency, sampling rate, bandwidth, and gain\nâ€¢ Peak hold functionality\n<br>\nðŸ“– <b>Summary:</b>\nThe retrogram-plutosdr repository provides a wideband spectrum analyzer that visualizes radio frequency data as ASCII art in a terminal. It's designed for use with the ADALM PlutoSDR and allows users to monitor and analyze radio signals directly from their console, offering adjustable parameters like frequency, bandwidth, and gain through keyboard controls.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/r4d10n/retrogram-plutosdr?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/883536cbbed83564e41303d2fbaa0ea2a79f514730175fed288ddf3f4eb67bfd/r4d10n/retrogram-plutosdr",
        "platform": "telegram",
        "quality_score": 0.35
    },
    {
        "project_id": 904467755,
        "content": "ðŸš€ <b>purrcrypt</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEncrypting files and messages with a playful disguise using real cryptography.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Encrypts data using elliptic curve cryptography\nâ€¢ Encodes encrypted data as cat and dog sounds\nâ€¢ Provides a command-line interface for key generation, encryption, and decryption\nâ€¢ Supports setting a cat or dog 'dialect' for the output sounds\n<br>\nðŸ“– <b>Summary:</b>\nPurrCrypt is a command-line tool that encrypts data using elliptic curve cryptography and encodes the encrypted data as cat and dog sounds. It provides a fun and unique way to protect sensitive information, while still utilizing robust cryptographic algorithms. The tool allows users to generate keys, encrypt files, and decrypt files, all with a playful and adorable interface.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/vxfemboy/purrcrypt?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/7c14e2f2566f7498bad1a785d90f3b7e7fa1d0ce17f65e842f8a948084312d01/vxfemboy/purrcrypt",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 939559421,
        "content": "ðŸ’¡ <b>chirp</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nTransmit and receive data through sound.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Real-time frequency visualization of audio input\nâ€¢ Send messages by converting text to sound\nâ€¢ Receive messages by listening to sound and decoding it back to text\nâ€¢ Distinctive start and end signatures to mark transmissions\n<br>\nðŸ“– <b>Summary:</b>\nChirp enables data transfer using sound. It converts text into audio frequencies for transmission and decodes received audio back into text, using start and end signatures to define transmissions. The application also provides real-time frequency visualization of audio input.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/solst-ice/chirp?embed=0\">View Project</a>\nâ€¢ <a href=\"http://chirp.hex.dance/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ada4bbca895a392aae7b74ff6a7c70e8600b08ee62a0ebeccb8b663217d9d391/solst-ice/chirp",
        "platform": "telegram",
        "quality_score": 0.5
    },
    {
        "project_id": 937556844,
        "content": "ðŸŒŸ <b>gibberlink</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnabling AI agents to communicate using a data-over-sound protocol (ggwave) when they identify each other as AI.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Two conversational AI agents\nâ€¢ Agents switch from English to sound-level protocol (ggwave)\nâ€¢ API for agents to use the ggwave protocol\n<br>\nðŸ“– <b>Summary:</b>\nGibberLink provides an API for two conversational AI agents to switch from English to the ggwave data-over-sound protocol after confirming they are both AI. The agents are designed to initially converse in English and then transition to ggwave for communication. This repository facilitates this process by providing the necessary API for agents to use the protocol.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/PennyroyalTea/gibberlink?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.gbrl.ai/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/937556844/7ead418e-8ff1-4183-a440-6ca226061df8",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 896363641,
        "content": "âœ¨ <b>ByteSync</b> | C#\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nOn-demand, secure file synchronization and backup for multiple remote machines.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ End-to-end encryption\nâ€¢ Smart synchronization (delta transfers, compression)\nâ€¢ Multi-device sync (up to 5 machines)\nâ€¢ Customizable sync rules\nâ€¢ Cloud-based server\n<br>\nðŸ“– <b>Summary:</b>\nByteSync is an open-source file synchronization tool that prioritizes security and efficiency. It offers end-to-end encryption, delta transfers, and customizable rules for syncing files across up to five devices. The server component runs in the cloud, simplifying deployment and management, and clients are available for Windows, Linux, and macOS.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/POW-Software/ByteSync?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.bytesyncapp.com/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/896363641/a118ff1f-7c0c-485a-9bcf-41695e703945",
        "platform": "telegram",
        "quality_score": 1.0
    },
    {
        "project_id": 925434317,
        "content": "âœ¨ <b>kreuzberg</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nExtracting text from various document formats (PDFs, images, office documents) programmatically.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Text extraction from PDFs, images, and office documents\nâ€¢ Unified interface for various document formats\nâ€¢ Support for multiple OCR engines (Tesseract, EasyOCR, PaddleOCR)\nâ€¢ Async and sync APIs\nâ€¢ Metadata extraction\n<br>\nðŸ“– <b>Summary:</b>\nKreuzberg is a Python library designed for extracting text from a variety of document formats, including PDFs, images, and office documents. It offers a unified interface and supports multiple OCR engines, providing both asynchronous and synchronous APIs for flexible integration. The library also supports metadata and table extraction.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Goldziher/kreuzberg?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/258691f81fa035b63f24157fd61b8e3eee0e2c82fc015ff5404b975db1d4368a/Goldziher/kreuzberg",
        "platform": "telegram",
        "quality_score": 0.8499999999999999
    }
]