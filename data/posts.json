[
    {
        "project_id": 970094935,
        "content": "ðŸ’¡ <b>focus-anchor</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAnchoring focus while reading on websites.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Sentence-level focus\nâ€¢ Smart scrolling\nâ€¢ Multiple focus styles\n<br>\nðŸ“– <b>Summary:</b>\nThe focus-anchor repository provides a Chrome extension designed to improve readability and focus on web content. It allows users to highlight content at the sentence level with various styles and automatically scrolls to keep the focused sentence in view. This tool enhances productivity by minimizing distractions and promoting concentrated reading.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/hamsteak1488/focus-anchor?embed=0\">View Project</a>\nâ€¢ <a href=\"https://chromewebstore.google.com/detail/focus-anchor/fbgkhgandooofmekghflnglnmifponef?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1ae05222e801ffb25ccda167551fb9022d429621aa792171fdf106c9ecad5ca8/hamsteak1488/focus-anchor",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 1003282346,
        "content": "âœ¨ <b>reasonable</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomatically rewrite clickbait tweets into reasonable ones.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Detects clickbait tweets\nâ€¢ Replaces clickbait tweets with reasonable alternatives using the OpenAI API\nâ€¢ Provides a toggle to show the original tweet\nâ€¢ Uses OpenAI API for tweet rewriting\nâ€¢ Configuration via Chrome extension popup\n<br>\nðŸ“– <b>Summary:</b>\nThe 'reasonable' Chrome extension detects clickbait tweets on Twitter (X.com) and replaces them with more reasonable alternatives using the OpenAI API. Users can toggle between the original and rewritten tweets. The extension is configured via a popup where users can enter their OpenAI API key.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ilijalichkovski/reasonable?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/07724ccfe03f139525483a51572efbc82f8aac557b7ce3908094cfce4f9fabf1/ilijalichkovski/reasonable",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 541960471,
        "content": "ðŸŒŸ <b>ascii-movie</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nStreaming the ASCII version of Star Wars to command-line clients via SSH or Telnet.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Streams Star Wars ASCII movie\nâ€¢ SSH and Telnet server\nâ€¢ Interactive TUI with keyboard and mouse support\nâ€¢ Docker support\n<br>\nðŸ“– <b>Summary:</b>\nThe ascii-movie repository provides a Go-based implementation of an SSH and Telnet server that streams the original Star Wars movie in ASCII format. It features an interactive terminal user interface and can be easily deployed using Docker. Inspired by asciimation and blinkenlights, this project offers a nostalgic command-line entertainment experience.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gabe565/ascii-movie?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/541960471/efe51f16-4297-4b08-99da-d73c9ba63c6e",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 52159512,
        "content": "ðŸš€ <b>kaitai_struct</b> | Shell\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDescribing and parsing binary data formats (file formats, network packets, etc.) in a declarative way, generating code for multiple programming languages.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Declarative language for describing binary data structures.\n<br>\nðŸ“– <b>Summary:</b>\nKaitai Struct is a declarative language and toolchain for describing binary data structures. It allows developers to define a format once and then compile it into parsers for various programming languages, simplifying the process of reading and interpreting binary data from files or network streams. The project also includes a repository of pre-defined format descriptions.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/kaitai-io/kaitai_struct?embed=0\">View Project</a>\nâ€¢ <a href=\"https://kaitai.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/bbf4fc78d6cfc6e8fbafd4b470e3e3a7e17a2700b4e59254a2871806ce717769/kaitai-io/kaitai_struct",
        "platform": "telegram",
        "quality_score": 0.9500000000000001
    },
    {
        "project_id": 783007462,
        "content": "âœ¨ <b>anyquery</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nQuerying diverse data sources with SQL and enabling LLMs to access and utilize this data.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ SQL query engine for various data sources (files, databases, apps)\nâ€¢ Integration with LLMs (ChatGPT, Claude) via Model Context Protocol (MCP)\n<br>\nðŸ“– <b>Summary:</b>\nAnyquery is a SQL query engine that allows users to run SQL queries on various data sources, including files, databases, and applications. It integrates with LLMs like ChatGPT and Claude using the Model Context Protocol (MCP), enabling them to access and utilize the queried data. Additionally, Anyquery can act as a MySQL server, allowing users to connect with their favorite MySQL-compatible clients.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/julien040/anyquery?embed=0\">View Project</a>\nâ€¢ <a href=\"https://anyquery.dev?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/783007462/65df2117-3909-4038-8231-fc4bb1cd51db",
        "platform": "telegram",
        "quality_score": 0.9000000000000001
    },
    {
        "project_id": 232385658,
        "content": "ðŸ”¥ <b>wal-listener</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nImplementing Event-Driven Architecture by capturing PostgreSQL database changes and publishing them to message brokers for downstream services.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Listens to PostgreSQL WAL (Write-Ahead Log) for data changes.\n<br>\nðŸ“– <b>Summary:</b>\nThe WAL-Listener service captures changes in a PostgreSQL database using logical decoding and publishes them as events to various message brokers like NATS, Kafka, RabbitMQ, and Google Pub/Sub. It supports filtering events based on tables and actions, and allows topic mapping for custom routing. This enables the implementation of Event-Driven Architecture with transactional messaging to maintain data consistency across microservices.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ihippik/wal-listener?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/52b902190edd311bffbd51e7c8e12fcfe09e6657510886675b92ce8a28c1481b/ihippik/wal-listener",
        "platform": "telegram",
        "quality_score": 0.6
    }
]