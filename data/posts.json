[
    {
        "project_id": 60787328,
        "content": "ðŸ’¡ <b>MORT</b> | C#\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReal-time translation of game dialogs using OCR and machine translation.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Realtime translate\nâ€¢ OCR (TesseractOCR, Windows OCR, NHOcr, Easy OCR)\nâ€¢ Machine translation (Naver Papago, Google Web, Google Sheet, ezTrans, DeepL)\nâ€¢ Language Patch with using DB\nâ€¢ Multiple OCR areas\n<br>\nðŸ“– <b>Summary:</b>\nMORT is a real-time game translator that extracts dialog from the screen using OCR and translates it using machine translation services or a database. It supports multiple OCR engines and translation services, allowing users to play games in foreign languages with real-time translated subtitles. The program is designed for Windows and requires .NET 7.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/killkimno/MORT?embed=0\">View Project</a>\nâ€¢ <a href=\"https://blog.naver.com/killkimno/70179867557?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/60787328/d1117064-81ca-4945-83fc-0114466a5f15",
        "platform": "telegram",
        "quality_score": 0.5
    },
    {
        "project_id": 895165567,
        "content": "ðŸ’¡ <b>timr-tui</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nOrganizing and managing time using Pomodoro, Countdown, and Timer functionalities within a terminal user interface.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Pomodoro timer\nâ€¢ Countdown timer\nâ€¢ Standard timer\nâ€¢ Customizable styles\nâ€¢ Decisecond display\n<br>\nðŸ“– <b>Summary:</b>\ntimr-tui is a terminal-based application written in Rust that helps users organize their time. It provides Pomodoro, Countdown, and Timer functionalities, along with customizable styles and a CLI interface for easy integration and usage.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/sectore/timr-tui?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/6a8d02f1e264b32ad1feb7f988cd48ed88fdf1605de6c5b83b4133a350c03383/sectore/timr-tui",
        "platform": "telegram",
        "quality_score": 0.9500000000000001
    },
    {
        "project_id": 301244405,
        "content": "ðŸ”¥ <b>atuin</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nReplacing existing shell history with a synchronized, searchable SQLite database.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Rebindable full-screen history search UI\nâ€¢ SQLite database storage for shell history\nâ€¢ Encrypted backup and sync of shell history\nâ€¢ Cross-terminal, cross-session, and cross-machine history\nâ€¢ Logging of exit code, cwd, hostname, session, command duration\n<br>\nðŸ“– <b>Summary:</b>\nAtuin replaces your existing shell history with a SQLite database, recording additional context for commands. It offers optional, fully encrypted synchronization of history between machines via an Atuin server. Key features include a full-screen search UI, cross-device synchronization, and detailed command logging.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/atuinsh/atuin?embed=0\">View Project</a>\nâ€¢ <a href=\"https://atuin.sh?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/abc8d2b52ae2165ab1a1da9703fe5f69df6faecfb6d98ec0256cf4a0509d7290/atuinsh/atuin",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 22072746,
        "content": "âœ¨ <b>pex</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nPackaging and deploying Python applications as self-contained, executable files.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ .pex file generation\nâ€¢ Lock file creation\nâ€¢ Virtual environment creation\nâ€¢ Executable Python environments\nâ€¢ Support for multiple platform-specific Python distributions\n<br>\nðŸ“– <b>Summary:</b>\nPex is a tool for generating .pex files, which are self-contained executable Python environments similar to virtualenvs. It simplifies Python application deployment by packaging all dependencies into a single file that can be easily distributed and executed across different platforms. Pex also supports lock file and venv creation, and integrates with popular build systems.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/pex-tool/pex?embed=0\">View Project</a>\nâ€¢ <a href=\"https://docs.pex-tool.org/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8e6a1f8793f492e7b88b5e6a54e8cc985733ce6f84bb4f6a833671a179325d5a/pex-tool/pex",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 35133520,
        "content": "ðŸ”¥ <b>mostly-adequate-guide</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLearning and applying functional programming principles in JavaScript development.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Teaches functional programming concepts using JavaScript.\nâ€¢ Provides practical examples applicable to real-world JavaScript projects.\nâ€¢ Offers exercises and an npm module for hands-on learning.\nâ€¢ Provides downloadable PDF and EPUB versions.\n<br>\nðŸ“– <b>Summary:</b>\nThe 'mostly-adequate-guide' repository is a resource for learning functional programming (FP) concepts using JavaScript. It provides practical examples, exercises, and downloadable resources to help developers apply FP principles in their daily work. The guide aims to make FP accessible by leveraging the familiarity of JavaScript.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/5aefff8289487adb454af5bfb7afa28bba06d466802e7cba430cc795871044df/MostlyAdequate/mostly-adequate-guide",
        "platform": "telegram",
        "quality_score": 0.55
    },
    {
        "project_id": 956297926,
        "content": "ðŸ”¥ <b>urx</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCollecting URLs from OSINT archives for security testing and analysis.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Fetch URLs from multiple sources in parallel (Wayback Machine, Common Crawl, OTX)\nâ€¢ Filter results by file extensions, patterns, or predefined presets\nâ€¢ Support for multiple output formats: plain text, JSON, CSV\n<br>\nðŸ“– <b>Summary:</b>\nUrx is a command-line tool built with Rust that extracts URLs from OSINT archives like the Wayback Machine and Common Crawl. It allows users to fetch URLs from multiple sources in parallel, filter results based on various criteria, and output the data in different formats. The primary use case is gathering comprehensive URL datasets for security testing and analysis.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/hahwul/urx?embed=0\">View Project</a>\nâ€¢ <a href=\"https://crates.io/crates/urx?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/956297926/d28b4111-45c9-4d0b-bda9-8c763d7cdfe2",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 758783944,
        "content": "ðŸŒŸ <b>FullBypass</b> | C#\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBypassing AMSI and PowerShell CLM to obtain a FullLanguage PowerShell reverse shell.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AMSI bypass\nâ€¢ PowerShell CLM bypass\nâ€¢ FullLanguage PowerShell reverse shell\n<br>\nðŸ“– <b>Summary:</b>\nThe FullBypass tool is designed to circumvent AMSI and PowerShell Constrained Language Mode (CLM). It achieves this by employing memory hijacking techniques to modify the AmsiScanBuffer function. The tool ultimately provides a FullLanguage PowerShell reverse shell, enabling unrestricted PowerShell execution on the target system.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/Sh3lldon/FullBypass?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/3cf82b426bc694ebbb9aab0a9a879d395c0b7edc1e3dd35727449d962c6dbaff/Sh3lldon/FullBypass",
        "platform": "telegram",
        "quality_score": 0.6
    }
]