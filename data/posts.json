[
    {
        "project_id": 657049902,
        "content": "ðŸ”¥ <b>hub</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nActing as a gateway between AI language models and user-built physical devices, enabling control and interaction through natural language.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Privacy-focused distributed architecture\nâ€¢ Web application interface\nâ€¢ AI-integration via Model Context Protocol (MCP)\nâ€¢ Cloud-ready Docker image deployment\n<br>\nðŸ“– <b>Summary:</b>\nMerliot Device Hub is an AI-integrated hub that allows users to control and interact with their DIY physical devices using natural language via LLM hosts. It emphasizes privacy through a distributed architecture and offers a web-based interface accessible from any device. The hub supports devices built from hobby-grade components and is deployable as a Docker image.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/merliot/hub?embed=0\">View Project</a>\nâ€¢ <a href=\"https://merliot.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/fb2b51fb0c5dfea9b07c65a9a3662a3f1a73ba2bc9c3b328a5d200e47a57a078/merliot/hub",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 895202100,
        "content": "ðŸ”¥ <b>everwilds</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLearning resource for developers interested in MMORPG networking and architecture.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Client-server architecture\nâ€¢ Character movement with walk animation\nâ€¢ Basic combat system\nâ€¢ Simple leveling system (up to level 10)\nâ€¢ Character nameplate toggling\n<br>\nðŸ“– <b>Summary:</b>\nEverwilds is a prototype MMORPG demonstrating networking and netcode architecture, inspired by World of Warcraft. It serves as a learning resource, showcasing client-server interaction, character movement synchronization, and basic game systems. The project aims to provide insights into the technical foundations of large-scale online games.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/nickyvanurk/everwilds?embed=0\">View Project</a>\nâ€¢ <a href=\"http://everwilds.io/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/2f64b50447daede5087b12c3cd4959b23e78e2bcc07f871603c0e78067de7585/nickyvanurk/everwilds",
        "platform": "telegram",
        "quality_score": 0.44999999999999996
    },
    {
        "project_id": 262434885,
        "content": "ðŸŒŸ <b>Moriarty-Project</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nWeb-based phone number investigation\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Phone number owner identification\nâ€¢ Spam risk assessment\nâ€¢ Related links discovery\nâ€¢ Comment retrieval\nâ€¢ Social media platform association\n<br>\nðŸ“– <b>Summary:</b>\nMoriarty Project is a web-based tool designed for phone number investigation. It offers features such as identifying the owner, assessing spam risk, finding related links and comments, and discovering associated social media platforms. The tool aims to provide comprehensive information about a given phone number through various online sources.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/AzizKpln/Moriarty-Project?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/0de4075e36d0ff136cba26ef97a9efa6f48adb4f390d4ef06a75be240bbe8e1c/AzizKpln/Moriarty-Project",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 23690226,
        "content": "ðŸŒŸ <b>xray-16</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nImproving and extending the X-Ray Engine for S.T.A.L.K.E.R. games, providing a platform for modding and enhancing the player experience.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ 64-bit support\nâ€¢ Improved performance and FPS\nâ€¢ Original bug fixes\nâ€¢ New features for modmakers\nâ€¢ Cross-platform support (Linux, macOS, *BSDs, ARM, ARM64, E2K, PPC64LE)\n<br>\nðŸ“– <b>Summary:</b>\nOpenXRay is an improved and extended version of the X-Ray Engine used in the S.T.A.L.K.E.R. game series. It offers 64-bit support, improved performance, bug fixes, new features for modders, and cross-platform compatibility. The project aims to provide a solid platform for modding and enhance the player experience while maintaining compatibility with the original games.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/OpenXRay/xray-16?embed=0\">View Project</a>\nâ€¢ <a href=\"https://discord.gg/sjRMQwv?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/23690226/65549f81-f8e2-484f-a5a2-83b93d0bca07",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 352101248,
        "content": "ðŸŒŸ <b>zeno</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCreating complex simulations and rendering them using a node-based system.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Integrated Toolbox (OpenVDB, physics solvers, visualization nodes)\nâ€¢ VFX and simulation solutions based on nodes\nâ€¢ Multi Importance Sampling\n<br>\nðŸ“– <b>Summary:</b>\nZENO is an open-source node system framework designed for creating and rendering complex 3D simulations. It offers an integrated toolbox with features like volumetric geometry processing, physics solvers, and visualization nodes. ZENO enables users to build sophisticated VFX and simulation solutions through its node-based dataflow programming approach.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/zenustech/zeno?embed=0\">View Project</a>\nâ€¢ <a href=\"http://zenustech.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/352101248/d435ae80-d10d-11eb-8b3b-2f84dad6d9c9",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 562353733,
        "content": "âœ¨ <b>pocketpy</b> | C\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGame scripting\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Portable Python 3.x interpreter\nâ€¢ Written in C11\nâ€¢ Header-only library\nâ€¢ Suitable for game scripting\nâ€¢ No dependencies other than the C standard library\n<br>\nðŸ“– <b>Summary:</b>\nPocketpy is a portable Python 3.x interpreter written in C11, designed as an alternative to Lua for game scripting. It's a header-only library with no external dependencies beyond the C standard library, making it easy to integrate into C/C++ projects. Developers can create Python bindings using C-API or pybind11 compatible interfaces.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/pocketpy/pocketpy?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pocketpy.dev/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f40ef3a00a0178d2d0875afd104025dbe6fac1e24569c673f15bf1e6fd8d274e/pocketpy/pocketpy",
        "platform": "telegram",
        "quality_score": 0.95
    },
    {
        "project_id": 492897058,
        "content": "ðŸ”¥ <b>asm_book</b> | Assembly\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nLearning assembly language programming on the ARM 64-bit architecture, especially for those with a background in C/C++.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Gentle introduction to assembly language programming for those familiar with C/C++\nâ€¢ Focus on ARM 64-bit ISA (AARCH64/ARM V8)\nâ€¢ Macros for cross-platform development (Linux and MacOS)\nâ€¢ Use of C-runtime wrappers for system calls to improve portability\n<br>\nðŸ“– <b>Summary:</b>\nThis repository provides a gentle introduction to assembly language programming on the ARM 64-bit ISA, targeting developers already familiar with C or C++. It offers macros for cross-platform compatibility (Linux and MacOS) and utilizes C-runtime wrappers to enhance code portability when making system calls.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/pkivolowitz/asm_book?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/165a048d55506bf66724fafe814691962779ed4ce97800a4fa705a6ef1ed6219/pkivolowitz/asm_book",
        "platform": "telegram",
        "quality_score": 0.6000000000000001
    },
    {
        "project_id": 975111685,
        "content": "ðŸ”¥ <b>no-as-a-service</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating random rejection reasons for various applications, such as apps, bots, landing pages, and Slack integrations.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Provides a simple API endpoint for retrieving random rejection reasons.\nâ€¢ Offers a variety of rejection reasons: generic, creative, and humorous.\nâ€¢ Allows self-hosting for customized deployments.\n<br>\nðŸ“– <b>Summary:</b>\nNo-as-a-Service is a lightweight API that delivers random rejection reasons, perfect for scenarios where a polite or witty 'no' is needed. It can be self-hosted and integrated into various applications, offering a simple way to provide excuses and rejections programmatically. The API is rate-limited to ensure fair usage.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/hotheadhacker/no-as-a-service?embed=0\">View Project</a>\nâ€¢ <a href=\"https://naas.isalman.dev/no?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c45bff978e2e2e9136776858dec4884f9a947cc48ba4cf3032ff61331216419b/hotheadhacker/no-as-a-service",
        "platform": "telegram",
        "quality_score": 0.9000000000000001
    }
]