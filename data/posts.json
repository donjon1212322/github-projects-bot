[
    {
        "project_id": 1034083859,
        "content": "âœ¨ <b>tidyai</b> | PowerShell\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAI-powered file organization for Windows using ChatGPT, accessible via the context menu.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AI-Powered file organization using ChatGPT\nâ€¢ Right-Click Integration in Windows Explorer\nâ€¢ Safe file management (moves only, no rename/delete)\nâ€¢ Undo System for reverting organization\nâ€¢ Batch Processing for large folders\n<br>\nðŸ“– <b>Summary:</b>\nTidyAI is a PowerShell-based Windows tool that leverages ChatGPT to intelligently organize files within messy folders. It integrates directly into the Windows Explorer context menu, allowing users to right-click a folder and initiate the AI-powered organization process. The tool is designed to be safe, only moving files into appropriate folders and providing an undo system for easy reversion.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/geetbatth/tidyai?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/bce5d2a38a50301e48e3daefca3fc0ec4937f59e8dbcfab9e3ac9715c9c6f7ca/geetbatth/tidyai",
        "platform": "telegram",
        "quality_score": 0.8
    },
    {
        "project_id": 1022165857,
        "content": "ðŸš€ <b>pennywiseai-tracker</b> | Kotlin\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAutomatic expense tracking from bank SMS for Android users in India.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Smart SMS Parsing\nâ€¢ Clear Insights (Analytics and Charts)\nâ€¢ Subscription Tracking\nâ€¢ On-device AI Assistant\nâ€¢ Auto-Categorization\n<br>\nðŸ“– <b>Summary:</b>\nPennyWise AI is a free and open-source Android expense tracker that automatically parses transaction SMS messages from Indian banks, providing users with clear insights into their spending habits. It features on-device AI assistance, subscription tracking, and data export capabilities, all while ensuring complete privacy without cloud processing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/sarim2000/pennywiseai-tracker?embed=0\">View Project</a>\nâ€¢ <a href=\"https://github.com/sarim2000/pennywiseai-tracker?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/912e57e468f4fe8583ceb1e3cc6a66a894e36ac0746bf47f3f86c7eba53daac9/sarim2000/pennywiseai-tracker",
        "platform": "telegram",
        "quality_score": 0.9
    },
    {
        "project_id": 1033484250,
        "content": "ðŸ’¡ <b>bitchat-plugin</b> | Rust\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnabling a Linux-based device, particularly an SPR router, to participate in a Bitchat mesh network, relaying messages and providing WiFi access via unique passwords.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Runs on Linux in the terminal\nâ€¢ Handles Noise XX E2E encryption\nâ€¢ Relays Packets\nâ€¢ Enables SPR to join the Bitchat mesh and relay messages\n<br>\nðŸ“– <b>Summary:</b>\nThe bitchat-plugin repository provides a Linux-based plugin, designed especially for SPR routers, that allows devices to join and relay messages within a Bitchat mesh network. It incorporates Noise XX E2E encryption for secure communication and can be provisioned with an API key to offer unique WiFi passwords to Bitchat clients. This facilitates secure and private communication over a decentralized network.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/spr-networks/bitchat-plugin?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/f0ceaf0f2d0d0e8f6bb06aa8d60c4ca82db822257d77158891b2a9781307e9ce/spr-networks/bitchat-plugin",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 49081891,
        "content": "ðŸ’¡ <b>brmodelo-app</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDatabase modeling and teaching.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Web application for database modeling\nâ€¢ Teaching tool for database modeling\nâ€¢ Supports entity-relationship diagrams\nâ€¢ Docker support (work in progress)\nâ€¢ E2E and Unit tests\n<br>\nðŸ“– <b>Summary:</b>\nThe brmodelo-app is a web application designed for database modeling and teaching. It provides a user-friendly interface for creating and visualizing entity-relationship diagrams. The application aims to make database modeling simple and accessible for everyone, offering features for both development and testing.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/brmodeloweb/brmodelo-app?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.brmodeloweb.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/bf92679b6babe7229c265be779ab51f6e58d61a2031e0de6a0cc143135765d08/brmodeloweb/brmodelo-app",
        "platform": "telegram",
        "quality_score": 0.7500000000000001
    },
    {
        "project_id": 86057635,
        "content": "ðŸš€ <b>slonik</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nA Node.js PostgreSQL client with runtime and build time type safety, and composable SQL.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Runtime validation\nâ€¢ Assertions and type safety\nâ€¢ Safe connection handling\nâ€¢ Safe transaction handling\nâ€¢ Safe value interpolation\n<br>\nðŸ“– <b>Summary:</b>\nSlonik is a Node.js PostgreSQL client emphasizing type safety, detailed logging, and composable SQL. It promotes writing raw SQL and discourages ad-hoc dynamic SQL generation. Key features include runtime validation, safe connection/transaction handling, detailed logging, and an ESLint plugin for SQL.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gajus/slonik?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/201c53a056d37ebf090c2bd2ce7ef865f190895a217821a8759eea3531cb7214/gajus/slonik",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 721844134,
        "content": "ðŸŒŸ <b>sql-flow</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nStreaming data transformations using SQL.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Process data from Kafka, WebSockets, and more.\nâ€¢ Write outputs to PostgreSQL, Kafka topics, or cloud storage (such as S3), in a variety of formats, including parquet and iceberg.\nâ€¢ Built on DuckDB and Apache Arrow for high-speed processing.\n<br>\nðŸ“– <b>Summary:</b>\nSQLFlow is a stream processing engine that allows users to define data pipelines using SQL. It leverages DuckDB and Apache Arrow for high-performance processing of data from sources like Kafka and WebSockets. The processed data can be written to various output sinks, including PostgreSQL, Kafka topics, and cloud storage, in formats like Parquet and Iceberg.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/turbolytics/sql-flow?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/c690d2e6f9cd872992ff4895dd9bcc98b9330113a23132440514c2718b44ed9d/turbolytics/sql-flow",
        "platform": "telegram",
        "quality_score": 0.7999999999999999
    }
]