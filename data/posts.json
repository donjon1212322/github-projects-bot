[
    {
        "project_id": 454164378,
        "content": "ðŸš€ <b>webvm</b> | JavaScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRunning and experimenting with a Linux environment and x86 applications directly within a web browser without server-side dependencies.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Runs a full Linux VM in the browser\nâ€¢ Uses CheerpX for x86-to-WebAssembly JIT compilation\nâ€¢ Includes a virtual block-based file system\nâ€¢ Provides a Linux syscall emulator\nâ€¢ Supports networking via Tailscale integration\n<br>\nðŸ“– <b>Summary:</b>\nWebVM is a server-less Linux virtual machine that runs entirely in a web browser using WebAssembly. It leverages CheerpX to enable client-side execution of x86 binaries and provides a sandboxed environment for running unmodified Debian distributions with native development toolchains.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/leaningtech/webvm?embed=0\">View Project</a>\nâ€¢ <a href=\"https://webvm.io?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/454164378/00ded6d6-99da-4861-a71d-59cfa2fcc785",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 652319769,
        "content": "ðŸŒŸ <b>filebrowser</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nProviding a user-friendly web interface for managing files on a server.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Multiple sources support\nâ€¢ Login support for OIDC, password + 2FA, and proxy\nâ€¢ Responsive and customizable UI\nâ€¢ Simplified configuration via config.yaml\nâ€¢ Ultra-efficient indexing and real-time updates\n<br>\nðŸ“– <b>Summary:</b>\nFileBrowser Quantum is a web-based file manager written in Go, designed for easy access and management of files through a web interface. It is a fork of the original filebrowser project, offering enhanced features like multiple source support, advanced authentication options, a customizable UI, and improved indexing and sharing capabilities.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/gtsteffaniak/filebrowser?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/71cc5baf242ef6e31be23169550c51448097669b849b67911887e148c727396c/gtsteffaniak/filebrowser",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 725089041,
        "content": "ðŸ’¡ <b>OpenVoice</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nInstant voice cloning\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Accurate Tone Color Cloning\nâ€¢ Flexible Voice Style Control\nâ€¢ Zero-shot Cross-lingual Voice Cloning\nâ€¢ Better Audio Quality (V2)\nâ€¢ Native Multi-lingual Support (V2: English, Spanish, French, Chinese, Japanese, Korean)\n<br>\nðŸ“– <b>Summary:</b>\nOpenVoice is an instant voice cloning tool developed by MIT and MyShell. It allows users to clone voices accurately, control voice styles, and perform zero-shot cross-lingual voice cloning. The tool has been powering the voice cloning capability of myshell.ai and is now available for commercial use under the MIT license.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/myshell-ai/OpenVoice?embed=0\">View Project</a>\nâ€¢ <a href=\"https://research.myshell.ai/open-voice?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ff2a04ed33aeeab63fcc2e60ce2fabef83ed956be8b8a75ad8ea87062d392840/myshell-ai/OpenVoice",
        "platform": "telegram",
        "quality_score": 0.45
    },
    {
        "project_id": 903787960,
        "content": "ðŸŒŸ <b>WaterCrawl</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nTransforming web content into LLM-ready data through crawling and scraping.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Advanced Web Crawling & Scraping\nâ€¢ Powerful Search Engine\nâ€¢ Multi-language Support\nâ€¢ Asynchronous Processing\nâ€¢ REST API with OpenAPI\n<br>\nðŸ“– <b>Summary:</b>\nWaterCrawl is a web application built with Python, Django, Scrapy, and Celery designed to crawl web pages and extract data, transforming web content into a format suitable for use with Large Language Models (LLMs). It offers features like customizable crawling depth, multi-language support, a REST API, and integrations with other AI/automation platforms.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/watercrawl/WaterCrawl?embed=0\">View Project</a>\nâ€¢ <a href=\"https://watercrawl.dev?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/4bdee43ddfb71bf46b7bbe3e3c2911fc942e05215b13f76f28b4e68e8afeab1b/watercrawl/WaterCrawl",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 985839104,
        "content": "ðŸš€ <b>BrowserOS</b> | C++\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nRunning AI agents directly within the browser while maintaining user privacy and control over data.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Open-source Chromium fork\nâ€¢ Native AI agent support\nâ€¢ Privacy-first design (user-controlled API keys or local models)\nâ€¢ Familiar interface (like Google Chrome)\nâ€¢ Extension compatibility\n<br>\nðŸ“– <b>Summary:</b>\nBrowserOS is an open-source Chromium-based browser that natively supports AI agents. It emphasizes user privacy by allowing users to use their own API keys or run local models, ensuring data remains on the user's computer. It aims to provide a familiar browsing experience with integrated AI capabilities.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/browseros-ai/BrowserOS?embed=0\">View Project</a>\nâ€¢ <a href=\"https://BrowserOS.com?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/ee51e04a116429857268d142f9b636b3bedc6b45b1aeb6f1b748563834fd0b8a/browseros-ai/BrowserOS",
        "platform": "telegram",
        "quality_score": 0.7499999999999999
    },
    {
        "project_id": 986669929,
        "content": "ðŸ”¥ <b>cpdown</b> | TypeScript\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nCopying webpage content and YouTube subtitles as clean markdown for repurposing in other applications or documents.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Copy webpage content as clean markdown\nâ€¢ Copy YouTube subtitles as clean markdown\nâ€¢ Uses Defuddle or Mozilla's Readability for content extraction\nâ€¢ Removes unnecessary HTML elements\n<br>\nðŸ“– <b>Summary:</b>\ncpdown is a browser extension that allows users to copy webpage content and YouTube subtitles as clean, formatted markdown. It utilizes libraries like Defuddle and Mozilla's Readability to extract the main content and removes unnecessary HTML elements, enhancing productivity for users who need to repurpose web content.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ysm-dev/cpdown?embed=0\">View Project</a>\nâ€¢ <a href=\"https://chromewebstore.google.com/detail/cpdown/knnaflplggjdedobhbidojmmnocfbopf?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/148a5f28f4b339f9ad7829d01254ce98b475cb96f782ae5bd78aba5912bc9262/ysm-dev/cpdown",
        "platform": "telegram",
        "quality_score": 0.9
    },
    {
        "project_id": 979886154,
        "content": "ðŸ”¥ <b>outbox</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEnsuring reliable and consistent message delivery in microservice architectures by implementing the transactional outbox pattern.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Lightweight with minimal dependencies\nâ€¢ Database agnostic (PostgreSQL, MySQL, Oracle, etc.)\nâ€¢ Message broker agnostic\nâ€¢ Easy integration\n<br>\nðŸ“– <b>Summary:</b>\nThe 'outbox' repository provides a lightweight Go library for implementing the transactional outbox pattern. It ensures reliable message delivery in microservice architectures by atomically storing messages alongside database transactions, decoupling services and guaranteeing eventual consistency without being tied to a specific database or message broker.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/oagudo/outbox?embed=0\">View Project</a>\nâ€¢ <a href=\"https://pkg.go.dev/github.com/oagudo/outbox?utm_source=godoc?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/2b0360da5895e2c42bbf4196a31eb5e9ddc66c783382cf4095a77b8a1dc611f7/oagudo/outbox",
        "platform": "telegram",
        "quality_score": 0.4
    }
]