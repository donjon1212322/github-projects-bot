[
    {
        "project_id": 968410174,
        "content": "âœ¨ <b>ibex</b> | Go\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nDecrypting and extracting data from iOS backups for forensic investigators, security researchers, and power users.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Decrypt encrypted iOS backups\nâ€¢ Support for latest iOS versions\nâ€¢ Cross-platform compatibility (macOS, Windows, Linux)\nâ€¢ Automatic backup detection\nâ€¢ Single file extraction based on filename match\n<br>\nðŸ“– <b>Summary:</b>\nIbex is a cross-platform tool written in Go designed for decrypting and extracting iOS backups. It supports the latest iOS versions and offers features like automatic backup detection, single file extraction, and structured output. It is intended for forensic investigators, security researchers, and power users needing to access and analyze encrypted iOS backup data.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/initz3r0/ibex?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/8eff78befbd1eda1e302fe120f9d87189143a65dfe0544bef538f73328418991/initz3r0/ibex",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 774353584,
        "content": "ðŸš€ <b>lofi-engine</b> | Svelte\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nGenerating custom LoFi music locally and offline.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Procedural LoFi track generation using Tone.js\nâ€¢ Customizable playback, look, and ambience\nâ€¢ Offline functionality\nâ€¢ Cross-platform support (Linux, Mac, Windows)\nâ€¢ Keyboard shortcuts for accessibility\n<br>\nðŸ“– <b>Summary:</b>\nLoFi Engine is a tool for generating LoFi music on desktop platforms. It allows users to create custom atmospheres by combining different sound elements and customizing the look and feel of the application. The engine utilizes Tone.js for procedural track generation and offers offline functionality for a private and accessible music creation experience.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/meel-hd/lofi-engine?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/cd2e08ea214c2ab339a62e00121733b8b07c161cb5a9aebfb1ef4440fe3bc913/meel-hd/lofi-engine",
        "platform": "telegram",
        "quality_score": 0.5499999999999999
    },
    {
        "project_id": 937727966,
        "content": "ðŸ’¡ <b>VisualCrypto</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nImage-based secret sharing, splitting a secret image into multiple shares that reveal the original image only when combined.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Visual Cryptography (VC) & Random Grid (RG) techniques support\nâ€¢ Web-based & script-based execution\n<br>\nðŸ“– <b>Summary:</b>\nVisualCrypto is a Python toolkit for image-based secret sharing using Visual Cryptography (VC) and Random Grid (RG) techniques. It allows splitting a secret image into multiple shares, which individually appear as random noise but reveal the original image when combined. The toolkit supports both web-based and script-based execution and is designed to be easily extended with new cryptographic schemes.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/coduri/VisualCrypto?embed=0\">View Project</a>\nâ€¢ <a href=\"https://coduri.github.io/VisualCrypto/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/1099481d225de624cc9afd6cd06c93a2c2bb6cc71634343f18bf49cb7f1dab14/coduri/VisualCrypto",
        "platform": "telegram",
        "quality_score": 0.65
    },
    {
        "project_id": 1333666,
        "content": "ðŸŒŸ <b>simplejson</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nEncoding and decoding JSON data in Python applications.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Simple and fast JSON encoder/decoder\nâ€¢ Extensible serialization and deserialization\nâ€¢ Python 2.5+ and Python 3.3+ support\nâ€¢ Optional C extension for speed boost\nâ€¢ Customizable encoding and object processing\n<br>\nðŸ“– <b>Summary:</b>\nsimplejson is a Python library for encoding and decoding JSON data. It provides a simple, fast, and extensible solution for serializing Python objects into JSON strings and deserializing JSON strings into Python objects. It supports a wide range of Python versions and offers customization options for handling different data types and encodings.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/simplejson/simplejson?embed=0\">View Project</a>\nâ€¢ <a href=\"https://simplejson.readthedocs.io/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/e88a701c420488a0415248d3fc56f248d13cb92305790b87d59ca602843c90a6/simplejson/simplejson",
        "platform": "telegram",
        "quality_score": 0.7
    },
    {
        "project_id": 903304373,
        "content": "ðŸš€ <b>preswald</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nBuilding and deploying interactive data apps, internal tools, and dashboards with Python.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Add UI components to python scripts\nâ€¢ Stateful execution\nâ€¢ Structured computation\nâ€¢ Deploy with one command\nâ€¢ Query and display data\n<br>\nðŸ“– <b>Summary:</b>\nPreswald is a Python framework that simplifies the creation and deployment of interactive data applications. It provides pre-built UI components and manages stateful execution using a DAG-based approach. With Preswald, users can easily turn Python scripts into shareable applications that can be deployed locally or in the cloud with a single command.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/StructuredLabs/preswald?embed=0\">View Project</a>\nâ€¢ <a href=\"https://www.preswald.com/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://repository-images.githubusercontent.com/903304373/d23748ba-73a9-4501-89bd-eda5eb3490f0",
        "platform": "telegram",
        "quality_score": 1.1000000000000003
    },
    {
        "project_id": 83574500,
        "content": "ðŸ”¥ <b>guillotina</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nManaging large amounts of data through an asynchronous API.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ AsyncIO based data API\nâ€¢ Manages billions of resources\nâ€¢ PostgreSQL support\nâ€¢ Built-in web admin interface\nâ€¢ Docker support\n<br>\nðŸ“– <b>Summary:</b>\nGuillotina is an AsyncIO-based data API designed for managing billions of resources. It leverages Python 3.7+ and PostgreSQL to provide a scalable and efficient solution. The project offers features like a built-in web admin interface, Docker support, and easy deployment on Heroku, making it suitable for building high-performance data-driven applications.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/plone/guillotina?embed=0\">View Project</a>\nâ€¢ <a href=\"https://guillotina.readthedocs.io/en/latest/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/021c79c650072a9d9a8daa7248d91a4df12e376719faf41e3bed7f4c68525816/plone/guillotina",
        "platform": "telegram",
        "quality_score": 0.85
    },
    {
        "project_id": 128570698,
        "content": "ðŸ’¡ <b>swifter</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nAccelerating pandas DataFrame and Series apply operations by automatically parallelizing or vectorizing the function execution.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Efficiently applies functions to pandas DataFrames and Series.\nâ€¢ Automatically vectorizes functions when possible.\nâ€¢ Automatically chooses between Dask parallel processing and pandas apply for optimal performance.\n<br>\nðŸ“– <b>Summary:</b>\nSwifter is a Python package designed to accelerate the application of functions to pandas DataFrames and Series. It intelligently vectorizes operations when feasible and automatically selects between Dask parallel processing and standard pandas apply to maximize performance. Swifter can also be used with modin dataframes, making it a versatile tool for data manipulation.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/jmcarpenter2/swifter?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/eade232e962c779812c92e7adde925d018960c669b1e810f34f58c9aedd54ef8/jmcarpenter2/swifter",
        "platform": "telegram",
        "quality_score": 0.6000000000000001
    },
    {
        "project_id": 700760709,
        "content": "âœ¨ <b>taranis-ai</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nInformation gathering and situational analysis using Open-Source Intelligence (OSINT) and Artificial Intelligence.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Advanced OSINT Capabilities\nâ€¢ AI-Enhanced Analysis\nâ€¢ Analyst-Friendly Workflow\nâ€¢ Multi-Format Output\nâ€¢ Seamless Publishing\n<br>\nðŸ“– <b>Summary:</b>\nTaranis AI is an advanced OSINT tool that leverages AI and NLP to collect and enhance unstructured data from diverse sources like websites. It provides analysts with a streamlined workflow to convert this data into structured reports and various output formats, facilitating the seamless publication of critical intelligence.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/taranis-ai/taranis-ai?embed=0\">View Project</a>\nâ€¢ <a href=\"https://taranis.ai/?embed=0\">Homepage</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/4bb05843c80157c8f1b128f466144a1ab57c20539b850d052270f4c3d15f6bf4/taranis-ai/taranis-ai",
        "platform": "telegram",
        "quality_score": 1.0000000000000002
    },
    {
        "project_id": 121859737,
        "content": "ðŸŒŸ <b>EagleEye</b> | Python\n<br>\nðŸŽ¯ <b>Primary Use Case:</b>\nFinding social media profiles (Instagram, Facebook, Twitter) of a person using image recognition and reverse image search, given an image and a name clue.\n<br>\nâœ¨ <b>Key Features:</b>\nâ€¢ Image recognition for identifying individuals\nâ€¢ Reverse image search across multiple social media platforms\nâ€¢ Profile aggregation from Instagram, Facebook, and Twitter\nâ€¢ Docker support for easy deployment\n<br>\nðŸ“– <b>Summary:</b>\nEagleEye is a Python-based tool that utilizes image recognition and reverse image search to locate social media profiles. It aims to find Instagram, Facebook, and Twitter profiles of a target individual, given an image of the person and a clue about their name. The tool supports Docker for easy setup and deployment.\n<br>\nðŸ”— <b>Links:</b>\nâ€¢ <a href=\"https://github.com/ThoughtfulDev/EagleEye?embed=0\">View Project</a>\n================\n<a href='https://t.me/GitHub_Open_Source'>ðŸ”“ Open Source</a>",
        "media_url": "https://opengraph.githubassets.com/71b0dccc139dd80af897a36d5030e10efb04a73fdf5553f7177ce16a90d36010/ThoughtfulDev/EagleEye",
        "platform": "telegram",
        "quality_score": 0.6000000000000001
    }
]