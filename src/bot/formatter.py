import json
import random
from datetime import datetime
from jinja2 import Environment, FileSystemLoader
import os
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s')

MAX_TELEGRAM_CAPTION_LENGTH = 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram

def slice_filter(value, count):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    return value[:count]

def format_post(project, template_env, additional_channels=None):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ media_url —Å—Ä–∞–∑—É
        if not project.get("media_urls"):
            logging.info(f"Skipping project {project.get('name', 'unknown')}: no media URL")
            return None
        template = template_env.get_template("telegram_template.md")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫
        key_features = project.get("key_features", [])
        if isinstance(key_features, str):
            try:
                key_features = eval(key_features) if key_features.startswith('[') else [key_features]
            except:
                key_features = [key_features]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ topics
        topics = project.get("topics", [])
        if isinstance(topics, str):
            topics = [t.strip() for t in topics.split(',')]
        elif isinstance(topics, list) and len(topics) > 0 and isinstance(topics[0], list):
            topics = topics[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ topics - —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º description
        description = (project.get("description") or "").strip()
        if description.endswith('...'):
            description = description[:-3]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
        try:
            channel_names = json.loads(os.getenv("CHANNEL_NAMES", "{}"))
        except json.JSONDecodeError:
            logging.warning("Invalid CHANNEL_NAMES JSON in environment variables. Using empty dict.")
            channel_names = {}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        additional_channels_str = ""
        if additional_channels:
            links = []
            for channel_key in additional_channels:
                channel_info = channel_names.get(channel_key.strip(), {})
                channel_name = channel_info.get("name", channel_key)
                channel_icon = channel_info.get("icon", "")
                links.append(f"<a href='https://t.me/{channel_key.strip()}'>{channel_icon} {channel_name}</a>")
            additional_channels_str = " | ".join(links)

        context = {
            "emoji": random.choice(["üöÄ", "üí°", "‚ú®", "üî•", "üåü"]),
            "project_name": project.get("name", "Unknown Project"),
            "language": project.get("language", "Not specified"),
            "description": description,
            "stars": f"{project.get('stars', 0):,}".replace(',', ' '),
            "forks": f"{project.get('forks', 0):,}".replace(',', ' '),
            "open_issues": f"{project.get('open_issues', 0):,}".replace(',', ' '),
            "topics": topics,
            "last_updated": datetime.fromisoformat(project.get('updated_at', datetime.now().isoformat()).replace('Z', '')).strftime('%Y-%m-%d'),
            "url": project.get("url", ""),
            "homepage": project.get("homepage") or "",
            "demo_url": project.get("demo_url") or "",
            "readme_summary": (project.get("readme_summary") or "").strip(),
            "key_features": key_features,
            "primary_use_case": (project.get("primary_use_case") or "").strip(),
            "additional_channels": additional_channels_str.strip(),
            "channel_names": channel_names,
            "languages": project.get("languages", "Not specified")
        }

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ URL (—Ç–µ–ø–µ—Ä—å –º—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –æ–Ω –µ—Å—Ç—å)
        media_url = project["media_urls"][0]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = template.render(context)

        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        content = '\n'.join(line.strip() for line in content.split('\n') if line.strip())

        # –û–±—Ä–µ–∑–∞–µ–º key_features, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        while len(content) > MAX_TELEGRAM_CAPTION_LENGTH and key_features:
            key_features.pop()
            context["key_features"] = key_features  # –û–±–Ω–æ–≤–ª—è–µ–º context —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ key_features
            content = template.render(context)
            content = '\n'.join(line.strip() for line in content.split('\n') if line.strip()) # Reformat after trimming

        if len(content) > MAX_TELEGRAM_CAPTION_LENGTH:
            logging.warning(f"Skipping project {project.get('name', 'unknown')}: Content too long even after removing all key features.")
            return None # Skip the post if key_features trimming wasn't enough

        return {
            "content": content,
            "media_url": media_url
        }
    except Exception as e:
        logging.error(f"Error formatting post for project {project.get('name', 'unknown')}: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        with open("data/projects.json", "r", encoding="utf-8") as f:
            projects = json.load(f)
        if not projects:
            logging.info("No projects found in data/projects.json. Skipping formatting.")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Jinja2
        template_path = os.path.join(os.getcwd(), "data", "templates")
        template_env = Environment(loader=FileSystemLoader(template_path))

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä slice
        template_env.filters['slice'] = slice_filter

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        additional_channels = os.getenv("ADDITIONAL_CHANNELS", "").split(",")
        additional_channels = [channel.strip() for channel in additional_channels if channel.strip()]

        posts = []
        for project in projects:
            post = format_post(project, template_env, additional_channels)
            if post:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –º–µ–¥–∏–∞
                posts.append({
                    "project_id": project["id"],
                    "content": post["content"],
                    "media_url": post["media_url"],
                    "platform": "telegram",
                    "quality_score": project.get("quality_score", 0)
                })

        if posts:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("data", exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            with open("data/posts.json", "w", encoding="utf-8") as f:
                json.dump(posts, f, indent=4, ensure_ascii=False)
            logging.info(f"Successfully formatted and saved {len(posts)} posts to data/posts.json")
        else:
            logging.info("No posts to format. Skipping writing to data/posts.json")
    except FileNotFoundError:
        logging.error("Error: data/projects.json not found. Please ensure the file exists.")
    except json.JSONDecodeError:
        logging.error("Error: Invalid JSON format in data/projects.json")
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")

if __name__ == "__main__":
    main()